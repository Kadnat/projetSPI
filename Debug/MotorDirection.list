
MotorDirection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007668  08007668  00017668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a2c  08007a2c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007a2c  08007a2c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a2c  08007a2c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          0000026c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e861  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000217c  00000000  00000000  0002eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf8  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a12  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021393  00000000  00000000  00032342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001101e  00000000  00000000  000536d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4f22  00000000  00000000  000646f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045a8  00000000  00000000  00129618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0012dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800764c 	.word	0x0800764c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800764c 	.word	0x0800764c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_GPIO_Init+0xec>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	21cc      	movs	r1, #204	; 0xcc
 8000c22:	481d      	ldr	r0, [pc, #116]	; (8000c98 <MX_GPIO_Init+0xf0>)
 8000c24:	f000 ffbe 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f000 ffb8 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SPEED_SENSORM1_Pin|SPEED_SENSORM2_Pin;
 8000c34:	f242 0330 	movw	r3, #8240	; 0x2030
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_GPIO_Init+0xf0>)
 8000c4c:	f000 fe20 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin;
 8000c50:	23cc      	movs	r3, #204	; 0xcc
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_GPIO_Init+0xf0>)
 8000c68:	f000 fe12 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 fe03 	bl	8001890 <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000800 	.word	0x48000800

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <GETVAL>:

// some extra variables working as temporary storage
int input = 0;int integration_sum = 0;

// To Get Current Count
int GETVAL(void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	 return SysTick->VAL;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <GETVAL+0x14>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_IncTick>:
// To account for Multiple Cycles of Timer
// for more than the period of the timer
void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	i++;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_IncTick+0x24>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	6013      	str	r3, [r2, #0]
	cpt_time++;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x28>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x28>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000200 	.word	0x20000200
 8000d30:	2000020c 	.word	0x2000020c

08000d34 <Timer_start_func>:


// Timer Start Function
// when called the timer starts counting
void Timer_start_func(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	  SysTick->LOAD  = 64000 - 1;                                  /* set reload register */
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <Timer_start_func+0x28>)
 8000d3a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d3e:	605a      	str	r2, [r3, #4]
	  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000d40:	210f      	movs	r1, #15
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	f7ff ffa9 	bl	8000c9c <__NVIC_SetPriority>
	  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <Timer_start_func+0x28>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <Timer_start_func+0x28>)
 8000d52:	2207      	movs	r2, #7
 8000d54:	601a      	str	r2, [r3, #0]
	                   SysTick_CTRL_TICKINT_Msk   |
	                   SysTick_CTRL_ENABLE_Msk;
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <Timer_end_func>:

// Timer Count End Function
// when called the timer stops counting
void Timer_end_func(void){
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	 SysTick->CTRL  = 0;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <Timer_end_func+0x1c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
	 i=0;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <Timer_end_func+0x20>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010
 8000d80:	20000200 	.word	0x20000200

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Timer_start_func();  //
 8000d88:	f7ff ffd4 	bl	8000d34 <Timer_start_func>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fc48 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f8f6 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f7ff ff08 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 fba6 	bl	80014e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d9c:	f000 fa88 	bl	80012b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* TIM1 counter enable */


  HAL_TIM_Base_Start(&htim1);
 8000da0:	4863      	ldr	r0, [pc, #396]	; (8000f30 <main+0x1ac>)
 8000da2:	f002 fb19 	bl	80033d8 <HAL_TIM_Base_Start>

  /* TIM1 Main Output Enable */
  //HAL_TIM_PWM_Init(&htim1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da6:	2100      	movs	r1, #0
 8000da8:	4861      	ldr	r0, [pc, #388]	; (8000f30 <main+0x1ac>)
 8000daa:	f002 fbcb 	bl	8003544 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(SENS1_M1_GPIO_Port, SENS1_M1_Pin, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2104      	movs	r1, #4
 8000db2:	4860      	ldr	r0, [pc, #384]	; (8000f34 <main+0x1b0>)
 8000db4:	f000 fef6 	bl	8001ba4 <HAL_GPIO_WritePin>
  printf("%d,%d,%d\n", 1, cpt_time, speed);
 8000db8:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <main+0x1b4>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b5f      	ldr	r3, [pc, #380]	; (8000f3c <main+0x1b8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	485f      	ldr	r0, [pc, #380]	; (8000f40 <main+0x1bc>)
 8000dc4:	f004 fc98 	bl	80056f8 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // reads the current state of PA1
	      	// default function used
	      	if ( HAL_GPIO_ReadPin(SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin) == 0){
 8000dc8:	2110      	movs	r1, #16
 8000dca:	485a      	ldr	r0, [pc, #360]	; (8000f34 <main+0x1b0>)
 8000dcc:	f000 fed2 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f8      	bne.n	8000dc8 <main+0x44>
	      		while(HAL_GPIO_ReadPin(SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin) == 0){}
 8000dd6:	bf00      	nop
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4856      	ldr	r0, [pc, #344]	; (8000f34 <main+0x1b0>)
 8000ddc:	f000 feca 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f8      	beq.n	8000dd8 <main+0x54>

	      		if (res==0){
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <main+0x1c0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <main+0x76>
	      			// res here is a flag to see whether to start counter or to stop it
	      			Timer_start_func();
 8000dee:	f7ff ffa1 	bl	8000d34 <Timer_start_func>
	      			res=1;
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <main+0x1c0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e7e6      	b.n	8000dc8 <main+0x44>
	      		} else if (res==1){
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <main+0x1c0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1e2      	bne.n	8000dc8 <main+0x44>

	      			iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000e02:	f7ff ff75 	bl	8000cf0 <GETVAL>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <main+0x1c4>)
 8000e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0e:	1312      	asrs	r2, r2, #12
 8000e10:	17db      	asrs	r3, r3, #31
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	4b4d      	ldr	r3, [pc, #308]	; (8000f4c <main+0x1c8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <main+0x1cc>)
 8000e1e:	6013      	str	r3, [r2, #0]
	      			// time between on slit = iteration_time
	      			// time for 20 slits  = 20 * iteration_time
	      			// for 1 time = 1/20*iteration time
	      			// for one minute = 60000/20*iteration_time

	      			speed = 3000/iteration_time;
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <main+0x1cc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2c:	4a43      	ldr	r2, [pc, #268]	; (8000f3c <main+0x1b8>)
 8000e2e:	6013      	str	r3, [r2, #0]


	      			// timer end function as we have seen the second high pulse
	      			Timer_end_func();
 8000e30:	f7ff ff96 	bl	8000d60 <Timer_end_func>

	      			// to remove certain high level debouncing values
	      			if (speed < 3000) {
 8000e34:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <main+0x1b8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	dc03      	bgt.n	8000e48 <main+0xc4>
	      				input = speed;
 8000e40:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <main+0x1b8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <main+0x1d0>)
 8000e46:	6013      	str	r3, [r2, #0]
	      			//******************************************///
	      			//PId has been implemented here
	      			//PID constants are
	      			// KP =0.1 Kd = 1 KI =10
	      			// input to the pid setup is the current_error
	      			current_error = ref_speed - input;
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <main+0x1d4>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <main+0x1d0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <main+0x1d8>)
 8000e5c:	edc3 7a00 	vstr	s15, [r3]
	      			integration_sum += (current_error * iteration_time);
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <main+0x1dc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <main+0x1cc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <main+0x1d8>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8a:	ee17 2a90 	vmov	r2, s15
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <main+0x1dc>)
 8000e90:	601a      	str	r2, [r3, #0]
	      			duty = KP * current_error + KI * integration_sum + KD * 1000 * (current_error -previous_error)/iteration_time;
 8000e92:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <main+0x1e0>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <main+0x1d8>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <main+0x1e4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <main+0x1dc>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <main+0x1e8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec2:	fb02 f303 	mul.w	r3, r2, r3
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <main+0x1d8>)
 8000ed0:	ed93 6a00 	vldr	s12, [r3]
 8000ed4:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <main+0x1ec>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ede:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <main+0x1cc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <main+0x1f0>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
	      			// directly loaded to the current compare register value instead of using the funtion for
	      			// PWM to speed up the iteration tim intervals
	      			//TIM1->CCR1 = duty;
	      			//if(duty>2000){duty=2000;}
	      			//if(duty<0){duty=0;}
	      			TIM1->CCR1 = duty;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <main+0x1f0>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <main+0x1f4>)
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	ee17 2a90 	vmov	r2, s15
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34



	      			printf("%d,%d,%d\r\n",1,cpt_time ,speed);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <main+0x1b4>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <main+0x1b8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	4818      	ldr	r0, [pc, #96]	; (8000f7c <main+0x1f8>)
 8000f1a:	f004 fbed 	bl	80056f8 <iprintf>
	      			// to keep a track of the previous error
	      			previous_error = current_error;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <main+0x1d8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <main+0x1ec>)
 8000f24:	6013      	str	r3, [r2, #0]

	      			//*******************************************///
	      			res=0;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <main+0x1c0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	      	if ( HAL_GPIO_ReadPin(SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin) == 0){
 8000f2c:	e74c      	b.n	8000dc8 <main+0x44>
 8000f2e:	bf00      	nop
 8000f30:	2000022c 	.word	0x2000022c
 8000f34:	48000800 	.word	0x48000800
 8000f38:	2000020c 	.word	0x2000020c
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	08007668 	.word	0x08007668
 8000f44:	20000208 	.word	0x20000208
 8000f48:	10624dd3 	.word	0x10624dd3
 8000f4c:	20000200 	.word	0x20000200
 8000f50:	20000214 	.word	0x20000214
 8000f54:	20000220 	.word	0x20000220
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	2000021c 	.word	0x2000021c
 8000f60:	20000224 	.word	0x20000224
 8000f64:	20000004 	.word	0x20000004
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	20000218 	.word	0x20000218
 8000f74:	20000210 	.word	0x20000210
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	08007674 	.word	0x08007674

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b096      	sub	sp, #88	; 0x58
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fc07 	bl	80057a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fdfd 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fe0:	f000 f83a 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2102      	movs	r1, #2
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe25 	bl	8002c50 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800100c:	f000 f824 	bl	8001058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f84d 	bl	80030bc <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001028:	f000 f816 	bl	8001058 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3758      	adds	r7, #88	; 0x58
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <__io_putchar+0x20>)
 8001046:	f003 fa59 	bl	80044fc <HAL_UART_Transmit>

  return ch;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000278 	.word	0x20000278

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800109a:	2007      	movs	r0, #7
 800109c:	f000 fbc4 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f7ff fe06 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_kill>:

int _kill(int pid, int sig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800111a:	f004 fb95 	bl	8005848 <__errno>
 800111e:	4603      	mov	r3, r0
 8001120:	2216      	movs	r2, #22
 8001122:	601a      	str	r2, [r3, #0]
  return -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_exit>:

void _exit (int status)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffe7 	bl	8001110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001142:	e7fe      	b.n	8001142 <_exit+0x12>

08001144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
  }

  return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff4b 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
  }
  return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	605a      	str	r2, [r3, #4]
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_isatty>:

int _isatty(int file)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f004 fafa 	bl	8005848 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20003000 	.word	0x20003000
 8001280:	00000400 	.word	0x00000400
 8001284:	20000228 	.word	0x20000228
 8001288:	20000450 	.word	0x20000450

0800128c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09a      	sub	sp, #104	; 0x68
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	222c      	movs	r2, #44	; 0x2c
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fa59 	bl	80057a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <MX_TIM1_Init+0x180>)
 80012f2:	4a50      	ldr	r2, [pc, #320]	; (8001434 <MX_TIM1_Init+0x184>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <MX_TIM1_Init+0x180>)
 80012f8:	f240 227f 	movw	r2, #639	; 0x27f
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <MX_TIM1_Init+0x180>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <MX_TIM1_Init+0x180>)
 8001306:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <MX_TIM1_Init+0x180>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <MX_TIM1_Init+0x180>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <MX_TIM1_Init+0x180>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4844      	ldr	r0, [pc, #272]	; (8001430 <MX_TIM1_Init+0x180>)
 8001320:	f002 f802 	bl	8003328 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800132a:	f7ff fe95 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001338:	4619      	mov	r1, r3
 800133a:	483d      	ldr	r0, [pc, #244]	; (8001430 <MX_TIM1_Init+0x180>)
 800133c:	f002 fb02 	bl	8003944 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001346:	f7ff fe87 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134a:	4839      	ldr	r0, [pc, #228]	; (8001430 <MX_TIM1_Init+0x180>)
 800134c:	f002 f898 	bl	8003480 <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001356:	f7ff fe7f 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136a:	4619      	mov	r1, r3
 800136c:	4830      	ldr	r0, [pc, #192]	; (8001430 <MX_TIM1_Init+0x180>)
 800136e:	f002 ff91 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001378:	f7ff fe6e 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1999;
 8001380:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <MX_TIM1_Init+0x180>)
 80013a4:	f002 f9ba 	bl	800371c <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80013ae:	f7ff fe53 	bl	8001058 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM1_Init+0x180>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM1_Init+0x180>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0208 	bic.w	r2, r2, #8
 80013c0:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ca:	2204      	movs	r2, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <MX_TIM1_Init+0x180>)
 80013d0:	f002 f9a4 	bl	800371c <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013da:	f7ff fe3d 	bl	8001058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM1_Init+0x180>)
 8001414:	f002 ffac 	bl	8004370 <HAL_TIMEx_ConfigBreakDeadTime>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800141e:	f7ff fe1b 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM1_Init+0x180>)
 8001424:	f000 f828 	bl	8001478 <HAL_TIM_MspPostInit>

}
 8001428:	bf00      	nop
 800142a:	3768      	adds	r7, #104	; 0x68
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000022c 	.word	0x2000022c
 8001434:	40012c00 	.word	0x40012c00

08001438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x38>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10b      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40012c00 	.word	0x40012c00
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_TIM_MspPostInit+0x64>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d11b      	bne.n	80014d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 80014a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 80014b2:	2303      	movs	r3, #3
 80014b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_TIM_MspPostInit+0x6c>)
 80014ce:	f000 f9df 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012c00 	.word	0x40012c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800

080014e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_USART2_UART_Init+0x58>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_USART2_UART_Init+0x5c>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_USART2_UART_Init+0x58>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_USART2_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART2_UART_Init+0x58>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART2_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART2_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART2_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART2_UART_Init+0x58>)
 800152c:	f002 ff98 	bl	8004460 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001536:	f7ff fd8f 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000278 	.word	0x20000278
 8001544:	40004400 	.word	0x40004400

08001548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x7c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d128      	bne.n	80015bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_UART_MspInit+0x80>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_UART_MspInit+0x80>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_UART_MspInit+0x80>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_UART_MspInit+0x80>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_UART_MspInit+0x80>)
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_UART_MspInit+0x80>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159a:	230c      	movs	r3, #12
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f000 f96a 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	40021000 	.word	0x40021000

080015cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff fe5c 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	; (800160c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <LoopForever+0xe>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <LoopForever+0x16>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f004 f92b 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fe:	f7ff fbc1 	bl	8000d84 <main>

08001602 <LoopForever>:

LoopForever:
    b LoopForever
 8001602:	e7fe      	b.n	8001602 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001604:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001610:	08007a34 	.word	0x08007a34
  ldr r2, =_sbss
 8001614:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001618:	20000450 	.word	0x20000450

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>
	...

08001620 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x28>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x28>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f8f9 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fd12 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f903 	bl	8001876 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f8d9 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000010 	.word	0x20000010
 80016a4:	20000018 	.word	0x20000018
 80016a8:	20000014 	.word	0x20000014

080016ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000300 	.word	0x20000300

080016c4 <__NVIC_SetPriorityGrouping>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_SetPriority>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff47 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff5c 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffb0 	bl	80017e4 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e14e      	b.n	8001b3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8140 	beq.w	8001b38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x40>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 809a 	beq.w	8001b38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b55      	ldr	r3, [pc, #340]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1e0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <HAL_GPIO_Init+0x2d4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1dc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <HAL_GPIO_Init+0x2d8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1d8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a44      	ldr	r2, [pc, #272]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1d4>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a64:	2305      	movs	r3, #5
 8001a66:	e004      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a70:	2300      	movs	r3, #0
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a82:	4937      	ldr	r1, [pc, #220]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ade:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f47f aea9 	bne.w	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000
 8001b64:	48000400 	.word	0x48000400
 8001b68:	48000800 	.word	0x48000800
 8001b6c:	48000c00 	.word	0x48000c00
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f001 b823 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 817d 	beq.w	8001f0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c10:	4bbc      	ldr	r3, [pc, #752]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d00c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1c:	4bb9      	ldr	r3, [pc, #740]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d15c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x10e>
 8001c28:	4bb6      	ldr	r3, [pc, #728]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d155      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x10e>
 8001c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0x94>
 8001c62:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e015      	b.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c90:	4b9c      	ldr	r3, [pc, #624]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ca0:	fa92 f2a2 	rbit	r2, r2
 8001ca4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ca8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f042 0220 	orr.w	r2, r2, #32
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f002 021f 	and.w	r2, r2, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 811f 	beq.w	8001f08 <HAL_RCC_OscConfig+0x334>
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8116 	bne.w	8001f08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f000 bfaf 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12e>
 8001cf4:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a82      	ldr	r2, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e036      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x158>
 8001d12:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7b      	ldr	r2, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a78      	ldr	r2, [pc, #480]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e021      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x184>
 8001d3e:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a70      	ldr	r2, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6d      	ldr	r2, [pc, #436]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x19c>
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a69      	ldr	r2, [pc, #420]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a66      	ldr	r2, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d70:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f023 020f 	bic.w	r2, r3, #15
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	495f      	ldr	r1, [pc, #380]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d059      	beq.n	8001e4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fc87 	bl	80016ac <HAL_GetTick>
 8001d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fc82 	bl	80016ac <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bf43 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001dce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x218>
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x244>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e24:	fa92 f2a2 	rbit	r2, r2
 8001e28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ab      	beq.n	8001da4 <HAL_RCC_OscConfig+0x1d0>
 8001e4c:	e05d      	b.n	8001f0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fc2d 	bl	80016ac <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fc28 	bl	80016ac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d902      	bls.n	8001e6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f000 bee9 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 8001e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2cc>
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x2f8>
 8001ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ebc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_RCC_OscConfig+0x330>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ed0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ed4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ee0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ab      	bne.n	8001e58 <HAL_RCC_OscConfig+0x284>
 8001f00:	e003      	b.n	8001f0a <HAL_RCC_OscConfig+0x336>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 817d 	beq.w	800221a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f20:	4ba6      	ldr	r3, [pc, #664]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f2c:	4ba3      	ldr	r3, [pc, #652]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d172      	bne.n	800201e <HAL_RCC_OscConfig+0x44a>
 8001f38:	4ba0      	ldr	r3, [pc, #640]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d16c      	bne.n	800201e <HAL_RCC_OscConfig+0x44a>
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3a0>
 8001f6e:	4b93      	ldr	r3, [pc, #588]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e013      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c8>
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f98:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001fa2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001fa6:	fa92 f2a2 	rbit	r2, r2
 8001faa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001fae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x410>
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f000 be2e 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b75      	ldr	r3, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	21f8      	movs	r1, #248	; 0xf8
 8001ffa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002002:	fa91 f1a1 	rbit	r1, r1
 8002006:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800200a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800200e:	fab1 f181 	clz	r1, r1
 8002012:	b2c9      	uxtb	r1, r1
 8002014:	408b      	lsls	r3, r1
 8002016:	4969      	ldr	r1, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201c:	e0fd      	b.n	800221a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8088 	beq.w	8002140 <HAL_RCC_OscConfig+0x56c>
 8002030:	2301      	movs	r3, #1
 8002032:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002042:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	2301      	movs	r3, #1
 800205a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fb26 	bl	80016ac <HAL_GetTick>
 8002060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002066:	f7ff fb21 	bl	80016ac <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d902      	bls.n	800207c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	f000 bde2 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800208e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_OscConfig+0x4d8>
 80020a6:	4b45      	ldr	r3, [pc, #276]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0x500>
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2202      	movs	r2, #2
 80020d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f042 0220 	orr.w	r2, r2, #32
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0af      	beq.n	8002066 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	21f8      	movs	r1, #248	; 0xf8
 800211c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002124:	fa91 f1a1 	rbit	r1, r1
 8002128:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800212c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002130:	fab1 f181 	clz	r1, r1
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	408b      	lsls	r3, r1
 8002138:	4920      	ldr	r1, [pc, #128]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
 800213e:	e06c      	b.n	800221a <HAL_RCC_OscConfig+0x646>
 8002140:	2301      	movs	r3, #1
 8002142:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fa9e 	bl	80016ac <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fa99 	bl	80016ac <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d902      	bls.n	800218c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	f000 bd5a 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800219e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5ec>
 80021b6:	4b01      	ldr	r3, [pc, #4]	; (80021bc <HAL_RCC_OscConfig+0x5e8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e015      	b.n	80021e8 <HAL_RCC_OscConfig+0x614>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021e4:	4bc8      	ldr	r3, [pc, #800]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2202      	movs	r2, #2
 80021ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021f2:	fa92 f2a2 	rbit	r2, r2
 80021f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f042 0220 	orr.w	r2, r2, #32
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f002 021f 	and.w	r2, r2, #31
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ad      	bne.n	8002176 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8110 	beq.w	8002450 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d079      	beq.n	8002334 <HAL_RCC_OscConfig+0x760>
 8002240:	2301      	movs	r3, #1
 8002242:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4bab      	ldr	r3, [pc, #684]	; (800250c <HAL_RCC_OscConfig+0x938>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2301      	movs	r3, #1
 8002268:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fa1f 	bl	80016ac <HAL_GetTick>
 800226e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fa1a 	bl	80016ac <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d902      	bls.n	800228a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bcdb 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e4:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 80022e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f0:	2102      	movs	r1, #2
 80022f2:	6019      	str	r1, [r3, #0]
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f1a3 	rbit	r1, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800230a:	6019      	str	r1, [r3, #0]
  return result;
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0a0      	beq.n	8002274 <HAL_RCC_OscConfig+0x6a0>
 8002332:	e08d      	b.n	8002450 <HAL_RCC_OscConfig+0x87c>
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002356:	601a      	str	r2, [r3, #0]
  return result;
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002360:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x938>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff f999 	bl	80016ac <HAL_GetTick>
 800237a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff f994 	bl	80016ac <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d902      	bls.n	8002396 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	f000 bc55 	b.w	8002c40 <HAL_RCC_OscConfig+0x106c>
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800239e:	2202      	movs	r2, #2
 80023a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023c2:	2202      	movs	r2, #2
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023e6:	2202      	movs	r2, #2
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002400:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 8002404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800240e:	2102      	movs	r1, #2
 8002410:	6019      	str	r1, [r3, #0]
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f1a3 	rbit	r1, r3
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002428:	6019      	str	r1, [r3, #0]
  return result;
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d197      	bne.n	8002380 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 81a1 	beq.w	80027a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	61d3      	str	r3, [r2, #28]
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800249e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_RCC_OscConfig+0x93c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_RCC_OscConfig+0x93c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_RCC_OscConfig+0x93c>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7ff f8f5 	bl	80016ac <HAL_GetTick>
 80024c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	e009      	b.n	80024dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7ff f8f0 	bl	80016ac <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e3b1      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCC_OscConfig+0x93c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10d      	bne.n	8002514 <HAL_RCC_OscConfig+0x940>
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a02      	ldr	r2, [pc, #8]	; (8002508 <HAL_RCC_OscConfig+0x934>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	e03c      	b.n	8002580 <HAL_RCC_OscConfig+0x9ac>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	10908120 	.word	0x10908120
 8002510:	40007000 	.word	0x40007000
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x96a>
 8002524:	4bc1      	ldr	r3, [pc, #772]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4ac0      	ldr	r2, [pc, #768]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	4bbe      	ldr	r3, [pc, #760]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4abd      	ldr	r2, [pc, #756]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e020      	b.n	8002580 <HAL_RCC_OscConfig+0x9ac>
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x994>
 800254e:	4bb7      	ldr	r3, [pc, #732]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4ab6      	ldr	r2, [pc, #728]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4bb4      	ldr	r3, [pc, #720]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4ab3      	ldr	r2, [pc, #716]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x9ac>
 8002568:	4bb0      	ldr	r3, [pc, #704]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4aaf      	ldr	r2, [pc, #700]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	4bad      	ldr	r3, [pc, #692]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4aac      	ldr	r2, [pc, #688]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8081 	beq.w	8002694 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff f88b 	bl	80016ac <HAL_GetTick>
 8002596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7ff f886 	bl	80016ac <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e345      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002604:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0xa4c>
 800261a:	4b84      	ldr	r3, [pc, #528]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	e013      	b.n	8002648 <HAL_RCC_OscConfig+0xa74>
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002650:	2102      	movs	r1, #2
 8002652:	6011      	str	r1, [r2, #0]
 8002654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002658:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	fa92 f1a2 	rbit	r1, r2
 8002662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002666:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800266a:	6011      	str	r1, [r2, #0]
  return result;
 800266c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002670:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d084      	beq.n	800259c <HAL_RCC_OscConfig+0x9c8>
 8002692:	e07f      	b.n	8002794 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7ff f80a 	bl	80016ac <HAL_GetTick>
 8002698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7ff f805 	bl	80016ac <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2c4      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002706:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0xb4e>
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	e013      	b.n	800274a <HAL_RCC_OscConfig+0xb76>
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800272a:	2202      	movs	r2, #2
 800272c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002752:	2102      	movs	r1, #2
 8002754:	6011      	str	r1, [r2, #0]
 8002756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	fa92 f1a2 	rbit	r1, r2
 8002764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002768:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800276c:	6011      	str	r1, [r2, #0]
  return result;
 800276e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002772:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d184      	bne.n	800269e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002794:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8242 	beq.w	8002c3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_RCC_OscConfig+0xc58>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	f000 8213 	beq.w	8002bee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	f040 8162 	bne.w	8002a9e <HAL_RCC_OscConfig+0xeca>
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027fe:	601a      	str	r2, [r3, #0]
  return result;
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002808:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	461a      	mov	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe ff44 	bl	80016ac <HAL_GetTick>
 8002824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	e00c      	b.n	8002844 <HAL_RCC_OscConfig+0xc70>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe ff3c 	bl	80016ac <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1fd      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800284c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002868:	601a      	str	r2, [r3, #0]
  return result;
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002872:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0xcba>
 8002888:	4bb0      	ldr	r3, [pc, #704]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e027      	b.n	80028de <HAL_RCC_OscConfig+0xd0a>
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f2a3 	rbit	r2, r3
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4b9c      	ldr	r3, [pc, #624]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ea:	6011      	str	r1, [r2, #0]
 80028ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	fa92 f1a2 	rbit	r1, r2
 80028fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002902:	6011      	str	r1, [r2, #0]
  return result;
 8002904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002908:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d182      	bne.n	8002830 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292a:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	430b      	orrs	r3, r1
 800294c:	497f      	ldr	r1, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800295a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	fa93 f2a3 	rbit	r2, r3
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002976:	601a      	str	r2, [r3, #0]
  return result;
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002980:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	461a      	mov	r2, r3
 8002994:	2301      	movs	r3, #1
 8002996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fe88 	bl	80016ac <HAL_GetTick>
 800299c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fe83 	bl	80016ac <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e144      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_OscConfig+0xe2c>
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e027      	b.n	8002a50 <HAL_RCC_OscConfig+0xe7c>
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a5c:	6011      	str	r1, [r2, #0]
 8002a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	fa92 f1a2 	rbit	r1, r2
 8002a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a74:	6011      	str	r1, [r2, #0]
  return result;
 8002a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d082      	beq.n	80029a2 <HAL_RCC_OscConfig+0xdce>
 8002a9c:	e0cf      	b.n	8002c3e <HAL_RCC_OscConfig+0x106a>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ac2:	601a      	str	r2, [r3, #0]
  return result;
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002acc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fde2 	bl	80016ac <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fddd 	bl	80016ac <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e09e      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b26:	601a      	str	r2, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d104      	bne.n	8002b50 <HAL_RCC_OscConfig+0xf7c>
 8002b46:	4b01      	ldr	r3, [pc, #4]	; (8002b4c <HAL_RCC_OscConfig+0xf78>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e029      	b.n	8002ba0 <HAL_RCC_OscConfig+0xfcc>
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_OscConfig+0x1078>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ba8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bac:	6011      	str	r1, [r2, #0]
 8002bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	fa92 f1a2 	rbit	r1, r2
 8002bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bc4:	6011      	str	r1, [r2, #0]
  return result;
 8002bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	fab2 f282 	clz	r2, r2
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f002 021f 	and.w	r2, r2, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d180      	bne.n	8002aee <HAL_RCC_OscConfig+0xf1a>
 8002bec:	e027      	b.n	8002c3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e01e      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_OscConfig+0x1078>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b09e      	sub	sp, #120	; 0x78
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e162      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b90      	ldr	r3, [pc, #576]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b8d      	ldr	r3, [pc, #564]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	498b      	ldr	r1, [pc, #556]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e14a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	497f      	ldr	r1, [pc, #508]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80dc 	beq.w	8002e7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d13c      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xf6>
 8002ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xa6>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCC_ClockConfig+0xc6>
 8002cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	667b      	str	r3, [r7, #100]	; 0x64
 8002d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d12:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d26:	fab2 f282 	clz	r2, r2
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f042 0220 	orr.w	r2, r2, #32
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f002 021f 	and.w	r2, r2, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d17b      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0f3      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d13c      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x178>
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x128>
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_ClockConfig+0x148>
 8002d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da0:	fa92 f2a2 	rbit	r2, r2
 8002da4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d13a      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b2      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e00d      	b.n	8002e0c <HAL_RCC_ClockConfig+0x1bc>
 8002df0:	2302      	movs	r3, #2
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	61ba      	str	r2, [r7, #24]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	617a      	str	r2, [r7, #20]
  return result;
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	fab2 f282 	clz	r2, r2
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f042 0220 	orr.w	r2, r2, #32
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f002 021f 	and.w	r2, r2, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e079      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	491a      	ldr	r1, [pc, #104]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fc2e 	bl	80016ac <HAL_GetTick>
 8002e50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7fe fc2a 	bl	80016ac <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e061      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 020c 	and.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d1eb      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d214      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4906      	ldr	r1, [pc, #24]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_RCC_ClockConfig+0x25c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e040      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2de>
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	491a      	ldr	r1, [pc, #104]	; (8002f38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4912      	ldr	r1, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x2e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ef2:	f000 f829 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_ClockConfig+0x2e8>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f00:	22f0      	movs	r2, #240	; 0xf0
 8002f02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	fa92 f2a2 	rbit	r2, r2
 8002f0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	40d3      	lsrs	r3, r2
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x2ec>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_RCC_ClockConfig+0x2f0>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_ClockConfig+0x2f4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fb90 	bl	800164c <HAL_InitTick>
  
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3778      	adds	r7, #120	; 0x78
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08007680 	.word	0x08007680
 8002f40:	20000010 	.word	0x20000010
 8002f44:	20000014 	.word	0x20000014

08002f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d002      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x30>
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x36>
 8002f76:	e03c      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f7a:	623b      	str	r3, [r7, #32]
      break;
 8002f7c:	e03c      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	607a      	str	r2, [r7, #4]
  return result;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	40d3      	lsrs	r3, r2
 8002f9c:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	220f      	movs	r2, #15
 8002fac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	fa92 f2a2 	rbit	r2, r2
 8002fb4:	60fa      	str	r2, [r7, #12]
  return result;
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	fab2 f282 	clz	r2, r2
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	40d3      	lsrs	r3, r2
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	e004      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	623b      	str	r3, [r7, #32]
      break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ff4:	623b      	str	r3, [r7, #32]
      break;
 8002ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	372c      	adds	r7, #44	; 0x2c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	007a1200 	.word	0x007a1200
 8003010:	08007698 	.word	0x08007698
 8003014:	080076a8 	.word	0x080076a8
 8003018:	003d0900 	.word	0x003d0900

0800301c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_GetHCLKFreq+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000010 	.word	0x20000010

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800303a:	f7ff ffef 	bl	800301c <HAL_RCC_GetHCLKFreq>
 800303e:	4601      	mov	r1, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003048:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800304c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	fa92 f2a2 	rbit	r2, r2
 8003054:	603a      	str	r2, [r7, #0]
  return result;
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	fab2 f282 	clz	r2, r2
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	40d3      	lsrs	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08007690 	.word	0x08007690

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800307e:	f7ff ffcd 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003082:	4601      	mov	r1, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800308c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	fa92 f2a2 	rbit	r2, r2
 8003098:	603a      	str	r2, [r7, #0]
  return result;
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	40d3      	lsrs	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	08007690 	.word	0x08007690

080030bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b092      	sub	sp, #72	; 0x48
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80cd 	beq.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e0:	4b8e      	ldr	r3, [pc, #568]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10e      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	4b8b      	ldr	r3, [pc, #556]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a8a      	ldr	r2, [pc, #552]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b82      	ldr	r3, [pc, #520]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a81      	ldr	r2, [pc, #516]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fe fac3 	bl	80016ac <HAL_GetTick>
 8003126:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fe fabf 	bl	80016ac <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0ea      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003148:	4b74      	ldr	r3, [pc, #464]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d07d      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003162:	429a      	cmp	r2, r3
 8003164:	d076      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	461a      	mov	r2, r3
 8003190:	2301      	movs	r3, #1
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	461a      	mov	r2, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031bc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d045      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fa70 	bl	80016ac <HAL_GetTick>
 80031cc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe fa6c 	bl	80016ac <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e095      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80031e6:	2302      	movs	r3, #2
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	2302      	movs	r3, #2
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	61fb      	str	r3, [r7, #28]
  return result;
 80031fe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d102      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	e007      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800321a:	2302      	movs	r3, #2
 800321c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2202      	movs	r2, #2
 800322c:	613a      	str	r2, [r7, #16]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	60fa      	str	r2, [r7, #12]
  return result;
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f002 021f 	and.w	r2, r2, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0bd      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	492e      	ldr	r1, [pc, #184]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003266:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4922      	ldr	r1, [pc, #136]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	4313      	orrs	r3, r2
 8003296:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f023 0210 	bic.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	491a      	ldr	r1, [pc, #104]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	4913      	ldr	r1, [pc, #76]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	490b      	ldr	r1, [pc, #44]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	4313      	orrs	r3, r2
 800330e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3748      	adds	r7, #72	; 0x48
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	10908100 	.word	0x10908100

08003328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e049      	b.n	80033ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe f872 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 fbb6 	bl	8003ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d001      	beq.n	80033f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e038      	b.n	8003462 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIM_Base_Start+0x98>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00e      	beq.n	8003420 <HAL_TIM_Base_Start+0x48>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d009      	beq.n	8003420 <HAL_TIM_Base_Start+0x48>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_TIM_Base_Start+0x9c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_TIM_Base_Start+0x48>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_TIM_Base_Start+0xa0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d115      	bne.n	800344c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_TIM_Base_Start+0xa4>)
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b06      	cmp	r3, #6
 8003430:	d015      	beq.n	800345e <HAL_TIM_Base_Start+0x86>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d011      	beq.n	800345e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	e008      	b.n	800345e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e000      	b.n	8003460 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40014000 	.word	0x40014000
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e049      	b.n	8003526 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f841 	bl	800352e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 fb0a 	bl	8003ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start+0x24>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e03c      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d109      	bne.n	8003582 <HAL_TIM_PWM_Start+0x3e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e02f      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d109      	bne.n	800359c <HAL_TIM_PWM_Start+0x58>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e022      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d109      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x72>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e015      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d109      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x8c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e088      	b.n	80036fc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xb6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f8:	e023      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xc6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	e01b      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003618:	e013      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xe6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003628:	e00b      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xf6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003638:	e003      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fdfc 	bl	8004248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <HAL_TIM_PWM_Start+0x1c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_TIM_PWM_Start+0x134>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <HAL_TIM_PWM_Start+0x1c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_TIM_PWM_Start+0x134>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_TIM_PWM_Start+0x1c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIM_PWM_Start+0x134>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a27      	ldr	r2, [pc, #156]	; (8003710 <HAL_TIM_PWM_Start+0x1cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_TIM_PWM_Start+0x138>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_TIM_PWM_Start+0x13a>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_PWM_Start+0x1c0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_TIM_PWM_Start+0x176>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d009      	beq.n	80036ba <HAL_TIM_PWM_Start+0x176>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_TIM_PWM_Start+0x1d0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_TIM_PWM_Start+0x176>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <HAL_TIM_PWM_Start+0x1c4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d115      	bne.n	80036e6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_TIM_PWM_Start+0x1d4>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d015      	beq.n	80036f8 <HAL_TIM_PWM_Start+0x1b4>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d011      	beq.n	80036f8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	e008      	b.n	80036f8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e000      	b.n	80036fa <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	40000400 	.word	0x40000400
 8003718:	00010007 	.word	0x00010007

0800371c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003736:	2302      	movs	r3, #2
 8003738:	e0ff      	b.n	800393a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b14      	cmp	r3, #20
 8003746:	f200 80f0 	bhi.w	800392a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	080037a5 	.word	0x080037a5
 8003754:	0800392b 	.word	0x0800392b
 8003758:	0800392b 	.word	0x0800392b
 800375c:	0800392b 	.word	0x0800392b
 8003760:	080037e5 	.word	0x080037e5
 8003764:	0800392b 	.word	0x0800392b
 8003768:	0800392b 	.word	0x0800392b
 800376c:	0800392b 	.word	0x0800392b
 8003770:	08003827 	.word	0x08003827
 8003774:	0800392b 	.word	0x0800392b
 8003778:	0800392b 	.word	0x0800392b
 800377c:	0800392b 	.word	0x0800392b
 8003780:	08003867 	.word	0x08003867
 8003784:	0800392b 	.word	0x0800392b
 8003788:	0800392b 	.word	0x0800392b
 800378c:	0800392b 	.word	0x0800392b
 8003790:	080038a9 	.word	0x080038a9
 8003794:	0800392b 	.word	0x0800392b
 8003798:	0800392b 	.word	0x0800392b
 800379c:	0800392b 	.word	0x0800392b
 80037a0:	080038e9 	.word	0x080038e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fa0c 	bl	8003bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0208 	orr.w	r2, r2, #8
 80037be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	619a      	str	r2, [r3, #24]
      break;
 80037e2:	e0a5      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fa72 	bl	8003cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      break;
 8003824:	e084      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fad1 	bl	8003dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0208 	orr.w	r2, r2, #8
 8003840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0204 	bic.w	r2, r2, #4
 8003850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
      break;
 8003864:	e064      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fb2f 	bl	8003ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	021a      	lsls	r2, r3, #8
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	61da      	str	r2, [r3, #28]
      break;
 80038a6:	e043      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fb72 	bl	8003f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038e6:	e023      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fbb0 	bl	8004054 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003928:	e002      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
      break;
 800392e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop

08003944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIM_ConfigClockSource+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e0b6      	b.n	8003ace <HAL_TIM_ConfigClockSource+0x18a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d03e      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xd8>
 800399e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a2:	f200 8087 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	f000 8086 	beq.w	8003aba <HAL_TIM_ConfigClockSource+0x176>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d87f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039b4:	2b70      	cmp	r3, #112	; 0x70
 80039b6:	d01a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xaa>
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d87b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039bc:	2b60      	cmp	r3, #96	; 0x60
 80039be:	d050      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x11e>
 80039c0:	2b60      	cmp	r3, #96	; 0x60
 80039c2:	d877      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d03c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xfe>
 80039c8:	2b50      	cmp	r3, #80	; 0x50
 80039ca:	d873      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d058      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x13e>
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d86f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d064      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15e>
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	d86b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d060      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15e>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d867      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05c      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15e>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d05a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15e>
 80039ec:	e062      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	f000 fc03 	bl	8004208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	609a      	str	r2, [r3, #8]
      break;
 8003a1a:	e04f      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	f000 fbec 	bl	8004208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e03c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 fb60 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2150      	movs	r1, #80	; 0x50
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fbb9 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003a60:	e02c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 fb7f 	bl	8004172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2160      	movs	r1, #96	; 0x60
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fba9 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e01c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fb40 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb99 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f000 fb90 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a32      	ldr	r2, [pc, #200]	; (8003bb4 <TIM_Base_SetConfig+0xdc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <TIM_Base_SetConfig+0x28>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0x28>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <TIM_Base_SetConfig+0xe0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <TIM_Base_SetConfig+0xdc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0x6a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0x6a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <TIM_Base_SetConfig+0xe0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0x6a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <TIM_Base_SetConfig+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0x6a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <TIM_Base_SetConfig+0xe8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0x6a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <TIM_Base_SetConfig+0xec>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <TIM_Base_SetConfig+0xdc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <TIM_Base_SetConfig+0xc0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <TIM_Base_SetConfig+0xe4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0xc0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <TIM_Base_SetConfig+0xe8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xc0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <TIM_Base_SetConfig+0xec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a28      	ldr	r2, [pc, #160]	; (8003cc4 <TIM_OC1_SetConfig+0xfc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC1_SetConfig+0x78>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <TIM_OC1_SetConfig+0x100>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC1_SetConfig+0x78>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <TIM_OC1_SetConfig+0x104>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC1_SetConfig+0x78>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <TIM_OC1_SetConfig+0x108>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10c      	bne.n	8003c5a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0308 	bic.w	r3, r3, #8
 8003c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <TIM_OC1_SetConfig+0xfc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_OC1_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <TIM_OC1_SetConfig+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_OC1_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <TIM_OC1_SetConfig+0x104>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC1_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <TIM_OC1_SetConfig+0x108>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800

08003cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0210 	bic.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0320 	bic.w	r3, r3, #32
 8003d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <TIM_OC2_SetConfig+0xf0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10d      	bne.n	8003d54 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <TIM_OC2_SetConfig+0xf0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_OC2_SetConfig+0xa0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <TIM_OC2_SetConfig+0xf4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_OC2_SetConfig+0xa0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <TIM_OC2_SetConfig+0xf8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_OC2_SetConfig+0xa0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <TIM_OC2_SetConfig+0xfc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d113      	bne.n	8003d9c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d82:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <TIM_OC3_SetConfig+0xec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10d      	bne.n	8003e52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e50:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1a      	ldr	r2, [pc, #104]	; (8003ec0 <TIM_OC3_SetConfig+0xec>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <TIM_OC3_SetConfig+0x9e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <TIM_OC3_SetConfig+0xf0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_OC3_SetConfig+0x9e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <TIM_OC3_SetConfig+0xf4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_OC3_SetConfig+0x9e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <TIM_OC3_SetConfig+0xf8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d113      	bne.n	8003e9a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	40014800 	.word	0x40014800

08003ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <TIM_OC4_SetConfig+0xb8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_OC4_SetConfig+0x7c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <TIM_OC4_SetConfig+0xbc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_OC4_SetConfig+0x7c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <TIM_OC4_SetConfig+0xc0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC4_SetConfig+0x7c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <TIM_OC4_SetConfig+0xc4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d109      	bne.n	8003f60 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <TIM_OC5_SetConfig+0xac>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_OC5_SetConfig+0x72>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <TIM_OC5_SetConfig+0xb0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_OC5_SetConfig+0x72>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a13      	ldr	r2, [pc, #76]	; (800404c <TIM_OC5_SetConfig+0xb4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_OC5_SetConfig+0x72>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <TIM_OC5_SetConfig+0xb8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d109      	bne.n	800401e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800409a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	051b      	lsls	r3, r3, #20
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <TIM_OC6_SetConfig+0xb0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_OC6_SetConfig+0x74>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a15      	ldr	r2, [pc, #84]	; (8004108 <TIM_OC6_SetConfig+0xb4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_OC6_SetConfig+0x74>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <TIM_OC6_SetConfig+0xb8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC6_SetConfig+0x74>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <TIM_OC6_SetConfig+0xbc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d109      	bne.n	80040dc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	029b      	lsls	r3, r3, #10
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2201      	movs	r2, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e054      	b.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a24      	ldr	r2, [pc, #144]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004314:	d009      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a13      	ldr	r2, [pc, #76]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a11      	ldr	r2, [pc, #68]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40000400 	.word	0x40000400
 800436c:	40014000 	.word	0x40014000

08004370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004388:	2302      	movs	r3, #2
 800438a:	e060      	b.n	800444e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d115      	bne.n	800443c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	051b      	lsls	r3, r3, #20
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40012c00 	.word	0x40012c00

08004460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e040      	b.n	80044f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd f860 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8b6 	bl	8004610 <UART_SetConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9e0 	bl	800487c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa67 	bl	80049c0 <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	2b20      	cmp	r3, #32
 8004512:	d178      	bne.n	8004606 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_UART_Transmit+0x24>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e071      	b.n	8004608 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2221      	movs	r2, #33	; 0x21
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fd f8bb 	bl	80016ac <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d108      	bne.n	8004564 <HAL_UART_Transmit+0x68>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e003      	b.n	800456c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800456c:	e030      	b.n	80045d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fac9 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e03c      	b.n	8004608 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	b292      	uxth	r2, r2
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	3302      	adds	r3, #2
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	e008      	b.n	80045be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b292      	uxth	r2, r2
 80045b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1c8      	bne.n	800456e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa92 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e005      	b.n	8004608 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b8a      	ldr	r3, [pc, #552]	; (8004864 <UART_SetConfig+0x254>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	430b      	orrs	r3, r1
 8004646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a78      	ldr	r2, [pc, #480]	; (8004868 <UART_SetConfig+0x258>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d120      	bne.n	80046ce <UART_SetConfig+0xbe>
 800468c:	4b77      	ldr	r3, [pc, #476]	; (800486c <UART_SetConfig+0x25c>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b03      	cmp	r3, #3
 8004696:	d817      	bhi.n	80046c8 <UART_SetConfig+0xb8>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x90>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046bd 	.word	0x080046bd
 80046a8:	080046c3 	.word	0x080046c3
 80046ac:	080046b7 	.word	0x080046b7
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e01d      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e01a      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e017      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e014      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e011      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a67      	ldr	r2, [pc, #412]	; (8004870 <UART_SetConfig+0x260>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d102      	bne.n	80046de <UART_SetConfig+0xce>
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a64      	ldr	r2, [pc, #400]	; (8004874 <UART_SetConfig+0x264>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d102      	bne.n	80046ee <UART_SetConfig+0xde>
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e001      	b.n	80046f2 <UART_SetConfig+0xe2>
 80046ee:	2310      	movs	r3, #16
 80046f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d15a      	bne.n	80047b2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80046fc:	7ffb      	ldrb	r3, [r7, #31]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d827      	bhi.n	8004752 <UART_SetConfig+0x142>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0xf8>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004735 	.word	0x08004735
 8004710:	0800473d 	.word	0x0800473d
 8004714:	08004753 	.word	0x08004753
 8004718:	08004743 	.word	0x08004743
 800471c:	08004753 	.word	0x08004753
 8004720:	08004753 	.word	0x08004753
 8004724:	08004753 	.word	0x08004753
 8004728:	0800474b 	.word	0x0800474b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7fe fc82 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004730:	61b8      	str	r0, [r7, #24]
        break;
 8004732:	e013      	b.n	800475c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fe fca0 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8004738:	61b8      	str	r0, [r7, #24]
        break;
 800473a:	e00f      	b.n	800475c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800473c:	4b4e      	ldr	r3, [pc, #312]	; (8004878 <UART_SetConfig+0x268>)
 800473e:	61bb      	str	r3, [r7, #24]
        break;
 8004740:	e00c      	b.n	800475c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004742:	f7fe fc01 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8004746:	61b8      	str	r0, [r7, #24]
        break;
 8004748:	e008      	b.n	800475c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	61bb      	str	r3, [r7, #24]
        break;
 8004750:	e004      	b.n	800475c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	77bb      	strb	r3, [r7, #30]
        break;
 800475a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d074      	beq.n	800484c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	005a      	lsls	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d916      	bls.n	80047ac <UART_SetConfig+0x19c>
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d212      	bcs.n	80047ac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f023 030f 	bic.w	r3, r3, #15
 800478e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	b29a      	uxth	r2, r3
 800479c:	89fb      	ldrh	r3, [r7, #14]
 800479e:	4313      	orrs	r3, r2
 80047a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	89fa      	ldrh	r2, [r7, #14]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	e04f      	b.n	800484c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	77bb      	strb	r3, [r7, #30]
 80047b0:	e04c      	b.n	800484c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b2:	7ffb      	ldrb	r3, [r7, #31]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d828      	bhi.n	800480a <UART_SetConfig+0x1fa>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0x1b0>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047f5 	.word	0x080047f5
 80047cc:	0800480b 	.word	0x0800480b
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	0800480b 	.word	0x0800480b
 80047dc:	0800480b 	.word	0x0800480b
 80047e0:	08004803 	.word	0x08004803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e4:	f7fe fc26 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 80047e8:	61b8      	str	r0, [r7, #24]
        break;
 80047ea:	e013      	b.n	8004814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7fe fc44 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80047f0:	61b8      	str	r0, [r7, #24]
        break;
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b20      	ldr	r3, [pc, #128]	; (8004878 <UART_SetConfig+0x268>)
 80047f6:	61bb      	str	r3, [r7, #24]
        break;
 80047f8:	e00c      	b.n	8004814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fa:	f7fe fba5 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 80047fe:	61b8      	str	r0, [r7, #24]
        break;
 8004800:	e008      	b.n	8004814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	61bb      	str	r3, [r7, #24]
        break;
 8004808:	e004      	b.n	8004814 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	77bb      	strb	r3, [r7, #30]
        break;
 8004812:	bf00      	nop
    }

    if (pclk != 0U)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d018      	beq.n	800484c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	085a      	lsrs	r2, r3, #1
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	441a      	add	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b0f      	cmp	r3, #15
 8004832:	d909      	bls.n	8004848 <UART_SetConfig+0x238>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d205      	bcs.n	8004848 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e001      	b.n	800484c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004858:	7fbb      	ldrb	r3, [r7, #30]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	efff69f3 	.word	0xefff69f3
 8004868:	40013800 	.word	0x40013800
 800486c:	40021000 	.word	0x40021000
 8004870:	40004400 	.word	0x40004400
 8004874:	40004800 	.word	0x40004800
 8004878:	007a1200 	.word	0x007a1200

0800487c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01a      	beq.n	8004992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497a:	d10a      	bne.n	8004992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b098      	sub	sp, #96	; 0x60
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d0:	f7fc fe6c 	bl	80016ac <HAL_GetTick>
 80049d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d12e      	bne.n	8004a42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ec:	2200      	movs	r2, #0
 80049ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f88c 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d021      	beq.n	8004a42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e062      	b.n	8004b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d149      	bne.n	8004ae4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f856 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03c      	beq.n	8004ae4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	623b      	str	r3, [r7, #32]
   return(result);
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e011      	b.n	8004b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3758      	adds	r7, #88	; 0x58
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b20:	e049      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d045      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fc fdbf 	bl	80016ac <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e048      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d031      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d110      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2208      	movs	r2, #8
 8004b66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f838 	bl	8004bde <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2208      	movs	r2, #8
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e029      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b90:	d111      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f81e 	bl	8004bde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0a6      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b095      	sub	sp, #84	; 0x54
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
 8004c06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e6      	bne.n	8004be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d118      	bne.n	8004c86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0310 	bic.w	r3, r3, #16
 8004c68:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e6      	bne.n	8004c54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c9a:	bf00      	nop
 8004c9c:	3754      	adds	r7, #84	; 0x54
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <__cvt>:
 8004ca6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004caa:	ec55 4b10 	vmov	r4, r5, d0
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	460e      	mov	r6, r1
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	bfbb      	ittet	lt
 8004cb8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cbc:	461d      	movlt	r5, r3
 8004cbe:	2300      	movge	r3, #0
 8004cc0:	232d      	movlt	r3, #45	; 0x2d
 8004cc2:	700b      	strb	r3, [r1, #0]
 8004cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cca:	4691      	mov	r9, r2
 8004ccc:	f023 0820 	bic.w	r8, r3, #32
 8004cd0:	bfbc      	itt	lt
 8004cd2:	4622      	movlt	r2, r4
 8004cd4:	4614      	movlt	r4, r2
 8004cd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cda:	d005      	beq.n	8004ce8 <__cvt+0x42>
 8004cdc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ce0:	d100      	bne.n	8004ce4 <__cvt+0x3e>
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	e000      	b.n	8004cea <__cvt+0x44>
 8004ce8:	2103      	movs	r1, #3
 8004cea:	ab03      	add	r3, sp, #12
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	ab02      	add	r3, sp, #8
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	ec45 4b10 	vmov	d0, r4, r5
 8004cf6:	4653      	mov	r3, sl
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	f000 fe5d 	bl	80059b8 <_dtoa_r>
 8004cfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d02:	4607      	mov	r7, r0
 8004d04:	d102      	bne.n	8004d0c <__cvt+0x66>
 8004d06:	f019 0f01 	tst.w	r9, #1
 8004d0a:	d022      	beq.n	8004d52 <__cvt+0xac>
 8004d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d10:	eb07 0906 	add.w	r9, r7, r6
 8004d14:	d110      	bne.n	8004d38 <__cvt+0x92>
 8004d16:	783b      	ldrb	r3, [r7, #0]
 8004d18:	2b30      	cmp	r3, #48	; 0x30
 8004d1a:	d10a      	bne.n	8004d32 <__cvt+0x8c>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d28:	b918      	cbnz	r0, 8004d32 <__cvt+0x8c>
 8004d2a:	f1c6 0601 	rsb	r6, r6, #1
 8004d2e:	f8ca 6000 	str.w	r6, [sl]
 8004d32:	f8da 3000 	ldr.w	r3, [sl]
 8004d36:	4499      	add	r9, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f7fb fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d44:	b108      	cbz	r0, 8004d4a <__cvt+0xa4>
 8004d46:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d4a:	2230      	movs	r2, #48	; 0x30
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	454b      	cmp	r3, r9
 8004d50:	d307      	bcc.n	8004d62 <__cvt+0xbc>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d56:	1bdb      	subs	r3, r3, r7
 8004d58:	4638      	mov	r0, r7
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	b004      	add	sp, #16
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	9103      	str	r1, [sp, #12]
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e7f0      	b.n	8004d4c <__cvt+0xa6>

08004d6a <__exponent>:
 8004d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	bfb8      	it	lt
 8004d72:	4249      	neglt	r1, r1
 8004d74:	f803 2b02 	strb.w	r2, [r3], #2
 8004d78:	bfb4      	ite	lt
 8004d7a:	222d      	movlt	r2, #45	; 0x2d
 8004d7c:	222b      	movge	r2, #43	; 0x2b
 8004d7e:	2909      	cmp	r1, #9
 8004d80:	7042      	strb	r2, [r0, #1]
 8004d82:	dd2a      	ble.n	8004dda <__exponent+0x70>
 8004d84:	f10d 0207 	add.w	r2, sp, #7
 8004d88:	4617      	mov	r7, r2
 8004d8a:	260a      	movs	r6, #10
 8004d8c:	4694      	mov	ip, r2
 8004d8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d92:	fb06 1415 	mls	r4, r6, r5, r1
 8004d96:	3430      	adds	r4, #48	; 0x30
 8004d98:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	2c63      	cmp	r4, #99	; 0x63
 8004da0:	f102 32ff 	add.w	r2, r2, #4294967295
 8004da4:	4629      	mov	r1, r5
 8004da6:	dcf1      	bgt.n	8004d8c <__exponent+0x22>
 8004da8:	3130      	adds	r1, #48	; 0x30
 8004daa:	f1ac 0402 	sub.w	r4, ip, #2
 8004dae:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004db2:	1c41      	adds	r1, r0, #1
 8004db4:	4622      	mov	r2, r4
 8004db6:	42ba      	cmp	r2, r7
 8004db8:	d30a      	bcc.n	8004dd0 <__exponent+0x66>
 8004dba:	f10d 0209 	add.w	r2, sp, #9
 8004dbe:	eba2 020c 	sub.w	r2, r2, ip
 8004dc2:	42bc      	cmp	r4, r7
 8004dc4:	bf88      	it	hi
 8004dc6:	2200      	movhi	r2, #0
 8004dc8:	4413      	add	r3, r2
 8004dca:	1a18      	subs	r0, r3, r0
 8004dcc:	b003      	add	sp, #12
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004dd4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004dd8:	e7ed      	b.n	8004db6 <__exponent+0x4c>
 8004dda:	2330      	movs	r3, #48	; 0x30
 8004ddc:	3130      	adds	r1, #48	; 0x30
 8004dde:	7083      	strb	r3, [r0, #2]
 8004de0:	70c1      	strb	r1, [r0, #3]
 8004de2:	1d03      	adds	r3, r0, #4
 8004de4:	e7f1      	b.n	8004dca <__exponent+0x60>
	...

08004de8 <_printf_float>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	ed2d 8b02 	vpush	{d8}
 8004df0:	b08d      	sub	sp, #52	; 0x34
 8004df2:	460c      	mov	r4, r1
 8004df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004df8:	4616      	mov	r6, r2
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	f000 fcd9 	bl	80057b4 <_localeconv_r>
 8004e02:	f8d0 a000 	ldr.w	sl, [r0]
 8004e06:	4650      	mov	r0, sl
 8004e08:	f7fb fa32 	bl	8000270 <strlen>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	f8d8 3000 	ldr.w	r3, [r8]
 8004e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	f103 0208 	add.w	r2, r3, #8
 8004e26:	f8c8 2000 	str.w	r2, [r8]
 8004e2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e32:	9307      	str	r3, [sp, #28]
 8004e34:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e38:	ee08 0a10 	vmov	s16, r0
 8004e3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e44:	4b9e      	ldr	r3, [pc, #632]	; (80050c0 <_printf_float+0x2d8>)
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	f7fb fe6f 	bl	8000b2c <__aeabi_dcmpun>
 8004e4e:	bb88      	cbnz	r0, 8004eb4 <_printf_float+0xcc>
 8004e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e54:	4b9a      	ldr	r3, [pc, #616]	; (80050c0 <_printf_float+0x2d8>)
 8004e56:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5a:	f7fb fe49 	bl	8000af0 <__aeabi_dcmple>
 8004e5e:	bb48      	cbnz	r0, 8004eb4 <_printf_float+0xcc>
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	4640      	mov	r0, r8
 8004e66:	4649      	mov	r1, r9
 8004e68:	f7fb fe38 	bl	8000adc <__aeabi_dcmplt>
 8004e6c:	b110      	cbz	r0, 8004e74 <_printf_float+0x8c>
 8004e6e:	232d      	movs	r3, #45	; 0x2d
 8004e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e74:	4a93      	ldr	r2, [pc, #588]	; (80050c4 <_printf_float+0x2dc>)
 8004e76:	4b94      	ldr	r3, [pc, #592]	; (80050c8 <_printf_float+0x2e0>)
 8004e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e7c:	bf94      	ite	ls
 8004e7e:	4690      	movls	r8, r2
 8004e80:	4698      	movhi	r8, r3
 8004e82:	2303      	movs	r3, #3
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	9b05      	ldr	r3, [sp, #20]
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	f04f 0900 	mov.w	r9, #0
 8004e92:	9700      	str	r7, [sp, #0]
 8004e94:	4633      	mov	r3, r6
 8004e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f9da 	bl	8005254 <_printf_common>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f040 8090 	bne.w	8004fc6 <_printf_float+0x1de>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	b00d      	add	sp, #52	; 0x34
 8004eac:	ecbd 8b02 	vpop	{d8}
 8004eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	4640      	mov	r0, r8
 8004eba:	4649      	mov	r1, r9
 8004ebc:	f7fb fe36 	bl	8000b2c <__aeabi_dcmpun>
 8004ec0:	b140      	cbz	r0, 8004ed4 <_printf_float+0xec>
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfbc      	itt	lt
 8004ec8:	232d      	movlt	r3, #45	; 0x2d
 8004eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ece:	4a7f      	ldr	r2, [pc, #508]	; (80050cc <_printf_float+0x2e4>)
 8004ed0:	4b7f      	ldr	r3, [pc, #508]	; (80050d0 <_printf_float+0x2e8>)
 8004ed2:	e7d1      	b.n	8004e78 <_printf_float+0x90>
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004eda:	9206      	str	r2, [sp, #24]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	d13f      	bne.n	8004f60 <_printf_float+0x178>
 8004ee0:	2306      	movs	r3, #6
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	9b05      	ldr	r3, [sp, #20]
 8004ee6:	6861      	ldr	r1, [r4, #4]
 8004ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004eec:	2300      	movs	r3, #0
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ef6:	ab09      	add	r3, sp, #36	; 0x24
 8004ef8:	ec49 8b10 	vmov	d0, r8, r9
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7ff fece 	bl	8004ca6 <__cvt>
 8004f0a:	9b06      	ldr	r3, [sp, #24]
 8004f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f0e:	2b47      	cmp	r3, #71	; 0x47
 8004f10:	4680      	mov	r8, r0
 8004f12:	d108      	bne.n	8004f26 <_printf_float+0x13e>
 8004f14:	1cc8      	adds	r0, r1, #3
 8004f16:	db02      	blt.n	8004f1e <_printf_float+0x136>
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	dd41      	ble.n	8004fa2 <_printf_float+0x1ba>
 8004f1e:	f1ab 0302 	sub.w	r3, fp, #2
 8004f22:	fa5f fb83 	uxtb.w	fp, r3
 8004f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f2a:	d820      	bhi.n	8004f6e <_printf_float+0x186>
 8004f2c:	3901      	subs	r1, #1
 8004f2e:	465a      	mov	r2, fp
 8004f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f34:	9109      	str	r1, [sp, #36]	; 0x24
 8004f36:	f7ff ff18 	bl	8004d6a <__exponent>
 8004f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f3c:	1813      	adds	r3, r2, r0
 8004f3e:	2a01      	cmp	r2, #1
 8004f40:	4681      	mov	r9, r0
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	dc02      	bgt.n	8004f4c <_printf_float+0x164>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	07d2      	lsls	r2, r2, #31
 8004f4a:	d501      	bpl.n	8004f50 <_printf_float+0x168>
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d09c      	beq.n	8004e92 <_printf_float+0xaa>
 8004f58:	232d      	movs	r3, #45	; 0x2d
 8004f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5e:	e798      	b.n	8004e92 <_printf_float+0xaa>
 8004f60:	9a06      	ldr	r2, [sp, #24]
 8004f62:	2a47      	cmp	r2, #71	; 0x47
 8004f64:	d1be      	bne.n	8004ee4 <_printf_float+0xfc>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1bc      	bne.n	8004ee4 <_printf_float+0xfc>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7b9      	b.n	8004ee2 <_printf_float+0xfa>
 8004f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f72:	d118      	bne.n	8004fa6 <_printf_float+0x1be>
 8004f74:	2900      	cmp	r1, #0
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	dd0b      	ble.n	8004f92 <_printf_float+0x1aa>
 8004f7a:	6121      	str	r1, [r4, #16]
 8004f7c:	b913      	cbnz	r3, 8004f84 <_printf_float+0x19c>
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	07d0      	lsls	r0, r2, #31
 8004f82:	d502      	bpl.n	8004f8a <_printf_float+0x1a2>
 8004f84:	3301      	adds	r3, #1
 8004f86:	440b      	add	r3, r1
 8004f88:	6123      	str	r3, [r4, #16]
 8004f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f8c:	f04f 0900 	mov.w	r9, #0
 8004f90:	e7de      	b.n	8004f50 <_printf_float+0x168>
 8004f92:	b913      	cbnz	r3, 8004f9a <_printf_float+0x1b2>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	07d2      	lsls	r2, r2, #31
 8004f98:	d501      	bpl.n	8004f9e <_printf_float+0x1b6>
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	e7f4      	b.n	8004f88 <_printf_float+0x1a0>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e7f2      	b.n	8004f88 <_printf_float+0x1a0>
 8004fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	db05      	blt.n	8004fb8 <_printf_float+0x1d0>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	6121      	str	r1, [r4, #16]
 8004fb0:	07d8      	lsls	r0, r3, #31
 8004fb2:	d5ea      	bpl.n	8004f8a <_printf_float+0x1a2>
 8004fb4:	1c4b      	adds	r3, r1, #1
 8004fb6:	e7e7      	b.n	8004f88 <_printf_float+0x1a0>
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	bfd4      	ite	le
 8004fbc:	f1c1 0202 	rsble	r2, r1, #2
 8004fc0:	2201      	movgt	r2, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	e7e0      	b.n	8004f88 <_printf_float+0x1a0>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	055a      	lsls	r2, r3, #21
 8004fca:	d407      	bmi.n	8004fdc <_printf_float+0x1f4>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	4642      	mov	r2, r8
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d12c      	bne.n	8005034 <_printf_float+0x24c>
 8004fda:	e764      	b.n	8004ea6 <_printf_float+0xbe>
 8004fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fe0:	f240 80e0 	bls.w	80051a4 <_printf_float+0x3bc>
 8004fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	f7fb fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d034      	beq.n	800505e <_printf_float+0x276>
 8004ff4:	4a37      	ldr	r2, [pc, #220]	; (80050d4 <_printf_float+0x2ec>)
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b8      	blx	r7
 8004ffe:	3001      	adds	r0, #1
 8005000:	f43f af51 	beq.w	8004ea6 <_printf_float+0xbe>
 8005004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	db02      	blt.n	8005012 <_printf_float+0x22a>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07d8      	lsls	r0, r3, #31
 8005010:	d510      	bpl.n	8005034 <_printf_float+0x24c>
 8005012:	ee18 3a10 	vmov	r3, s16
 8005016:	4652      	mov	r2, sl
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af41 	beq.w	8004ea6 <_printf_float+0xbe>
 8005024:	f04f 0800 	mov.w	r8, #0
 8005028:	f104 091a 	add.w	r9, r4, #26
 800502c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	4543      	cmp	r3, r8
 8005032:	dc09      	bgt.n	8005048 <_printf_float+0x260>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	079b      	lsls	r3, r3, #30
 8005038:	f100 8107 	bmi.w	800524a <_printf_float+0x462>
 800503c:	68e0      	ldr	r0, [r4, #12]
 800503e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005040:	4298      	cmp	r0, r3
 8005042:	bfb8      	it	lt
 8005044:	4618      	movlt	r0, r3
 8005046:	e730      	b.n	8004eaa <_printf_float+0xc2>
 8005048:	2301      	movs	r3, #1
 800504a:	464a      	mov	r2, r9
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f af27 	beq.w	8004ea6 <_printf_float+0xbe>
 8005058:	f108 0801 	add.w	r8, r8, #1
 800505c:	e7e6      	b.n	800502c <_printf_float+0x244>
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	dc39      	bgt.n	80050d8 <_printf_float+0x2f0>
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <_printf_float+0x2ec>)
 8005066:	2301      	movs	r3, #1
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	f43f af19 	beq.w	8004ea6 <_printf_float+0xbe>
 8005074:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005078:	4313      	orrs	r3, r2
 800507a:	d102      	bne.n	8005082 <_printf_float+0x29a>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	07d9      	lsls	r1, r3, #31
 8005080:	d5d8      	bpl.n	8005034 <_printf_float+0x24c>
 8005082:	ee18 3a10 	vmov	r3, s16
 8005086:	4652      	mov	r2, sl
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f af09 	beq.w	8004ea6 <_printf_float+0xbe>
 8005094:	f04f 0900 	mov.w	r9, #0
 8005098:	f104 0a1a 	add.w	sl, r4, #26
 800509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509e:	425b      	negs	r3, r3
 80050a0:	454b      	cmp	r3, r9
 80050a2:	dc01      	bgt.n	80050a8 <_printf_float+0x2c0>
 80050a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a6:	e792      	b.n	8004fce <_printf_float+0x1e6>
 80050a8:	2301      	movs	r3, #1
 80050aa:	4652      	mov	r2, sl
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	f43f aef7 	beq.w	8004ea6 <_printf_float+0xbe>
 80050b8:	f109 0901 	add.w	r9, r9, #1
 80050bc:	e7ee      	b.n	800509c <_printf_float+0x2b4>
 80050be:	bf00      	nop
 80050c0:	7fefffff 	.word	0x7fefffff
 80050c4:	080076b8 	.word	0x080076b8
 80050c8:	080076bc 	.word	0x080076bc
 80050cc:	080076c0 	.word	0x080076c0
 80050d0:	080076c4 	.word	0x080076c4
 80050d4:	080076c8 	.word	0x080076c8
 80050d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050dc:	429a      	cmp	r2, r3
 80050de:	bfa8      	it	ge
 80050e0:	461a      	movge	r2, r3
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	4691      	mov	r9, r2
 80050e6:	dc37      	bgt.n	8005158 <_printf_float+0x370>
 80050e8:	f04f 0b00 	mov.w	fp, #0
 80050ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050f0:	f104 021a 	add.w	r2, r4, #26
 80050f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	eba3 0309 	sub.w	r3, r3, r9
 80050fc:	455b      	cmp	r3, fp
 80050fe:	dc33      	bgt.n	8005168 <_printf_float+0x380>
 8005100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005104:	429a      	cmp	r2, r3
 8005106:	db3b      	blt.n	8005180 <_printf_float+0x398>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	07da      	lsls	r2, r3, #31
 800510c:	d438      	bmi.n	8005180 <_printf_float+0x398>
 800510e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005112:	eba2 0903 	sub.w	r9, r2, r3
 8005116:	9b05      	ldr	r3, [sp, #20]
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	4591      	cmp	r9, r2
 800511c:	bfa8      	it	ge
 800511e:	4691      	movge	r9, r2
 8005120:	f1b9 0f00 	cmp.w	r9, #0
 8005124:	dc35      	bgt.n	8005192 <_printf_float+0x3aa>
 8005126:	f04f 0800 	mov.w	r8, #0
 800512a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800512e:	f104 0a1a 	add.w	sl, r4, #26
 8005132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	eba3 0309 	sub.w	r3, r3, r9
 800513c:	4543      	cmp	r3, r8
 800513e:	f77f af79 	ble.w	8005034 <_printf_float+0x24c>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f aeaa 	beq.w	8004ea6 <_printf_float+0xbe>
 8005152:	f108 0801 	add.w	r8, r8, #1
 8005156:	e7ec      	b.n	8005132 <_printf_float+0x34a>
 8005158:	4613      	mov	r3, r2
 800515a:	4631      	mov	r1, r6
 800515c:	4642      	mov	r2, r8
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	d1c0      	bne.n	80050e8 <_printf_float+0x300>
 8005166:	e69e      	b.n	8004ea6 <_printf_float+0xbe>
 8005168:	2301      	movs	r3, #1
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	9205      	str	r2, [sp, #20]
 8005170:	47b8      	blx	r7
 8005172:	3001      	adds	r0, #1
 8005174:	f43f ae97 	beq.w	8004ea6 <_printf_float+0xbe>
 8005178:	9a05      	ldr	r2, [sp, #20]
 800517a:	f10b 0b01 	add.w	fp, fp, #1
 800517e:	e7b9      	b.n	80050f4 <_printf_float+0x30c>
 8005180:	ee18 3a10 	vmov	r3, s16
 8005184:	4652      	mov	r2, sl
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	d1be      	bne.n	800510e <_printf_float+0x326>
 8005190:	e689      	b.n	8004ea6 <_printf_float+0xbe>
 8005192:	9a05      	ldr	r2, [sp, #20]
 8005194:	464b      	mov	r3, r9
 8005196:	4442      	add	r2, r8
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	d1c1      	bne.n	8005126 <_printf_float+0x33e>
 80051a2:	e680      	b.n	8004ea6 <_printf_float+0xbe>
 80051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	dc01      	bgt.n	80051ae <_printf_float+0x3c6>
 80051aa:	07db      	lsls	r3, r3, #31
 80051ac:	d53a      	bpl.n	8005224 <_printf_float+0x43c>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4642      	mov	r2, r8
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	47b8      	blx	r7
 80051b8:	3001      	adds	r0, #1
 80051ba:	f43f ae74 	beq.w	8004ea6 <_printf_float+0xbe>
 80051be:	ee18 3a10 	vmov	r3, s16
 80051c2:	4652      	mov	r2, sl
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f ae6b 	beq.w	8004ea6 <_printf_float+0xbe>
 80051d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051d4:	2200      	movs	r2, #0
 80051d6:	2300      	movs	r3, #0
 80051d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80051dc:	f7fb fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80051e0:	b9d8      	cbnz	r0, 800521a <_printf_float+0x432>
 80051e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051e6:	f108 0201 	add.w	r2, r8, #1
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d10e      	bne.n	8005212 <_printf_float+0x42a>
 80051f4:	e657      	b.n	8004ea6 <_printf_float+0xbe>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae50 	beq.w	8004ea6 <_printf_float+0xbe>
 8005206:	f108 0801 	add.w	r8, r8, #1
 800520a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	4543      	cmp	r3, r8
 8005210:	dcf1      	bgt.n	80051f6 <_printf_float+0x40e>
 8005212:	464b      	mov	r3, r9
 8005214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005218:	e6da      	b.n	8004fd0 <_printf_float+0x1e8>
 800521a:	f04f 0800 	mov.w	r8, #0
 800521e:	f104 0a1a 	add.w	sl, r4, #26
 8005222:	e7f2      	b.n	800520a <_printf_float+0x422>
 8005224:	2301      	movs	r3, #1
 8005226:	4642      	mov	r2, r8
 8005228:	e7df      	b.n	80051ea <_printf_float+0x402>
 800522a:	2301      	movs	r3, #1
 800522c:	464a      	mov	r2, r9
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	f43f ae36 	beq.w	8004ea6 <_printf_float+0xbe>
 800523a:	f108 0801 	add.w	r8, r8, #1
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005242:	1a5b      	subs	r3, r3, r1
 8005244:	4543      	cmp	r3, r8
 8005246:	dcf0      	bgt.n	800522a <_printf_float+0x442>
 8005248:	e6f8      	b.n	800503c <_printf_float+0x254>
 800524a:	f04f 0800 	mov.w	r8, #0
 800524e:	f104 0919 	add.w	r9, r4, #25
 8005252:	e7f4      	b.n	800523e <_printf_float+0x456>

08005254 <_printf_common>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	4616      	mov	r6, r2
 800525a:	4699      	mov	r9, r3
 800525c:	688a      	ldr	r2, [r1, #8]
 800525e:	690b      	ldr	r3, [r1, #16]
 8005260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005264:	4293      	cmp	r3, r2
 8005266:	bfb8      	it	lt
 8005268:	4613      	movlt	r3, r2
 800526a:	6033      	str	r3, [r6, #0]
 800526c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005270:	4607      	mov	r7, r0
 8005272:	460c      	mov	r4, r1
 8005274:	b10a      	cbz	r2, 800527a <_printf_common+0x26>
 8005276:	3301      	adds	r3, #1
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	0699      	lsls	r1, r3, #26
 800527e:	bf42      	ittt	mi
 8005280:	6833      	ldrmi	r3, [r6, #0]
 8005282:	3302      	addmi	r3, #2
 8005284:	6033      	strmi	r3, [r6, #0]
 8005286:	6825      	ldr	r5, [r4, #0]
 8005288:	f015 0506 	ands.w	r5, r5, #6
 800528c:	d106      	bne.n	800529c <_printf_common+0x48>
 800528e:	f104 0a19 	add.w	sl, r4, #25
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	6832      	ldr	r2, [r6, #0]
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	42ab      	cmp	r3, r5
 800529a:	dc26      	bgt.n	80052ea <_printf_common+0x96>
 800529c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052a0:	1e13      	subs	r3, r2, #0
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	bf18      	it	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	0692      	lsls	r2, r2, #26
 80052aa:	d42b      	bmi.n	8005304 <_printf_common+0xb0>
 80052ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d01e      	beq.n	80052f8 <_printf_common+0xa4>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	f003 0306 	and.w	r3, r3, #6
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	bf02      	ittt	eq
 80052c6:	68e5      	ldreq	r5, [r4, #12]
 80052c8:	6833      	ldreq	r3, [r6, #0]
 80052ca:	1aed      	subeq	r5, r5, r3
 80052cc:	68a3      	ldr	r3, [r4, #8]
 80052ce:	bf0c      	ite	eq
 80052d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d4:	2500      	movne	r5, #0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bfc4      	itt	gt
 80052da:	1a9b      	subgt	r3, r3, r2
 80052dc:	18ed      	addgt	r5, r5, r3
 80052de:	2600      	movs	r6, #0
 80052e0:	341a      	adds	r4, #26
 80052e2:	42b5      	cmp	r5, r6
 80052e4:	d11a      	bne.n	800531c <_printf_common+0xc8>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e008      	b.n	80052fc <_printf_common+0xa8>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4649      	mov	r1, r9
 80052f0:	4638      	mov	r0, r7
 80052f2:	47c0      	blx	r8
 80052f4:	3001      	adds	r0, #1
 80052f6:	d103      	bne.n	8005300 <_printf_common+0xac>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	3501      	adds	r5, #1
 8005302:	e7c6      	b.n	8005292 <_printf_common+0x3e>
 8005304:	18e1      	adds	r1, r4, r3
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	2030      	movs	r0, #48	; 0x30
 800530a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800530e:	4422      	add	r2, r4
 8005310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005318:	3302      	adds	r3, #2
 800531a:	e7c7      	b.n	80052ac <_printf_common+0x58>
 800531c:	2301      	movs	r3, #1
 800531e:	4622      	mov	r2, r4
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d0e6      	beq.n	80052f8 <_printf_common+0xa4>
 800532a:	3601      	adds	r6, #1
 800532c:	e7d9      	b.n	80052e2 <_printf_common+0x8e>
	...

08005330 <_printf_i>:
 8005330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	7e0f      	ldrb	r7, [r1, #24]
 8005336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005338:	2f78      	cmp	r7, #120	; 0x78
 800533a:	4691      	mov	r9, r2
 800533c:	4680      	mov	r8, r0
 800533e:	460c      	mov	r4, r1
 8005340:	469a      	mov	sl, r3
 8005342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005346:	d807      	bhi.n	8005358 <_printf_i+0x28>
 8005348:	2f62      	cmp	r7, #98	; 0x62
 800534a:	d80a      	bhi.n	8005362 <_printf_i+0x32>
 800534c:	2f00      	cmp	r7, #0
 800534e:	f000 80d4 	beq.w	80054fa <_printf_i+0x1ca>
 8005352:	2f58      	cmp	r7, #88	; 0x58
 8005354:	f000 80c0 	beq.w	80054d8 <_printf_i+0x1a8>
 8005358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800535c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005360:	e03a      	b.n	80053d8 <_printf_i+0xa8>
 8005362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005366:	2b15      	cmp	r3, #21
 8005368:	d8f6      	bhi.n	8005358 <_printf_i+0x28>
 800536a:	a101      	add	r1, pc, #4	; (adr r1, 8005370 <_printf_i+0x40>)
 800536c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053dd 	.word	0x080053dd
 8005378:	08005359 	.word	0x08005359
 800537c:	08005359 	.word	0x08005359
 8005380:	08005359 	.word	0x08005359
 8005384:	08005359 	.word	0x08005359
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005359 	.word	0x08005359
 8005390:	08005359 	.word	0x08005359
 8005394:	08005359 	.word	0x08005359
 8005398:	08005359 	.word	0x08005359
 800539c:	080054e1 	.word	0x080054e1
 80053a0:	08005409 	.word	0x08005409
 80053a4:	0800549b 	.word	0x0800549b
 80053a8:	08005359 	.word	0x08005359
 80053ac:	08005359 	.word	0x08005359
 80053b0:	08005503 	.word	0x08005503
 80053b4:	08005359 	.word	0x08005359
 80053b8:	08005409 	.word	0x08005409
 80053bc:	08005359 	.word	0x08005359
 80053c0:	08005359 	.word	0x08005359
 80053c4:	080054a3 	.word	0x080054a3
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	1d1a      	adds	r2, r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	602a      	str	r2, [r5, #0]
 80053d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d8:	2301      	movs	r3, #1
 80053da:	e09f      	b.n	800551c <_printf_i+0x1ec>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	0607      	lsls	r7, r0, #24
 80053e2:	f103 0104 	add.w	r1, r3, #4
 80053e6:	6029      	str	r1, [r5, #0]
 80053e8:	d501      	bpl.n	80053ee <_printf_i+0xbe>
 80053ea:	681e      	ldr	r6, [r3, #0]
 80053ec:	e003      	b.n	80053f6 <_printf_i+0xc6>
 80053ee:	0646      	lsls	r6, r0, #25
 80053f0:	d5fb      	bpl.n	80053ea <_printf_i+0xba>
 80053f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	da03      	bge.n	8005402 <_printf_i+0xd2>
 80053fa:	232d      	movs	r3, #45	; 0x2d
 80053fc:	4276      	negs	r6, r6
 80053fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005402:	485a      	ldr	r0, [pc, #360]	; (800556c <_printf_i+0x23c>)
 8005404:	230a      	movs	r3, #10
 8005406:	e012      	b.n	800542e <_printf_i+0xfe>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	1d19      	adds	r1, r3, #4
 800540e:	6029      	str	r1, [r5, #0]
 8005410:	0605      	lsls	r5, r0, #24
 8005412:	d501      	bpl.n	8005418 <_printf_i+0xe8>
 8005414:	681e      	ldr	r6, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0xee>
 8005418:	0641      	lsls	r1, r0, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0xe4>
 800541c:	881e      	ldrh	r6, [r3, #0]
 800541e:	4853      	ldr	r0, [pc, #332]	; (800556c <_printf_i+0x23c>)
 8005420:	2f6f      	cmp	r7, #111	; 0x6f
 8005422:	bf0c      	ite	eq
 8005424:	2308      	moveq	r3, #8
 8005426:	230a      	movne	r3, #10
 8005428:	2100      	movs	r1, #0
 800542a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542e:	6865      	ldr	r5, [r4, #4]
 8005430:	60a5      	str	r5, [r4, #8]
 8005432:	2d00      	cmp	r5, #0
 8005434:	bfa2      	ittt	ge
 8005436:	6821      	ldrge	r1, [r4, #0]
 8005438:	f021 0104 	bicge.w	r1, r1, #4
 800543c:	6021      	strge	r1, [r4, #0]
 800543e:	b90e      	cbnz	r6, 8005444 <_printf_i+0x114>
 8005440:	2d00      	cmp	r5, #0
 8005442:	d04b      	beq.n	80054dc <_printf_i+0x1ac>
 8005444:	4615      	mov	r5, r2
 8005446:	fbb6 f1f3 	udiv	r1, r6, r3
 800544a:	fb03 6711 	mls	r7, r3, r1, r6
 800544e:	5dc7      	ldrb	r7, [r0, r7]
 8005450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005454:	4637      	mov	r7, r6
 8005456:	42bb      	cmp	r3, r7
 8005458:	460e      	mov	r6, r1
 800545a:	d9f4      	bls.n	8005446 <_printf_i+0x116>
 800545c:	2b08      	cmp	r3, #8
 800545e:	d10b      	bne.n	8005478 <_printf_i+0x148>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07de      	lsls	r6, r3, #31
 8005464:	d508      	bpl.n	8005478 <_printf_i+0x148>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6861      	ldr	r1, [r4, #4]
 800546a:	4299      	cmp	r1, r3
 800546c:	bfde      	ittt	le
 800546e:	2330      	movle	r3, #48	; 0x30
 8005470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005478:	1b52      	subs	r2, r2, r5
 800547a:	6122      	str	r2, [r4, #16]
 800547c:	f8cd a000 	str.w	sl, [sp]
 8005480:	464b      	mov	r3, r9
 8005482:	aa03      	add	r2, sp, #12
 8005484:	4621      	mov	r1, r4
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fee4 	bl	8005254 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	d14a      	bne.n	8005526 <_printf_i+0x1f6>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	b004      	add	sp, #16
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	4833      	ldr	r0, [pc, #204]	; (8005570 <_printf_i+0x240>)
 80054a4:	2778      	movs	r7, #120	; 0x78
 80054a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6829      	ldr	r1, [r5, #0]
 80054ae:	061f      	lsls	r7, r3, #24
 80054b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054b4:	d402      	bmi.n	80054bc <_printf_i+0x18c>
 80054b6:	065f      	lsls	r7, r3, #25
 80054b8:	bf48      	it	mi
 80054ba:	b2b6      	uxthmi	r6, r6
 80054bc:	07df      	lsls	r7, r3, #31
 80054be:	bf48      	it	mi
 80054c0:	f043 0320 	orrmi.w	r3, r3, #32
 80054c4:	6029      	str	r1, [r5, #0]
 80054c6:	bf48      	it	mi
 80054c8:	6023      	strmi	r3, [r4, #0]
 80054ca:	b91e      	cbnz	r6, 80054d4 <_printf_i+0x1a4>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f023 0320 	bic.w	r3, r3, #32
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	2310      	movs	r3, #16
 80054d6:	e7a7      	b.n	8005428 <_printf_i+0xf8>
 80054d8:	4824      	ldr	r0, [pc, #144]	; (800556c <_printf_i+0x23c>)
 80054da:	e7e4      	b.n	80054a6 <_printf_i+0x176>
 80054dc:	4615      	mov	r5, r2
 80054de:	e7bd      	b.n	800545c <_printf_i+0x12c>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	6826      	ldr	r6, [r4, #0]
 80054e4:	6961      	ldr	r1, [r4, #20]
 80054e6:	1d18      	adds	r0, r3, #4
 80054e8:	6028      	str	r0, [r5, #0]
 80054ea:	0635      	lsls	r5, r6, #24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0x1c4>
 80054f0:	6019      	str	r1, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0x1ca>
 80054f4:	0670      	lsls	r0, r6, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0x1c0>
 80054f8:	8019      	strh	r1, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	4615      	mov	r5, r2
 8005500:	e7bc      	b.n	800547c <_printf_i+0x14c>
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	602a      	str	r2, [r5, #0]
 8005508:	681d      	ldr	r5, [r3, #0]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	4628      	mov	r0, r5
 8005510:	f7fa fe5e 	bl	80001d0 <memchr>
 8005514:	b108      	cbz	r0, 800551a <_printf_i+0x1ea>
 8005516:	1b40      	subs	r0, r0, r5
 8005518:	6060      	str	r0, [r4, #4]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005524:	e7aa      	b.n	800547c <_printf_i+0x14c>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	462a      	mov	r2, r5
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d0ad      	beq.n	8005490 <_printf_i+0x160>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d413      	bmi.n	8005562 <_printf_i+0x232>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	4298      	cmp	r0, r3
 8005540:	bfb8      	it	lt
 8005542:	4618      	movlt	r0, r3
 8005544:	e7a6      	b.n	8005494 <_printf_i+0x164>
 8005546:	2301      	movs	r3, #1
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d09d      	beq.n	8005490 <_printf_i+0x160>
 8005554:	3501      	adds	r5, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	42ab      	cmp	r3, r5
 800555e:	dcf2      	bgt.n	8005546 <_printf_i+0x216>
 8005560:	e7eb      	b.n	800553a <_printf_i+0x20a>
 8005562:	2500      	movs	r5, #0
 8005564:	f104 0619 	add.w	r6, r4, #25
 8005568:	e7f5      	b.n	8005556 <_printf_i+0x226>
 800556a:	bf00      	nop
 800556c:	080076ca 	.word	0x080076ca
 8005570:	080076db 	.word	0x080076db

08005574 <std>:
 8005574:	2300      	movs	r3, #0
 8005576:	b510      	push	{r4, lr}
 8005578:	4604      	mov	r4, r0
 800557a:	e9c0 3300 	strd	r3, r3, [r0]
 800557e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005582:	6083      	str	r3, [r0, #8]
 8005584:	8181      	strh	r1, [r0, #12]
 8005586:	6643      	str	r3, [r0, #100]	; 0x64
 8005588:	81c2      	strh	r2, [r0, #14]
 800558a:	6183      	str	r3, [r0, #24]
 800558c:	4619      	mov	r1, r3
 800558e:	2208      	movs	r2, #8
 8005590:	305c      	adds	r0, #92	; 0x5c
 8005592:	f000 f906 	bl	80057a2 <memset>
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <std+0x58>)
 8005598:	6263      	str	r3, [r4, #36]	; 0x24
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <std+0x5c>)
 800559c:	62a3      	str	r3, [r4, #40]	; 0x28
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <std+0x60>)
 80055a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <std+0x64>)
 80055a4:	6323      	str	r3, [r4, #48]	; 0x30
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <std+0x68>)
 80055a8:	6224      	str	r4, [r4, #32]
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d006      	beq.n	80055bc <std+0x48>
 80055ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055b2:	4294      	cmp	r4, r2
 80055b4:	d002      	beq.n	80055bc <std+0x48>
 80055b6:	33d0      	adds	r3, #208	; 0xd0
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d105      	bne.n	80055c8 <std+0x54>
 80055bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c4:	f000 b96a 	b.w	800589c <__retarget_lock_init_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	bf00      	nop
 80055cc:	0800571d 	.word	0x0800571d
 80055d0:	0800573f 	.word	0x0800573f
 80055d4:	08005777 	.word	0x08005777
 80055d8:	0800579b 	.word	0x0800579b
 80055dc:	20000304 	.word	0x20000304

080055e0 <stdio_exit_handler>:
 80055e0:	4a02      	ldr	r2, [pc, #8]	; (80055ec <stdio_exit_handler+0xc>)
 80055e2:	4903      	ldr	r1, [pc, #12]	; (80055f0 <stdio_exit_handler+0x10>)
 80055e4:	4803      	ldr	r0, [pc, #12]	; (80055f4 <stdio_exit_handler+0x14>)
 80055e6:	f000 b869 	b.w	80056bc <_fwalk_sglue>
 80055ea:	bf00      	nop
 80055ec:	2000001c 	.word	0x2000001c
 80055f0:	08007229 	.word	0x08007229
 80055f4:	20000028 	.word	0x20000028

080055f8 <cleanup_stdio>:
 80055f8:	6841      	ldr	r1, [r0, #4]
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <cleanup_stdio+0x34>)
 80055fc:	4299      	cmp	r1, r3
 80055fe:	b510      	push	{r4, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	d001      	beq.n	8005608 <cleanup_stdio+0x10>
 8005604:	f001 fe10 	bl	8007228 <_fflush_r>
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <cleanup_stdio+0x38>)
 800560c:	4299      	cmp	r1, r3
 800560e:	d002      	beq.n	8005616 <cleanup_stdio+0x1e>
 8005610:	4620      	mov	r0, r4
 8005612:	f001 fe09 	bl	8007228 <_fflush_r>
 8005616:	68e1      	ldr	r1, [r4, #12]
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <cleanup_stdio+0x3c>)
 800561a:	4299      	cmp	r1, r3
 800561c:	d004      	beq.n	8005628 <cleanup_stdio+0x30>
 800561e:	4620      	mov	r0, r4
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	f001 be00 	b.w	8007228 <_fflush_r>
 8005628:	bd10      	pop	{r4, pc}
 800562a:	bf00      	nop
 800562c:	20000304 	.word	0x20000304
 8005630:	2000036c 	.word	0x2000036c
 8005634:	200003d4 	.word	0x200003d4

08005638 <global_stdio_init.part.0>:
 8005638:	b510      	push	{r4, lr}
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <global_stdio_init.part.0+0x30>)
 800563c:	4c0b      	ldr	r4, [pc, #44]	; (800566c <global_stdio_init.part.0+0x34>)
 800563e:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <global_stdio_init.part.0+0x38>)
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	4620      	mov	r0, r4
 8005644:	2200      	movs	r2, #0
 8005646:	2104      	movs	r1, #4
 8005648:	f7ff ff94 	bl	8005574 <std>
 800564c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005650:	2201      	movs	r2, #1
 8005652:	2109      	movs	r1, #9
 8005654:	f7ff ff8e 	bl	8005574 <std>
 8005658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800565c:	2202      	movs	r2, #2
 800565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005662:	2112      	movs	r1, #18
 8005664:	f7ff bf86 	b.w	8005574 <std>
 8005668:	2000043c 	.word	0x2000043c
 800566c:	20000304 	.word	0x20000304
 8005670:	080055e1 	.word	0x080055e1

08005674 <__sfp_lock_acquire>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sfp_lock_acquire+0x8>)
 8005676:	f000 b912 	b.w	800589e <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20000445 	.word	0x20000445

08005680 <__sfp_lock_release>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sfp_lock_release+0x8>)
 8005682:	f000 b90d 	b.w	80058a0 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20000445 	.word	0x20000445

0800568c <__sinit>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f7ff fff0 	bl	8005674 <__sfp_lock_acquire>
 8005694:	6a23      	ldr	r3, [r4, #32]
 8005696:	b11b      	cbz	r3, 80056a0 <__sinit+0x14>
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bff0 	b.w	8005680 <__sfp_lock_release>
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <__sinit+0x28>)
 80056a2:	6223      	str	r3, [r4, #32]
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <__sinit+0x2c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f5      	bne.n	8005698 <__sinit+0xc>
 80056ac:	f7ff ffc4 	bl	8005638 <global_stdio_init.part.0>
 80056b0:	e7f2      	b.n	8005698 <__sinit+0xc>
 80056b2:	bf00      	nop
 80056b4:	080055f9 	.word	0x080055f9
 80056b8:	2000043c 	.word	0x2000043c

080056bc <_fwalk_sglue>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	4607      	mov	r7, r0
 80056c2:	4688      	mov	r8, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	2600      	movs	r6, #0
 80056c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056cc:	f1b9 0901 	subs.w	r9, r9, #1
 80056d0:	d505      	bpl.n	80056de <_fwalk_sglue+0x22>
 80056d2:	6824      	ldr	r4, [r4, #0]
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d1f7      	bne.n	80056c8 <_fwalk_sglue+0xc>
 80056d8:	4630      	mov	r0, r6
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d907      	bls.n	80056f4 <_fwalk_sglue+0x38>
 80056e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d003      	beq.n	80056f4 <_fwalk_sglue+0x38>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	4306      	orrs	r6, r0
 80056f4:	3568      	adds	r5, #104	; 0x68
 80056f6:	e7e9      	b.n	80056cc <_fwalk_sglue+0x10>

080056f8 <iprintf>:
 80056f8:	b40f      	push	{r0, r1, r2, r3}
 80056fa:	b507      	push	{r0, r1, r2, lr}
 80056fc:	4906      	ldr	r1, [pc, #24]	; (8005718 <iprintf+0x20>)
 80056fe:	ab04      	add	r3, sp, #16
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	f853 2b04 	ldr.w	r2, [r3], #4
 8005706:	6881      	ldr	r1, [r0, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	f001 fbed 	bl	8006ee8 <_vfiprintf_r>
 800570e:	b003      	add	sp, #12
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	b004      	add	sp, #16
 8005716:	4770      	bx	lr
 8005718:	20000074 	.word	0x20000074

0800571c <__sread>:
 800571c:	b510      	push	{r4, lr}
 800571e:	460c      	mov	r4, r1
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	f000 f86c 	bl	8005800 <_read_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	bfab      	itete	ge
 800572c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800572e:	89a3      	ldrhlt	r3, [r4, #12]
 8005730:	181b      	addge	r3, r3, r0
 8005732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005736:	bfac      	ite	ge
 8005738:	6563      	strge	r3, [r4, #84]	; 0x54
 800573a:	81a3      	strhlt	r3, [r4, #12]
 800573c:	bd10      	pop	{r4, pc}

0800573e <__swrite>:
 800573e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	461f      	mov	r7, r3
 8005744:	898b      	ldrh	r3, [r1, #12]
 8005746:	05db      	lsls	r3, r3, #23
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4616      	mov	r6, r2
 800574e:	d505      	bpl.n	800575c <__swrite+0x1e>
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	2302      	movs	r3, #2
 8005756:	2200      	movs	r2, #0
 8005758:	f000 f840 	bl	80057dc <_lseek_r>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	4632      	mov	r2, r6
 800576a:	463b      	mov	r3, r7
 800576c:	4628      	mov	r0, r5
 800576e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	f000 b857 	b.w	8005824 <_write_r>

08005776 <__sseek>:
 8005776:	b510      	push	{r4, lr}
 8005778:	460c      	mov	r4, r1
 800577a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577e:	f000 f82d 	bl	80057dc <_lseek_r>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	bf15      	itete	ne
 8005788:	6560      	strne	r0, [r4, #84]	; 0x54
 800578a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800578e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005792:	81a3      	strheq	r3, [r4, #12]
 8005794:	bf18      	it	ne
 8005796:	81a3      	strhne	r3, [r4, #12]
 8005798:	bd10      	pop	{r4, pc}

0800579a <__sclose>:
 800579a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579e:	f000 b80d 	b.w	80057bc <_close_r>

080057a2 <memset>:
 80057a2:	4402      	add	r2, r0
 80057a4:	4603      	mov	r3, r0
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d100      	bne.n	80057ac <memset+0xa>
 80057aa:	4770      	bx	lr
 80057ac:	f803 1b01 	strb.w	r1, [r3], #1
 80057b0:	e7f9      	b.n	80057a6 <memset+0x4>
	...

080057b4 <_localeconv_r>:
 80057b4:	4800      	ldr	r0, [pc, #0]	; (80057b8 <_localeconv_r+0x4>)
 80057b6:	4770      	bx	lr
 80057b8:	20000168 	.word	0x20000168

080057bc <_close_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d06      	ldr	r5, [pc, #24]	; (80057d8 <_close_r+0x1c>)
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	f7fb fcf5 	bl	80011b6 <_close>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_close_r+0x1a>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_close_r+0x1a>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	20000440 	.word	0x20000440

080057dc <_lseek_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d07      	ldr	r5, [pc, #28]	; (80057fc <_lseek_r+0x20>)
 80057e0:	4604      	mov	r4, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	4611      	mov	r1, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7fb fd0a 	bl	8001204 <_lseek>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_lseek_r+0x1e>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_lseek_r+0x1e>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	20000440 	.word	0x20000440

08005800 <_read_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d07      	ldr	r5, [pc, #28]	; (8005820 <_read_r+0x20>)
 8005804:	4604      	mov	r4, r0
 8005806:	4608      	mov	r0, r1
 8005808:	4611      	mov	r1, r2
 800580a:	2200      	movs	r2, #0
 800580c:	602a      	str	r2, [r5, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f7fb fc98 	bl	8001144 <_read>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_read_r+0x1e>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_read_r+0x1e>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000440 	.word	0x20000440

08005824 <_write_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d07      	ldr	r5, [pc, #28]	; (8005844 <_write_r+0x20>)
 8005828:	4604      	mov	r4, r0
 800582a:	4608      	mov	r0, r1
 800582c:	4611      	mov	r1, r2
 800582e:	2200      	movs	r2, #0
 8005830:	602a      	str	r2, [r5, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f7fb fca3 	bl	800117e <_write>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_write_r+0x1e>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_write_r+0x1e>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000440 	.word	0x20000440

08005848 <__errno>:
 8005848:	4b01      	ldr	r3, [pc, #4]	; (8005850 <__errno+0x8>)
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000074 	.word	0x20000074

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4d0d      	ldr	r5, [pc, #52]	; (800588c <__libc_init_array+0x38>)
 8005858:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <__libc_init_array+0x3c>)
 800585a:	1b64      	subs	r4, r4, r5
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	2600      	movs	r6, #0
 8005860:	42a6      	cmp	r6, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4d0b      	ldr	r5, [pc, #44]	; (8005894 <__libc_init_array+0x40>)
 8005866:	4c0c      	ldr	r4, [pc, #48]	; (8005898 <__libc_init_array+0x44>)
 8005868:	f001 fef0 	bl	800764c <_init>
 800586c:	1b64      	subs	r4, r4, r5
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	2600      	movs	r6, #0
 8005872:	42a6      	cmp	r6, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f855 3b04 	ldr.w	r3, [r5], #4
 800587c:	4798      	blx	r3
 800587e:	3601      	adds	r6, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f855 3b04 	ldr.w	r3, [r5], #4
 8005886:	4798      	blx	r3
 8005888:	3601      	adds	r6, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	08007a2c 	.word	0x08007a2c
 8005890:	08007a2c 	.word	0x08007a2c
 8005894:	08007a2c 	.word	0x08007a2c
 8005898:	08007a30 	.word	0x08007a30

0800589c <__retarget_lock_init_recursive>:
 800589c:	4770      	bx	lr

0800589e <__retarget_lock_acquire_recursive>:
 800589e:	4770      	bx	lr

080058a0 <__retarget_lock_release_recursive>:
 80058a0:	4770      	bx	lr

080058a2 <quorem>:
 80058a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	6903      	ldr	r3, [r0, #16]
 80058a8:	690c      	ldr	r4, [r1, #16]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	4607      	mov	r7, r0
 80058ae:	db7e      	blt.n	80059ae <quorem+0x10c>
 80058b0:	3c01      	subs	r4, #1
 80058b2:	f101 0814 	add.w	r8, r1, #20
 80058b6:	f100 0514 	add.w	r5, r0, #20
 80058ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058c8:	3301      	adds	r3, #1
 80058ca:	429a      	cmp	r2, r3
 80058cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80058d8:	d331      	bcc.n	800593e <quorem+0x9c>
 80058da:	f04f 0e00 	mov.w	lr, #0
 80058de:	4640      	mov	r0, r8
 80058e0:	46ac      	mov	ip, r5
 80058e2:	46f2      	mov	sl, lr
 80058e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80058e8:	b293      	uxth	r3, r2
 80058ea:	fb06 e303 	mla	r3, r6, r3, lr
 80058ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058f2:	0c1a      	lsrs	r2, r3, #16
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ebaa 0303 	sub.w	r3, sl, r3
 80058fa:	f8dc a000 	ldr.w	sl, [ip]
 80058fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005902:	fb06 220e 	mla	r2, r6, lr, r2
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	9b00      	ldr	r3, [sp, #0]
 800590a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800590e:	b292      	uxth	r2, r2
 8005910:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005918:	f8bd 3000 	ldrh.w	r3, [sp]
 800591c:	4581      	cmp	r9, r0
 800591e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005922:	f84c 3b04 	str.w	r3, [ip], #4
 8005926:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800592a:	d2db      	bcs.n	80058e4 <quorem+0x42>
 800592c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005930:	b92b      	cbnz	r3, 800593e <quorem+0x9c>
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	3b04      	subs	r3, #4
 8005936:	429d      	cmp	r5, r3
 8005938:	461a      	mov	r2, r3
 800593a:	d32c      	bcc.n	8005996 <quorem+0xf4>
 800593c:	613c      	str	r4, [r7, #16]
 800593e:	4638      	mov	r0, r7
 8005940:	f001 f9a8 	bl	8006c94 <__mcmp>
 8005944:	2800      	cmp	r0, #0
 8005946:	db22      	blt.n	800598e <quorem+0xec>
 8005948:	3601      	adds	r6, #1
 800594a:	4629      	mov	r1, r5
 800594c:	2000      	movs	r0, #0
 800594e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005952:	f8d1 c000 	ldr.w	ip, [r1]
 8005956:	b293      	uxth	r3, r2
 8005958:	1ac3      	subs	r3, r0, r3
 800595a:	0c12      	lsrs	r2, r2, #16
 800595c:	fa13 f38c 	uxtah	r3, r3, ip
 8005960:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005968:	b29b      	uxth	r3, r3
 800596a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800596e:	45c1      	cmp	r9, r8
 8005970:	f841 3b04 	str.w	r3, [r1], #4
 8005974:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005978:	d2e9      	bcs.n	800594e <quorem+0xac>
 800597a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800597e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005982:	b922      	cbnz	r2, 800598e <quorem+0xec>
 8005984:	3b04      	subs	r3, #4
 8005986:	429d      	cmp	r5, r3
 8005988:	461a      	mov	r2, r3
 800598a:	d30a      	bcc.n	80059a2 <quorem+0x100>
 800598c:	613c      	str	r4, [r7, #16]
 800598e:	4630      	mov	r0, r6
 8005990:	b003      	add	sp, #12
 8005992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	3b04      	subs	r3, #4
 800599a:	2a00      	cmp	r2, #0
 800599c:	d1ce      	bne.n	800593c <quorem+0x9a>
 800599e:	3c01      	subs	r4, #1
 80059a0:	e7c9      	b.n	8005936 <quorem+0x94>
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d1f0      	bne.n	800598c <quorem+0xea>
 80059aa:	3c01      	subs	r4, #1
 80059ac:	e7eb      	b.n	8005986 <quorem+0xe4>
 80059ae:	2000      	movs	r0, #0
 80059b0:	e7ee      	b.n	8005990 <quorem+0xee>
 80059b2:	0000      	movs	r0, r0
 80059b4:	0000      	movs	r0, r0
	...

080059b8 <_dtoa_r>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	ed2d 8b04 	vpush	{d8-d9}
 80059c0:	69c5      	ldr	r5, [r0, #28]
 80059c2:	b093      	sub	sp, #76	; 0x4c
 80059c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80059c8:	ec57 6b10 	vmov	r6, r7, d0
 80059cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059d0:	9107      	str	r1, [sp, #28]
 80059d2:	4604      	mov	r4, r0
 80059d4:	920a      	str	r2, [sp, #40]	; 0x28
 80059d6:	930d      	str	r3, [sp, #52]	; 0x34
 80059d8:	b975      	cbnz	r5, 80059f8 <_dtoa_r+0x40>
 80059da:	2010      	movs	r0, #16
 80059dc:	f000 fe2a 	bl	8006634 <malloc>
 80059e0:	4602      	mov	r2, r0
 80059e2:	61e0      	str	r0, [r4, #28]
 80059e4:	b920      	cbnz	r0, 80059f0 <_dtoa_r+0x38>
 80059e6:	4bae      	ldr	r3, [pc, #696]	; (8005ca0 <_dtoa_r+0x2e8>)
 80059e8:	21ef      	movs	r1, #239	; 0xef
 80059ea:	48ae      	ldr	r0, [pc, #696]	; (8005ca4 <_dtoa_r+0x2ec>)
 80059ec:	f001 fcf8 	bl	80073e0 <__assert_func>
 80059f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059f4:	6005      	str	r5, [r0, #0]
 80059f6:	60c5      	str	r5, [r0, #12]
 80059f8:	69e3      	ldr	r3, [r4, #28]
 80059fa:	6819      	ldr	r1, [r3, #0]
 80059fc:	b151      	cbz	r1, 8005a14 <_dtoa_r+0x5c>
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	604a      	str	r2, [r1, #4]
 8005a02:	2301      	movs	r3, #1
 8005a04:	4093      	lsls	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 ff07 	bl	800681c <_Bfree>
 8005a0e:	69e3      	ldr	r3, [r4, #28]
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	1e3b      	subs	r3, r7, #0
 8005a16:	bfbb      	ittet	lt
 8005a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	9303      	strlt	r3, [sp, #12]
 8005a1e:	2300      	movge	r3, #0
 8005a20:	2201      	movlt	r2, #1
 8005a22:	bfac      	ite	ge
 8005a24:	f8c8 3000 	strge.w	r3, [r8]
 8005a28:	f8c8 2000 	strlt.w	r2, [r8]
 8005a2c:	4b9e      	ldr	r3, [pc, #632]	; (8005ca8 <_dtoa_r+0x2f0>)
 8005a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a32:	ea33 0308 	bics.w	r3, r3, r8
 8005a36:	d11b      	bne.n	8005a70 <_dtoa_r+0xb8>
 8005a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a44:	4333      	orrs	r3, r6
 8005a46:	f000 8593 	beq.w	8006570 <_dtoa_r+0xbb8>
 8005a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a4c:	b963      	cbnz	r3, 8005a68 <_dtoa_r+0xb0>
 8005a4e:	4b97      	ldr	r3, [pc, #604]	; (8005cac <_dtoa_r+0x2f4>)
 8005a50:	e027      	b.n	8005aa2 <_dtoa_r+0xea>
 8005a52:	4b97      	ldr	r3, [pc, #604]	; (8005cb0 <_dtoa_r+0x2f8>)
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	9800      	ldr	r0, [sp, #0]
 8005a5e:	b013      	add	sp, #76	; 0x4c
 8005a60:	ecbd 8b04 	vpop	{d8-d9}
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	4b90      	ldr	r3, [pc, #576]	; (8005cac <_dtoa_r+0x2f4>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	3303      	adds	r3, #3
 8005a6e:	e7f3      	b.n	8005a58 <_dtoa_r+0xa0>
 8005a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	ec51 0b17 	vmov	r0, r1, d7
 8005a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8005a7e:	eef0 8a67 	vmov.f32	s17, s15
 8005a82:	2300      	movs	r3, #0
 8005a84:	f7fb f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a88:	4681      	mov	r9, r0
 8005a8a:	b160      	cbz	r0, 8005aa6 <_dtoa_r+0xee>
 8005a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8568 	beq.w	800656a <_dtoa_r+0xbb2>
 8005a9a:	4b86      	ldr	r3, [pc, #536]	; (8005cb4 <_dtoa_r+0x2fc>)
 8005a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	e7da      	b.n	8005a5c <_dtoa_r+0xa4>
 8005aa6:	aa10      	add	r2, sp, #64	; 0x40
 8005aa8:	a911      	add	r1, sp, #68	; 0x44
 8005aaa:	4620      	mov	r0, r4
 8005aac:	eeb0 0a48 	vmov.f32	s0, s16
 8005ab0:	eef0 0a68 	vmov.f32	s1, s17
 8005ab4:	f001 f994 	bl	8006de0 <__d2b>
 8005ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005abc:	4682      	mov	sl, r0
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	d07f      	beq.n	8005bc2 <_dtoa_r+0x20a>
 8005ac2:	ee18 3a90 	vmov	r3, s17
 8005ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ace:	ec51 0b18 	vmov	r0, r1, d8
 8005ad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005ade:	4619      	mov	r1, r3
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4b75      	ldr	r3, [pc, #468]	; (8005cb8 <_dtoa_r+0x300>)
 8005ae4:	f7fa fbd0 	bl	8000288 <__aeabi_dsub>
 8005ae8:	a367      	add	r3, pc, #412	; (adr r3, 8005c88 <_dtoa_r+0x2d0>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f7fa fd83 	bl	80005f8 <__aeabi_dmul>
 8005af2:	a367      	add	r3, pc, #412	; (adr r3, 8005c90 <_dtoa_r+0x2d8>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fbc8 	bl	800028c <__adddf3>
 8005afc:	4606      	mov	r6, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	460f      	mov	r7, r1
 8005b02:	f7fa fd0f 	bl	8000524 <__aeabi_i2d>
 8005b06:	a364      	add	r3, pc, #400	; (adr r3, 8005c98 <_dtoa_r+0x2e0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fd74 	bl	80005f8 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa fbb8 	bl	800028c <__adddf3>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	f7fb f81a 	bl	8000b58 <__aeabi_d2iz>
 8005b24:	2200      	movs	r2, #0
 8005b26:	4683      	mov	fp, r0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa ffd5 	bl	8000adc <__aeabi_dcmplt>
 8005b32:	b148      	cbz	r0, 8005b48 <_dtoa_r+0x190>
 8005b34:	4658      	mov	r0, fp
 8005b36:	f7fa fcf5 	bl	8000524 <__aeabi_i2d>
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	f7fa ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b42:	b908      	cbnz	r0, 8005b48 <_dtoa_r+0x190>
 8005b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b48:	f1bb 0f16 	cmp.w	fp, #22
 8005b4c:	d857      	bhi.n	8005bfe <_dtoa_r+0x246>
 8005b4e:	4b5b      	ldr	r3, [pc, #364]	; (8005cbc <_dtoa_r+0x304>)
 8005b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	ec51 0b18 	vmov	r0, r1, d8
 8005b5c:	f7fa ffbe 	bl	8000adc <__aeabi_dcmplt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d04e      	beq.n	8005c02 <_dtoa_r+0x24a>
 8005b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b68:	2300      	movs	r3, #0
 8005b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b6e:	1b5b      	subs	r3, r3, r5
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	bf45      	ittet	mi
 8005b74:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b78:	9305      	strmi	r3, [sp, #20]
 8005b7a:	2300      	movpl	r3, #0
 8005b7c:	2300      	movmi	r3, #0
 8005b7e:	9206      	str	r2, [sp, #24]
 8005b80:	bf54      	ite	pl
 8005b82:	9305      	strpl	r3, [sp, #20]
 8005b84:	9306      	strmi	r3, [sp, #24]
 8005b86:	f1bb 0f00 	cmp.w	fp, #0
 8005b8a:	db3c      	blt.n	8005c06 <_dtoa_r+0x24e>
 8005b8c:	9b06      	ldr	r3, [sp, #24]
 8005b8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b92:	445b      	add	r3, fp
 8005b94:	9306      	str	r3, [sp, #24]
 8005b96:	2300      	movs	r3, #0
 8005b98:	9308      	str	r3, [sp, #32]
 8005b9a:	9b07      	ldr	r3, [sp, #28]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d868      	bhi.n	8005c72 <_dtoa_r+0x2ba>
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	bfc4      	itt	gt
 8005ba4:	3b04      	subgt	r3, #4
 8005ba6:	9307      	strgt	r3, [sp, #28]
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	f1a3 0302 	sub.w	r3, r3, #2
 8005bae:	bfcc      	ite	gt
 8005bb0:	2500      	movgt	r5, #0
 8005bb2:	2501      	movle	r5, #1
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	f200 8085 	bhi.w	8005cc4 <_dtoa_r+0x30c>
 8005bba:	e8df f003 	tbb	[pc, r3]
 8005bbe:	3b2e      	.short	0x3b2e
 8005bc0:	5839      	.short	0x5839
 8005bc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005bc6:	441d      	add	r5, r3
 8005bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	bfc1      	itttt	gt
 8005bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005bd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005bdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005be0:	bfd6      	itet	le
 8005be2:	f1c3 0320 	rsble	r3, r3, #32
 8005be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005bea:	fa06 f003 	lslle.w	r0, r6, r3
 8005bee:	f7fa fc89 	bl	8000504 <__aeabi_ui2d>
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005bf8:	3d01      	subs	r5, #1
 8005bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8005bfc:	e76f      	b.n	8005ade <_dtoa_r+0x126>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7b3      	b.n	8005b6a <_dtoa_r+0x1b2>
 8005c02:	900c      	str	r0, [sp, #48]	; 0x30
 8005c04:	e7b2      	b.n	8005b6c <_dtoa_r+0x1b4>
 8005c06:	9b05      	ldr	r3, [sp, #20]
 8005c08:	eba3 030b 	sub.w	r3, r3, fp
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	f1cb 0300 	rsb	r3, fp, #0
 8005c12:	9308      	str	r3, [sp, #32]
 8005c14:	2300      	movs	r3, #0
 8005c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c18:	e7bf      	b.n	8005b9a <_dtoa_r+0x1e2>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc52      	bgt.n	8005cca <_dtoa_r+0x312>
 8005c24:	2301      	movs	r3, #1
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c2e:	e00b      	b.n	8005c48 <_dtoa_r+0x290>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e7f3      	b.n	8005c1c <_dtoa_r+0x264>
 8005c34:	2300      	movs	r3, #0
 8005c36:	9309      	str	r3, [sp, #36]	; 0x24
 8005c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3a:	445b      	add	r3, fp
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	bfb8      	it	lt
 8005c46:	2301      	movlt	r3, #1
 8005c48:	69e0      	ldr	r0, [r4, #28]
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	f102 0614 	add.w	r6, r2, #20
 8005c52:	429e      	cmp	r6, r3
 8005c54:	d93d      	bls.n	8005cd2 <_dtoa_r+0x31a>
 8005c56:	6041      	str	r1, [r0, #4]
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fd9f 	bl	800679c <_Balloc>
 8005c5e:	9000      	str	r0, [sp, #0]
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d139      	bne.n	8005cd8 <_dtoa_r+0x320>
 8005c64:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <_dtoa_r+0x308>)
 8005c66:	4602      	mov	r2, r0
 8005c68:	f240 11af 	movw	r1, #431	; 0x1af
 8005c6c:	e6bd      	b.n	80059ea <_dtoa_r+0x32>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e7e1      	b.n	8005c36 <_dtoa_r+0x27e>
 8005c72:	2501      	movs	r5, #1
 8005c74:	2300      	movs	r3, #0
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	9509      	str	r5, [sp, #36]	; 0x24
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	9304      	str	r3, [sp, #16]
 8005c82:	2200      	movs	r2, #0
 8005c84:	2312      	movs	r3, #18
 8005c86:	e7d1      	b.n	8005c2c <_dtoa_r+0x274>
 8005c88:	636f4361 	.word	0x636f4361
 8005c8c:	3fd287a7 	.word	0x3fd287a7
 8005c90:	8b60c8b3 	.word	0x8b60c8b3
 8005c94:	3fc68a28 	.word	0x3fc68a28
 8005c98:	509f79fb 	.word	0x509f79fb
 8005c9c:	3fd34413 	.word	0x3fd34413
 8005ca0:	080076f9 	.word	0x080076f9
 8005ca4:	08007710 	.word	0x08007710
 8005ca8:	7ff00000 	.word	0x7ff00000
 8005cac:	080076f5 	.word	0x080076f5
 8005cb0:	080076ec 	.word	0x080076ec
 8005cb4:	080076c9 	.word	0x080076c9
 8005cb8:	3ff80000 	.word	0x3ff80000
 8005cbc:	08007800 	.word	0x08007800
 8005cc0:	08007768 	.word	0x08007768
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc8:	e7d7      	b.n	8005c7a <_dtoa_r+0x2c2>
 8005cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	e7ba      	b.n	8005c48 <_dtoa_r+0x290>
 8005cd2:	3101      	adds	r1, #1
 8005cd4:	0052      	lsls	r2, r2, #1
 8005cd6:	e7ba      	b.n	8005c4e <_dtoa_r+0x296>
 8005cd8:	69e3      	ldr	r3, [r4, #28]
 8005cda:	9a00      	ldr	r2, [sp, #0]
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	2b0e      	cmp	r3, #14
 8005ce2:	f200 80a8 	bhi.w	8005e36 <_dtoa_r+0x47e>
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	f000 80a5 	beq.w	8005e36 <_dtoa_r+0x47e>
 8005cec:	f1bb 0f00 	cmp.w	fp, #0
 8005cf0:	dd38      	ble.n	8005d64 <_dtoa_r+0x3ac>
 8005cf2:	4bc0      	ldr	r3, [pc, #768]	; (8005ff4 <_dtoa_r+0x63c>)
 8005cf4:	f00b 020f 	and.w	r2, fp, #15
 8005cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005d08:	d019      	beq.n	8005d3e <_dtoa_r+0x386>
 8005d0a:	4bbb      	ldr	r3, [pc, #748]	; (8005ff8 <_dtoa_r+0x640>)
 8005d0c:	ec51 0b18 	vmov	r0, r1, d8
 8005d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d14:	f7fa fd9a 	bl	800084c <__aeabi_ddiv>
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	f008 080f 	and.w	r8, r8, #15
 8005d20:	2503      	movs	r5, #3
 8005d22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005ff8 <_dtoa_r+0x640>
 8005d26:	f1b8 0f00 	cmp.w	r8, #0
 8005d2a:	d10a      	bne.n	8005d42 <_dtoa_r+0x38a>
 8005d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d30:	4632      	mov	r2, r6
 8005d32:	463b      	mov	r3, r7
 8005d34:	f7fa fd8a 	bl	800084c <__aeabi_ddiv>
 8005d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d3c:	e02b      	b.n	8005d96 <_dtoa_r+0x3de>
 8005d3e:	2502      	movs	r5, #2
 8005d40:	e7ef      	b.n	8005d22 <_dtoa_r+0x36a>
 8005d42:	f018 0f01 	tst.w	r8, #1
 8005d46:	d008      	beq.n	8005d5a <_dtoa_r+0x3a2>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	3501      	adds	r5, #1
 8005d56:	4606      	mov	r6, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d5e:	f109 0908 	add.w	r9, r9, #8
 8005d62:	e7e0      	b.n	8005d26 <_dtoa_r+0x36e>
 8005d64:	f000 809f 	beq.w	8005ea6 <_dtoa_r+0x4ee>
 8005d68:	f1cb 0600 	rsb	r6, fp, #0
 8005d6c:	4ba1      	ldr	r3, [pc, #644]	; (8005ff4 <_dtoa_r+0x63c>)
 8005d6e:	4fa2      	ldr	r7, [pc, #648]	; (8005ff8 <_dtoa_r+0x640>)
 8005d70:	f006 020f 	and.w	r2, r6, #15
 8005d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	ec51 0b18 	vmov	r0, r1, d8
 8005d80:	f7fa fc3a 	bl	80005f8 <__aeabi_dmul>
 8005d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d88:	1136      	asrs	r6, r6, #4
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2502      	movs	r5, #2
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	d17e      	bne.n	8005e90 <_dtoa_r+0x4d8>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d0      	bne.n	8005d38 <_dtoa_r+0x380>
 8005d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8084 	beq.w	8005eaa <_dtoa_r+0x4f2>
 8005da2:	4b96      	ldr	r3, [pc, #600]	; (8005ffc <_dtoa_r+0x644>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	4640      	mov	r0, r8
 8005da8:	4649      	mov	r1, r9
 8005daa:	f7fa fe97 	bl	8000adc <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d07b      	beq.n	8005eaa <_dtoa_r+0x4f2>
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d078      	beq.n	8005eaa <_dtoa_r+0x4f2>
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dd39      	ble.n	8005e32 <_dtoa_r+0x47a>
 8005dbe:	4b90      	ldr	r3, [pc, #576]	; (8006000 <_dtoa_r+0x648>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dce:	9e01      	ldr	r6, [sp, #4]
 8005dd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7fa fba2 	bl	8000524 <__aeabi_i2d>
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	f7fa fc08 	bl	80005f8 <__aeabi_dmul>
 8005de8:	4b86      	ldr	r3, [pc, #536]	; (8006004 <_dtoa_r+0x64c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	f7fa fa4e 	bl	800028c <__adddf3>
 8005df0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	d158      	bne.n	8005eb0 <_dtoa_r+0x4f8>
 8005dfe:	4b82      	ldr	r3, [pc, #520]	; (8006008 <_dtoa_r+0x650>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f7fa fa3f 	bl	8000288 <__aeabi_dsub>
 8005e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4689      	mov	r9, r1
 8005e12:	f7fa fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f040 8296 	bne.w	8006348 <_dtoa_r+0x990>
 8005e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e20:	4640      	mov	r0, r8
 8005e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e26:	4649      	mov	r1, r9
 8005e28:	f7fa fe58 	bl	8000adc <__aeabi_dcmplt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f040 8289 	bne.w	8006344 <_dtoa_r+0x98c>
 8005e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f2c0 814e 	blt.w	80060da <_dtoa_r+0x722>
 8005e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e42:	f300 814a 	bgt.w	80060da <_dtoa_r+0x722>
 8005e46:	4b6b      	ldr	r3, [pc, #428]	; (8005ff4 <_dtoa_r+0x63c>)
 8005e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f280 80dc 	bge.w	8006010 <_dtoa_r+0x658>
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f300 80d8 	bgt.w	8006010 <_dtoa_r+0x658>
 8005e60:	f040 826f 	bne.w	8006342 <_dtoa_r+0x98a>
 8005e64:	4b68      	ldr	r3, [pc, #416]	; (8006008 <_dtoa_r+0x650>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fbc4 	bl	80005f8 <__aeabi_dmul>
 8005e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e74:	f7fa fe46 	bl	8000b04 <__aeabi_dcmpge>
 8005e78:	9e04      	ldr	r6, [sp, #16]
 8005e7a:	4637      	mov	r7, r6
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f040 8245 	bne.w	800630c <_dtoa_r+0x954>
 8005e82:	9d00      	ldr	r5, [sp, #0]
 8005e84:	2331      	movs	r3, #49	; 0x31
 8005e86:	f805 3b01 	strb.w	r3, [r5], #1
 8005e8a:	f10b 0b01 	add.w	fp, fp, #1
 8005e8e:	e241      	b.n	8006314 <_dtoa_r+0x95c>
 8005e90:	07f2      	lsls	r2, r6, #31
 8005e92:	d505      	bpl.n	8005ea0 <_dtoa_r+0x4e8>
 8005e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	1076      	asrs	r6, r6, #1
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	e773      	b.n	8005d8e <_dtoa_r+0x3d6>
 8005ea6:	2502      	movs	r5, #2
 8005ea8:	e775      	b.n	8005d96 <_dtoa_r+0x3de>
 8005eaa:	9e04      	ldr	r6, [sp, #16]
 8005eac:	465f      	mov	r7, fp
 8005eae:	e792      	b.n	8005dd6 <_dtoa_r+0x41e>
 8005eb0:	9900      	ldr	r1, [sp, #0]
 8005eb2:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <_dtoa_r+0x63c>)
 8005eb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005eb8:	4431      	add	r1, r6
 8005eba:	9102      	str	r1, [sp, #8]
 8005ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ebe:	eeb0 9a47 	vmov.f32	s18, s14
 8005ec2:	eef0 9a67 	vmov.f32	s19, s15
 8005ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ece:	2900      	cmp	r1, #0
 8005ed0:	d044      	beq.n	8005f5c <_dtoa_r+0x5a4>
 8005ed2:	494e      	ldr	r1, [pc, #312]	; (800600c <_dtoa_r+0x654>)
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fa fcb9 	bl	800084c <__aeabi_ddiv>
 8005eda:	ec53 2b19 	vmov	r2, r3, d9
 8005ede:	f7fa f9d3 	bl	8000288 <__aeabi_dsub>
 8005ee2:	9d00      	ldr	r5, [sp, #0]
 8005ee4:	ec41 0b19 	vmov	d9, r0, r1
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4640      	mov	r0, r8
 8005eec:	f7fa fe34 	bl	8000b58 <__aeabi_d2iz>
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	f7fa fb17 	bl	8000524 <__aeabi_i2d>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa f9c3 	bl	8000288 <__aeabi_dsub>
 8005f02:	3630      	adds	r6, #48	; 0x30
 8005f04:	f805 6b01 	strb.w	r6, [r5], #1
 8005f08:	ec53 2b19 	vmov	r2, r3, d9
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	4689      	mov	r9, r1
 8005f10:	f7fa fde4 	bl	8000adc <__aeabi_dcmplt>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d164      	bne.n	8005fe2 <_dtoa_r+0x62a>
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	4937      	ldr	r1, [pc, #220]	; (8005ffc <_dtoa_r+0x644>)
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f7fa f9b2 	bl	8000288 <__aeabi_dsub>
 8005f24:	ec53 2b19 	vmov	r2, r3, d9
 8005f28:	f7fa fdd8 	bl	8000adc <__aeabi_dcmplt>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f040 80b6 	bne.w	800609e <_dtoa_r+0x6e6>
 8005f32:	9b02      	ldr	r3, [sp, #8]
 8005f34:	429d      	cmp	r5, r3
 8005f36:	f43f af7c 	beq.w	8005e32 <_dtoa_r+0x47a>
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <_dtoa_r+0x648>)
 8005f3c:	ec51 0b19 	vmov	r0, r1, d9
 8005f40:	2200      	movs	r2, #0
 8005f42:	f7fa fb59 	bl	80005f8 <__aeabi_dmul>
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <_dtoa_r+0x648>)
 8005f48:	ec41 0b19 	vmov	d9, r0, r1
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa fb51 	bl	80005f8 <__aeabi_dmul>
 8005f56:	4680      	mov	r8, r0
 8005f58:	4689      	mov	r9, r1
 8005f5a:	e7c5      	b.n	8005ee8 <_dtoa_r+0x530>
 8005f5c:	ec51 0b17 	vmov	r0, r1, d7
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	9b02      	ldr	r3, [sp, #8]
 8005f66:	9d00      	ldr	r5, [sp, #0]
 8005f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f6a:	ec41 0b19 	vmov	d9, r0, r1
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	f7fa fdf1 	bl	8000b58 <__aeabi_d2iz>
 8005f76:	4606      	mov	r6, r0
 8005f78:	f7fa fad4 	bl	8000524 <__aeabi_i2d>
 8005f7c:	3630      	adds	r6, #48	; 0x30
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f97f 	bl	8000288 <__aeabi_dsub>
 8005f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	429d      	cmp	r5, r3
 8005f92:	4680      	mov	r8, r0
 8005f94:	4689      	mov	r9, r1
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	d124      	bne.n	8005fe6 <_dtoa_r+0x62e>
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <_dtoa_r+0x654>)
 8005f9e:	ec51 0b19 	vmov	r0, r1, d9
 8005fa2:	f7fa f973 	bl	800028c <__adddf3>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d173      	bne.n	800609e <_dtoa_r+0x6e6>
 8005fb6:	ec53 2b19 	vmov	r2, r3, d9
 8005fba:	4914      	ldr	r1, [pc, #80]	; (800600c <_dtoa_r+0x654>)
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f7fa f963 	bl	8000288 <__aeabi_dsub>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa fd87 	bl	8000adc <__aeabi_dcmplt>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f43f af2f 	beq.w	8005e32 <_dtoa_r+0x47a>
 8005fd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005fd6:	1e6b      	subs	r3, r5, #1
 8005fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	d0f8      	beq.n	8005fd4 <_dtoa_r+0x61c>
 8005fe2:	46bb      	mov	fp, r7
 8005fe4:	e04a      	b.n	800607c <_dtoa_r+0x6c4>
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <_dtoa_r+0x648>)
 8005fe8:	f7fa fb06 	bl	80005f8 <__aeabi_dmul>
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	e7bd      	b.n	8005f6e <_dtoa_r+0x5b6>
 8005ff2:	bf00      	nop
 8005ff4:	08007800 	.word	0x08007800
 8005ff8:	080077d8 	.word	0x080077d8
 8005ffc:	3ff00000 	.word	0x3ff00000
 8006000:	40240000 	.word	0x40240000
 8006004:	401c0000 	.word	0x401c0000
 8006008:	40140000 	.word	0x40140000
 800600c:	3fe00000 	.word	0x3fe00000
 8006010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006014:	9d00      	ldr	r5, [sp, #0]
 8006016:	4642      	mov	r2, r8
 8006018:	464b      	mov	r3, r9
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	f7fa fc15 	bl	800084c <__aeabi_ddiv>
 8006022:	f7fa fd99 	bl	8000b58 <__aeabi_d2iz>
 8006026:	9001      	str	r0, [sp, #4]
 8006028:	f7fa fa7c 	bl	8000524 <__aeabi_i2d>
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	9e01      	ldr	r6, [sp, #4]
 8006042:	9f04      	ldr	r7, [sp, #16]
 8006044:	3630      	adds	r6, #48	; 0x30
 8006046:	f805 6b01 	strb.w	r6, [r5], #1
 800604a:	9e00      	ldr	r6, [sp, #0]
 800604c:	1bae      	subs	r6, r5, r6
 800604e:	42b7      	cmp	r7, r6
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	d134      	bne.n	80060c0 <_dtoa_r+0x708>
 8006056:	f7fa f919 	bl	800028c <__adddf3>
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	f7fa fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8006066:	b9c8      	cbnz	r0, 800609c <_dtoa_r+0x6e4>
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006074:	b110      	cbz	r0, 800607c <_dtoa_r+0x6c4>
 8006076:	9b01      	ldr	r3, [sp, #4]
 8006078:	07db      	lsls	r3, r3, #31
 800607a:	d40f      	bmi.n	800609c <_dtoa_r+0x6e4>
 800607c:	4651      	mov	r1, sl
 800607e:	4620      	mov	r0, r4
 8006080:	f000 fbcc 	bl	800681c <_Bfree>
 8006084:	2300      	movs	r3, #0
 8006086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006088:	702b      	strb	r3, [r5, #0]
 800608a:	f10b 0301 	add.w	r3, fp, #1
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006092:	2b00      	cmp	r3, #0
 8006094:	f43f ace2 	beq.w	8005a5c <_dtoa_r+0xa4>
 8006098:	601d      	str	r5, [r3, #0]
 800609a:	e4df      	b.n	8005a5c <_dtoa_r+0xa4>
 800609c:	465f      	mov	r7, fp
 800609e:	462b      	mov	r3, r5
 80060a0:	461d      	mov	r5, r3
 80060a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a6:	2a39      	cmp	r2, #57	; 0x39
 80060a8:	d106      	bne.n	80060b8 <_dtoa_r+0x700>
 80060aa:	9a00      	ldr	r2, [sp, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1f7      	bne.n	80060a0 <_dtoa_r+0x6e8>
 80060b0:	9900      	ldr	r1, [sp, #0]
 80060b2:	2230      	movs	r2, #48	; 0x30
 80060b4:	3701      	adds	r7, #1
 80060b6:	700a      	strb	r2, [r1, #0]
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	3201      	adds	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e790      	b.n	8005fe2 <_dtoa_r+0x62a>
 80060c0:	4ba3      	ldr	r3, [pc, #652]	; (8006350 <_dtoa_r+0x998>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa fa98 	bl	80005f8 <__aeabi_dmul>
 80060c8:	2200      	movs	r2, #0
 80060ca:	2300      	movs	r3, #0
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	f7fa fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d09e      	beq.n	8006016 <_dtoa_r+0x65e>
 80060d8:	e7d0      	b.n	800607c <_dtoa_r+0x6c4>
 80060da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060dc:	2a00      	cmp	r2, #0
 80060de:	f000 80ca 	beq.w	8006276 <_dtoa_r+0x8be>
 80060e2:	9a07      	ldr	r2, [sp, #28]
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	f300 80ad 	bgt.w	8006244 <_dtoa_r+0x88c>
 80060ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	f000 80a5 	beq.w	800623c <_dtoa_r+0x884>
 80060f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060f6:	9e08      	ldr	r6, [sp, #32]
 80060f8:	9d05      	ldr	r5, [sp, #20]
 80060fa:	9a05      	ldr	r2, [sp, #20]
 80060fc:	441a      	add	r2, r3
 80060fe:	9205      	str	r2, [sp, #20]
 8006100:	9a06      	ldr	r2, [sp, #24]
 8006102:	2101      	movs	r1, #1
 8006104:	441a      	add	r2, r3
 8006106:	4620      	mov	r0, r4
 8006108:	9206      	str	r2, [sp, #24]
 800610a:	f000 fc3d 	bl	8006988 <__i2b>
 800610e:	4607      	mov	r7, r0
 8006110:	b165      	cbz	r5, 800612c <_dtoa_r+0x774>
 8006112:	9b06      	ldr	r3, [sp, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dd09      	ble.n	800612c <_dtoa_r+0x774>
 8006118:	42ab      	cmp	r3, r5
 800611a:	9a05      	ldr	r2, [sp, #20]
 800611c:	bfa8      	it	ge
 800611e:	462b      	movge	r3, r5
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	9205      	str	r2, [sp, #20]
 8006124:	9a06      	ldr	r2, [sp, #24]
 8006126:	1aed      	subs	r5, r5, r3
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	9306      	str	r3, [sp, #24]
 800612c:	9b08      	ldr	r3, [sp, #32]
 800612e:	b1f3      	cbz	r3, 800616e <_dtoa_r+0x7b6>
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80a3 	beq.w	800627e <_dtoa_r+0x8c6>
 8006138:	2e00      	cmp	r6, #0
 800613a:	dd10      	ble.n	800615e <_dtoa_r+0x7a6>
 800613c:	4639      	mov	r1, r7
 800613e:	4632      	mov	r2, r6
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fce1 	bl	8006b08 <__pow5mult>
 8006146:	4652      	mov	r2, sl
 8006148:	4601      	mov	r1, r0
 800614a:	4607      	mov	r7, r0
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fc31 	bl	80069b4 <__multiply>
 8006152:	4651      	mov	r1, sl
 8006154:	4680      	mov	r8, r0
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fb60 	bl	800681c <_Bfree>
 800615c:	46c2      	mov	sl, r8
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	1b9a      	subs	r2, r3, r6
 8006162:	d004      	beq.n	800616e <_dtoa_r+0x7b6>
 8006164:	4651      	mov	r1, sl
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fcce 	bl	8006b08 <__pow5mult>
 800616c:	4682      	mov	sl, r0
 800616e:	2101      	movs	r1, #1
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fc09 	bl	8006988 <__i2b>
 8006176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	4606      	mov	r6, r0
 800617c:	f340 8081 	ble.w	8006282 <_dtoa_r+0x8ca>
 8006180:	461a      	mov	r2, r3
 8006182:	4601      	mov	r1, r0
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fcbf 	bl	8006b08 <__pow5mult>
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	2b01      	cmp	r3, #1
 800618e:	4606      	mov	r6, r0
 8006190:	dd7a      	ble.n	8006288 <_dtoa_r+0x8d0>
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	6933      	ldr	r3, [r6, #16]
 8006198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800619c:	6918      	ldr	r0, [r3, #16]
 800619e:	f000 fba5 	bl	80068ec <__hi0bits>
 80061a2:	f1c0 0020 	rsb	r0, r0, #32
 80061a6:	9b06      	ldr	r3, [sp, #24]
 80061a8:	4418      	add	r0, r3
 80061aa:	f010 001f 	ands.w	r0, r0, #31
 80061ae:	f000 8094 	beq.w	80062da <_dtoa_r+0x922>
 80061b2:	f1c0 0320 	rsb	r3, r0, #32
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	f340 8085 	ble.w	80062c6 <_dtoa_r+0x90e>
 80061bc:	9b05      	ldr	r3, [sp, #20]
 80061be:	f1c0 001c 	rsb	r0, r0, #28
 80061c2:	4403      	add	r3, r0
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	4403      	add	r3, r0
 80061ca:	4405      	add	r5, r0
 80061cc:	9306      	str	r3, [sp, #24]
 80061ce:	9b05      	ldr	r3, [sp, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dd05      	ble.n	80061e0 <_dtoa_r+0x828>
 80061d4:	4651      	mov	r1, sl
 80061d6:	461a      	mov	r2, r3
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fcef 	bl	8006bbc <__lshift>
 80061de:	4682      	mov	sl, r0
 80061e0:	9b06      	ldr	r3, [sp, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd05      	ble.n	80061f2 <_dtoa_r+0x83a>
 80061e6:	4631      	mov	r1, r6
 80061e8:	461a      	mov	r2, r3
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fce6 	bl	8006bbc <__lshift>
 80061f0:	4606      	mov	r6, r0
 80061f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d072      	beq.n	80062de <_dtoa_r+0x926>
 80061f8:	4631      	mov	r1, r6
 80061fa:	4650      	mov	r0, sl
 80061fc:	f000 fd4a 	bl	8006c94 <__mcmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	da6c      	bge.n	80062de <_dtoa_r+0x926>
 8006204:	2300      	movs	r3, #0
 8006206:	4651      	mov	r1, sl
 8006208:	220a      	movs	r2, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f000 fb28 	bl	8006860 <__multadd>
 8006210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006216:	4682      	mov	sl, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 81b0 	beq.w	800657e <_dtoa_r+0xbc6>
 800621e:	2300      	movs	r3, #0
 8006220:	4639      	mov	r1, r7
 8006222:	220a      	movs	r2, #10
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fb1b 	bl	8006860 <__multadd>
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	4607      	mov	r7, r0
 8006230:	f300 8096 	bgt.w	8006360 <_dtoa_r+0x9a8>
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	2b02      	cmp	r3, #2
 8006238:	dc59      	bgt.n	80062ee <_dtoa_r+0x936>
 800623a:	e091      	b.n	8006360 <_dtoa_r+0x9a8>
 800623c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800623e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006242:	e758      	b.n	80060f6 <_dtoa_r+0x73e>
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	1e5e      	subs	r6, r3, #1
 8006248:	9b08      	ldr	r3, [sp, #32]
 800624a:	42b3      	cmp	r3, r6
 800624c:	bfbf      	itttt	lt
 800624e:	9b08      	ldrlt	r3, [sp, #32]
 8006250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006252:	9608      	strlt	r6, [sp, #32]
 8006254:	1af3      	sublt	r3, r6, r3
 8006256:	bfb4      	ite	lt
 8006258:	18d2      	addlt	r2, r2, r3
 800625a:	1b9e      	subge	r6, r3, r6
 800625c:	9b04      	ldr	r3, [sp, #16]
 800625e:	bfbc      	itt	lt
 8006260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006262:	2600      	movlt	r6, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfb7      	itett	lt
 8006268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800626c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006270:	1a9d      	sublt	r5, r3, r2
 8006272:	2300      	movlt	r3, #0
 8006274:	e741      	b.n	80060fa <_dtoa_r+0x742>
 8006276:	9e08      	ldr	r6, [sp, #32]
 8006278:	9d05      	ldr	r5, [sp, #20]
 800627a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800627c:	e748      	b.n	8006110 <_dtoa_r+0x758>
 800627e:	9a08      	ldr	r2, [sp, #32]
 8006280:	e770      	b.n	8006164 <_dtoa_r+0x7ac>
 8006282:	9b07      	ldr	r3, [sp, #28]
 8006284:	2b01      	cmp	r3, #1
 8006286:	dc19      	bgt.n	80062bc <_dtoa_r+0x904>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	b9bb      	cbnz	r3, 80062bc <_dtoa_r+0x904>
 800628c:	9b03      	ldr	r3, [sp, #12]
 800628e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006292:	b99b      	cbnz	r3, 80062bc <_dtoa_r+0x904>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800629a:	0d1b      	lsrs	r3, r3, #20
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	b183      	cbz	r3, 80062c2 <_dtoa_r+0x90a>
 80062a0:	9b05      	ldr	r3, [sp, #20]
 80062a2:	3301      	adds	r3, #1
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	3301      	adds	r3, #1
 80062aa:	9306      	str	r3, [sp, #24]
 80062ac:	f04f 0801 	mov.w	r8, #1
 80062b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f47f af6f 	bne.w	8006196 <_dtoa_r+0x7de>
 80062b8:	2001      	movs	r0, #1
 80062ba:	e774      	b.n	80061a6 <_dtoa_r+0x7ee>
 80062bc:	f04f 0800 	mov.w	r8, #0
 80062c0:	e7f6      	b.n	80062b0 <_dtoa_r+0x8f8>
 80062c2:	4698      	mov	r8, r3
 80062c4:	e7f4      	b.n	80062b0 <_dtoa_r+0x8f8>
 80062c6:	d082      	beq.n	80061ce <_dtoa_r+0x816>
 80062c8:	9a05      	ldr	r2, [sp, #20]
 80062ca:	331c      	adds	r3, #28
 80062cc:	441a      	add	r2, r3
 80062ce:	9205      	str	r2, [sp, #20]
 80062d0:	9a06      	ldr	r2, [sp, #24]
 80062d2:	441a      	add	r2, r3
 80062d4:	441d      	add	r5, r3
 80062d6:	9206      	str	r2, [sp, #24]
 80062d8:	e779      	b.n	80061ce <_dtoa_r+0x816>
 80062da:	4603      	mov	r3, r0
 80062dc:	e7f4      	b.n	80062c8 <_dtoa_r+0x910>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc37      	bgt.n	8006354 <_dtoa_r+0x99c>
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dd34      	ble.n	8006354 <_dtoa_r+0x99c>
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	b963      	cbnz	r3, 800630c <_dtoa_r+0x954>
 80062f2:	4631      	mov	r1, r6
 80062f4:	2205      	movs	r2, #5
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fab2 	bl	8006860 <__multadd>
 80062fc:	4601      	mov	r1, r0
 80062fe:	4606      	mov	r6, r0
 8006300:	4650      	mov	r0, sl
 8006302:	f000 fcc7 	bl	8006c94 <__mcmp>
 8006306:	2800      	cmp	r0, #0
 8006308:	f73f adbb 	bgt.w	8005e82 <_dtoa_r+0x4ca>
 800630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630e:	9d00      	ldr	r5, [sp, #0]
 8006310:	ea6f 0b03 	mvn.w	fp, r3
 8006314:	f04f 0800 	mov.w	r8, #0
 8006318:	4631      	mov	r1, r6
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fa7e 	bl	800681c <_Bfree>
 8006320:	2f00      	cmp	r7, #0
 8006322:	f43f aeab 	beq.w	800607c <_dtoa_r+0x6c4>
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	d005      	beq.n	8006338 <_dtoa_r+0x980>
 800632c:	45b8      	cmp	r8, r7
 800632e:	d003      	beq.n	8006338 <_dtoa_r+0x980>
 8006330:	4641      	mov	r1, r8
 8006332:	4620      	mov	r0, r4
 8006334:	f000 fa72 	bl	800681c <_Bfree>
 8006338:	4639      	mov	r1, r7
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fa6e 	bl	800681c <_Bfree>
 8006340:	e69c      	b.n	800607c <_dtoa_r+0x6c4>
 8006342:	2600      	movs	r6, #0
 8006344:	4637      	mov	r7, r6
 8006346:	e7e1      	b.n	800630c <_dtoa_r+0x954>
 8006348:	46bb      	mov	fp, r7
 800634a:	4637      	mov	r7, r6
 800634c:	e599      	b.n	8005e82 <_dtoa_r+0x4ca>
 800634e:	bf00      	nop
 8006350:	40240000 	.word	0x40240000
 8006354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80c8 	beq.w	80064ec <_dtoa_r+0xb34>
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	2d00      	cmp	r5, #0
 8006362:	dd05      	ble.n	8006370 <_dtoa_r+0x9b8>
 8006364:	4639      	mov	r1, r7
 8006366:	462a      	mov	r2, r5
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fc27 	bl	8006bbc <__lshift>
 800636e:	4607      	mov	r7, r0
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d05b      	beq.n	800642e <_dtoa_r+0xa76>
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fa0f 	bl	800679c <_Balloc>
 800637e:	4605      	mov	r5, r0
 8006380:	b928      	cbnz	r0, 800638e <_dtoa_r+0x9d6>
 8006382:	4b83      	ldr	r3, [pc, #524]	; (8006590 <_dtoa_r+0xbd8>)
 8006384:	4602      	mov	r2, r0
 8006386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800638a:	f7ff bb2e 	b.w	80059ea <_dtoa_r+0x32>
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	3202      	adds	r2, #2
 8006392:	0092      	lsls	r2, r2, #2
 8006394:	f107 010c 	add.w	r1, r7, #12
 8006398:	300c      	adds	r0, #12
 800639a:	f001 f813 	bl	80073c4 <memcpy>
 800639e:	2201      	movs	r2, #1
 80063a0:	4629      	mov	r1, r5
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 fc0a 	bl	8006bbc <__lshift>
 80063a8:	9b00      	ldr	r3, [sp, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b2:	4413      	add	r3, r2
 80063b4:	9308      	str	r3, [sp, #32]
 80063b6:	9b02      	ldr	r3, [sp, #8]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	46b8      	mov	r8, r7
 80063be:	9306      	str	r3, [sp, #24]
 80063c0:	4607      	mov	r7, r0
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	4631      	mov	r1, r6
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4650      	mov	r0, sl
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	f7ff fa69 	bl	80058a2 <quorem>
 80063d0:	4641      	mov	r1, r8
 80063d2:	9002      	str	r0, [sp, #8]
 80063d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063d8:	4650      	mov	r0, sl
 80063da:	f000 fc5b 	bl	8006c94 <__mcmp>
 80063de:	463a      	mov	r2, r7
 80063e0:	9005      	str	r0, [sp, #20]
 80063e2:	4631      	mov	r1, r6
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fc71 	bl	8006ccc <__mdiff>
 80063ea:	68c2      	ldr	r2, [r0, #12]
 80063ec:	4605      	mov	r5, r0
 80063ee:	bb02      	cbnz	r2, 8006432 <_dtoa_r+0xa7a>
 80063f0:	4601      	mov	r1, r0
 80063f2:	4650      	mov	r0, sl
 80063f4:	f000 fc4e 	bl	8006c94 <__mcmp>
 80063f8:	4602      	mov	r2, r0
 80063fa:	4629      	mov	r1, r5
 80063fc:	4620      	mov	r0, r4
 80063fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006400:	f000 fa0c 	bl	800681c <_Bfree>
 8006404:	9b07      	ldr	r3, [sp, #28]
 8006406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006408:	9d04      	ldr	r5, [sp, #16]
 800640a:	ea43 0102 	orr.w	r1, r3, r2
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	4319      	orrs	r1, r3
 8006412:	d110      	bne.n	8006436 <_dtoa_r+0xa7e>
 8006414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006418:	d029      	beq.n	800646e <_dtoa_r+0xab6>
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dd02      	ble.n	8006426 <_dtoa_r+0xa6e>
 8006420:	9b02      	ldr	r3, [sp, #8]
 8006422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	f883 9000 	strb.w	r9, [r3]
 800642c:	e774      	b.n	8006318 <_dtoa_r+0x960>
 800642e:	4638      	mov	r0, r7
 8006430:	e7ba      	b.n	80063a8 <_dtoa_r+0x9f0>
 8006432:	2201      	movs	r2, #1
 8006434:	e7e1      	b.n	80063fa <_dtoa_r+0xa42>
 8006436:	9b05      	ldr	r3, [sp, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	db04      	blt.n	8006446 <_dtoa_r+0xa8e>
 800643c:	9907      	ldr	r1, [sp, #28]
 800643e:	430b      	orrs	r3, r1
 8006440:	9906      	ldr	r1, [sp, #24]
 8006442:	430b      	orrs	r3, r1
 8006444:	d120      	bne.n	8006488 <_dtoa_r+0xad0>
 8006446:	2a00      	cmp	r2, #0
 8006448:	dded      	ble.n	8006426 <_dtoa_r+0xa6e>
 800644a:	4651      	mov	r1, sl
 800644c:	2201      	movs	r2, #1
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fbb4 	bl	8006bbc <__lshift>
 8006454:	4631      	mov	r1, r6
 8006456:	4682      	mov	sl, r0
 8006458:	f000 fc1c 	bl	8006c94 <__mcmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	dc03      	bgt.n	8006468 <_dtoa_r+0xab0>
 8006460:	d1e1      	bne.n	8006426 <_dtoa_r+0xa6e>
 8006462:	f019 0f01 	tst.w	r9, #1
 8006466:	d0de      	beq.n	8006426 <_dtoa_r+0xa6e>
 8006468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800646c:	d1d8      	bne.n	8006420 <_dtoa_r+0xa68>
 800646e:	9a01      	ldr	r2, [sp, #4]
 8006470:	2339      	movs	r3, #57	; 0x39
 8006472:	7013      	strb	r3, [r2, #0]
 8006474:	462b      	mov	r3, r5
 8006476:	461d      	mov	r5, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800647e:	2a39      	cmp	r2, #57	; 0x39
 8006480:	d06c      	beq.n	800655c <_dtoa_r+0xba4>
 8006482:	3201      	adds	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e747      	b.n	8006318 <_dtoa_r+0x960>
 8006488:	2a00      	cmp	r2, #0
 800648a:	dd07      	ble.n	800649c <_dtoa_r+0xae4>
 800648c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006490:	d0ed      	beq.n	800646e <_dtoa_r+0xab6>
 8006492:	9a01      	ldr	r2, [sp, #4]
 8006494:	f109 0301 	add.w	r3, r9, #1
 8006498:	7013      	strb	r3, [r2, #0]
 800649a:	e73d      	b.n	8006318 <_dtoa_r+0x960>
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	9a08      	ldr	r2, [sp, #32]
 80064a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d043      	beq.n	8006530 <_dtoa_r+0xb78>
 80064a8:	4651      	mov	r1, sl
 80064aa:	2300      	movs	r3, #0
 80064ac:	220a      	movs	r2, #10
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f9d6 	bl	8006860 <__multadd>
 80064b4:	45b8      	cmp	r8, r7
 80064b6:	4682      	mov	sl, r0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	f04f 020a 	mov.w	r2, #10
 80064c0:	4641      	mov	r1, r8
 80064c2:	4620      	mov	r0, r4
 80064c4:	d107      	bne.n	80064d6 <_dtoa_r+0xb1e>
 80064c6:	f000 f9cb 	bl	8006860 <__multadd>
 80064ca:	4680      	mov	r8, r0
 80064cc:	4607      	mov	r7, r0
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	3301      	adds	r3, #1
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	e775      	b.n	80063c2 <_dtoa_r+0xa0a>
 80064d6:	f000 f9c3 	bl	8006860 <__multadd>
 80064da:	4639      	mov	r1, r7
 80064dc:	4680      	mov	r8, r0
 80064de:	2300      	movs	r3, #0
 80064e0:	220a      	movs	r2, #10
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f9bc 	bl	8006860 <__multadd>
 80064e8:	4607      	mov	r7, r0
 80064ea:	e7f0      	b.n	80064ce <_dtoa_r+0xb16>
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	9d00      	ldr	r5, [sp, #0]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4650      	mov	r0, sl
 80064f6:	f7ff f9d4 	bl	80058a2 <quorem>
 80064fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	f805 9b01 	strb.w	r9, [r5], #1
 8006504:	1aea      	subs	r2, r5, r3
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	4293      	cmp	r3, r2
 800650a:	dd07      	ble.n	800651c <_dtoa_r+0xb64>
 800650c:	4651      	mov	r1, sl
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4620      	mov	r0, r4
 8006514:	f000 f9a4 	bl	8006860 <__multadd>
 8006518:	4682      	mov	sl, r0
 800651a:	e7ea      	b.n	80064f2 <_dtoa_r+0xb3a>
 800651c:	9b01      	ldr	r3, [sp, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bfc8      	it	gt
 8006522:	461d      	movgt	r5, r3
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	bfd8      	it	le
 8006528:	2501      	movle	r5, #1
 800652a:	441d      	add	r5, r3
 800652c:	f04f 0800 	mov.w	r8, #0
 8006530:	4651      	mov	r1, sl
 8006532:	2201      	movs	r2, #1
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fb41 	bl	8006bbc <__lshift>
 800653a:	4631      	mov	r1, r6
 800653c:	4682      	mov	sl, r0
 800653e:	f000 fba9 	bl	8006c94 <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	dc96      	bgt.n	8006474 <_dtoa_r+0xabc>
 8006546:	d102      	bne.n	800654e <_dtoa_r+0xb96>
 8006548:	f019 0f01 	tst.w	r9, #1
 800654c:	d192      	bne.n	8006474 <_dtoa_r+0xabc>
 800654e:	462b      	mov	r3, r5
 8006550:	461d      	mov	r5, r3
 8006552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006556:	2a30      	cmp	r2, #48	; 0x30
 8006558:	d0fa      	beq.n	8006550 <_dtoa_r+0xb98>
 800655a:	e6dd      	b.n	8006318 <_dtoa_r+0x960>
 800655c:	9a00      	ldr	r2, [sp, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d189      	bne.n	8006476 <_dtoa_r+0xabe>
 8006562:	f10b 0b01 	add.w	fp, fp, #1
 8006566:	2331      	movs	r3, #49	; 0x31
 8006568:	e796      	b.n	8006498 <_dtoa_r+0xae0>
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <_dtoa_r+0xbdc>)
 800656c:	f7ff ba99 	b.w	8005aa2 <_dtoa_r+0xea>
 8006570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006572:	2b00      	cmp	r3, #0
 8006574:	f47f aa6d 	bne.w	8005a52 <_dtoa_r+0x9a>
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <_dtoa_r+0xbe0>)
 800657a:	f7ff ba92 	b.w	8005aa2 <_dtoa_r+0xea>
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	dcb5      	bgt.n	80064f0 <_dtoa_r+0xb38>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	2b02      	cmp	r3, #2
 8006588:	f73f aeb1 	bgt.w	80062ee <_dtoa_r+0x936>
 800658c:	e7b0      	b.n	80064f0 <_dtoa_r+0xb38>
 800658e:	bf00      	nop
 8006590:	08007768 	.word	0x08007768
 8006594:	080076c8 	.word	0x080076c8
 8006598:	080076ec 	.word	0x080076ec

0800659c <_free_r>:
 800659c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659e:	2900      	cmp	r1, #0
 80065a0:	d044      	beq.n	800662c <_free_r+0x90>
 80065a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a6:	9001      	str	r0, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f1a1 0404 	sub.w	r4, r1, #4
 80065ae:	bfb8      	it	lt
 80065b0:	18e4      	addlt	r4, r4, r3
 80065b2:	f000 f8e7 	bl	8006784 <__malloc_lock>
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <_free_r+0x94>)
 80065b8:	9801      	ldr	r0, [sp, #4]
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	b933      	cbnz	r3, 80065cc <_free_r+0x30>
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	6014      	str	r4, [r2, #0]
 80065c2:	b003      	add	sp, #12
 80065c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c8:	f000 b8e2 	b.w	8006790 <__malloc_unlock>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d908      	bls.n	80065e2 <_free_r+0x46>
 80065d0:	6825      	ldr	r5, [r4, #0]
 80065d2:	1961      	adds	r1, r4, r5
 80065d4:	428b      	cmp	r3, r1
 80065d6:	bf01      	itttt	eq
 80065d8:	6819      	ldreq	r1, [r3, #0]
 80065da:	685b      	ldreq	r3, [r3, #4]
 80065dc:	1949      	addeq	r1, r1, r5
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	e7ed      	b.n	80065be <_free_r+0x22>
 80065e2:	461a      	mov	r2, r3
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b10b      	cbz	r3, 80065ec <_free_r+0x50>
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d9fa      	bls.n	80065e2 <_free_r+0x46>
 80065ec:	6811      	ldr	r1, [r2, #0]
 80065ee:	1855      	adds	r5, r2, r1
 80065f0:	42a5      	cmp	r5, r4
 80065f2:	d10b      	bne.n	800660c <_free_r+0x70>
 80065f4:	6824      	ldr	r4, [r4, #0]
 80065f6:	4421      	add	r1, r4
 80065f8:	1854      	adds	r4, r2, r1
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	d1e0      	bne.n	80065c2 <_free_r+0x26>
 8006600:	681c      	ldr	r4, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	6053      	str	r3, [r2, #4]
 8006606:	440c      	add	r4, r1
 8006608:	6014      	str	r4, [r2, #0]
 800660a:	e7da      	b.n	80065c2 <_free_r+0x26>
 800660c:	d902      	bls.n	8006614 <_free_r+0x78>
 800660e:	230c      	movs	r3, #12
 8006610:	6003      	str	r3, [r0, #0]
 8006612:	e7d6      	b.n	80065c2 <_free_r+0x26>
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	1961      	adds	r1, r4, r5
 8006618:	428b      	cmp	r3, r1
 800661a:	bf04      	itt	eq
 800661c:	6819      	ldreq	r1, [r3, #0]
 800661e:	685b      	ldreq	r3, [r3, #4]
 8006620:	6063      	str	r3, [r4, #4]
 8006622:	bf04      	itt	eq
 8006624:	1949      	addeq	r1, r1, r5
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	6054      	str	r4, [r2, #4]
 800662a:	e7ca      	b.n	80065c2 <_free_r+0x26>
 800662c:	b003      	add	sp, #12
 800662e:	bd30      	pop	{r4, r5, pc}
 8006630:	20000448 	.word	0x20000448

08006634 <malloc>:
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <malloc+0xc>)
 8006636:	4601      	mov	r1, r0
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f000 b823 	b.w	8006684 <_malloc_r>
 800663e:	bf00      	nop
 8006640:	20000074 	.word	0x20000074

08006644 <sbrk_aligned>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4e0e      	ldr	r6, [pc, #56]	; (8006680 <sbrk_aligned+0x3c>)
 8006648:	460c      	mov	r4, r1
 800664a:	6831      	ldr	r1, [r6, #0]
 800664c:	4605      	mov	r5, r0
 800664e:	b911      	cbnz	r1, 8006656 <sbrk_aligned+0x12>
 8006650:	f000 fea8 	bl	80073a4 <_sbrk_r>
 8006654:	6030      	str	r0, [r6, #0]
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f000 fea3 	bl	80073a4 <_sbrk_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d00a      	beq.n	8006678 <sbrk_aligned+0x34>
 8006662:	1cc4      	adds	r4, r0, #3
 8006664:	f024 0403 	bic.w	r4, r4, #3
 8006668:	42a0      	cmp	r0, r4
 800666a:	d007      	beq.n	800667c <sbrk_aligned+0x38>
 800666c:	1a21      	subs	r1, r4, r0
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fe98 	bl	80073a4 <_sbrk_r>
 8006674:	3001      	adds	r0, #1
 8006676:	d101      	bne.n	800667c <sbrk_aligned+0x38>
 8006678:	f04f 34ff 	mov.w	r4, #4294967295
 800667c:	4620      	mov	r0, r4
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	2000044c 	.word	0x2000044c

08006684 <_malloc_r>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	1ccd      	adds	r5, r1, #3
 800668a:	f025 0503 	bic.w	r5, r5, #3
 800668e:	3508      	adds	r5, #8
 8006690:	2d0c      	cmp	r5, #12
 8006692:	bf38      	it	cc
 8006694:	250c      	movcc	r5, #12
 8006696:	2d00      	cmp	r5, #0
 8006698:	4607      	mov	r7, r0
 800669a:	db01      	blt.n	80066a0 <_malloc_r+0x1c>
 800669c:	42a9      	cmp	r1, r5
 800669e:	d905      	bls.n	80066ac <_malloc_r+0x28>
 80066a0:	230c      	movs	r3, #12
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	2600      	movs	r6, #0
 80066a6:	4630      	mov	r0, r6
 80066a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006780 <_malloc_r+0xfc>
 80066b0:	f000 f868 	bl	8006784 <__malloc_lock>
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	461c      	mov	r4, r3
 80066ba:	bb5c      	cbnz	r4, 8006714 <_malloc_r+0x90>
 80066bc:	4629      	mov	r1, r5
 80066be:	4638      	mov	r0, r7
 80066c0:	f7ff ffc0 	bl	8006644 <sbrk_aligned>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	4604      	mov	r4, r0
 80066c8:	d155      	bne.n	8006776 <_malloc_r+0xf2>
 80066ca:	f8d8 4000 	ldr.w	r4, [r8]
 80066ce:	4626      	mov	r6, r4
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	d145      	bne.n	8006760 <_malloc_r+0xdc>
 80066d4:	2c00      	cmp	r4, #0
 80066d6:	d048      	beq.n	800676a <_malloc_r+0xe6>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	4631      	mov	r1, r6
 80066dc:	4638      	mov	r0, r7
 80066de:	eb04 0903 	add.w	r9, r4, r3
 80066e2:	f000 fe5f 	bl	80073a4 <_sbrk_r>
 80066e6:	4581      	cmp	r9, r0
 80066e8:	d13f      	bne.n	800676a <_malloc_r+0xe6>
 80066ea:	6821      	ldr	r1, [r4, #0]
 80066ec:	1a6d      	subs	r5, r5, r1
 80066ee:	4629      	mov	r1, r5
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ffa7 	bl	8006644 <sbrk_aligned>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d037      	beq.n	800676a <_malloc_r+0xe6>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	442b      	add	r3, r5
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d038      	beq.n	800677a <_malloc_r+0xf6>
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	42a2      	cmp	r2, r4
 800670c:	d12b      	bne.n	8006766 <_malloc_r+0xe2>
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	e00f      	b.n	8006734 <_malloc_r+0xb0>
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	1b52      	subs	r2, r2, r5
 8006718:	d41f      	bmi.n	800675a <_malloc_r+0xd6>
 800671a:	2a0b      	cmp	r2, #11
 800671c:	d917      	bls.n	800674e <_malloc_r+0xca>
 800671e:	1961      	adds	r1, r4, r5
 8006720:	42a3      	cmp	r3, r4
 8006722:	6025      	str	r5, [r4, #0]
 8006724:	bf18      	it	ne
 8006726:	6059      	strne	r1, [r3, #4]
 8006728:	6863      	ldr	r3, [r4, #4]
 800672a:	bf08      	it	eq
 800672c:	f8c8 1000 	streq.w	r1, [r8]
 8006730:	5162      	str	r2, [r4, r5]
 8006732:	604b      	str	r3, [r1, #4]
 8006734:	4638      	mov	r0, r7
 8006736:	f104 060b 	add.w	r6, r4, #11
 800673a:	f000 f829 	bl	8006790 <__malloc_unlock>
 800673e:	f026 0607 	bic.w	r6, r6, #7
 8006742:	1d23      	adds	r3, r4, #4
 8006744:	1af2      	subs	r2, r6, r3
 8006746:	d0ae      	beq.n	80066a6 <_malloc_r+0x22>
 8006748:	1b9b      	subs	r3, r3, r6
 800674a:	50a3      	str	r3, [r4, r2]
 800674c:	e7ab      	b.n	80066a6 <_malloc_r+0x22>
 800674e:	42a3      	cmp	r3, r4
 8006750:	6862      	ldr	r2, [r4, #4]
 8006752:	d1dd      	bne.n	8006710 <_malloc_r+0x8c>
 8006754:	f8c8 2000 	str.w	r2, [r8]
 8006758:	e7ec      	b.n	8006734 <_malloc_r+0xb0>
 800675a:	4623      	mov	r3, r4
 800675c:	6864      	ldr	r4, [r4, #4]
 800675e:	e7ac      	b.n	80066ba <_malloc_r+0x36>
 8006760:	4634      	mov	r4, r6
 8006762:	6876      	ldr	r6, [r6, #4]
 8006764:	e7b4      	b.n	80066d0 <_malloc_r+0x4c>
 8006766:	4613      	mov	r3, r2
 8006768:	e7cc      	b.n	8006704 <_malloc_r+0x80>
 800676a:	230c      	movs	r3, #12
 800676c:	603b      	str	r3, [r7, #0]
 800676e:	4638      	mov	r0, r7
 8006770:	f000 f80e 	bl	8006790 <__malloc_unlock>
 8006774:	e797      	b.n	80066a6 <_malloc_r+0x22>
 8006776:	6025      	str	r5, [r4, #0]
 8006778:	e7dc      	b.n	8006734 <_malloc_r+0xb0>
 800677a:	605b      	str	r3, [r3, #4]
 800677c:	deff      	udf	#255	; 0xff
 800677e:	bf00      	nop
 8006780:	20000448 	.word	0x20000448

08006784 <__malloc_lock>:
 8006784:	4801      	ldr	r0, [pc, #4]	; (800678c <__malloc_lock+0x8>)
 8006786:	f7ff b88a 	b.w	800589e <__retarget_lock_acquire_recursive>
 800678a:	bf00      	nop
 800678c:	20000444 	.word	0x20000444

08006790 <__malloc_unlock>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__malloc_unlock+0x8>)
 8006792:	f7ff b885 	b.w	80058a0 <__retarget_lock_release_recursive>
 8006796:	bf00      	nop
 8006798:	20000444 	.word	0x20000444

0800679c <_Balloc>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	69c6      	ldr	r6, [r0, #28]
 80067a0:	4604      	mov	r4, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	b976      	cbnz	r6, 80067c4 <_Balloc+0x28>
 80067a6:	2010      	movs	r0, #16
 80067a8:	f7ff ff44 	bl	8006634 <malloc>
 80067ac:	4602      	mov	r2, r0
 80067ae:	61e0      	str	r0, [r4, #28]
 80067b0:	b920      	cbnz	r0, 80067bc <_Balloc+0x20>
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <_Balloc+0x78>)
 80067b4:	4818      	ldr	r0, [pc, #96]	; (8006818 <_Balloc+0x7c>)
 80067b6:	216b      	movs	r1, #107	; 0x6b
 80067b8:	f000 fe12 	bl	80073e0 <__assert_func>
 80067bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c0:	6006      	str	r6, [r0, #0]
 80067c2:	60c6      	str	r6, [r0, #12]
 80067c4:	69e6      	ldr	r6, [r4, #28]
 80067c6:	68f3      	ldr	r3, [r6, #12]
 80067c8:	b183      	cbz	r3, 80067ec <_Balloc+0x50>
 80067ca:	69e3      	ldr	r3, [r4, #28]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067d2:	b9b8      	cbnz	r0, 8006804 <_Balloc+0x68>
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f605 	lsl.w	r6, r1, r5
 80067da:	1d72      	adds	r2, r6, #5
 80067dc:	0092      	lsls	r2, r2, #2
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fe1c 	bl	800741c <_calloc_r>
 80067e4:	b160      	cbz	r0, 8006800 <_Balloc+0x64>
 80067e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ea:	e00e      	b.n	800680a <_Balloc+0x6e>
 80067ec:	2221      	movs	r2, #33	; 0x21
 80067ee:	2104      	movs	r1, #4
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fe13 	bl	800741c <_calloc_r>
 80067f6:	69e3      	ldr	r3, [r4, #28]
 80067f8:	60f0      	str	r0, [r6, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <_Balloc+0x2e>
 8006800:	2000      	movs	r0, #0
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	6802      	ldr	r2, [r0, #0]
 8006806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800680a:	2300      	movs	r3, #0
 800680c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006810:	e7f7      	b.n	8006802 <_Balloc+0x66>
 8006812:	bf00      	nop
 8006814:	080076f9 	.word	0x080076f9
 8006818:	08007779 	.word	0x08007779

0800681c <_Bfree>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	69c6      	ldr	r6, [r0, #28]
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b976      	cbnz	r6, 8006844 <_Bfree+0x28>
 8006826:	2010      	movs	r0, #16
 8006828:	f7ff ff04 	bl	8006634 <malloc>
 800682c:	4602      	mov	r2, r0
 800682e:	61e8      	str	r0, [r5, #28]
 8006830:	b920      	cbnz	r0, 800683c <_Bfree+0x20>
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <_Bfree+0x3c>)
 8006834:	4809      	ldr	r0, [pc, #36]	; (800685c <_Bfree+0x40>)
 8006836:	218f      	movs	r1, #143	; 0x8f
 8006838:	f000 fdd2 	bl	80073e0 <__assert_func>
 800683c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006840:	6006      	str	r6, [r0, #0]
 8006842:	60c6      	str	r6, [r0, #12]
 8006844:	b13c      	cbz	r4, 8006856 <_Bfree+0x3a>
 8006846:	69eb      	ldr	r3, [r5, #28]
 8006848:	6862      	ldr	r2, [r4, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006850:	6021      	str	r1, [r4, #0]
 8006852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	080076f9 	.word	0x080076f9
 800685c:	08007779 	.word	0x08007779

08006860 <__multadd>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	690d      	ldr	r5, [r1, #16]
 8006866:	4607      	mov	r7, r0
 8006868:	460c      	mov	r4, r1
 800686a:	461e      	mov	r6, r3
 800686c:	f101 0c14 	add.w	ip, r1, #20
 8006870:	2000      	movs	r0, #0
 8006872:	f8dc 3000 	ldr.w	r3, [ip]
 8006876:	b299      	uxth	r1, r3
 8006878:	fb02 6101 	mla	r1, r2, r1, r6
 800687c:	0c1e      	lsrs	r6, r3, #16
 800687e:	0c0b      	lsrs	r3, r1, #16
 8006880:	fb02 3306 	mla	r3, r2, r6, r3
 8006884:	b289      	uxth	r1, r1
 8006886:	3001      	adds	r0, #1
 8006888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800688c:	4285      	cmp	r5, r0
 800688e:	f84c 1b04 	str.w	r1, [ip], #4
 8006892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006896:	dcec      	bgt.n	8006872 <__multadd+0x12>
 8006898:	b30e      	cbz	r6, 80068de <__multadd+0x7e>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	42ab      	cmp	r3, r5
 800689e:	dc19      	bgt.n	80068d4 <__multadd+0x74>
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	4638      	mov	r0, r7
 80068a4:	3101      	adds	r1, #1
 80068a6:	f7ff ff79 	bl	800679c <_Balloc>
 80068aa:	4680      	mov	r8, r0
 80068ac:	b928      	cbnz	r0, 80068ba <__multadd+0x5a>
 80068ae:	4602      	mov	r2, r0
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <__multadd+0x84>)
 80068b2:	480d      	ldr	r0, [pc, #52]	; (80068e8 <__multadd+0x88>)
 80068b4:	21ba      	movs	r1, #186	; 0xba
 80068b6:	f000 fd93 	bl	80073e0 <__assert_func>
 80068ba:	6922      	ldr	r2, [r4, #16]
 80068bc:	3202      	adds	r2, #2
 80068be:	f104 010c 	add.w	r1, r4, #12
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	300c      	adds	r0, #12
 80068c6:	f000 fd7d 	bl	80073c4 <memcpy>
 80068ca:	4621      	mov	r1, r4
 80068cc:	4638      	mov	r0, r7
 80068ce:	f7ff ffa5 	bl	800681c <_Bfree>
 80068d2:	4644      	mov	r4, r8
 80068d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068d8:	3501      	adds	r5, #1
 80068da:	615e      	str	r6, [r3, #20]
 80068dc:	6125      	str	r5, [r4, #16]
 80068de:	4620      	mov	r0, r4
 80068e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e4:	08007768 	.word	0x08007768
 80068e8:	08007779 	.word	0x08007779

080068ec <__hi0bits>:
 80068ec:	0c03      	lsrs	r3, r0, #16
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	b9d3      	cbnz	r3, 8006928 <__hi0bits+0x3c>
 80068f2:	0400      	lsls	r0, r0, #16
 80068f4:	2310      	movs	r3, #16
 80068f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068fa:	bf04      	itt	eq
 80068fc:	0200      	lsleq	r0, r0, #8
 80068fe:	3308      	addeq	r3, #8
 8006900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006904:	bf04      	itt	eq
 8006906:	0100      	lsleq	r0, r0, #4
 8006908:	3304      	addeq	r3, #4
 800690a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800690e:	bf04      	itt	eq
 8006910:	0080      	lsleq	r0, r0, #2
 8006912:	3302      	addeq	r3, #2
 8006914:	2800      	cmp	r0, #0
 8006916:	db05      	blt.n	8006924 <__hi0bits+0x38>
 8006918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800691c:	f103 0301 	add.w	r3, r3, #1
 8006920:	bf08      	it	eq
 8006922:	2320      	moveq	r3, #32
 8006924:	4618      	mov	r0, r3
 8006926:	4770      	bx	lr
 8006928:	2300      	movs	r3, #0
 800692a:	e7e4      	b.n	80068f6 <__hi0bits+0xa>

0800692c <__lo0bits>:
 800692c:	6803      	ldr	r3, [r0, #0]
 800692e:	f013 0207 	ands.w	r2, r3, #7
 8006932:	d00c      	beq.n	800694e <__lo0bits+0x22>
 8006934:	07d9      	lsls	r1, r3, #31
 8006936:	d422      	bmi.n	800697e <__lo0bits+0x52>
 8006938:	079a      	lsls	r2, r3, #30
 800693a:	bf49      	itett	mi
 800693c:	085b      	lsrmi	r3, r3, #1
 800693e:	089b      	lsrpl	r3, r3, #2
 8006940:	6003      	strmi	r3, [r0, #0]
 8006942:	2201      	movmi	r2, #1
 8006944:	bf5c      	itt	pl
 8006946:	6003      	strpl	r3, [r0, #0]
 8006948:	2202      	movpl	r2, #2
 800694a:	4610      	mov	r0, r2
 800694c:	4770      	bx	lr
 800694e:	b299      	uxth	r1, r3
 8006950:	b909      	cbnz	r1, 8006956 <__lo0bits+0x2a>
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	2210      	movs	r2, #16
 8006956:	b2d9      	uxtb	r1, r3
 8006958:	b909      	cbnz	r1, 800695e <__lo0bits+0x32>
 800695a:	3208      	adds	r2, #8
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	0719      	lsls	r1, r3, #28
 8006960:	bf04      	itt	eq
 8006962:	091b      	lsreq	r3, r3, #4
 8006964:	3204      	addeq	r2, #4
 8006966:	0799      	lsls	r1, r3, #30
 8006968:	bf04      	itt	eq
 800696a:	089b      	lsreq	r3, r3, #2
 800696c:	3202      	addeq	r2, #2
 800696e:	07d9      	lsls	r1, r3, #31
 8006970:	d403      	bmi.n	800697a <__lo0bits+0x4e>
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	f102 0201 	add.w	r2, r2, #1
 8006978:	d003      	beq.n	8006982 <__lo0bits+0x56>
 800697a:	6003      	str	r3, [r0, #0]
 800697c:	e7e5      	b.n	800694a <__lo0bits+0x1e>
 800697e:	2200      	movs	r2, #0
 8006980:	e7e3      	b.n	800694a <__lo0bits+0x1e>
 8006982:	2220      	movs	r2, #32
 8006984:	e7e1      	b.n	800694a <__lo0bits+0x1e>
	...

08006988 <__i2b>:
 8006988:	b510      	push	{r4, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	2101      	movs	r1, #1
 800698e:	f7ff ff05 	bl	800679c <_Balloc>
 8006992:	4602      	mov	r2, r0
 8006994:	b928      	cbnz	r0, 80069a2 <__i2b+0x1a>
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <__i2b+0x24>)
 8006998:	4805      	ldr	r0, [pc, #20]	; (80069b0 <__i2b+0x28>)
 800699a:	f240 1145 	movw	r1, #325	; 0x145
 800699e:	f000 fd1f 	bl	80073e0 <__assert_func>
 80069a2:	2301      	movs	r3, #1
 80069a4:	6144      	str	r4, [r0, #20]
 80069a6:	6103      	str	r3, [r0, #16]
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	bf00      	nop
 80069ac:	08007768 	.word	0x08007768
 80069b0:	08007779 	.word	0x08007779

080069b4 <__multiply>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	4691      	mov	r9, r2
 80069ba:	690a      	ldr	r2, [r1, #16]
 80069bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	bfb8      	it	lt
 80069c4:	460b      	movlt	r3, r1
 80069c6:	460c      	mov	r4, r1
 80069c8:	bfbc      	itt	lt
 80069ca:	464c      	movlt	r4, r9
 80069cc:	4699      	movlt	r9, r3
 80069ce:	6927      	ldr	r7, [r4, #16]
 80069d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069d4:	68a3      	ldr	r3, [r4, #8]
 80069d6:	6861      	ldr	r1, [r4, #4]
 80069d8:	eb07 060a 	add.w	r6, r7, sl
 80069dc:	42b3      	cmp	r3, r6
 80069de:	b085      	sub	sp, #20
 80069e0:	bfb8      	it	lt
 80069e2:	3101      	addlt	r1, #1
 80069e4:	f7ff feda 	bl	800679c <_Balloc>
 80069e8:	b930      	cbnz	r0, 80069f8 <__multiply+0x44>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b44      	ldr	r3, [pc, #272]	; (8006b00 <__multiply+0x14c>)
 80069ee:	4845      	ldr	r0, [pc, #276]	; (8006b04 <__multiply+0x150>)
 80069f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069f4:	f000 fcf4 	bl	80073e0 <__assert_func>
 80069f8:	f100 0514 	add.w	r5, r0, #20
 80069fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a00:	462b      	mov	r3, r5
 8006a02:	2200      	movs	r2, #0
 8006a04:	4543      	cmp	r3, r8
 8006a06:	d321      	bcc.n	8006a4c <__multiply+0x98>
 8006a08:	f104 0314 	add.w	r3, r4, #20
 8006a0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a10:	f109 0314 	add.w	r3, r9, #20
 8006a14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a18:	9202      	str	r2, [sp, #8]
 8006a1a:	1b3a      	subs	r2, r7, r4
 8006a1c:	3a15      	subs	r2, #21
 8006a1e:	f022 0203 	bic.w	r2, r2, #3
 8006a22:	3204      	adds	r2, #4
 8006a24:	f104 0115 	add.w	r1, r4, #21
 8006a28:	428f      	cmp	r7, r1
 8006a2a:	bf38      	it	cc
 8006a2c:	2204      	movcc	r2, #4
 8006a2e:	9201      	str	r2, [sp, #4]
 8006a30:	9a02      	ldr	r2, [sp, #8]
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d80c      	bhi.n	8006a52 <__multiply+0x9e>
 8006a38:	2e00      	cmp	r6, #0
 8006a3a:	dd03      	ble.n	8006a44 <__multiply+0x90>
 8006a3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d05b      	beq.n	8006afc <__multiply+0x148>
 8006a44:	6106      	str	r6, [r0, #16]
 8006a46:	b005      	add	sp, #20
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	f843 2b04 	str.w	r2, [r3], #4
 8006a50:	e7d8      	b.n	8006a04 <__multiply+0x50>
 8006a52:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a56:	f1ba 0f00 	cmp.w	sl, #0
 8006a5a:	d024      	beq.n	8006aa6 <__multiply+0xf2>
 8006a5c:	f104 0e14 	add.w	lr, r4, #20
 8006a60:	46a9      	mov	r9, r5
 8006a62:	f04f 0c00 	mov.w	ip, #0
 8006a66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a6a:	f8d9 1000 	ldr.w	r1, [r9]
 8006a6e:	fa1f fb82 	uxth.w	fp, r2
 8006a72:	b289      	uxth	r1, r1
 8006a74:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006a80:	4461      	add	r1, ip
 8006a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a86:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a8e:	b289      	uxth	r1, r1
 8006a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a94:	4577      	cmp	r7, lr
 8006a96:	f849 1b04 	str.w	r1, [r9], #4
 8006a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a9e:	d8e2      	bhi.n	8006a66 <__multiply+0xb2>
 8006aa0:	9a01      	ldr	r2, [sp, #4]
 8006aa2:	f845 c002 	str.w	ip, [r5, r2]
 8006aa6:	9a03      	ldr	r2, [sp, #12]
 8006aa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aac:	3304      	adds	r3, #4
 8006aae:	f1b9 0f00 	cmp.w	r9, #0
 8006ab2:	d021      	beq.n	8006af8 <__multiply+0x144>
 8006ab4:	6829      	ldr	r1, [r5, #0]
 8006ab6:	f104 0c14 	add.w	ip, r4, #20
 8006aba:	46ae      	mov	lr, r5
 8006abc:	f04f 0a00 	mov.w	sl, #0
 8006ac0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ac8:	fb09 220b 	mla	r2, r9, fp, r2
 8006acc:	4452      	add	r2, sl
 8006ace:	b289      	uxth	r1, r1
 8006ad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ad4:	f84e 1b04 	str.w	r1, [lr], #4
 8006ad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006adc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ae0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ae4:	fb09 110a 	mla	r1, r9, sl, r1
 8006ae8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006aec:	4567      	cmp	r7, ip
 8006aee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006af2:	d8e5      	bhi.n	8006ac0 <__multiply+0x10c>
 8006af4:	9a01      	ldr	r2, [sp, #4]
 8006af6:	50a9      	str	r1, [r5, r2]
 8006af8:	3504      	adds	r5, #4
 8006afa:	e799      	b.n	8006a30 <__multiply+0x7c>
 8006afc:	3e01      	subs	r6, #1
 8006afe:	e79b      	b.n	8006a38 <__multiply+0x84>
 8006b00:	08007768 	.word	0x08007768
 8006b04:	08007779 	.word	0x08007779

08006b08 <__pow5mult>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	f012 0203 	ands.w	r2, r2, #3
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	d007      	beq.n	8006b28 <__pow5mult+0x20>
 8006b18:	4c25      	ldr	r4, [pc, #148]	; (8006bb0 <__pow5mult+0xa8>)
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b22:	f7ff fe9d 	bl	8006860 <__multadd>
 8006b26:	4607      	mov	r7, r0
 8006b28:	10ad      	asrs	r5, r5, #2
 8006b2a:	d03d      	beq.n	8006ba8 <__pow5mult+0xa0>
 8006b2c:	69f4      	ldr	r4, [r6, #28]
 8006b2e:	b97c      	cbnz	r4, 8006b50 <__pow5mult+0x48>
 8006b30:	2010      	movs	r0, #16
 8006b32:	f7ff fd7f 	bl	8006634 <malloc>
 8006b36:	4602      	mov	r2, r0
 8006b38:	61f0      	str	r0, [r6, #28]
 8006b3a:	b928      	cbnz	r0, 8006b48 <__pow5mult+0x40>
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <__pow5mult+0xac>)
 8006b3e:	481e      	ldr	r0, [pc, #120]	; (8006bb8 <__pow5mult+0xb0>)
 8006b40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b44:	f000 fc4c 	bl	80073e0 <__assert_func>
 8006b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b4c:	6004      	str	r4, [r0, #0]
 8006b4e:	60c4      	str	r4, [r0, #12]
 8006b50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b58:	b94c      	cbnz	r4, 8006b6e <__pow5mult+0x66>
 8006b5a:	f240 2171 	movw	r1, #625	; 0x271
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ff12 	bl	8006988 <__i2b>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	07eb      	lsls	r3, r5, #31
 8006b74:	d50a      	bpl.n	8006b8c <__pow5mult+0x84>
 8006b76:	4639      	mov	r1, r7
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff ff1a 	bl	80069b4 <__multiply>
 8006b80:	4639      	mov	r1, r7
 8006b82:	4680      	mov	r8, r0
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff fe49 	bl	800681c <_Bfree>
 8006b8a:	4647      	mov	r7, r8
 8006b8c:	106d      	asrs	r5, r5, #1
 8006b8e:	d00b      	beq.n	8006ba8 <__pow5mult+0xa0>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	b938      	cbnz	r0, 8006ba4 <__pow5mult+0x9c>
 8006b94:	4622      	mov	r2, r4
 8006b96:	4621      	mov	r1, r4
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff ff0b 	bl	80069b4 <__multiply>
 8006b9e:	6020      	str	r0, [r4, #0]
 8006ba0:	f8c0 9000 	str.w	r9, [r0]
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e7e4      	b.n	8006b72 <__pow5mult+0x6a>
 8006ba8:	4638      	mov	r0, r7
 8006baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bae:	bf00      	nop
 8006bb0:	080078c8 	.word	0x080078c8
 8006bb4:	080076f9 	.word	0x080076f9
 8006bb8:	08007779 	.word	0x08007779

08006bbc <__lshift>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6849      	ldr	r1, [r1, #4]
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	4607      	mov	r7, r0
 8006bce:	4691      	mov	r9, r2
 8006bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd4:	f108 0601 	add.w	r6, r8, #1
 8006bd8:	42b3      	cmp	r3, r6
 8006bda:	db0b      	blt.n	8006bf4 <__lshift+0x38>
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f7ff fddd 	bl	800679c <_Balloc>
 8006be2:	4605      	mov	r5, r0
 8006be4:	b948      	cbnz	r0, 8006bfa <__lshift+0x3e>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <__lshift+0xd0>)
 8006bea:	4829      	ldr	r0, [pc, #164]	; (8006c90 <__lshift+0xd4>)
 8006bec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bf0:	f000 fbf6 	bl	80073e0 <__assert_func>
 8006bf4:	3101      	adds	r1, #1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__lshift+0x1c>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f100 0114 	add.w	r1, r0, #20
 8006c00:	f100 0210 	add.w	r2, r0, #16
 8006c04:	4618      	mov	r0, r3
 8006c06:	4553      	cmp	r3, sl
 8006c08:	db33      	blt.n	8006c72 <__lshift+0xb6>
 8006c0a:	6920      	ldr	r0, [r4, #16]
 8006c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c10:	f104 0314 	add.w	r3, r4, #20
 8006c14:	f019 091f 	ands.w	r9, r9, #31
 8006c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c20:	d02b      	beq.n	8006c7a <__lshift+0xbe>
 8006c22:	f1c9 0e20 	rsb	lr, r9, #32
 8006c26:	468a      	mov	sl, r1
 8006c28:	2200      	movs	r2, #0
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c30:	4310      	orrs	r0, r2
 8006c32:	f84a 0b04 	str.w	r0, [sl], #4
 8006c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3a:	459c      	cmp	ip, r3
 8006c3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c40:	d8f3      	bhi.n	8006c2a <__lshift+0x6e>
 8006c42:	ebac 0304 	sub.w	r3, ip, r4
 8006c46:	3b15      	subs	r3, #21
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	f104 0015 	add.w	r0, r4, #21
 8006c52:	4584      	cmp	ip, r0
 8006c54:	bf38      	it	cc
 8006c56:	2304      	movcc	r3, #4
 8006c58:	50ca      	str	r2, [r1, r3]
 8006c5a:	b10a      	cbz	r2, 8006c60 <__lshift+0xa4>
 8006c5c:	f108 0602 	add.w	r6, r8, #2
 8006c60:	3e01      	subs	r6, #1
 8006c62:	4638      	mov	r0, r7
 8006c64:	612e      	str	r6, [r5, #16]
 8006c66:	4621      	mov	r1, r4
 8006c68:	f7ff fdd8 	bl	800681c <_Bfree>
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c76:	3301      	adds	r3, #1
 8006c78:	e7c5      	b.n	8006c06 <__lshift+0x4a>
 8006c7a:	3904      	subs	r1, #4
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c84:	459c      	cmp	ip, r3
 8006c86:	d8f9      	bhi.n	8006c7c <__lshift+0xc0>
 8006c88:	e7ea      	b.n	8006c60 <__lshift+0xa4>
 8006c8a:	bf00      	nop
 8006c8c:	08007768 	.word	0x08007768
 8006c90:	08007779 	.word	0x08007779

08006c94 <__mcmp>:
 8006c94:	b530      	push	{r4, r5, lr}
 8006c96:	6902      	ldr	r2, [r0, #16]
 8006c98:	690c      	ldr	r4, [r1, #16]
 8006c9a:	1b12      	subs	r2, r2, r4
 8006c9c:	d10e      	bne.n	8006cbc <__mcmp+0x28>
 8006c9e:	f100 0314 	add.w	r3, r0, #20
 8006ca2:	3114      	adds	r1, #20
 8006ca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006cac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006cb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006cb4:	42a5      	cmp	r5, r4
 8006cb6:	d003      	beq.n	8006cc0 <__mcmp+0x2c>
 8006cb8:	d305      	bcc.n	8006cc6 <__mcmp+0x32>
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	bd30      	pop	{r4, r5, pc}
 8006cc0:	4283      	cmp	r3, r0
 8006cc2:	d3f3      	bcc.n	8006cac <__mcmp+0x18>
 8006cc4:	e7fa      	b.n	8006cbc <__mcmp+0x28>
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	e7f7      	b.n	8006cbc <__mcmp+0x28>

08006ccc <__mdiff>:
 8006ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4690      	mov	r8, r2
 8006cda:	f7ff ffdb 	bl	8006c94 <__mcmp>
 8006cde:	1e05      	subs	r5, r0, #0
 8006ce0:	d110      	bne.n	8006d04 <__mdiff+0x38>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff fd59 	bl	800679c <_Balloc>
 8006cea:	b930      	cbnz	r0, 8006cfa <__mdiff+0x2e>
 8006cec:	4b3a      	ldr	r3, [pc, #232]	; (8006dd8 <__mdiff+0x10c>)
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f240 2137 	movw	r1, #567	; 0x237
 8006cf4:	4839      	ldr	r0, [pc, #228]	; (8006ddc <__mdiff+0x110>)
 8006cf6:	f000 fb73 	bl	80073e0 <__assert_func>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d04:	bfa4      	itt	ge
 8006d06:	4643      	movge	r3, r8
 8006d08:	46a0      	movge	r8, r4
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d10:	bfa6      	itte	ge
 8006d12:	461c      	movge	r4, r3
 8006d14:	2500      	movge	r5, #0
 8006d16:	2501      	movlt	r5, #1
 8006d18:	f7ff fd40 	bl	800679c <_Balloc>
 8006d1c:	b920      	cbnz	r0, 8006d28 <__mdiff+0x5c>
 8006d1e:	4b2e      	ldr	r3, [pc, #184]	; (8006dd8 <__mdiff+0x10c>)
 8006d20:	4602      	mov	r2, r0
 8006d22:	f240 2145 	movw	r1, #581	; 0x245
 8006d26:	e7e5      	b.n	8006cf4 <__mdiff+0x28>
 8006d28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d2c:	6926      	ldr	r6, [r4, #16]
 8006d2e:	60c5      	str	r5, [r0, #12]
 8006d30:	f104 0914 	add.w	r9, r4, #20
 8006d34:	f108 0514 	add.w	r5, r8, #20
 8006d38:	f100 0e14 	add.w	lr, r0, #20
 8006d3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d44:	f108 0210 	add.w	r2, r8, #16
 8006d48:	46f2      	mov	sl, lr
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d54:	fa11 f88b 	uxtah	r8, r1, fp
 8006d58:	b299      	uxth	r1, r3
 8006d5a:	0c1b      	lsrs	r3, r3, #16
 8006d5c:	eba8 0801 	sub.w	r8, r8, r1
 8006d60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d68:	fa1f f888 	uxth.w	r8, r8
 8006d6c:	1419      	asrs	r1, r3, #16
 8006d6e:	454e      	cmp	r6, r9
 8006d70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d74:	f84a 3b04 	str.w	r3, [sl], #4
 8006d78:	d8e8      	bhi.n	8006d4c <__mdiff+0x80>
 8006d7a:	1b33      	subs	r3, r6, r4
 8006d7c:	3b15      	subs	r3, #21
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	3304      	adds	r3, #4
 8006d84:	3415      	adds	r4, #21
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	bf38      	it	cc
 8006d8a:	2304      	movcc	r3, #4
 8006d8c:	441d      	add	r5, r3
 8006d8e:	4473      	add	r3, lr
 8006d90:	469e      	mov	lr, r3
 8006d92:	462e      	mov	r6, r5
 8006d94:	4566      	cmp	r6, ip
 8006d96:	d30e      	bcc.n	8006db6 <__mdiff+0xea>
 8006d98:	f10c 0203 	add.w	r2, ip, #3
 8006d9c:	1b52      	subs	r2, r2, r5
 8006d9e:	f022 0203 	bic.w	r2, r2, #3
 8006da2:	3d03      	subs	r5, #3
 8006da4:	45ac      	cmp	ip, r5
 8006da6:	bf38      	it	cc
 8006da8:	2200      	movcc	r2, #0
 8006daa:	4413      	add	r3, r2
 8006dac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006db0:	b17a      	cbz	r2, 8006dd2 <__mdiff+0x106>
 8006db2:	6107      	str	r7, [r0, #16]
 8006db4:	e7a4      	b.n	8006d00 <__mdiff+0x34>
 8006db6:	f856 8b04 	ldr.w	r8, [r6], #4
 8006dba:	fa11 f288 	uxtah	r2, r1, r8
 8006dbe:	1414      	asrs	r4, r2, #16
 8006dc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006dc4:	b292      	uxth	r2, r2
 8006dc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006dca:	f84e 2b04 	str.w	r2, [lr], #4
 8006dce:	1421      	asrs	r1, r4, #16
 8006dd0:	e7e0      	b.n	8006d94 <__mdiff+0xc8>
 8006dd2:	3f01      	subs	r7, #1
 8006dd4:	e7ea      	b.n	8006dac <__mdiff+0xe0>
 8006dd6:	bf00      	nop
 8006dd8:	08007768 	.word	0x08007768
 8006ddc:	08007779 	.word	0x08007779

08006de0 <__d2b>:
 8006de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006de4:	460f      	mov	r7, r1
 8006de6:	2101      	movs	r1, #1
 8006de8:	ec59 8b10 	vmov	r8, r9, d0
 8006dec:	4616      	mov	r6, r2
 8006dee:	f7ff fcd5 	bl	800679c <_Balloc>
 8006df2:	4604      	mov	r4, r0
 8006df4:	b930      	cbnz	r0, 8006e04 <__d2b+0x24>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <__d2b+0xac>)
 8006dfa:	4825      	ldr	r0, [pc, #148]	; (8006e90 <__d2b+0xb0>)
 8006dfc:	f240 310f 	movw	r1, #783	; 0x30f
 8006e00:	f000 faee 	bl	80073e0 <__assert_func>
 8006e04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e0c:	bb2d      	cbnz	r5, 8006e5a <__d2b+0x7a>
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	f1b8 0300 	subs.w	r3, r8, #0
 8006e14:	d026      	beq.n	8006e64 <__d2b+0x84>
 8006e16:	4668      	mov	r0, sp
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	f7ff fd87 	bl	800692c <__lo0bits>
 8006e1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e22:	b1e8      	cbz	r0, 8006e60 <__d2b+0x80>
 8006e24:	f1c0 0320 	rsb	r3, r0, #32
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	40c2      	lsrs	r2, r0
 8006e30:	6163      	str	r3, [r4, #20]
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	61a3      	str	r3, [r4, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bf14      	ite	ne
 8006e3c:	2202      	movne	r2, #2
 8006e3e:	2201      	moveq	r2, #1
 8006e40:	6122      	str	r2, [r4, #16]
 8006e42:	b1bd      	cbz	r5, 8006e74 <__d2b+0x94>
 8006e44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e48:	4405      	add	r5, r0
 8006e4a:	603d      	str	r5, [r7, #0]
 8006e4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	4620      	mov	r0, r4
 8006e54:	b003      	add	sp, #12
 8006e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e5e:	e7d6      	b.n	8006e0e <__d2b+0x2e>
 8006e60:	6161      	str	r1, [r4, #20]
 8006e62:	e7e7      	b.n	8006e34 <__d2b+0x54>
 8006e64:	a801      	add	r0, sp, #4
 8006e66:	f7ff fd61 	bl	800692c <__lo0bits>
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	3020      	adds	r0, #32
 8006e70:	2201      	movs	r2, #1
 8006e72:	e7e5      	b.n	8006e40 <__d2b+0x60>
 8006e74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e7c:	6038      	str	r0, [r7, #0]
 8006e7e:	6918      	ldr	r0, [r3, #16]
 8006e80:	f7ff fd34 	bl	80068ec <__hi0bits>
 8006e84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e88:	e7e2      	b.n	8006e50 <__d2b+0x70>
 8006e8a:	bf00      	nop
 8006e8c:	08007768 	.word	0x08007768
 8006e90:	08007779 	.word	0x08007779

08006e94 <__sfputc_r>:
 8006e94:	6893      	ldr	r3, [r2, #8]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	b410      	push	{r4}
 8006e9c:	6093      	str	r3, [r2, #8]
 8006e9e:	da08      	bge.n	8006eb2 <__sfputc_r+0x1e>
 8006ea0:	6994      	ldr	r4, [r2, #24]
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	db01      	blt.n	8006eaa <__sfputc_r+0x16>
 8006ea6:	290a      	cmp	r1, #10
 8006ea8:	d103      	bne.n	8006eb2 <__sfputc_r+0x1e>
 8006eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eae:	f000 b9e3 	b.w	8007278 <__swbuf_r>
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	1c58      	adds	r0, r3, #1
 8006eb6:	6010      	str	r0, [r2, #0]
 8006eb8:	7019      	strb	r1, [r3, #0]
 8006eba:	4608      	mov	r0, r1
 8006ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <__sfputs_r>:
 8006ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460f      	mov	r7, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	18d5      	adds	r5, r2, r3
 8006ecc:	42ac      	cmp	r4, r5
 8006ece:	d101      	bne.n	8006ed4 <__sfputs_r+0x12>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e007      	b.n	8006ee4 <__sfputs_r+0x22>
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	463a      	mov	r2, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff ffda 	bl	8006e94 <__sfputc_r>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d1f3      	bne.n	8006ecc <__sfputs_r+0xa>
 8006ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ee8 <_vfiprintf_r>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	460d      	mov	r5, r1
 8006eee:	b09d      	sub	sp, #116	; 0x74
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	4698      	mov	r8, r3
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	b118      	cbz	r0, 8006f00 <_vfiprintf_r+0x18>
 8006ef8:	6a03      	ldr	r3, [r0, #32]
 8006efa:	b90b      	cbnz	r3, 8006f00 <_vfiprintf_r+0x18>
 8006efc:	f7fe fbc6 	bl	800568c <__sinit>
 8006f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f02:	07d9      	lsls	r1, r3, #31
 8006f04:	d405      	bmi.n	8006f12 <_vfiprintf_r+0x2a>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	059a      	lsls	r2, r3, #22
 8006f0a:	d402      	bmi.n	8006f12 <_vfiprintf_r+0x2a>
 8006f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0e:	f7fe fcc6 	bl	800589e <__retarget_lock_acquire_recursive>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	071b      	lsls	r3, r3, #28
 8006f16:	d501      	bpl.n	8006f1c <_vfiprintf_r+0x34>
 8006f18:	692b      	ldr	r3, [r5, #16]
 8006f1a:	b99b      	cbnz	r3, 8006f44 <_vfiprintf_r+0x5c>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f9e8 	bl	80072f4 <__swsetup_r>
 8006f24:	b170      	cbz	r0, 8006f44 <_vfiprintf_r+0x5c>
 8006f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f28:	07dc      	lsls	r4, r3, #31
 8006f2a:	d504      	bpl.n	8006f36 <_vfiprintf_r+0x4e>
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	b01d      	add	sp, #116	; 0x74
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	89ab      	ldrh	r3, [r5, #12]
 8006f38:	0598      	lsls	r0, r3, #22
 8006f3a:	d4f7      	bmi.n	8006f2c <_vfiprintf_r+0x44>
 8006f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f3e:	f7fe fcaf 	bl	80058a0 <__retarget_lock_release_recursive>
 8006f42:	e7f3      	b.n	8006f2c <_vfiprintf_r+0x44>
 8006f44:	2300      	movs	r3, #0
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
 8006f48:	2320      	movs	r3, #32
 8006f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f52:	2330      	movs	r3, #48	; 0x30
 8006f54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007108 <_vfiprintf_r+0x220>
 8006f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f5c:	f04f 0901 	mov.w	r9, #1
 8006f60:	4623      	mov	r3, r4
 8006f62:	469a      	mov	sl, r3
 8006f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f68:	b10a      	cbz	r2, 8006f6e <_vfiprintf_r+0x86>
 8006f6a:	2a25      	cmp	r2, #37	; 0x25
 8006f6c:	d1f9      	bne.n	8006f62 <_vfiprintf_r+0x7a>
 8006f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f72:	d00b      	beq.n	8006f8c <_vfiprintf_r+0xa4>
 8006f74:	465b      	mov	r3, fp
 8006f76:	4622      	mov	r2, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff ffa1 	bl	8006ec2 <__sfputs_r>
 8006f80:	3001      	adds	r0, #1
 8006f82:	f000 80a9 	beq.w	80070d8 <_vfiprintf_r+0x1f0>
 8006f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f88:	445a      	add	r2, fp
 8006f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80a1 	beq.w	80070d8 <_vfiprintf_r+0x1f0>
 8006f96:	2300      	movs	r3, #0
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa0:	f10a 0a01 	add.w	sl, sl, #1
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	9307      	str	r3, [sp, #28]
 8006fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fac:	931a      	str	r3, [sp, #104]	; 0x68
 8006fae:	4654      	mov	r4, sl
 8006fb0:	2205      	movs	r2, #5
 8006fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb6:	4854      	ldr	r0, [pc, #336]	; (8007108 <_vfiprintf_r+0x220>)
 8006fb8:	f7f9 f90a 	bl	80001d0 <memchr>
 8006fbc:	9a04      	ldr	r2, [sp, #16]
 8006fbe:	b9d8      	cbnz	r0, 8006ff8 <_vfiprintf_r+0x110>
 8006fc0:	06d1      	lsls	r1, r2, #27
 8006fc2:	bf44      	itt	mi
 8006fc4:	2320      	movmi	r3, #32
 8006fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fca:	0713      	lsls	r3, r2, #28
 8006fcc:	bf44      	itt	mi
 8006fce:	232b      	movmi	r3, #43	; 0x2b
 8006fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fda:	d015      	beq.n	8007008 <_vfiprintf_r+0x120>
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	4654      	mov	r4, sl
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	f04f 0c0a 	mov.w	ip, #10
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fec:	3b30      	subs	r3, #48	; 0x30
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d94d      	bls.n	800708e <_vfiprintf_r+0x1a6>
 8006ff2:	b1b0      	cbz	r0, 8007022 <_vfiprintf_r+0x13a>
 8006ff4:	9207      	str	r2, [sp, #28]
 8006ff6:	e014      	b.n	8007022 <_vfiprintf_r+0x13a>
 8006ff8:	eba0 0308 	sub.w	r3, r0, r8
 8006ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8007000:	4313      	orrs	r3, r2
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	46a2      	mov	sl, r4
 8007006:	e7d2      	b.n	8006fae <_vfiprintf_r+0xc6>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	1d19      	adds	r1, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	9103      	str	r1, [sp, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfbb      	ittet	lt
 8007014:	425b      	neglt	r3, r3
 8007016:	f042 0202 	orrlt.w	r2, r2, #2
 800701a:	9307      	strge	r3, [sp, #28]
 800701c:	9307      	strlt	r3, [sp, #28]
 800701e:	bfb8      	it	lt
 8007020:	9204      	strlt	r2, [sp, #16]
 8007022:	7823      	ldrb	r3, [r4, #0]
 8007024:	2b2e      	cmp	r3, #46	; 0x2e
 8007026:	d10c      	bne.n	8007042 <_vfiprintf_r+0x15a>
 8007028:	7863      	ldrb	r3, [r4, #1]
 800702a:	2b2a      	cmp	r3, #42	; 0x2a
 800702c:	d134      	bne.n	8007098 <_vfiprintf_r+0x1b0>
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	9203      	str	r2, [sp, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfb8      	it	lt
 800703a:	f04f 33ff 	movlt.w	r3, #4294967295
 800703e:	3402      	adds	r4, #2
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007118 <_vfiprintf_r+0x230>
 8007046:	7821      	ldrb	r1, [r4, #0]
 8007048:	2203      	movs	r2, #3
 800704a:	4650      	mov	r0, sl
 800704c:	f7f9 f8c0 	bl	80001d0 <memchr>
 8007050:	b138      	cbz	r0, 8007062 <_vfiprintf_r+0x17a>
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	eba0 000a 	sub.w	r0, r0, sl
 8007058:	2240      	movs	r2, #64	; 0x40
 800705a:	4082      	lsls	r2, r0
 800705c:	4313      	orrs	r3, r2
 800705e:	3401      	adds	r4, #1
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007066:	4829      	ldr	r0, [pc, #164]	; (800710c <_vfiprintf_r+0x224>)
 8007068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800706c:	2206      	movs	r2, #6
 800706e:	f7f9 f8af 	bl	80001d0 <memchr>
 8007072:	2800      	cmp	r0, #0
 8007074:	d03f      	beq.n	80070f6 <_vfiprintf_r+0x20e>
 8007076:	4b26      	ldr	r3, [pc, #152]	; (8007110 <_vfiprintf_r+0x228>)
 8007078:	bb1b      	cbnz	r3, 80070c2 <_vfiprintf_r+0x1da>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	3307      	adds	r3, #7
 800707e:	f023 0307 	bic.w	r3, r3, #7
 8007082:	3308      	adds	r3, #8
 8007084:	9303      	str	r3, [sp, #12]
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	443b      	add	r3, r7
 800708a:	9309      	str	r3, [sp, #36]	; 0x24
 800708c:	e768      	b.n	8006f60 <_vfiprintf_r+0x78>
 800708e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007092:	460c      	mov	r4, r1
 8007094:	2001      	movs	r0, #1
 8007096:	e7a6      	b.n	8006fe6 <_vfiprintf_r+0xfe>
 8007098:	2300      	movs	r3, #0
 800709a:	3401      	adds	r4, #1
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	4619      	mov	r1, r3
 80070a0:	f04f 0c0a 	mov.w	ip, #10
 80070a4:	4620      	mov	r0, r4
 80070a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070aa:	3a30      	subs	r2, #48	; 0x30
 80070ac:	2a09      	cmp	r2, #9
 80070ae:	d903      	bls.n	80070b8 <_vfiprintf_r+0x1d0>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0c6      	beq.n	8007042 <_vfiprintf_r+0x15a>
 80070b4:	9105      	str	r1, [sp, #20]
 80070b6:	e7c4      	b.n	8007042 <_vfiprintf_r+0x15a>
 80070b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070bc:	4604      	mov	r4, r0
 80070be:	2301      	movs	r3, #1
 80070c0:	e7f0      	b.n	80070a4 <_vfiprintf_r+0x1bc>
 80070c2:	ab03      	add	r3, sp, #12
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	462a      	mov	r2, r5
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <_vfiprintf_r+0x22c>)
 80070ca:	a904      	add	r1, sp, #16
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7fd fe8b 	bl	8004de8 <_printf_float>
 80070d2:	4607      	mov	r7, r0
 80070d4:	1c78      	adds	r0, r7, #1
 80070d6:	d1d6      	bne.n	8007086 <_vfiprintf_r+0x19e>
 80070d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	d405      	bmi.n	80070ea <_vfiprintf_r+0x202>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	059a      	lsls	r2, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_vfiprintf_r+0x202>
 80070e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e6:	f7fe fbdb 	bl	80058a0 <__retarget_lock_release_recursive>
 80070ea:	89ab      	ldrh	r3, [r5, #12]
 80070ec:	065b      	lsls	r3, r3, #25
 80070ee:	f53f af1d 	bmi.w	8006f2c <_vfiprintf_r+0x44>
 80070f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070f4:	e71c      	b.n	8006f30 <_vfiprintf_r+0x48>
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	462a      	mov	r2, r5
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <_vfiprintf_r+0x22c>)
 80070fe:	a904      	add	r1, sp, #16
 8007100:	4630      	mov	r0, r6
 8007102:	f7fe f915 	bl	8005330 <_printf_i>
 8007106:	e7e4      	b.n	80070d2 <_vfiprintf_r+0x1ea>
 8007108:	080078d4 	.word	0x080078d4
 800710c:	080078de 	.word	0x080078de
 8007110:	08004de9 	.word	0x08004de9
 8007114:	08006ec3 	.word	0x08006ec3
 8007118:	080078da 	.word	0x080078da

0800711c <__sflush_r>:
 800711c:	898a      	ldrh	r2, [r1, #12]
 800711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007122:	4605      	mov	r5, r0
 8007124:	0710      	lsls	r0, r2, #28
 8007126:	460c      	mov	r4, r1
 8007128:	d458      	bmi.n	80071dc <__sflush_r+0xc0>
 800712a:	684b      	ldr	r3, [r1, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc05      	bgt.n	800713c <__sflush_r+0x20>
 8007130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	dc02      	bgt.n	800713c <__sflush_r+0x20>
 8007136:	2000      	movs	r0, #0
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800713e:	2e00      	cmp	r6, #0
 8007140:	d0f9      	beq.n	8007136 <__sflush_r+0x1a>
 8007142:	2300      	movs	r3, #0
 8007144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007148:	682f      	ldr	r7, [r5, #0]
 800714a:	6a21      	ldr	r1, [r4, #32]
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	d032      	beq.n	80071b6 <__sflush_r+0x9a>
 8007150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	075a      	lsls	r2, r3, #29
 8007156:	d505      	bpl.n	8007164 <__sflush_r+0x48>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	1ac0      	subs	r0, r0, r3
 800715c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800715e:	b10b      	cbz	r3, 8007164 <__sflush_r+0x48>
 8007160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007162:	1ac0      	subs	r0, r0, r3
 8007164:	2300      	movs	r3, #0
 8007166:	4602      	mov	r2, r0
 8007168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800716a:	6a21      	ldr	r1, [r4, #32]
 800716c:	4628      	mov	r0, r5
 800716e:	47b0      	blx	r6
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	d106      	bne.n	8007184 <__sflush_r+0x68>
 8007176:	6829      	ldr	r1, [r5, #0]
 8007178:	291d      	cmp	r1, #29
 800717a:	d82b      	bhi.n	80071d4 <__sflush_r+0xb8>
 800717c:	4a29      	ldr	r2, [pc, #164]	; (8007224 <__sflush_r+0x108>)
 800717e:	410a      	asrs	r2, r1
 8007180:	07d6      	lsls	r6, r2, #31
 8007182:	d427      	bmi.n	80071d4 <__sflush_r+0xb8>
 8007184:	2200      	movs	r2, #0
 8007186:	6062      	str	r2, [r4, #4]
 8007188:	04d9      	lsls	r1, r3, #19
 800718a:	6922      	ldr	r2, [r4, #16]
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	d504      	bpl.n	800719a <__sflush_r+0x7e>
 8007190:	1c42      	adds	r2, r0, #1
 8007192:	d101      	bne.n	8007198 <__sflush_r+0x7c>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b903      	cbnz	r3, 800719a <__sflush_r+0x7e>
 8007198:	6560      	str	r0, [r4, #84]	; 0x54
 800719a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800719c:	602f      	str	r7, [r5, #0]
 800719e:	2900      	cmp	r1, #0
 80071a0:	d0c9      	beq.n	8007136 <__sflush_r+0x1a>
 80071a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d002      	beq.n	80071b0 <__sflush_r+0x94>
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7ff f9f6 	bl	800659c <_free_r>
 80071b0:	2000      	movs	r0, #0
 80071b2:	6360      	str	r0, [r4, #52]	; 0x34
 80071b4:	e7c0      	b.n	8007138 <__sflush_r+0x1c>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b0      	blx	r6
 80071bc:	1c41      	adds	r1, r0, #1
 80071be:	d1c8      	bne.n	8007152 <__sflush_r+0x36>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0c5      	beq.n	8007152 <__sflush_r+0x36>
 80071c6:	2b1d      	cmp	r3, #29
 80071c8:	d001      	beq.n	80071ce <__sflush_r+0xb2>
 80071ca:	2b16      	cmp	r3, #22
 80071cc:	d101      	bne.n	80071d2 <__sflush_r+0xb6>
 80071ce:	602f      	str	r7, [r5, #0]
 80071d0:	e7b1      	b.n	8007136 <__sflush_r+0x1a>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	e7ad      	b.n	8007138 <__sflush_r+0x1c>
 80071dc:	690f      	ldr	r7, [r1, #16]
 80071de:	2f00      	cmp	r7, #0
 80071e0:	d0a9      	beq.n	8007136 <__sflush_r+0x1a>
 80071e2:	0793      	lsls	r3, r2, #30
 80071e4:	680e      	ldr	r6, [r1, #0]
 80071e6:	bf08      	it	eq
 80071e8:	694b      	ldreq	r3, [r1, #20]
 80071ea:	600f      	str	r7, [r1, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2300      	movne	r3, #0
 80071f0:	eba6 0807 	sub.w	r8, r6, r7
 80071f4:	608b      	str	r3, [r1, #8]
 80071f6:	f1b8 0f00 	cmp.w	r8, #0
 80071fa:	dd9c      	ble.n	8007136 <__sflush_r+0x1a>
 80071fc:	6a21      	ldr	r1, [r4, #32]
 80071fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007200:	4643      	mov	r3, r8
 8007202:	463a      	mov	r2, r7
 8007204:	4628      	mov	r0, r5
 8007206:	47b0      	blx	r6
 8007208:	2800      	cmp	r0, #0
 800720a:	dc06      	bgt.n	800721a <__sflush_r+0xfe>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e78e      	b.n	8007138 <__sflush_r+0x1c>
 800721a:	4407      	add	r7, r0
 800721c:	eba8 0800 	sub.w	r8, r8, r0
 8007220:	e7e9      	b.n	80071f6 <__sflush_r+0xda>
 8007222:	bf00      	nop
 8007224:	dfbffffe 	.word	0xdfbffffe

08007228 <_fflush_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	690b      	ldr	r3, [r1, #16]
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b913      	cbnz	r3, 8007238 <_fflush_r+0x10>
 8007232:	2500      	movs	r5, #0
 8007234:	4628      	mov	r0, r5
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	b118      	cbz	r0, 8007242 <_fflush_r+0x1a>
 800723a:	6a03      	ldr	r3, [r0, #32]
 800723c:	b90b      	cbnz	r3, 8007242 <_fflush_r+0x1a>
 800723e:	f7fe fa25 	bl	800568c <__sinit>
 8007242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f3      	beq.n	8007232 <_fflush_r+0xa>
 800724a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800724c:	07d0      	lsls	r0, r2, #31
 800724e:	d404      	bmi.n	800725a <_fflush_r+0x32>
 8007250:	0599      	lsls	r1, r3, #22
 8007252:	d402      	bmi.n	800725a <_fflush_r+0x32>
 8007254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007256:	f7fe fb22 	bl	800589e <__retarget_lock_acquire_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	4621      	mov	r1, r4
 800725e:	f7ff ff5d 	bl	800711c <__sflush_r>
 8007262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007264:	07da      	lsls	r2, r3, #31
 8007266:	4605      	mov	r5, r0
 8007268:	d4e4      	bmi.n	8007234 <_fflush_r+0xc>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	059b      	lsls	r3, r3, #22
 800726e:	d4e1      	bmi.n	8007234 <_fflush_r+0xc>
 8007270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007272:	f7fe fb15 	bl	80058a0 <__retarget_lock_release_recursive>
 8007276:	e7dd      	b.n	8007234 <_fflush_r+0xc>

08007278 <__swbuf_r>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	460e      	mov	r6, r1
 800727c:	4614      	mov	r4, r2
 800727e:	4605      	mov	r5, r0
 8007280:	b118      	cbz	r0, 800728a <__swbuf_r+0x12>
 8007282:	6a03      	ldr	r3, [r0, #32]
 8007284:	b90b      	cbnz	r3, 800728a <__swbuf_r+0x12>
 8007286:	f7fe fa01 	bl	800568c <__sinit>
 800728a:	69a3      	ldr	r3, [r4, #24]
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	071a      	lsls	r2, r3, #28
 8007292:	d525      	bpl.n	80072e0 <__swbuf_r+0x68>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	b31b      	cbz	r3, 80072e0 <__swbuf_r+0x68>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	1a98      	subs	r0, r3, r2
 800729e:	6963      	ldr	r3, [r4, #20]
 80072a0:	b2f6      	uxtb	r6, r6
 80072a2:	4283      	cmp	r3, r0
 80072a4:	4637      	mov	r7, r6
 80072a6:	dc04      	bgt.n	80072b2 <__swbuf_r+0x3a>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7ff ffbc 	bl	8007228 <_fflush_r>
 80072b0:	b9e0      	cbnz	r0, 80072ec <__swbuf_r+0x74>
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	60a3      	str	r3, [r4, #8]
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	6022      	str	r2, [r4, #0]
 80072be:	701e      	strb	r6, [r3, #0]
 80072c0:	6962      	ldr	r2, [r4, #20]
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d004      	beq.n	80072d2 <__swbuf_r+0x5a>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	07db      	lsls	r3, r3, #31
 80072cc:	d506      	bpl.n	80072dc <__swbuf_r+0x64>
 80072ce:	2e0a      	cmp	r6, #10
 80072d0:	d104      	bne.n	80072dc <__swbuf_r+0x64>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f7ff ffa7 	bl	8007228 <_fflush_r>
 80072da:	b938      	cbnz	r0, 80072ec <__swbuf_r+0x74>
 80072dc:	4638      	mov	r0, r7
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 f806 	bl	80072f4 <__swsetup_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d0d5      	beq.n	8007298 <__swbuf_r+0x20>
 80072ec:	f04f 37ff 	mov.w	r7, #4294967295
 80072f0:	e7f4      	b.n	80072dc <__swbuf_r+0x64>
	...

080072f4 <__swsetup_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <__swsetup_r+0xac>)
 80072f8:	4605      	mov	r5, r0
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	460c      	mov	r4, r1
 80072fe:	b118      	cbz	r0, 8007308 <__swsetup_r+0x14>
 8007300:	6a03      	ldr	r3, [r0, #32]
 8007302:	b90b      	cbnz	r3, 8007308 <__swsetup_r+0x14>
 8007304:	f7fe f9c2 	bl	800568c <__sinit>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800730e:	0718      	lsls	r0, r3, #28
 8007310:	d422      	bmi.n	8007358 <__swsetup_r+0x64>
 8007312:	06d9      	lsls	r1, r3, #27
 8007314:	d407      	bmi.n	8007326 <__swsetup_r+0x32>
 8007316:	2309      	movs	r3, #9
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	e034      	b.n	8007390 <__swsetup_r+0x9c>
 8007326:	0758      	lsls	r0, r3, #29
 8007328:	d512      	bpl.n	8007350 <__swsetup_r+0x5c>
 800732a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732c:	b141      	cbz	r1, 8007340 <__swsetup_r+0x4c>
 800732e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007332:	4299      	cmp	r1, r3
 8007334:	d002      	beq.n	800733c <__swsetup_r+0x48>
 8007336:	4628      	mov	r0, r5
 8007338:	f7ff f930 	bl	800659c <_free_r>
 800733c:	2300      	movs	r3, #0
 800733e:	6363      	str	r3, [r4, #52]	; 0x34
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	2300      	movs	r3, #0
 800734a:	6063      	str	r3, [r4, #4]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	f043 0308 	orr.w	r3, r3, #8
 8007356:	81a3      	strh	r3, [r4, #12]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	b94b      	cbnz	r3, 8007370 <__swsetup_r+0x7c>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007366:	d003      	beq.n	8007370 <__swsetup_r+0x7c>
 8007368:	4621      	mov	r1, r4
 800736a:	4628      	mov	r0, r5
 800736c:	f000 f8c4 	bl	80074f8 <__smakebuf_r>
 8007370:	89a0      	ldrh	r0, [r4, #12]
 8007372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007376:	f010 0301 	ands.w	r3, r0, #1
 800737a:	d00a      	beq.n	8007392 <__swsetup_r+0x9e>
 800737c:	2300      	movs	r3, #0
 800737e:	60a3      	str	r3, [r4, #8]
 8007380:	6963      	ldr	r3, [r4, #20]
 8007382:	425b      	negs	r3, r3
 8007384:	61a3      	str	r3, [r4, #24]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b943      	cbnz	r3, 800739c <__swsetup_r+0xa8>
 800738a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800738e:	d1c4      	bne.n	800731a <__swsetup_r+0x26>
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	0781      	lsls	r1, r0, #30
 8007394:	bf58      	it	pl
 8007396:	6963      	ldrpl	r3, [r4, #20]
 8007398:	60a3      	str	r3, [r4, #8]
 800739a:	e7f4      	b.n	8007386 <__swsetup_r+0x92>
 800739c:	2000      	movs	r0, #0
 800739e:	e7f7      	b.n	8007390 <__swsetup_r+0x9c>
 80073a0:	20000074 	.word	0x20000074

080073a4 <_sbrk_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d06      	ldr	r5, [pc, #24]	; (80073c0 <_sbrk_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7f9 ff36 	bl	8001220 <_sbrk>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_sbrk_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_sbrk_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000440 	.word	0x20000440

080073c4 <memcpy>:
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073cc:	d100      	bne.n	80073d0 <memcpy+0xc>
 80073ce:	4770      	bx	lr
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073da:	4291      	cmp	r1, r2
 80073dc:	d1f9      	bne.n	80073d2 <memcpy+0xe>
 80073de:	bd10      	pop	{r4, pc}

080073e0 <__assert_func>:
 80073e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073e2:	4614      	mov	r4, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <__assert_func+0x2c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4605      	mov	r5, r0
 80073ec:	68d8      	ldr	r0, [r3, #12]
 80073ee:	b14c      	cbz	r4, 8007404 <__assert_func+0x24>
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <__assert_func+0x30>)
 80073f2:	9100      	str	r1, [sp, #0]
 80073f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073f8:	4906      	ldr	r1, [pc, #24]	; (8007414 <__assert_func+0x34>)
 80073fa:	462b      	mov	r3, r5
 80073fc:	f000 f844 	bl	8007488 <fiprintf>
 8007400:	f000 f8d8 	bl	80075b4 <abort>
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <__assert_func+0x38>)
 8007406:	461c      	mov	r4, r3
 8007408:	e7f3      	b.n	80073f2 <__assert_func+0x12>
 800740a:	bf00      	nop
 800740c:	20000074 	.word	0x20000074
 8007410:	080078ef 	.word	0x080078ef
 8007414:	080078fc 	.word	0x080078fc
 8007418:	0800792a 	.word	0x0800792a

0800741c <_calloc_r>:
 800741c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800741e:	fba1 2402 	umull	r2, r4, r1, r2
 8007422:	b94c      	cbnz	r4, 8007438 <_calloc_r+0x1c>
 8007424:	4611      	mov	r1, r2
 8007426:	9201      	str	r2, [sp, #4]
 8007428:	f7ff f92c 	bl	8006684 <_malloc_r>
 800742c:	9a01      	ldr	r2, [sp, #4]
 800742e:	4605      	mov	r5, r0
 8007430:	b930      	cbnz	r0, 8007440 <_calloc_r+0x24>
 8007432:	4628      	mov	r0, r5
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	220c      	movs	r2, #12
 800743a:	6002      	str	r2, [r0, #0]
 800743c:	2500      	movs	r5, #0
 800743e:	e7f8      	b.n	8007432 <_calloc_r+0x16>
 8007440:	4621      	mov	r1, r4
 8007442:	f7fe f9ae 	bl	80057a2 <memset>
 8007446:	e7f4      	b.n	8007432 <_calloc_r+0x16>

08007448 <__ascii_mbtowc>:
 8007448:	b082      	sub	sp, #8
 800744a:	b901      	cbnz	r1, 800744e <__ascii_mbtowc+0x6>
 800744c:	a901      	add	r1, sp, #4
 800744e:	b142      	cbz	r2, 8007462 <__ascii_mbtowc+0x1a>
 8007450:	b14b      	cbz	r3, 8007466 <__ascii_mbtowc+0x1e>
 8007452:	7813      	ldrb	r3, [r2, #0]
 8007454:	600b      	str	r3, [r1, #0]
 8007456:	7812      	ldrb	r2, [r2, #0]
 8007458:	1e10      	subs	r0, r2, #0
 800745a:	bf18      	it	ne
 800745c:	2001      	movne	r0, #1
 800745e:	b002      	add	sp, #8
 8007460:	4770      	bx	lr
 8007462:	4610      	mov	r0, r2
 8007464:	e7fb      	b.n	800745e <__ascii_mbtowc+0x16>
 8007466:	f06f 0001 	mvn.w	r0, #1
 800746a:	e7f8      	b.n	800745e <__ascii_mbtowc+0x16>

0800746c <__ascii_wctomb>:
 800746c:	b149      	cbz	r1, 8007482 <__ascii_wctomb+0x16>
 800746e:	2aff      	cmp	r2, #255	; 0xff
 8007470:	bf85      	ittet	hi
 8007472:	238a      	movhi	r3, #138	; 0x8a
 8007474:	6003      	strhi	r3, [r0, #0]
 8007476:	700a      	strbls	r2, [r1, #0]
 8007478:	f04f 30ff 	movhi.w	r0, #4294967295
 800747c:	bf98      	it	ls
 800747e:	2001      	movls	r0, #1
 8007480:	4770      	bx	lr
 8007482:	4608      	mov	r0, r1
 8007484:	4770      	bx	lr
	...

08007488 <fiprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b503      	push	{r0, r1, lr}
 800748c:	4601      	mov	r1, r0
 800748e:	ab03      	add	r3, sp, #12
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <fiprintf+0x20>)
 8007492:	f853 2b04 	ldr.w	r2, [r3], #4
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	f7ff fd25 	bl	8006ee8 <_vfiprintf_r>
 800749e:	b002      	add	sp, #8
 80074a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a4:	b003      	add	sp, #12
 80074a6:	4770      	bx	lr
 80074a8:	20000074 	.word	0x20000074

080074ac <__swhatbuf_r>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	2900      	cmp	r1, #0
 80074b6:	b096      	sub	sp, #88	; 0x58
 80074b8:	4615      	mov	r5, r2
 80074ba:	461e      	mov	r6, r3
 80074bc:	da0d      	bge.n	80074da <__swhatbuf_r+0x2e>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074c4:	f04f 0100 	mov.w	r1, #0
 80074c8:	bf0c      	ite	eq
 80074ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80074ce:	2340      	movne	r3, #64	; 0x40
 80074d0:	2000      	movs	r0, #0
 80074d2:	6031      	str	r1, [r6, #0]
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	b016      	add	sp, #88	; 0x58
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	466a      	mov	r2, sp
 80074dc:	f000 f848 	bl	8007570 <_fstat_r>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	dbec      	blt.n	80074be <__swhatbuf_r+0x12>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80074ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80074ee:	4259      	negs	r1, r3
 80074f0:	4159      	adcs	r1, r3
 80074f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f6:	e7eb      	b.n	80074d0 <__swhatbuf_r+0x24>

080074f8 <__smakebuf_r>:
 80074f8:	898b      	ldrh	r3, [r1, #12]
 80074fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074fc:	079d      	lsls	r5, r3, #30
 80074fe:	4606      	mov	r6, r0
 8007500:	460c      	mov	r4, r1
 8007502:	d507      	bpl.n	8007514 <__smakebuf_r+0x1c>
 8007504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	2301      	movs	r3, #1
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	b002      	add	sp, #8
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	ab01      	add	r3, sp, #4
 8007516:	466a      	mov	r2, sp
 8007518:	f7ff ffc8 	bl	80074ac <__swhatbuf_r>
 800751c:	9900      	ldr	r1, [sp, #0]
 800751e:	4605      	mov	r5, r0
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff f8af 	bl	8006684 <_malloc_r>
 8007526:	b948      	cbnz	r0, 800753c <__smakebuf_r+0x44>
 8007528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752c:	059a      	lsls	r2, r3, #22
 800752e:	d4ef      	bmi.n	8007510 <__smakebuf_r+0x18>
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	e7e3      	b.n	8007504 <__smakebuf_r+0xc>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	6020      	str	r0, [r4, #0]
 8007540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	6163      	str	r3, [r4, #20]
 800754a:	9b01      	ldr	r3, [sp, #4]
 800754c:	6120      	str	r0, [r4, #16]
 800754e:	b15b      	cbz	r3, 8007568 <__smakebuf_r+0x70>
 8007550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f81d 	bl	8007594 <_isatty_r>
 800755a:	b128      	cbz	r0, 8007568 <__smakebuf_r+0x70>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	431d      	orrs	r5, r3
 800756c:	81a5      	strh	r5, [r4, #12]
 800756e:	e7cf      	b.n	8007510 <__smakebuf_r+0x18>

08007570 <_fstat_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	; (8007590 <_fstat_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7f9 fe26 	bl	80011ce <_fstat>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_fstat_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_fstat_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	20000440 	.word	0x20000440

08007594 <_isatty_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d06      	ldr	r5, [pc, #24]	; (80075b0 <_isatty_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7f9 fe25 	bl	80011ee <_isatty>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_isatty_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_isatty_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000440 	.word	0x20000440

080075b4 <abort>:
 80075b4:	b508      	push	{r3, lr}
 80075b6:	2006      	movs	r0, #6
 80075b8:	f000 f82c 	bl	8007614 <raise>
 80075bc:	2001      	movs	r0, #1
 80075be:	f7f9 fdb7 	bl	8001130 <_exit>

080075c2 <_raise_r>:
 80075c2:	291f      	cmp	r1, #31
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4604      	mov	r4, r0
 80075c8:	460d      	mov	r5, r1
 80075ca:	d904      	bls.n	80075d6 <_raise_r+0x14>
 80075cc:	2316      	movs	r3, #22
 80075ce:	6003      	str	r3, [r0, #0]
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80075d8:	b112      	cbz	r2, 80075e0 <_raise_r+0x1e>
 80075da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075de:	b94b      	cbnz	r3, 80075f4 <_raise_r+0x32>
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 f831 	bl	8007648 <_getpid_r>
 80075e6:	462a      	mov	r2, r5
 80075e8:	4601      	mov	r1, r0
 80075ea:	4620      	mov	r0, r4
 80075ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f0:	f000 b818 	b.w	8007624 <_kill_r>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d00a      	beq.n	800760e <_raise_r+0x4c>
 80075f8:	1c59      	adds	r1, r3, #1
 80075fa:	d103      	bne.n	8007604 <_raise_r+0x42>
 80075fc:	2316      	movs	r3, #22
 80075fe:	6003      	str	r3, [r0, #0]
 8007600:	2001      	movs	r0, #1
 8007602:	e7e7      	b.n	80075d4 <_raise_r+0x12>
 8007604:	2400      	movs	r4, #0
 8007606:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800760a:	4628      	mov	r0, r5
 800760c:	4798      	blx	r3
 800760e:	2000      	movs	r0, #0
 8007610:	e7e0      	b.n	80075d4 <_raise_r+0x12>
	...

08007614 <raise>:
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <raise+0xc>)
 8007616:	4601      	mov	r1, r0
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f7ff bfd2 	b.w	80075c2 <_raise_r>
 800761e:	bf00      	nop
 8007620:	20000074 	.word	0x20000074

08007624 <_kill_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d07      	ldr	r5, [pc, #28]	; (8007644 <_kill_r+0x20>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	f7f9 fd6d 	bl	8001110 <_kill>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d102      	bne.n	8007640 <_kill_r+0x1c>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b103      	cbz	r3, 8007640 <_kill_r+0x1c>
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	bd38      	pop	{r3, r4, r5, pc}
 8007642:	bf00      	nop
 8007644:	20000440 	.word	0x20000440

08007648 <_getpid_r>:
 8007648:	f7f9 bd5a 	b.w	8001100 <_getpid>

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
