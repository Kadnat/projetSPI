
MotorDirection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007630  08007630  00017630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079dc  080079dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080079dc  080079dc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079dc  080079dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080079e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000270  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eb74  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002294  00000000  00000000  0002edc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d18  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a25  00000000  00000000  00031d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002157c  00000000  00000000  0003279d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011757  00000000  00000000  00053d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4f51  00000000  00000000  00065470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004570  00000000  00000000  0012a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0012e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007618 	.word	0x08007618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007618 	.word	0x08007618

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <GETVAL>:

// some extra variables working as temporary storage
int input = 0;int integration_sum = 0;

// To Get Current Count
int GETVAL(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	 return SysTick->VAL;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <GETVAL+0x14>)
 8000c02:	689b      	ldr	r3, [r3, #8]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_IncTick>:
// To account for Multiple Cycles of Timer
// for more than the period of the timer
void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	i++;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_IncTick+0x24>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	6013      	str	r3, [r2, #0]
	cpt_time++;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x28>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x28>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200001fc 	.word	0x200001fc
 8000c3c:	20000208 	.word	0x20000208

08000c40 <Timer_start_func>:


// Timer Start Function
// when called the timer starts counting
void Timer_start_func(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  SysTick->LOAD  = 64000 - 1;                                  /* set reload register */
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <Timer_start_func+0x28>)
 8000c46:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c4a:	605a      	str	r2, [r3, #4]
	  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c52:	f7ff ffa9 	bl	8000ba8 <__NVIC_SetPriority>
	  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <Timer_start_func+0x28>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <Timer_start_func+0x28>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	601a      	str	r2, [r3, #0]
	                   SysTick_CTRL_TICKINT_Msk   |
	                   SysTick_CTRL_ENABLE_Msk;
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <Timer_end_func>:

// Timer Count End Function
// when called the timer stops counting
void Timer_end_func(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	 SysTick->CTRL  = 0;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <Timer_end_func+0x1c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	 i=0;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <Timer_end_func+0x20>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010
 8000c8c:	200001fc 	.word	0x200001fc

08000c90 <pid_calculation>:

void pid_calculation(int r_speed)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
		ref_speed = r_speed;
 8000c98:	4a59      	ldr	r2, [pc, #356]	; (8000e00 <pid_calculation+0x170>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
	  // reads the current state of PA1
	      	// default function used
	      	if ( HAL_GPIO_ReadPin(SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin) == 0){
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4858      	ldr	r0, [pc, #352]	; (8000e04 <pid_calculation+0x174>)
 8000ca2:	f000 ff61 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 80a4 	bne.w	8000df6 <pid_calculation+0x166>
	      		while(HAL_GPIO_ReadPin(SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin) == 0){}
 8000cae:	bf00      	nop
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4854      	ldr	r0, [pc, #336]	; (8000e04 <pid_calculation+0x174>)
 8000cb4:	f000 ff58 	bl	8001b68 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <pid_calculation+0x20>

	      		if (res==0){
 8000cbe:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <pid_calculation+0x178>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <pid_calculation+0x42>
	      			// res here is a flag to see whether to start counter or to stop it
	      			Timer_start_func();
 8000cc6:	f7ff ffbb 	bl	8000c40 <Timer_start_func>
	      			res=1;
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <pid_calculation+0x178>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
	      			//*******************************************///
	      			res=0;

	      		}
	      	}
}
 8000cd0:	e091      	b.n	8000df6 <pid_calculation+0x166>
	      		} else if (res==1){
 8000cd2:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <pid_calculation+0x178>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f040 808d 	bne.w	8000df6 <pid_calculation+0x166>
	      			iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000cdc:	f7ff ff8e 	bl	8000bfc <GETVAL>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a4a      	ldr	r2, [pc, #296]	; (8000e0c <pid_calculation+0x17c>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1312      	asrs	r2, r2, #12
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <pid_calculation+0x180>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a47      	ldr	r2, [pc, #284]	; (8000e14 <pid_calculation+0x184>)
 8000cf8:	6013      	str	r3, [r2, #0]
	      			speed = 3000/iteration_time;
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <pid_calculation+0x184>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d06:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <pid_calculation+0x188>)
 8000d08:	6013      	str	r3, [r2, #0]
	      			Timer_end_func();
 8000d0a:	f7ff ffaf 	bl	8000c6c <Timer_end_func>
	      			if (speed < 3000) {
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <pid_calculation+0x188>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d16:	4293      	cmp	r3, r2
 8000d18:	dc03      	bgt.n	8000d22 <pid_calculation+0x92>
	      				input = speed;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <pid_calculation+0x188>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a3f      	ldr	r2, [pc, #252]	; (8000e1c <pid_calculation+0x18c>)
 8000d20:	6013      	str	r3, [r2, #0]
	      			current_error = ref_speed - input;
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <pid_calculation+0x170>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <pid_calculation+0x18c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <pid_calculation+0x190>)
 8000d36:	edc3 7a00 	vstr	s15, [r3]
	      			integration_sum += (current_error * iteration_time);
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <pid_calculation+0x194>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <pid_calculation+0x184>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <pid_calculation+0x190>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d64:	ee17 2a90 	vmov	r2, s15
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <pid_calculation+0x194>)
 8000d6a:	601a      	str	r2, [r3, #0]
	      			duty = KP * current_error + KI * integration_sum + KD * 1000 * (current_error -previous_error)/iteration_time;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <pid_calculation+0x198>)
 8000d6e:	ed93 7a00 	vldr	s14, [r3]
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <pid_calculation+0x190>)
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <pid_calculation+0x19c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <pid_calculation+0x194>)
 8000d82:	6812      	ldr	r2, [r2, #0]
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <pid_calculation+0x1a0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <pid_calculation+0x190>)
 8000daa:	ed93 6a00 	vldr	s12, [r3]
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <pid_calculation+0x1a4>)
 8000db0:	edd3 7a00 	vldr	s15, [r3]
 8000db4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000db8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <pid_calculation+0x184>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dc8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <pid_calculation+0x1a8>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
	      			TIM1->CCR1=duty;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <pid_calculation+0x1a8>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <pid_calculation+0x1ac>)
 8000dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de2:	ee17 2a90 	vmov	r2, s15
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
	      			previous_error = current_error;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <pid_calculation+0x190>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <pid_calculation+0x1a4>)
 8000dee:	6013      	str	r3, [r2, #0]
	      			res=0;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <pid_calculation+0x178>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000020c 	.word	0x2000020c
 8000e04:	48000800 	.word	0x48000800
 8000e08:	20000204 	.word	0x20000204
 8000e0c:	10624dd3 	.word	0x10624dd3
 8000e10:	200001fc 	.word	0x200001fc
 8000e14:	20000214 	.word	0x20000214
 8000e18:	20000200 	.word	0x20000200
 8000e1c:	20000220 	.word	0x20000220
 8000e20:	2000021c 	.word	0x2000021c
 8000e24:	20000224 	.word	0x20000224
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000218 	.word	0x20000218
 8000e38:	20000210 	.word	0x20000210
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a34      	ldr	r2, [pc, #208]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	21cc      	movs	r1, #204	; 0xcc
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000ebc:	f000 fe6c 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 fe66 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SPEED_SENSORM1_Pin|SPEED_SENSORM2_Pin;
 8000ecc:	f242 0330 	movw	r3, #8240	; 0x2030
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000ee4:	f000 fcce 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin;
 8000ee8:	23cc      	movs	r3, #204	; 0xcc
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0xf0>)
 8000f00:	f000 fcc0 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f04:	2320      	movs	r3, #32
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 fcb1 	bl	8001884 <HAL_GPIO_Init>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fb6c 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f81a 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f7ff ff7e 	bl	8000e40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 faca 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f48:	f000 f9ac 	bl	80012a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* TIM1 counter enable */


  HAL_TIM_Base_Start(&htim1);
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <main+0x38>)
 8000f4e:	f002 fa3d 	bl	80033cc <HAL_TIM_Base_Start>

  /* TIM1 Main Output Enable */
  //HAL_TIM_PWM_Init(&htim1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <main+0x38>)
 8000f56:	f002 faef 	bl	8003538 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(SENS1_M1_GPIO_Port, SENS1_M1_Pin, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <main+0x3c>)
 8000f60:	f000 fe1a 	bl	8001b98 <HAL_GPIO_WritePin>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pid_calculation(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f7ff fe93 	bl	8000c90 <pid_calculation>
 8000f6a:	e7fb      	b.n	8000f64 <main+0x30>
 8000f6c:	2000022c 	.word	0x2000022c
 8000f70:	48000800 	.word	0x48000800

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fbf5 	bl	8005772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000faa:	2302      	movs	r3, #2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb2:	2310      	movs	r3, #16
 8000fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fc2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fdfd 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fd4:	f000 f83a 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fe25 	bl	8002c44 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001000:	f000 f824 	bl	800104c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f002 f84d 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800101c:	f000 f816 	bl	800104c <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3758      	adds	r7, #88	; 0x58
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001030:	1d39      	adds	r1, r7, #4
 8001032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001036:	2201      	movs	r2, #1
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <__io_putchar+0x20>)
 800103a:	f003 fa59 	bl	80044f0 <HAL_UART_Transmit>

  return ch;
 800103e:	687b      	ldr	r3, [r7, #4]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000278 	.word	0x20000278

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800108e:	2007      	movs	r0, #7
 8001090:	f000 fbc4 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f7ff fd92 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_kill>:

int _kill(int pid, int sig)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800110e:	f004 fb83 	bl	8005818 <__errno>
 8001112:	4603      	mov	r3, r0
 8001114:	2216      	movs	r2, #22
 8001116:	601a      	str	r2, [r3, #0]
  return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_exit>:

void _exit (int status)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffe7 	bl	8001104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001136:	e7fe      	b.n	8001136 <_exit+0x12>

08001138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
  }

  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff4b 	bl	8001028 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf1      	blt.n	8001184 <_write+0x12>
  }
  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d2:	605a      	str	r2, [r3, #4]
  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f004 fae8 	bl	8005818 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20003000 	.word	0x20003000
 8001274:	00000400 	.word	0x00000400
 8001278:	20000228 	.word	0x20000228
 800127c:	20000450 	.word	0x20000450

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b09a      	sub	sp, #104	; 0x68
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	222c      	movs	r2, #44	; 0x2c
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fa47 	bl	8005772 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <MX_TIM1_Init+0x180>)
 80012e6:	4a50      	ldr	r2, [pc, #320]	; (8001428 <MX_TIM1_Init+0x184>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <MX_TIM1_Init+0x180>)
 80012ec:	f240 227f 	movw	r2, #639	; 0x27f
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <MX_TIM1_Init+0x180>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <MX_TIM1_Init+0x180>)
 80012fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <MX_TIM1_Init+0x180>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <MX_TIM1_Init+0x180>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <MX_TIM1_Init+0x180>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	4844      	ldr	r0, [pc, #272]	; (8001424 <MX_TIM1_Init+0x180>)
 8001314:	f002 f802 	bl	800331c <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800131e:	f7ff fe95 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800132c:	4619      	mov	r1, r3
 800132e:	483d      	ldr	r0, [pc, #244]	; (8001424 <MX_TIM1_Init+0x180>)
 8001330:	f002 fb02 	bl	8003938 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800133a:	f7ff fe87 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133e:	4839      	ldr	r0, [pc, #228]	; (8001424 <MX_TIM1_Init+0x180>)
 8001340:	f002 f898 	bl	8003474 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800134a:	f7ff fe7f 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800135e:	4619      	mov	r1, r3
 8001360:	4830      	ldr	r0, [pc, #192]	; (8001424 <MX_TIM1_Init+0x180>)
 8001362:	f002 ff91 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800136c:	f7ff fe6e 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	; 0x60
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1999;
 8001374:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	4823      	ldr	r0, [pc, #140]	; (8001424 <MX_TIM1_Init+0x180>)
 8001398:	f002 f9ba 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80013a2:	f7ff fe53 	bl	800104c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_TIM1_Init+0x180>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM1_Init+0x180>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0208 	bic.w	r2, r2, #8
 80013b4:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_TIM1_Init+0x180>)
 80013c4:	f002 f9a4 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013ce:	f7ff fe3d 	bl	800104c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <MX_TIM1_Init+0x180>)
 8001408:	f002 ffac 	bl	8004364 <HAL_TIMEx_ConfigBreakDeadTime>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001412:	f7ff fe1b 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_TIM1_Init+0x180>)
 8001418:	f000 f828 	bl	800146c <HAL_TIM_MspPostInit>

}
 800141c:	bf00      	nop
 800141e:	3768      	adds	r7, #104	; 0x68
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000022c 	.word	0x2000022c
 8001428:	40012c00 	.word	0x40012c00

0800142c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_TIM_Base_MspInit+0x38>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10b      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_TIM_Base_MspInit+0x3c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_TIM_Base_MspInit+0x3c>)
 8001444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_TIM_Base_MspInit+0x3c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40012c00 	.word	0x40012c00
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_TIM_MspPostInit+0x64>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d11b      	bne.n	80014c6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_TIM_MspPostInit+0x68>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_TIM_MspPostInit+0x68>)
 8001494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_TIM_MspPostInit+0x68>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 80014a6:	2303      	movs	r3, #3
 80014a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 80014c2:	f000 f9df 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000800 	.word	0x48000800

080014dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART2_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001520:	f002 ff98 	bl	8004454 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f7ff fd8f 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000278 	.word	0x20000278
 8001538:	40004400 	.word	0x40004400

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d128      	bne.n	80015b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_UART_MspInit+0x80>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0x80>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158e:	230c      	movs	r3, #12
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159e:	2307      	movs	r3, #7
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f000 f96a 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40021000 	.word	0x40021000

080015c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff fe5c 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopForever+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f004 f919 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f2:	f7ff fc9f 	bl	8000f34 <main>

080015f6 <LoopForever>:

LoopForever:
    b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001604:	080079e4 	.word	0x080079e4
  ldr r2, =_sbss
 8001608:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800160c:	20000450 	.word	0x20000450

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x28>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f8f9 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fd12 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f903 	bl	800186a <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f8d9 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000014 	.word	0x20000014
 800169c:	20000010 	.word	0x20000010

080016a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000300 	.word	0x20000300

080016b8 <__NVIC_SetPriorityGrouping>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e14e      	b.n	8001b32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8140 	beq.w	8001b2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x40>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 809a 	beq.w	8001b2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a50      	ldr	r2, [pc, #320]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1e0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_GPIO_Init+0x2d4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1dc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_GPIO_Init+0x2d8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1d8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_GPIO_Init+0x2dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1d4>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a58:	2305      	movs	r3, #5
 8001a5a:	e004      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a64:	2300      	movs	r3, #0
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	f002 0203 	and.w	r2, r2, #3
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a76:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ad2:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f aea9 	bne.w	8001894 <HAL_GPIO_Init+0x10>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e001      	b.n	8001b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f001 b823 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 817d 	beq.w	8001efe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c04:	4bbc      	ldr	r3, [pc, #752]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4bb9      	ldr	r3, [pc, #740]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d15c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
 8001c1c:	4bb6      	ldr	r3, [pc, #728]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d155      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_OscConfig+0x94>
 8001c56:	4ba8      	ldr	r3, [pc, #672]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e015      	b.n	8001c88 <HAL_RCC_OscConfig+0xc0>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c74:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c84:	4b9c      	ldr	r3, [pc, #624]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 811f 	beq.w	8001efc <HAL_RCC_OscConfig+0x334>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8116 	bne.w	8001efc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f000 bfaf 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
 8001ce8:	4b83      	ldr	r3, [pc, #524]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a82      	ldr	r2, [pc, #520]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x158>
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7b      	ldr	r2, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a78      	ldr	r2, [pc, #480]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e021      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x184>
 8001d32:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a70      	ldr	r2, [pc, #448]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6d      	ldr	r2, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a66      	ldr	r2, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d64:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f023 020f 	bic.w	r2, r3, #15
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	495f      	ldr	r1, [pc, #380]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d059      	beq.n	8001e42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc87 	bl	80016a0 <HAL_GetTick>
 8001d92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc82 	bl	80016a0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d902      	bls.n	8001dae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	f000 bf43 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 8001dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001dc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0x218>
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e015      	b.n	8001e0c <HAL_RCC_OscConfig+0x244>
 8001de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e10:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e24:	fab2 f282 	clz	r2, r2
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f042 0220 	orr.w	r2, r2, #32
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f002 021f 	and.w	r2, r2, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ab      	beq.n	8001d98 <HAL_RCC_OscConfig+0x1d0>
 8001e40:	e05d      	b.n	8001efe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fc2d 	bl	80016a0 <HAL_GetTick>
 8001e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fc28 	bl	80016a0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	; 0x64
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	f000 bee9 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 8001e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e66:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2cc>
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e015      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2f8>
 8001e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e98:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001eb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ec4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ec8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ed4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ab      	bne.n	8001e4c <HAL_RCC_OscConfig+0x284>
 8001ef4:	e003      	b.n	8001efe <HAL_RCC_OscConfig+0x336>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 817d 	beq.w	800220e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f14:	4ba6      	ldr	r3, [pc, #664]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f20:	4ba3      	ldr	r3, [pc, #652]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d172      	bne.n	8002012 <HAL_RCC_OscConfig+0x44a>
 8001f2c:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d16c      	bne.n	8002012 <HAL_RCC_OscConfig+0x44a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3a0>
 8001f62:	4b93      	ldr	r3, [pc, #588]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c8>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f8c:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2202      	movs	r2, #2
 8001f92:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f96:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001fa2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x410>
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f000 be2e 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	21f8      	movs	r1, #248	; 0xf8
 8001fee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ff6:	fa91 f1a1 	rbit	r1, r1
 8001ffa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ffe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002002:	fab1 f181 	clz	r1, r1
 8002006:	b2c9      	uxtb	r1, r1
 8002008:	408b      	lsls	r3, r1
 800200a:	4969      	ldr	r1, [pc, #420]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002010:	e0fd      	b.n	800220e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8088 	beq.w	8002134 <HAL_RCC_OscConfig+0x56c>
 8002024:	2301      	movs	r3, #1
 8002026:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002036:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2301      	movs	r3, #1
 800204e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fb26 	bl	80016a0 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff fb21 	bl	80016a0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d902      	bls.n	8002070 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	f000 bde2 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002082:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4d8>
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x500>
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020c4:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020de:	fab2 f282 	clz	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f042 0220 	orr.w	r2, r2, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f002 021f 	and.w	r2, r2, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0af      	beq.n	800205a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	21f8      	movs	r1, #248	; 0xf8
 8002110:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002118:	fa91 f1a1 	rbit	r1, r1
 800211c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002120:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002124:	fab1 f181 	clz	r1, r1
 8002128:	b2c9      	uxtb	r1, r1
 800212a:	408b      	lsls	r3, r1
 800212c:	4920      	ldr	r1, [pc, #128]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
 8002132:	e06c      	b.n	800220e <HAL_RCC_OscConfig+0x646>
 8002134:	2301      	movs	r3, #1
 8002136:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002154:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	2300      	movs	r3, #0
 800215e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fa9e 	bl	80016a0 <HAL_GetTick>
 8002164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fa99 	bl	80016a0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d902      	bls.n	8002180 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	f000 bd5a 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d104      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5ec>
 80021aa:	4b01      	ldr	r3, [pc, #4]	; (80021b0 <HAL_RCC_OscConfig+0x5e8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e015      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021d8:	4bc8      	ldr	r3, [pc, #800]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2202      	movs	r2, #2
 80021de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021e6:	fa92 f2a2 	rbit	r2, r2
 80021ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ad      	bne.n	800216a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8110 	beq.w	8002444 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d079      	beq.n	8002328 <HAL_RCC_OscConfig+0x760>
 8002234:	2301      	movs	r3, #1
 8002236:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4bab      	ldr	r3, [pc, #684]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	461a      	mov	r2, r3
 800225a:	2301      	movs	r3, #1
 800225c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fa1f 	bl	80016a0 <HAL_GetTick>
 8002262:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff fa1a 	bl	80016a0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d902      	bls.n	800227e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	f000 bcdb 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d8:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80022da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022e4:	2102      	movs	r1, #2
 80022e6:	6019      	str	r1, [r3, #0]
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f1a3 	rbit	r1, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022fe:	6019      	str	r1, [r3, #0]
  return result;
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0a0      	beq.n	8002268 <HAL_RCC_OscConfig+0x6a0>
 8002326:	e08d      	b.n	8002444 <HAL_RCC_OscConfig+0x87c>
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800234a:	601a      	str	r2, [r3, #0]
  return result;
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002354:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff f999 	bl	80016a0 <HAL_GetTick>
 800236e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff f994 	bl	80016a0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d902      	bls.n	800238a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	f000 bc55 	b.w	8002c34 <HAL_RCC_OscConfig+0x106c>
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80023f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002402:	2102      	movs	r1, #2
 8002404:	6019      	str	r1, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f1a3 	rbit	r1, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800241c:	6019      	str	r1, [r3, #0]
  return result;
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d197      	bne.n	8002374 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 81a1 	beq.w	800279c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a22      	ldr	r2, [pc, #136]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002492:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_OscConfig+0x93c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_RCC_OscConfig+0x93c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_RCC_OscConfig+0x93c>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7ff f8f5 	bl	80016a0 <HAL_GetTick>
 80024b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7ff f8f0 	bl	80016a0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e3b1      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_OscConfig+0x93c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ef      	beq.n	80024bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10d      	bne.n	8002508 <HAL_RCC_OscConfig+0x940>
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e03c      	b.n	8002574 <HAL_RCC_OscConfig+0x9ac>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	10908120 	.word	0x10908120
 8002504:	40007000 	.word	0x40007000
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x96a>
 8002518:	4bc1      	ldr	r3, [pc, #772]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4ac0      	ldr	r2, [pc, #768]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	4bbe      	ldr	r3, [pc, #760]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4abd      	ldr	r2, [pc, #756]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	e020      	b.n	8002574 <HAL_RCC_OscConfig+0x9ac>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x994>
 8002542:	4bb7      	ldr	r3, [pc, #732]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4ab6      	ldr	r2, [pc, #728]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4bb4      	ldr	r3, [pc, #720]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4ab3      	ldr	r2, [pc, #716]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0x9ac>
 800255c:	4bb0      	ldr	r3, [pc, #704]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4aaf      	ldr	r2, [pc, #700]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	4bad      	ldr	r3, [pc, #692]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4aac      	ldr	r2, [pc, #688]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8081 	beq.w	8002688 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7ff f88b 	bl	80016a0 <HAL_GetTick>
 800258a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7ff f886 	bl	80016a0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e345      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025b0:	2202      	movs	r2, #2
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025d4:	2202      	movs	r2, #2
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025ee:	601a      	str	r2, [r3, #0]
  return result;
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0xa4c>
 800260e:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	e013      	b.n	800263c <HAL_RCC_OscConfig+0xa74>
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800261c:	2202      	movs	r2, #2
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002640:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002644:	2102      	movs	r1, #2
 8002646:	6011      	str	r1, [r2, #0]
 8002648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	fa92 f1a2 	rbit	r1, r2
 8002656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800265e:	6011      	str	r1, [r2, #0]
  return result;
 8002660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002664:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d084      	beq.n	8002590 <HAL_RCC_OscConfig+0x9c8>
 8002686:	e07f      	b.n	8002788 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7ff f80a 	bl	80016a0 <HAL_GetTick>
 800268c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff f805 	bl	80016a0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e2c4      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026b2:	2202      	movs	r2, #2
 80026b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026d6:	2202      	movs	r2, #2
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026f0:	601a      	str	r2, [r3, #0]
  return result;
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d102      	bne.n	8002716 <HAL_RCC_OscConfig+0xb4e>
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	e013      	b.n	800273e <HAL_RCC_OscConfig+0xb76>
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800271e:	2202      	movs	r2, #2
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002746:	2102      	movs	r1, #2
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002760:	6011      	str	r1, [r2, #0]
  return result;
 8002762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002766:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d184      	bne.n	8002692 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002788:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8242 	beq.w	8002c32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0xc58>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	f000 8213 	beq.w	8002be2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	f040 8162 	bne.w	8002a92 <HAL_RCC_OscConfig+0xeca>
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027f2:	601a      	str	r2, [r3, #0]
  return result;
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	2300      	movs	r3, #0
 8002812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe ff44 	bl	80016a0 <HAL_GetTick>
 8002818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	e00c      	b.n	8002838 <HAL_RCC_OscConfig+0xc70>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe ff3c 	bl	80016a0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1fd      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800285c:	601a      	str	r2, [r3, #0]
  return result;
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002866:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_RCC_OscConfig+0xcba>
 800287c:	4bb0      	ldr	r3, [pc, #704]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e027      	b.n	80028d2 <HAL_RCC_OscConfig+0xd0a>
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800288a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	4b9c      	ldr	r3, [pc, #624]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028de:	6011      	str	r1, [r2, #0]
 80028e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	fa92 f1a2 	rbit	r1, r2
 80028ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028f6:	6011      	str	r1, [r2, #0]
  return result;
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fab2 f282 	clz	r2, r2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f042 0220 	orr.w	r2, r2, #32
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f002 021f 	and.w	r2, r2, #31
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d182      	bne.n	8002824 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	430b      	orrs	r3, r1
 8002940:	497f      	ldr	r1, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800294e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800296a:	601a      	str	r2, [r3, #0]
  return result;
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002974:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fe88 	bl	80016a0 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	e009      	b.n	80029aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fe83 	bl	80016a0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e144      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029ce:	601a      	str	r2, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0xe2c>
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e027      	b.n	8002a44 <HAL_RCC_OscConfig+0xe7c>
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a48:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a50:	6011      	str	r1, [r2, #0]
 8002a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a56:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fa92 f1a2 	rbit	r1, r2
 8002a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a68:	6011      	str	r1, [r2, #0]
  return result;
 8002a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f002 021f 	and.w	r2, r2, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d082      	beq.n	8002996 <HAL_RCC_OscConfig+0xdce>
 8002a90:	e0cf      	b.n	8002c32 <HAL_RCC_OscConfig+0x106a>
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ab6:	601a      	str	r2, [r3, #0]
  return result;
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ac0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fde2 	bl	80016a0 <HAL_GetTick>
 8002adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fddd 	bl	80016a0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e09e      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b1a:	601a      	str	r2, [r3, #0]
  return result;
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d104      	bne.n	8002b44 <HAL_RCC_OscConfig+0xf7c>
 8002b3a:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_RCC_OscConfig+0xf78>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	e029      	b.n	8002b94 <HAL_RCC_OscConfig+0xfcc>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x1078>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b98:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba0:	6011      	str	r1, [r2, #0]
 8002ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	fa92 f1a2 	rbit	r1, r2
 8002bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bb8:	6011      	str	r1, [r2, #0]
  return result;
 8002bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f042 0220 	orr.w	r2, r2, #32
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f002 021f 	and.w	r2, r2, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d180      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xf1a>
 8002be0:	e027      	b.n	8002c32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01e      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_OscConfig+0x1078>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b09e      	sub	sp, #120	; 0x78
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e162      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b90      	ldr	r3, [pc, #576]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b8d      	ldr	r3, [pc, #564]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	498b      	ldr	r1, [pc, #556]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e14a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b82      	ldr	r3, [pc, #520]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	497f      	ldr	r1, [pc, #508]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80dc 	beq.w	8002e70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d13c      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xf6>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_ClockConfig+0xa6>
 8002ce4:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e00f      	b.n	8002d0a <HAL_RCC_ClockConfig+0xc6>
 8002cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8002cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f002 021f 	and.w	r2, r2, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d17b      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0f3      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d13c      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x178>
 8002d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x128>
 8002d66:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e00f      	b.n	8002d8c <HAL_RCC_ClockConfig+0x148>
 8002d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d90:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0220 	orr.w	r2, r2, #32
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13a      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b2      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1a0>
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	e00d      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1bc>
 8002de4:	2302      	movs	r3, #2
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	2302      	movs	r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2202      	movs	r2, #2
 8002e02:	61ba      	str	r2, [r7, #24]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	617a      	str	r2, [r7, #20]
  return result;
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f042 0220 	orr.w	r2, r2, #32
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f002 021f 	and.w	r2, r2, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e079      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	491a      	ldr	r1, [pc, #104]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e40:	f7fe fc2e 	bl	80016a0 <HAL_GetTick>
 8002e44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe fc2a 	bl	80016a0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e061      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d214      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e040      	b.n	8002f22 <HAL_RCC_ClockConfig+0x2de>
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCC_ClockConfig+0x2e8>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	491a      	ldr	r1, [pc, #104]	; (8002f2c <HAL_RCC_ClockConfig+0x2e8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_RCC_ClockConfig+0x2e8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <HAL_RCC_ClockConfig+0x2e8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ee6:	f000 f829 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002eea:	4601      	mov	r1, r0
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCC_ClockConfig+0x2e8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	22f0      	movs	r2, #240	; 0xf0
 8002ef6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	fa92 f2a2 	rbit	r2, r2
 8002efe:	60fa      	str	r2, [r7, #12]
  return result;
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	fab2 f282 	clz	r2, r2
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	40d3      	lsrs	r3, r2
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x2ec>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_RCC_ClockConfig+0x2f0>)
 8002f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_RCC_ClockConfig+0x2f4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fb90 	bl	8001640 <HAL_InitTick>
  
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3778      	adds	r7, #120	; 0x78
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08007630 	.word	0x08007630
 8002f34:	2000000c 	.word	0x2000000c
 8002f38:	20000010 	.word	0x20000010

08002f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b08b      	sub	sp, #44	; 0x2c
 8002f40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x30>
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6a:	e03c      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f6e:	623b      	str	r3, [r7, #32]
      break;
 8002f70:	e03c      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	fa92 f2a2 	rbit	r2, r2
 8002f84:	607a      	str	r2, [r7, #4]
  return result;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	40d3      	lsrs	r3, r2
 8002f90:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f92:	5cd3      	ldrb	r3, [r2, r3]
 8002f94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	220f      	movs	r2, #15
 8002fa0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	60fa      	str	r2, [r7, #12]
  return result;
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	40d3      	lsrs	r3, r2
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	623b      	str	r3, [r7, #32]
      break;
 8002fe4:	e002      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fe8:	623b      	str	r3, [r7, #32]
      break;
 8002fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	372c      	adds	r7, #44	; 0x2c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	007a1200 	.word	0x007a1200
 8003004:	08007648 	.word	0x08007648
 8003008:	08007658 	.word	0x08007658
 800300c:	003d0900 	.word	0x003d0900

08003010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_GetHCLKFreq+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c

08003028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800302e:	f7ff ffef 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 8003032:	4601      	mov	r1, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800303c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003040:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	603a      	str	r2, [r7, #0]
  return result;
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	40d3      	lsrs	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08007640 	.word	0x08007640

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003072:	f7ff ffcd 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 8003076:	4601      	mov	r1, r0
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003080:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003084:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	fa92 f2a2 	rbit	r2, r2
 800308c:	603a      	str	r2, [r7, #0]
  return result;
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	fab2 f282 	clz	r2, r2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	40d3      	lsrs	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08007640 	.word	0x08007640

080030b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b092      	sub	sp, #72	; 0x48
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80cd 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d4:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10e      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4a8a      	ldr	r2, [pc, #552]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	61d3      	str	r3, [r2, #28]
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d118      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a81      	ldr	r2, [pc, #516]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003116:	f7fe fac3 	bl	80016a0 <HAL_GetTick>
 800311a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e008      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fe fabf 	bl	80016a0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d901      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0ea      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313c:	4b74      	ldr	r3, [pc, #464]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d07d      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003156:	429a      	cmp	r2, r3
 8003158:	d076      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	461a      	mov	r2, r3
 8003184:	2301      	movs	r3, #1
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d045      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fa70 	bl	80016a0 <HAL_GetTick>
 80031c0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe fa6c 	bl	80016a0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e095      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80031da:	2302      	movs	r3, #2
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	61fb      	str	r3, [r7, #28]
  return result;
 80031f2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d102      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	e007      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800320e:	2302      	movs	r3, #2
 8003210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2202      	movs	r2, #2
 8003220:	613a      	str	r2, [r7, #16]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	60fa      	str	r2, [r7, #12]
  return result;
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f002 021f 	and.w	r2, r2, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0bd      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	492e      	ldr	r1, [pc, #184]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	4313      	orrs	r3, r2
 8003258:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800325a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003288:	4313      	orrs	r3, r2
 800328a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f023 0210 	bic.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	491a      	ldr	r1, [pc, #104]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4913      	ldr	r1, [pc, #76]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	490b      	ldr	r1, [pc, #44]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	4904      	ldr	r1, [pc, #16]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	4313      	orrs	r3, r2
 8003302:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3748      	adds	r7, #72	; 0x48
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	10908100 	.word	0x10908100

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e049      	b.n	80033c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe f872 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fbb6 	bl	8003acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e038      	b.n	8003456 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIM_Base_Start+0x98>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_TIM_Base_Start+0x48>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d009      	beq.n	8003414 <HAL_TIM_Base_Start+0x48>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_TIM_Base_Start+0x9c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_Base_Start+0x48>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_TIM_Base_Start+0xa0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d115      	bne.n	8003440 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_TIM_Base_Start+0xa4>)
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d015      	beq.n	8003452 <HAL_TIM_Base_Start+0x86>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d011      	beq.n	8003452 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e008      	b.n	8003452 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e000      	b.n	8003454 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40014000 	.word	0x40014000
 8003470:	00010007 	.word	0x00010007

08003474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e049      	b.n	800351a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f841 	bl	8003522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fb0a 	bl	8003acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_TIM_PWM_Start+0x24>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e03c      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d109      	bne.n	8003576 <HAL_TIM_PWM_Start+0x3e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e02f      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d109      	bne.n	8003590 <HAL_TIM_PWM_Start+0x58>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e022      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d109      	bne.n	80035aa <HAL_TIM_PWM_Start+0x72>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e015      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d109      	bne.n	80035c4 <HAL_TIM_PWM_Start+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e008      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e088      	b.n	80036f0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Start+0xb6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	e023      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start+0xc6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	e01b      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0xd6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0xe6>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b10      	cmp	r3, #16
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xf6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fdfc 	bl	800423c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_TIM_PWM_Start+0x1c0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_TIM_PWM_Start+0x134>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_TIM_PWM_Start+0x1c4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_TIM_PWM_Start+0x134>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <HAL_TIM_PWM_Start+0x1c8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIM_PWM_Start+0x134>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_TIM_PWM_Start+0x1cc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_TIM_PWM_Start+0x138>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_TIM_PWM_Start+0x13a>
 8003670:	2300      	movs	r3, #0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_TIM_PWM_Start+0x1c0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_PWM_Start+0x176>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d009      	beq.n	80036ae <HAL_TIM_PWM_Start+0x176>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_TIM_PWM_Start+0x1d0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_PWM_Start+0x176>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_TIM_PWM_Start+0x1c4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d115      	bne.n	80036da <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_TIM_PWM_Start+0x1d4>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d015      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1b4>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d011      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	e008      	b.n	80036ec <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e000      	b.n	80036ee <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800
 8003708:	40000400 	.word	0x40000400
 800370c:	00010007 	.word	0x00010007

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ff      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b14      	cmp	r3, #20
 800373a:	f200 80f0 	bhi.w	800391e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003799 	.word	0x08003799
 8003748:	0800391f 	.word	0x0800391f
 800374c:	0800391f 	.word	0x0800391f
 8003750:	0800391f 	.word	0x0800391f
 8003754:	080037d9 	.word	0x080037d9
 8003758:	0800391f 	.word	0x0800391f
 800375c:	0800391f 	.word	0x0800391f
 8003760:	0800391f 	.word	0x0800391f
 8003764:	0800381b 	.word	0x0800381b
 8003768:	0800391f 	.word	0x0800391f
 800376c:	0800391f 	.word	0x0800391f
 8003770:	0800391f 	.word	0x0800391f
 8003774:	0800385b 	.word	0x0800385b
 8003778:	0800391f 	.word	0x0800391f
 800377c:	0800391f 	.word	0x0800391f
 8003780:	0800391f 	.word	0x0800391f
 8003784:	0800389d 	.word	0x0800389d
 8003788:	0800391f 	.word	0x0800391f
 800378c:	0800391f 	.word	0x0800391f
 8003790:	0800391f 	.word	0x0800391f
 8003794:	080038dd 	.word	0x080038dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa0c 	bl	8003bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0204 	bic.w	r2, r2, #4
 80037c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	619a      	str	r2, [r3, #24]
      break;
 80037d6:	e0a5      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fa72 	bl	8003cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	619a      	str	r2, [r3, #24]
      break;
 8003818:	e084      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fad1 	bl	8003dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0208 	orr.w	r2, r2, #8
 8003834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0204 	bic.w	r2, r2, #4
 8003844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69d9      	ldr	r1, [r3, #28]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	61da      	str	r2, [r3, #28]
      break;
 8003858:	e064      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb2f 	bl	8003ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69d9      	ldr	r1, [r3, #28]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	021a      	lsls	r2, r3, #8
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	61da      	str	r2, [r3, #28]
      break;
 800389a:	e043      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb72 	bl	8003f8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038da:	e023      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fbb0 	bl	8004048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	021a      	lsls	r2, r3, #8
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800391c:	e002      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
      break;
 8003922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIM_ConfigClockSource+0x1c>
 8003950:	2302      	movs	r3, #2
 8003952:	e0b6      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x18a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d03e      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0xd8>
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	f200 8087 	bhi.w	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	f000 8086 	beq.w	8003aae <HAL_TIM_ConfigClockSource+0x176>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d87f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d01a      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xaa>
 80039ac:	2b70      	cmp	r3, #112	; 0x70
 80039ae:	d87b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d050      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x11e>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d877      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d03c      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0xfe>
 80039bc:	2b50      	cmp	r3, #80	; 0x50
 80039be:	d873      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d058      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x13e>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d86f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d064      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15e>
 80039cc:	2b30      	cmp	r3, #48	; 0x30
 80039ce:	d86b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d060      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15e>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d867      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15e>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d05a      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15e>
 80039e0:	e062      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	f000 fc03 	bl	80041fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	609a      	str	r2, [r3, #8]
      break;
 8003a0e:	e04f      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	f000 fbec 	bl	80041fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a32:	609a      	str	r2, [r3, #8]
      break;
 8003a34:	e03c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 fb60 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2150      	movs	r1, #80	; 0x50
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fbb9 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e02c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fb7f 	bl	8004166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fba9 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e01c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 fb40 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fb99 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003a94:	e00c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 fb90 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <TIM_Base_SetConfig+0xdc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_Base_SetConfig+0x28>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0x28>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a2f      	ldr	r2, [pc, #188]	; (8003bac <TIM_Base_SetConfig+0xe0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <TIM_Base_SetConfig+0xdc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0x6a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0x6a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_Base_SetConfig+0xe0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x6a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <TIM_Base_SetConfig+0xe4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x6a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <TIM_Base_SetConfig+0xe8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x6a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <TIM_Base_SetConfig+0xec>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <TIM_Base_SetConfig+0xdc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0xc0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <TIM_Base_SetConfig+0xe4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0xc0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <TIM_Base_SetConfig+0xe8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0xc0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <TIM_Base_SetConfig+0xec>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	615a      	str	r2, [r3, #20]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800

08003bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 0302 	bic.w	r3, r3, #2
 8003c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <TIM_OC1_SetConfig+0xfc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TIM_OC1_SetConfig+0x78>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <TIM_OC1_SetConfig+0x100>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_OC1_SetConfig+0x78>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <TIM_OC1_SetConfig+0x104>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC1_SetConfig+0x78>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <TIM_OC1_SetConfig+0x108>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10c      	bne.n	8003c4e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0308 	bic.w	r3, r3, #8
 8003c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <TIM_OC1_SetConfig+0xfc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_OC1_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <TIM_OC1_SetConfig+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_OC1_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <TIM_OC1_SetConfig+0x104>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC1_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <TIM_OC1_SetConfig+0x108>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800

08003cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f023 0210 	bic.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <TIM_OC2_SetConfig+0xf0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <TIM_OC2_SetConfig+0xf0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <TIM_OC2_SetConfig+0xa0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <TIM_OC2_SetConfig+0xf4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_OC2_SetConfig+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <TIM_OC2_SetConfig+0xf8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_OC2_SetConfig+0xa0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <TIM_OC2_SetConfig+0xfc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d113      	bne.n	8003d90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <TIM_OC3_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10d      	bne.n	8003e46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <TIM_OC3_SetConfig+0xec>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_OC3_SetConfig+0x9e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <TIM_OC3_SetConfig+0xf0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_OC3_SetConfig+0x9e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <TIM_OC3_SetConfig+0xf4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC3_SetConfig+0x9e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <TIM_OC3_SetConfig+0xf8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <TIM_OC4_SetConfig+0xb8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_OC4_SetConfig+0x7c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <TIM_OC4_SetConfig+0xbc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_OC4_SetConfig+0x7c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <TIM_OC4_SetConfig+0xc0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC4_SetConfig+0x7c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <TIM_OC4_SetConfig+0xc4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800

08003f8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <TIM_OC5_SetConfig+0xac>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_OC5_SetConfig+0x72>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <TIM_OC5_SetConfig+0xb0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_OC5_SetConfig+0x72>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <TIM_OC5_SetConfig+0xb4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC5_SetConfig+0x72>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <TIM_OC5_SetConfig+0xb8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d109      	bne.n	8004012 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	051b      	lsls	r3, r3, #20
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <TIM_OC6_SetConfig+0xb0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC6_SetConfig+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <TIM_OC6_SetConfig+0xb4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC6_SetConfig+0x74>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <TIM_OC6_SetConfig+0xb8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC6_SetConfig+0x74>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <TIM_OC6_SetConfig+0xbc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 030a 	bic.w	r3, r3, #10
 8004144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004166:	b480      	push	{r7}
 8004168:	b087      	sub	sp, #28
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0210 	bic.w	r2, r3, #16
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f043 0307 	orr.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	431a      	orrs	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2201      	movs	r2, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e054      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d009      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a11      	ldr	r2, [pc, #68]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40000400 	.word	0x40000400
 8004360:	40014000 	.word	0x40014000

08004364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e060      	b.n	8004442 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d115      	bne.n	8004430 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	051b      	lsls	r3, r3, #20
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e040      	b.n	80044e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd f860 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f8b6 	bl	8004604 <UART_SetConfig>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e022      	b.n	80044e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9e0 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fa67 	bl	80049b4 <UART_CheckIdleState>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004504:	2b20      	cmp	r3, #32
 8004506:	d178      	bne.n	80045fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Transmit+0x24>
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e071      	b.n	80045fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2221      	movs	r2, #33	; 0x21
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004526:	f7fd f8bb 	bl	80016a0 <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004544:	d108      	bne.n	8004558 <HAL_UART_Transmit+0x68>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e003      	b.n	8004560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004560:	e030      	b.n	80045c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fac9 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e03c      	b.n	80045fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	881a      	ldrh	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004594:	b292      	uxth	r2, r2
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3302      	adds	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e008      	b.n	80045b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b292      	uxth	r2, r2
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1c8      	bne.n	8004562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa92 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e005      	b.n	80045fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8a      	ldr	r3, [pc, #552]	; (8004858 <UART_SetConfig+0x254>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6979      	ldr	r1, [r7, #20]
 8004638:	430b      	orrs	r3, r1
 800463a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a78      	ldr	r2, [pc, #480]	; (800485c <UART_SetConfig+0x258>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d120      	bne.n	80046c2 <UART_SetConfig+0xbe>
 8004680:	4b77      	ldr	r3, [pc, #476]	; (8004860 <UART_SetConfig+0x25c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d817      	bhi.n	80046bc <UART_SetConfig+0xb8>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x90>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046b7 	.word	0x080046b7
 80046a0:	080046ab 	.word	0x080046ab
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e01d      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046aa:	2302      	movs	r3, #2
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e01a      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046b0:	2304      	movs	r3, #4
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e017      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046b6:	2308      	movs	r3, #8
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046bc:	2310      	movs	r3, #16
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e011      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a67      	ldr	r2, [pc, #412]	; (8004864 <UART_SetConfig+0x260>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d102      	bne.n	80046d2 <UART_SetConfig+0xce>
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a64      	ldr	r2, [pc, #400]	; (8004868 <UART_SetConfig+0x264>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d102      	bne.n	80046e2 <UART_SetConfig+0xde>
 80046dc:	2300      	movs	r3, #0
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e001      	b.n	80046e6 <UART_SetConfig+0xe2>
 80046e2:	2310      	movs	r3, #16
 80046e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d15a      	bne.n	80047a6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80046f0:	7ffb      	ldrb	r3, [r7, #31]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d827      	bhi.n	8004746 <UART_SetConfig+0x142>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0xf8>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fc82 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fca0 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b4e      	ldr	r3, [pc, #312]	; (800486c <UART_SetConfig+0x268>)
 8004732:	61bb      	str	r3, [r7, #24]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fc01 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800473a:	61b8      	str	r0, [r7, #24]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
        break;
 800474e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d074      	beq.n	8004840 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	005a      	lsls	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d916      	bls.n	80047a0 <UART_SetConfig+0x19c>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d212      	bcs.n	80047a0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f023 030f 	bic.w	r3, r3, #15
 8004782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	b29a      	uxth	r2, r3
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	4313      	orrs	r3, r2
 8004794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	89fa      	ldrh	r2, [r7, #14]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	e04f      	b.n	8004840 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	77bb      	strb	r3, [r7, #30]
 80047a4:	e04c      	b.n	8004840 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d828      	bhi.n	80047fe <UART_SetConfig+0x1fa>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x1b0>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ff 	.word	0x080047ff
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe fc26 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e013      	b.n	8004808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe fc44 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80047e4:	61b8      	str	r0, [r7, #24]
        break;
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b20      	ldr	r3, [pc, #128]	; (800486c <UART_SetConfig+0x268>)
 80047ea:	61bb      	str	r3, [r7, #24]
        break;
 80047ec:	e00c      	b.n	8004808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe fba5 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 80047f2:	61b8      	str	r0, [r7, #24]
        break;
 80047f4:	e008      	b.n	8004808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e004      	b.n	8004808 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	77bb      	strb	r3, [r7, #30]
        break;
 8004806:	bf00      	nop
    }

    if (pclk != 0U)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	085a      	lsrs	r2, r3, #1
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	441a      	add	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d909      	bls.n	800483c <UART_SetConfig+0x238>
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482e:	d205      	bcs.n	800483c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	e001      	b.n	8004840 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800484c:	7fbb      	ldrb	r3, [r7, #30]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	efff69f3 	.word	0xefff69f3
 800485c:	40013800 	.word	0x40013800
 8004860:	40021000 	.word	0x40021000
 8004864:	40004400 	.word	0x40004400
 8004868:	40004800 	.word	0x40004800
 800486c:	007a1200 	.word	0x007a1200

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d10a      	bne.n	8004986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b098      	sub	sp, #96	; 0x60
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c4:	f7fc fe6c 	bl	80016a0 <HAL_GetTick>
 80049c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d12e      	bne.n	8004a36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f88c 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d021      	beq.n	8004a36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e062      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d149      	bne.n	8004ad8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f856 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03c      	beq.n	8004ad8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e011      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3758      	adds	r7, #88	; 0x58
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b14:	e049      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d045      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fc fdbf 	bl	80016a0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e048      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d031      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d110      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f838 	bl	8004bd2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2208      	movs	r2, #8
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e029      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b84:	d111      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f81e 	bl	8004bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00f      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d0a6      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b095      	sub	sp, #84	; 0x54
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d118      	bne.n	8004c7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6979      	ldr	r1, [r7, #20]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	613b      	str	r3, [r7, #16]
   return(result);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e6      	bne.n	8004c48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c8e:	bf00      	nop
 8004c90:	3754      	adds	r7, #84	; 0x54
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <__cvt>:
 8004c9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9e:	ec55 4b10 	vmov	r4, r5, d0
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	460e      	mov	r6, r1
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	462b      	mov	r3, r5
 8004caa:	bfbb      	ittet	lt
 8004cac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cb0:	461d      	movlt	r5, r3
 8004cb2:	2300      	movge	r3, #0
 8004cb4:	232d      	movlt	r3, #45	; 0x2d
 8004cb6:	700b      	strb	r3, [r1, #0]
 8004cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cbe:	4691      	mov	r9, r2
 8004cc0:	f023 0820 	bic.w	r8, r3, #32
 8004cc4:	bfbc      	itt	lt
 8004cc6:	4622      	movlt	r2, r4
 8004cc8:	4614      	movlt	r4, r2
 8004cca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cce:	d005      	beq.n	8004cdc <__cvt+0x42>
 8004cd0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cd4:	d100      	bne.n	8004cd8 <__cvt+0x3e>
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	2102      	movs	r1, #2
 8004cda:	e000      	b.n	8004cde <__cvt+0x44>
 8004cdc:	2103      	movs	r1, #3
 8004cde:	ab03      	add	r3, sp, #12
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	ab02      	add	r3, sp, #8
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	ec45 4b10 	vmov	d0, r4, r5
 8004cea:	4653      	mov	r3, sl
 8004cec:	4632      	mov	r2, r6
 8004cee:	f000 fe4b 	bl	8005988 <_dtoa_r>
 8004cf2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	d102      	bne.n	8004d00 <__cvt+0x66>
 8004cfa:	f019 0f01 	tst.w	r9, #1
 8004cfe:	d022      	beq.n	8004d46 <__cvt+0xac>
 8004d00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d04:	eb07 0906 	add.w	r9, r7, r6
 8004d08:	d110      	bne.n	8004d2c <__cvt+0x92>
 8004d0a:	783b      	ldrb	r3, [r7, #0]
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d10a      	bne.n	8004d26 <__cvt+0x8c>
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7fb fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1c:	b918      	cbnz	r0, 8004d26 <__cvt+0x8c>
 8004d1e:	f1c6 0601 	rsb	r6, r6, #1
 8004d22:	f8ca 6000 	str.w	r6, [sl]
 8004d26:	f8da 3000 	ldr.w	r3, [sl]
 8004d2a:	4499      	add	r9, r3
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d38:	b108      	cbz	r0, 8004d3e <__cvt+0xa4>
 8004d3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d3e:	2230      	movs	r2, #48	; 0x30
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	454b      	cmp	r3, r9
 8004d44:	d307      	bcc.n	8004d56 <__cvt+0xbc>
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d4a:	1bdb      	subs	r3, r3, r7
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	b004      	add	sp, #16
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	9103      	str	r1, [sp, #12]
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e7f0      	b.n	8004d40 <__cvt+0xa6>

08004d5e <__exponent>:
 8004d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d60:	4603      	mov	r3, r0
 8004d62:	2900      	cmp	r1, #0
 8004d64:	bfb8      	it	lt
 8004d66:	4249      	neglt	r1, r1
 8004d68:	f803 2b02 	strb.w	r2, [r3], #2
 8004d6c:	bfb4      	ite	lt
 8004d6e:	222d      	movlt	r2, #45	; 0x2d
 8004d70:	222b      	movge	r2, #43	; 0x2b
 8004d72:	2909      	cmp	r1, #9
 8004d74:	7042      	strb	r2, [r0, #1]
 8004d76:	dd2a      	ble.n	8004dce <__exponent+0x70>
 8004d78:	f10d 0207 	add.w	r2, sp, #7
 8004d7c:	4617      	mov	r7, r2
 8004d7e:	260a      	movs	r6, #10
 8004d80:	4694      	mov	ip, r2
 8004d82:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d86:	fb06 1415 	mls	r4, r6, r5, r1
 8004d8a:	3430      	adds	r4, #48	; 0x30
 8004d8c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004d90:	460c      	mov	r4, r1
 8004d92:	2c63      	cmp	r4, #99	; 0x63
 8004d94:	f102 32ff 	add.w	r2, r2, #4294967295
 8004d98:	4629      	mov	r1, r5
 8004d9a:	dcf1      	bgt.n	8004d80 <__exponent+0x22>
 8004d9c:	3130      	adds	r1, #48	; 0x30
 8004d9e:	f1ac 0402 	sub.w	r4, ip, #2
 8004da2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004da6:	1c41      	adds	r1, r0, #1
 8004da8:	4622      	mov	r2, r4
 8004daa:	42ba      	cmp	r2, r7
 8004dac:	d30a      	bcc.n	8004dc4 <__exponent+0x66>
 8004dae:	f10d 0209 	add.w	r2, sp, #9
 8004db2:	eba2 020c 	sub.w	r2, r2, ip
 8004db6:	42bc      	cmp	r4, r7
 8004db8:	bf88      	it	hi
 8004dba:	2200      	movhi	r2, #0
 8004dbc:	4413      	add	r3, r2
 8004dbe:	1a18      	subs	r0, r3, r0
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004dc8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004dcc:	e7ed      	b.n	8004daa <__exponent+0x4c>
 8004dce:	2330      	movs	r3, #48	; 0x30
 8004dd0:	3130      	adds	r1, #48	; 0x30
 8004dd2:	7083      	strb	r3, [r0, #2]
 8004dd4:	70c1      	strb	r1, [r0, #3]
 8004dd6:	1d03      	adds	r3, r0, #4
 8004dd8:	e7f1      	b.n	8004dbe <__exponent+0x60>
	...

08004ddc <_printf_float>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	ed2d 8b02 	vpush	{d8}
 8004de4:	b08d      	sub	sp, #52	; 0x34
 8004de6:	460c      	mov	r4, r1
 8004de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004dec:	4616      	mov	r6, r2
 8004dee:	461f      	mov	r7, r3
 8004df0:	4605      	mov	r5, r0
 8004df2:	f000 fcc7 	bl	8005784 <_localeconv_r>
 8004df6:	f8d0 a000 	ldr.w	sl, [r0]
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f7fb fa38 	bl	8000270 <strlen>
 8004e00:	2300      	movs	r3, #0
 8004e02:	930a      	str	r3, [sp, #40]	; 0x28
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	f8d8 3000 	ldr.w	r3, [r8]
 8004e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e10:	3307      	adds	r3, #7
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	f103 0208 	add.w	r2, r3, #8
 8004e1a:	f8c8 2000 	str.w	r2, [r8]
 8004e1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e26:	9307      	str	r3, [sp, #28]
 8004e28:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e2c:	ee08 0a10 	vmov	s16, r0
 8004e30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e38:	4b9e      	ldr	r3, [pc, #632]	; (80050b4 <_printf_float+0x2d8>)
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	f7fb fe75 	bl	8000b2c <__aeabi_dcmpun>
 8004e42:	bb88      	cbnz	r0, 8004ea8 <_printf_float+0xcc>
 8004e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e48:	4b9a      	ldr	r3, [pc, #616]	; (80050b4 <_printf_float+0x2d8>)
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	f7fb fe4f 	bl	8000af0 <__aeabi_dcmple>
 8004e52:	bb48      	cbnz	r0, 8004ea8 <_printf_float+0xcc>
 8004e54:	2200      	movs	r2, #0
 8004e56:	2300      	movs	r3, #0
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fe3e 	bl	8000adc <__aeabi_dcmplt>
 8004e60:	b110      	cbz	r0, 8004e68 <_printf_float+0x8c>
 8004e62:	232d      	movs	r3, #45	; 0x2d
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	4a93      	ldr	r2, [pc, #588]	; (80050b8 <_printf_float+0x2dc>)
 8004e6a:	4b94      	ldr	r3, [pc, #592]	; (80050bc <_printf_float+0x2e0>)
 8004e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e70:	bf94      	ite	ls
 8004e72:	4690      	movls	r8, r2
 8004e74:	4698      	movhi	r8, r3
 8004e76:	2303      	movs	r3, #3
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	9b05      	ldr	r3, [sp, #20]
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	f04f 0900 	mov.w	r9, #0
 8004e86:	9700      	str	r7, [sp, #0]
 8004e88:	4633      	mov	r3, r6
 8004e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f9da 	bl	8005248 <_printf_common>
 8004e94:	3001      	adds	r0, #1
 8004e96:	f040 8090 	bne.w	8004fba <_printf_float+0x1de>
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	b00d      	add	sp, #52	; 0x34
 8004ea0:	ecbd 8b02 	vpop	{d8}
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8004eb4:	b140      	cbz	r0, 8004ec8 <_printf_float+0xec>
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfbc      	itt	lt
 8004ebc:	232d      	movlt	r3, #45	; 0x2d
 8004ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ec2:	4a7f      	ldr	r2, [pc, #508]	; (80050c0 <_printf_float+0x2e4>)
 8004ec4:	4b7f      	ldr	r3, [pc, #508]	; (80050c4 <_printf_float+0x2e8>)
 8004ec6:	e7d1      	b.n	8004e6c <_printf_float+0x90>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ece:	9206      	str	r2, [sp, #24]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	d13f      	bne.n	8004f54 <_printf_float+0x178>
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	9b05      	ldr	r3, [sp, #20]
 8004eda:	6861      	ldr	r1, [r4, #4]
 8004edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8004ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004eea:	ab09      	add	r3, sp, #36	; 0x24
 8004eec:	ec49 8b10 	vmov	d0, r8, r9
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7ff fece 	bl	8004c9a <__cvt>
 8004efe:	9b06      	ldr	r3, [sp, #24]
 8004f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f02:	2b47      	cmp	r3, #71	; 0x47
 8004f04:	4680      	mov	r8, r0
 8004f06:	d108      	bne.n	8004f1a <_printf_float+0x13e>
 8004f08:	1cc8      	adds	r0, r1, #3
 8004f0a:	db02      	blt.n	8004f12 <_printf_float+0x136>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	dd41      	ble.n	8004f96 <_printf_float+0x1ba>
 8004f12:	f1ab 0302 	sub.w	r3, fp, #2
 8004f16:	fa5f fb83 	uxtb.w	fp, r3
 8004f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f1e:	d820      	bhi.n	8004f62 <_printf_float+0x186>
 8004f20:	3901      	subs	r1, #1
 8004f22:	465a      	mov	r2, fp
 8004f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f28:	9109      	str	r1, [sp, #36]	; 0x24
 8004f2a:	f7ff ff18 	bl	8004d5e <__exponent>
 8004f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f30:	1813      	adds	r3, r2, r0
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	4681      	mov	r9, r0
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	dc02      	bgt.n	8004f40 <_printf_float+0x164>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d2      	lsls	r2, r2, #31
 8004f3e:	d501      	bpl.n	8004f44 <_printf_float+0x168>
 8004f40:	3301      	adds	r3, #1
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d09c      	beq.n	8004e86 <_printf_float+0xaa>
 8004f4c:	232d      	movs	r3, #45	; 0x2d
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f52:	e798      	b.n	8004e86 <_printf_float+0xaa>
 8004f54:	9a06      	ldr	r2, [sp, #24]
 8004f56:	2a47      	cmp	r2, #71	; 0x47
 8004f58:	d1be      	bne.n	8004ed8 <_printf_float+0xfc>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1bc      	bne.n	8004ed8 <_printf_float+0xfc>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7b9      	b.n	8004ed6 <_printf_float+0xfa>
 8004f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f66:	d118      	bne.n	8004f9a <_printf_float+0x1be>
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	dd0b      	ble.n	8004f86 <_printf_float+0x1aa>
 8004f6e:	6121      	str	r1, [r4, #16]
 8004f70:	b913      	cbnz	r3, 8004f78 <_printf_float+0x19c>
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	07d0      	lsls	r0, r2, #31
 8004f76:	d502      	bpl.n	8004f7e <_printf_float+0x1a2>
 8004f78:	3301      	adds	r3, #1
 8004f7a:	440b      	add	r3, r1
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f80:	f04f 0900 	mov.w	r9, #0
 8004f84:	e7de      	b.n	8004f44 <_printf_float+0x168>
 8004f86:	b913      	cbnz	r3, 8004f8e <_printf_float+0x1b2>
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	07d2      	lsls	r2, r2, #31
 8004f8c:	d501      	bpl.n	8004f92 <_printf_float+0x1b6>
 8004f8e:	3302      	adds	r3, #2
 8004f90:	e7f4      	b.n	8004f7c <_printf_float+0x1a0>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e7f2      	b.n	8004f7c <_printf_float+0x1a0>
 8004f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	db05      	blt.n	8004fac <_printf_float+0x1d0>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	6121      	str	r1, [r4, #16]
 8004fa4:	07d8      	lsls	r0, r3, #31
 8004fa6:	d5ea      	bpl.n	8004f7e <_printf_float+0x1a2>
 8004fa8:	1c4b      	adds	r3, r1, #1
 8004faa:	e7e7      	b.n	8004f7c <_printf_float+0x1a0>
 8004fac:	2900      	cmp	r1, #0
 8004fae:	bfd4      	ite	le
 8004fb0:	f1c1 0202 	rsble	r2, r1, #2
 8004fb4:	2201      	movgt	r2, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	e7e0      	b.n	8004f7c <_printf_float+0x1a0>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	055a      	lsls	r2, r3, #21
 8004fbe:	d407      	bmi.n	8004fd0 <_printf_float+0x1f4>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d12c      	bne.n	8005028 <_printf_float+0x24c>
 8004fce:	e764      	b.n	8004e9a <_printf_float+0xbe>
 8004fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fd4:	f240 80e0 	bls.w	8005198 <_printf_float+0x3bc>
 8004fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f7fb fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d034      	beq.n	8005052 <_printf_float+0x276>
 8004fe8:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <_printf_float+0x2ec>)
 8004fea:	2301      	movs	r3, #1
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f af51 	beq.w	8004e9a <_printf_float+0xbe>
 8004ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	db02      	blt.n	8005006 <_printf_float+0x22a>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	07d8      	lsls	r0, r3, #31
 8005004:	d510      	bpl.n	8005028 <_printf_float+0x24c>
 8005006:	ee18 3a10 	vmov	r3, s16
 800500a:	4652      	mov	r2, sl
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af41 	beq.w	8004e9a <_printf_float+0xbe>
 8005018:	f04f 0800 	mov.w	r8, #0
 800501c:	f104 091a 	add.w	r9, r4, #26
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	4543      	cmp	r3, r8
 8005026:	dc09      	bgt.n	800503c <_printf_float+0x260>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	079b      	lsls	r3, r3, #30
 800502c:	f100 8107 	bmi.w	800523e <_printf_float+0x462>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e730      	b.n	8004e9e <_printf_float+0xc2>
 800503c:	2301      	movs	r3, #1
 800503e:	464a      	mov	r2, r9
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f43f af27 	beq.w	8004e9a <_printf_float+0xbe>
 800504c:	f108 0801 	add.w	r8, r8, #1
 8005050:	e7e6      	b.n	8005020 <_printf_float+0x244>
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	dc39      	bgt.n	80050cc <_printf_float+0x2f0>
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <_printf_float+0x2ec>)
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f af19 	beq.w	8004e9a <_printf_float+0xbe>
 8005068:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800506c:	4313      	orrs	r3, r2
 800506e:	d102      	bne.n	8005076 <_printf_float+0x29a>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07d9      	lsls	r1, r3, #31
 8005074:	d5d8      	bpl.n	8005028 <_printf_float+0x24c>
 8005076:	ee18 3a10 	vmov	r3, s16
 800507a:	4652      	mov	r2, sl
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af09 	beq.w	8004e9a <_printf_float+0xbe>
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	f104 0a1a 	add.w	sl, r4, #26
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	425b      	negs	r3, r3
 8005094:	454b      	cmp	r3, r9
 8005096:	dc01      	bgt.n	800509c <_printf_float+0x2c0>
 8005098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509a:	e792      	b.n	8004fc2 <_printf_float+0x1e6>
 800509c:	2301      	movs	r3, #1
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f aef7 	beq.w	8004e9a <_printf_float+0xbe>
 80050ac:	f109 0901 	add.w	r9, r9, #1
 80050b0:	e7ee      	b.n	8005090 <_printf_float+0x2b4>
 80050b2:	bf00      	nop
 80050b4:	7fefffff 	.word	0x7fefffff
 80050b8:	08007668 	.word	0x08007668
 80050bc:	0800766c 	.word	0x0800766c
 80050c0:	08007670 	.word	0x08007670
 80050c4:	08007674 	.word	0x08007674
 80050c8:	08007678 	.word	0x08007678
 80050cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bfa8      	it	ge
 80050d4:	461a      	movge	r2, r3
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	4691      	mov	r9, r2
 80050da:	dc37      	bgt.n	800514c <_printf_float+0x370>
 80050dc:	f04f 0b00 	mov.w	fp, #0
 80050e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e4:	f104 021a 	add.w	r2, r4, #26
 80050e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050ea:	9305      	str	r3, [sp, #20]
 80050ec:	eba3 0309 	sub.w	r3, r3, r9
 80050f0:	455b      	cmp	r3, fp
 80050f2:	dc33      	bgt.n	800515c <_printf_float+0x380>
 80050f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f8:	429a      	cmp	r2, r3
 80050fa:	db3b      	blt.n	8005174 <_printf_float+0x398>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d438      	bmi.n	8005174 <_printf_float+0x398>
 8005102:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005106:	eba2 0903 	sub.w	r9, r2, r3
 800510a:	9b05      	ldr	r3, [sp, #20]
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	4591      	cmp	r9, r2
 8005110:	bfa8      	it	ge
 8005112:	4691      	movge	r9, r2
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc35      	bgt.n	8005186 <_printf_float+0x3aa>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005122:	f104 0a1a 	add.w	sl, r4, #26
 8005126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	4543      	cmp	r3, r8
 8005132:	f77f af79 	ble.w	8005028 <_printf_float+0x24c>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aeaa 	beq.w	8004e9a <_printf_float+0xbe>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7ec      	b.n	8005126 <_printf_float+0x34a>
 800514c:	4613      	mov	r3, r2
 800514e:	4631      	mov	r1, r6
 8005150:	4642      	mov	r2, r8
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	d1c0      	bne.n	80050dc <_printf_float+0x300>
 800515a:	e69e      	b.n	8004e9a <_printf_float+0xbe>
 800515c:	2301      	movs	r3, #1
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	9205      	str	r2, [sp, #20]
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f ae97 	beq.w	8004e9a <_printf_float+0xbe>
 800516c:	9a05      	ldr	r2, [sp, #20]
 800516e:	f10b 0b01 	add.w	fp, fp, #1
 8005172:	e7b9      	b.n	80050e8 <_printf_float+0x30c>
 8005174:	ee18 3a10 	vmov	r3, s16
 8005178:	4652      	mov	r2, sl
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	d1be      	bne.n	8005102 <_printf_float+0x326>
 8005184:	e689      	b.n	8004e9a <_printf_float+0xbe>
 8005186:	9a05      	ldr	r2, [sp, #20]
 8005188:	464b      	mov	r3, r9
 800518a:	4442      	add	r2, r8
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	d1c1      	bne.n	800511a <_printf_float+0x33e>
 8005196:	e680      	b.n	8004e9a <_printf_float+0xbe>
 8005198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800519a:	2a01      	cmp	r2, #1
 800519c:	dc01      	bgt.n	80051a2 <_printf_float+0x3c6>
 800519e:	07db      	lsls	r3, r3, #31
 80051a0:	d53a      	bpl.n	8005218 <_printf_float+0x43c>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae74 	beq.w	8004e9a <_printf_float+0xbe>
 80051b2:	ee18 3a10 	vmov	r3, s16
 80051b6:	4652      	mov	r2, sl
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f ae6b 	beq.w	8004e9a <_printf_float+0xbe>
 80051c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80051d0:	f7fb fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80051d4:	b9d8      	cbnz	r0, 800520e <_printf_float+0x432>
 80051d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051da:	f108 0201 	add.w	r2, r8, #1
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	d10e      	bne.n	8005206 <_printf_float+0x42a>
 80051e8:	e657      	b.n	8004e9a <_printf_float+0xbe>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4652      	mov	r2, sl
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	f43f ae50 	beq.w	8004e9a <_printf_float+0xbe>
 80051fa:	f108 0801 	add.w	r8, r8, #1
 80051fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	4543      	cmp	r3, r8
 8005204:	dcf1      	bgt.n	80051ea <_printf_float+0x40e>
 8005206:	464b      	mov	r3, r9
 8005208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800520c:	e6da      	b.n	8004fc4 <_printf_float+0x1e8>
 800520e:	f04f 0800 	mov.w	r8, #0
 8005212:	f104 0a1a 	add.w	sl, r4, #26
 8005216:	e7f2      	b.n	80051fe <_printf_float+0x422>
 8005218:	2301      	movs	r3, #1
 800521a:	4642      	mov	r2, r8
 800521c:	e7df      	b.n	80051de <_printf_float+0x402>
 800521e:	2301      	movs	r3, #1
 8005220:	464a      	mov	r2, r9
 8005222:	4631      	mov	r1, r6
 8005224:	4628      	mov	r0, r5
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	f43f ae36 	beq.w	8004e9a <_printf_float+0xbe>
 800522e:	f108 0801 	add.w	r8, r8, #1
 8005232:	68e3      	ldr	r3, [r4, #12]
 8005234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005236:	1a5b      	subs	r3, r3, r1
 8005238:	4543      	cmp	r3, r8
 800523a:	dcf0      	bgt.n	800521e <_printf_float+0x442>
 800523c:	e6f8      	b.n	8005030 <_printf_float+0x254>
 800523e:	f04f 0800 	mov.w	r8, #0
 8005242:	f104 0919 	add.w	r9, r4, #25
 8005246:	e7f4      	b.n	8005232 <_printf_float+0x456>

08005248 <_printf_common>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	4616      	mov	r6, r2
 800524e:	4699      	mov	r9, r3
 8005250:	688a      	ldr	r2, [r1, #8]
 8005252:	690b      	ldr	r3, [r1, #16]
 8005254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005258:	4293      	cmp	r3, r2
 800525a:	bfb8      	it	lt
 800525c:	4613      	movlt	r3, r2
 800525e:	6033      	str	r3, [r6, #0]
 8005260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005264:	4607      	mov	r7, r0
 8005266:	460c      	mov	r4, r1
 8005268:	b10a      	cbz	r2, 800526e <_printf_common+0x26>
 800526a:	3301      	adds	r3, #1
 800526c:	6033      	str	r3, [r6, #0]
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	0699      	lsls	r1, r3, #26
 8005272:	bf42      	ittt	mi
 8005274:	6833      	ldrmi	r3, [r6, #0]
 8005276:	3302      	addmi	r3, #2
 8005278:	6033      	strmi	r3, [r6, #0]
 800527a:	6825      	ldr	r5, [r4, #0]
 800527c:	f015 0506 	ands.w	r5, r5, #6
 8005280:	d106      	bne.n	8005290 <_printf_common+0x48>
 8005282:	f104 0a19 	add.w	sl, r4, #25
 8005286:	68e3      	ldr	r3, [r4, #12]
 8005288:	6832      	ldr	r2, [r6, #0]
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	42ab      	cmp	r3, r5
 800528e:	dc26      	bgt.n	80052de <_printf_common+0x96>
 8005290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005294:	1e13      	subs	r3, r2, #0
 8005296:	6822      	ldr	r2, [r4, #0]
 8005298:	bf18      	it	ne
 800529a:	2301      	movne	r3, #1
 800529c:	0692      	lsls	r2, r2, #26
 800529e:	d42b      	bmi.n	80052f8 <_printf_common+0xb0>
 80052a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a4:	4649      	mov	r1, r9
 80052a6:	4638      	mov	r0, r7
 80052a8:	47c0      	blx	r8
 80052aa:	3001      	adds	r0, #1
 80052ac:	d01e      	beq.n	80052ec <_printf_common+0xa4>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	f003 0306 	and.w	r3, r3, #6
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	bf02      	ittt	eq
 80052ba:	68e5      	ldreq	r5, [r4, #12]
 80052bc:	6833      	ldreq	r3, [r6, #0]
 80052be:	1aed      	subeq	r5, r5, r3
 80052c0:	68a3      	ldr	r3, [r4, #8]
 80052c2:	bf0c      	ite	eq
 80052c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c8:	2500      	movne	r5, #0
 80052ca:	4293      	cmp	r3, r2
 80052cc:	bfc4      	itt	gt
 80052ce:	1a9b      	subgt	r3, r3, r2
 80052d0:	18ed      	addgt	r5, r5, r3
 80052d2:	2600      	movs	r6, #0
 80052d4:	341a      	adds	r4, #26
 80052d6:	42b5      	cmp	r5, r6
 80052d8:	d11a      	bne.n	8005310 <_printf_common+0xc8>
 80052da:	2000      	movs	r0, #0
 80052dc:	e008      	b.n	80052f0 <_printf_common+0xa8>
 80052de:	2301      	movs	r3, #1
 80052e0:	4652      	mov	r2, sl
 80052e2:	4649      	mov	r1, r9
 80052e4:	4638      	mov	r0, r7
 80052e6:	47c0      	blx	r8
 80052e8:	3001      	adds	r0, #1
 80052ea:	d103      	bne.n	80052f4 <_printf_common+0xac>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f4:	3501      	adds	r5, #1
 80052f6:	e7c6      	b.n	8005286 <_printf_common+0x3e>
 80052f8:	18e1      	adds	r1, r4, r3
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	2030      	movs	r0, #48	; 0x30
 80052fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005302:	4422      	add	r2, r4
 8005304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800530c:	3302      	adds	r3, #2
 800530e:	e7c7      	b.n	80052a0 <_printf_common+0x58>
 8005310:	2301      	movs	r3, #1
 8005312:	4622      	mov	r2, r4
 8005314:	4649      	mov	r1, r9
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d0e6      	beq.n	80052ec <_printf_common+0xa4>
 800531e:	3601      	adds	r6, #1
 8005320:	e7d9      	b.n	80052d6 <_printf_common+0x8e>
	...

08005324 <_printf_i>:
 8005324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	7e0f      	ldrb	r7, [r1, #24]
 800532a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800532c:	2f78      	cmp	r7, #120	; 0x78
 800532e:	4691      	mov	r9, r2
 8005330:	4680      	mov	r8, r0
 8005332:	460c      	mov	r4, r1
 8005334:	469a      	mov	sl, r3
 8005336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800533a:	d807      	bhi.n	800534c <_printf_i+0x28>
 800533c:	2f62      	cmp	r7, #98	; 0x62
 800533e:	d80a      	bhi.n	8005356 <_printf_i+0x32>
 8005340:	2f00      	cmp	r7, #0
 8005342:	f000 80d4 	beq.w	80054ee <_printf_i+0x1ca>
 8005346:	2f58      	cmp	r7, #88	; 0x58
 8005348:	f000 80c0 	beq.w	80054cc <_printf_i+0x1a8>
 800534c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005354:	e03a      	b.n	80053cc <_printf_i+0xa8>
 8005356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800535a:	2b15      	cmp	r3, #21
 800535c:	d8f6      	bhi.n	800534c <_printf_i+0x28>
 800535e:	a101      	add	r1, pc, #4	; (adr r1, 8005364 <_printf_i+0x40>)
 8005360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053d1 	.word	0x080053d1
 800536c:	0800534d 	.word	0x0800534d
 8005370:	0800534d 	.word	0x0800534d
 8005374:	0800534d 	.word	0x0800534d
 8005378:	0800534d 	.word	0x0800534d
 800537c:	080053d1 	.word	0x080053d1
 8005380:	0800534d 	.word	0x0800534d
 8005384:	0800534d 	.word	0x0800534d
 8005388:	0800534d 	.word	0x0800534d
 800538c:	0800534d 	.word	0x0800534d
 8005390:	080054d5 	.word	0x080054d5
 8005394:	080053fd 	.word	0x080053fd
 8005398:	0800548f 	.word	0x0800548f
 800539c:	0800534d 	.word	0x0800534d
 80053a0:	0800534d 	.word	0x0800534d
 80053a4:	080054f7 	.word	0x080054f7
 80053a8:	0800534d 	.word	0x0800534d
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	0800534d 	.word	0x0800534d
 80053b4:	0800534d 	.word	0x0800534d
 80053b8:	08005497 	.word	0x08005497
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	602a      	str	r2, [r5, #0]
 80053c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053cc:	2301      	movs	r3, #1
 80053ce:	e09f      	b.n	8005510 <_printf_i+0x1ec>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	0607      	lsls	r7, r0, #24
 80053d6:	f103 0104 	add.w	r1, r3, #4
 80053da:	6029      	str	r1, [r5, #0]
 80053dc:	d501      	bpl.n	80053e2 <_printf_i+0xbe>
 80053de:	681e      	ldr	r6, [r3, #0]
 80053e0:	e003      	b.n	80053ea <_printf_i+0xc6>
 80053e2:	0646      	lsls	r6, r0, #25
 80053e4:	d5fb      	bpl.n	80053de <_printf_i+0xba>
 80053e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	da03      	bge.n	80053f6 <_printf_i+0xd2>
 80053ee:	232d      	movs	r3, #45	; 0x2d
 80053f0:	4276      	negs	r6, r6
 80053f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f6:	485a      	ldr	r0, [pc, #360]	; (8005560 <_printf_i+0x23c>)
 80053f8:	230a      	movs	r3, #10
 80053fa:	e012      	b.n	8005422 <_printf_i+0xfe>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	1d19      	adds	r1, r3, #4
 8005402:	6029      	str	r1, [r5, #0]
 8005404:	0605      	lsls	r5, r0, #24
 8005406:	d501      	bpl.n	800540c <_printf_i+0xe8>
 8005408:	681e      	ldr	r6, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0xee>
 800540c:	0641      	lsls	r1, r0, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0xe4>
 8005410:	881e      	ldrh	r6, [r3, #0]
 8005412:	4853      	ldr	r0, [pc, #332]	; (8005560 <_printf_i+0x23c>)
 8005414:	2f6f      	cmp	r7, #111	; 0x6f
 8005416:	bf0c      	ite	eq
 8005418:	2308      	moveq	r3, #8
 800541a:	230a      	movne	r3, #10
 800541c:	2100      	movs	r1, #0
 800541e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005422:	6865      	ldr	r5, [r4, #4]
 8005424:	60a5      	str	r5, [r4, #8]
 8005426:	2d00      	cmp	r5, #0
 8005428:	bfa2      	ittt	ge
 800542a:	6821      	ldrge	r1, [r4, #0]
 800542c:	f021 0104 	bicge.w	r1, r1, #4
 8005430:	6021      	strge	r1, [r4, #0]
 8005432:	b90e      	cbnz	r6, 8005438 <_printf_i+0x114>
 8005434:	2d00      	cmp	r5, #0
 8005436:	d04b      	beq.n	80054d0 <_printf_i+0x1ac>
 8005438:	4615      	mov	r5, r2
 800543a:	fbb6 f1f3 	udiv	r1, r6, r3
 800543e:	fb03 6711 	mls	r7, r3, r1, r6
 8005442:	5dc7      	ldrb	r7, [r0, r7]
 8005444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005448:	4637      	mov	r7, r6
 800544a:	42bb      	cmp	r3, r7
 800544c:	460e      	mov	r6, r1
 800544e:	d9f4      	bls.n	800543a <_printf_i+0x116>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d10b      	bne.n	800546c <_printf_i+0x148>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	07de      	lsls	r6, r3, #31
 8005458:	d508      	bpl.n	800546c <_printf_i+0x148>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	6861      	ldr	r1, [r4, #4]
 800545e:	4299      	cmp	r1, r3
 8005460:	bfde      	ittt	le
 8005462:	2330      	movle	r3, #48	; 0x30
 8005464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800546c:	1b52      	subs	r2, r2, r5
 800546e:	6122      	str	r2, [r4, #16]
 8005470:	f8cd a000 	str.w	sl, [sp]
 8005474:	464b      	mov	r3, r9
 8005476:	aa03      	add	r2, sp, #12
 8005478:	4621      	mov	r1, r4
 800547a:	4640      	mov	r0, r8
 800547c:	f7ff fee4 	bl	8005248 <_printf_common>
 8005480:	3001      	adds	r0, #1
 8005482:	d14a      	bne.n	800551a <_printf_i+0x1f6>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	b004      	add	sp, #16
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f043 0320 	orr.w	r3, r3, #32
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	4833      	ldr	r0, [pc, #204]	; (8005564 <_printf_i+0x240>)
 8005498:	2778      	movs	r7, #120	; 0x78
 800549a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6829      	ldr	r1, [r5, #0]
 80054a2:	061f      	lsls	r7, r3, #24
 80054a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80054a8:	d402      	bmi.n	80054b0 <_printf_i+0x18c>
 80054aa:	065f      	lsls	r7, r3, #25
 80054ac:	bf48      	it	mi
 80054ae:	b2b6      	uxthmi	r6, r6
 80054b0:	07df      	lsls	r7, r3, #31
 80054b2:	bf48      	it	mi
 80054b4:	f043 0320 	orrmi.w	r3, r3, #32
 80054b8:	6029      	str	r1, [r5, #0]
 80054ba:	bf48      	it	mi
 80054bc:	6023      	strmi	r3, [r4, #0]
 80054be:	b91e      	cbnz	r6, 80054c8 <_printf_i+0x1a4>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	2310      	movs	r3, #16
 80054ca:	e7a7      	b.n	800541c <_printf_i+0xf8>
 80054cc:	4824      	ldr	r0, [pc, #144]	; (8005560 <_printf_i+0x23c>)
 80054ce:	e7e4      	b.n	800549a <_printf_i+0x176>
 80054d0:	4615      	mov	r5, r2
 80054d2:	e7bd      	b.n	8005450 <_printf_i+0x12c>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6826      	ldr	r6, [r4, #0]
 80054d8:	6961      	ldr	r1, [r4, #20]
 80054da:	1d18      	adds	r0, r3, #4
 80054dc:	6028      	str	r0, [r5, #0]
 80054de:	0635      	lsls	r5, r6, #24
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0x1c4>
 80054e4:	6019      	str	r1, [r3, #0]
 80054e6:	e002      	b.n	80054ee <_printf_i+0x1ca>
 80054e8:	0670      	lsls	r0, r6, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0x1c0>
 80054ec:	8019      	strh	r1, [r3, #0]
 80054ee:	2300      	movs	r3, #0
 80054f0:	6123      	str	r3, [r4, #16]
 80054f2:	4615      	mov	r5, r2
 80054f4:	e7bc      	b.n	8005470 <_printf_i+0x14c>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	681d      	ldr	r5, [r3, #0]
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	2100      	movs	r1, #0
 8005502:	4628      	mov	r0, r5
 8005504:	f7fa fe64 	bl	80001d0 <memchr>
 8005508:	b108      	cbz	r0, 800550e <_printf_i+0x1ea>
 800550a:	1b40      	subs	r0, r0, r5
 800550c:	6060      	str	r0, [r4, #4]
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	2300      	movs	r3, #0
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005518:	e7aa      	b.n	8005470 <_printf_i+0x14c>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	462a      	mov	r2, r5
 800551e:	4649      	mov	r1, r9
 8005520:	4640      	mov	r0, r8
 8005522:	47d0      	blx	sl
 8005524:	3001      	adds	r0, #1
 8005526:	d0ad      	beq.n	8005484 <_printf_i+0x160>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	079b      	lsls	r3, r3, #30
 800552c:	d413      	bmi.n	8005556 <_printf_i+0x232>
 800552e:	68e0      	ldr	r0, [r4, #12]
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	4298      	cmp	r0, r3
 8005534:	bfb8      	it	lt
 8005536:	4618      	movlt	r0, r3
 8005538:	e7a6      	b.n	8005488 <_printf_i+0x164>
 800553a:	2301      	movs	r3, #1
 800553c:	4632      	mov	r2, r6
 800553e:	4649      	mov	r1, r9
 8005540:	4640      	mov	r0, r8
 8005542:	47d0      	blx	sl
 8005544:	3001      	adds	r0, #1
 8005546:	d09d      	beq.n	8005484 <_printf_i+0x160>
 8005548:	3501      	adds	r5, #1
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	9903      	ldr	r1, [sp, #12]
 800554e:	1a5b      	subs	r3, r3, r1
 8005550:	42ab      	cmp	r3, r5
 8005552:	dcf2      	bgt.n	800553a <_printf_i+0x216>
 8005554:	e7eb      	b.n	800552e <_printf_i+0x20a>
 8005556:	2500      	movs	r5, #0
 8005558:	f104 0619 	add.w	r6, r4, #25
 800555c:	e7f5      	b.n	800554a <_printf_i+0x226>
 800555e:	bf00      	nop
 8005560:	0800767a 	.word	0x0800767a
 8005564:	0800768b 	.word	0x0800768b

08005568 <std>:
 8005568:	2300      	movs	r3, #0
 800556a:	b510      	push	{r4, lr}
 800556c:	4604      	mov	r4, r0
 800556e:	e9c0 3300 	strd	r3, r3, [r0]
 8005572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005576:	6083      	str	r3, [r0, #8]
 8005578:	8181      	strh	r1, [r0, #12]
 800557a:	6643      	str	r3, [r0, #100]	; 0x64
 800557c:	81c2      	strh	r2, [r0, #14]
 800557e:	6183      	str	r3, [r0, #24]
 8005580:	4619      	mov	r1, r3
 8005582:	2208      	movs	r2, #8
 8005584:	305c      	adds	r0, #92	; 0x5c
 8005586:	f000 f8f4 	bl	8005772 <memset>
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <std+0x58>)
 800558c:	6263      	str	r3, [r4, #36]	; 0x24
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <std+0x5c>)
 8005590:	62a3      	str	r3, [r4, #40]	; 0x28
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <std+0x60>)
 8005594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <std+0x64>)
 8005598:	6323      	str	r3, [r4, #48]	; 0x30
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <std+0x68>)
 800559c:	6224      	str	r4, [r4, #32]
 800559e:	429c      	cmp	r4, r3
 80055a0:	d006      	beq.n	80055b0 <std+0x48>
 80055a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055a6:	4294      	cmp	r4, r2
 80055a8:	d002      	beq.n	80055b0 <std+0x48>
 80055aa:	33d0      	adds	r3, #208	; 0xd0
 80055ac:	429c      	cmp	r4, r3
 80055ae:	d105      	bne.n	80055bc <std+0x54>
 80055b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b8:	f000 b958 	b.w	800586c <__retarget_lock_init_recursive>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	bf00      	nop
 80055c0:	080056ed 	.word	0x080056ed
 80055c4:	0800570f 	.word	0x0800570f
 80055c8:	08005747 	.word	0x08005747
 80055cc:	0800576b 	.word	0x0800576b
 80055d0:	20000304 	.word	0x20000304

080055d4 <stdio_exit_handler>:
 80055d4:	4a02      	ldr	r2, [pc, #8]	; (80055e0 <stdio_exit_handler+0xc>)
 80055d6:	4903      	ldr	r1, [pc, #12]	; (80055e4 <stdio_exit_handler+0x10>)
 80055d8:	4803      	ldr	r0, [pc, #12]	; (80055e8 <stdio_exit_handler+0x14>)
 80055da:	f000 b869 	b.w	80056b0 <_fwalk_sglue>
 80055de:	bf00      	nop
 80055e0:	20000018 	.word	0x20000018
 80055e4:	08006f71 	.word	0x08006f71
 80055e8:	20000024 	.word	0x20000024

080055ec <cleanup_stdio>:
 80055ec:	6841      	ldr	r1, [r0, #4]
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <cleanup_stdio+0x34>)
 80055f0:	4299      	cmp	r1, r3
 80055f2:	b510      	push	{r4, lr}
 80055f4:	4604      	mov	r4, r0
 80055f6:	d001      	beq.n	80055fc <cleanup_stdio+0x10>
 80055f8:	f001 fcba 	bl	8006f70 <_fflush_r>
 80055fc:	68a1      	ldr	r1, [r4, #8]
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <cleanup_stdio+0x38>)
 8005600:	4299      	cmp	r1, r3
 8005602:	d002      	beq.n	800560a <cleanup_stdio+0x1e>
 8005604:	4620      	mov	r0, r4
 8005606:	f001 fcb3 	bl	8006f70 <_fflush_r>
 800560a:	68e1      	ldr	r1, [r4, #12]
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <cleanup_stdio+0x3c>)
 800560e:	4299      	cmp	r1, r3
 8005610:	d004      	beq.n	800561c <cleanup_stdio+0x30>
 8005612:	4620      	mov	r0, r4
 8005614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005618:	f001 bcaa 	b.w	8006f70 <_fflush_r>
 800561c:	bd10      	pop	{r4, pc}
 800561e:	bf00      	nop
 8005620:	20000304 	.word	0x20000304
 8005624:	2000036c 	.word	0x2000036c
 8005628:	200003d4 	.word	0x200003d4

0800562c <global_stdio_init.part.0>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <global_stdio_init.part.0+0x30>)
 8005630:	4c0b      	ldr	r4, [pc, #44]	; (8005660 <global_stdio_init.part.0+0x34>)
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <global_stdio_init.part.0+0x38>)
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	4620      	mov	r0, r4
 8005638:	2200      	movs	r2, #0
 800563a:	2104      	movs	r1, #4
 800563c:	f7ff ff94 	bl	8005568 <std>
 8005640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005644:	2201      	movs	r2, #1
 8005646:	2109      	movs	r1, #9
 8005648:	f7ff ff8e 	bl	8005568 <std>
 800564c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005650:	2202      	movs	r2, #2
 8005652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005656:	2112      	movs	r1, #18
 8005658:	f7ff bf86 	b.w	8005568 <std>
 800565c:	2000043c 	.word	0x2000043c
 8005660:	20000304 	.word	0x20000304
 8005664:	080055d5 	.word	0x080055d5

08005668 <__sfp_lock_acquire>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sfp_lock_acquire+0x8>)
 800566a:	f000 b900 	b.w	800586e <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	20000445 	.word	0x20000445

08005674 <__sfp_lock_release>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sfp_lock_release+0x8>)
 8005676:	f000 b8fb 	b.w	8005870 <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	20000445 	.word	0x20000445

08005680 <__sinit>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	f7ff fff0 	bl	8005668 <__sfp_lock_acquire>
 8005688:	6a23      	ldr	r3, [r4, #32]
 800568a:	b11b      	cbz	r3, 8005694 <__sinit+0x14>
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f7ff bff0 	b.w	8005674 <__sfp_lock_release>
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <__sinit+0x28>)
 8005696:	6223      	str	r3, [r4, #32]
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <__sinit+0x2c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f5      	bne.n	800568c <__sinit+0xc>
 80056a0:	f7ff ffc4 	bl	800562c <global_stdio_init.part.0>
 80056a4:	e7f2      	b.n	800568c <__sinit+0xc>
 80056a6:	bf00      	nop
 80056a8:	080055ed 	.word	0x080055ed
 80056ac:	2000043c 	.word	0x2000043c

080056b0 <_fwalk_sglue>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	4607      	mov	r7, r0
 80056b6:	4688      	mov	r8, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	2600      	movs	r6, #0
 80056bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056c0:	f1b9 0901 	subs.w	r9, r9, #1
 80056c4:	d505      	bpl.n	80056d2 <_fwalk_sglue+0x22>
 80056c6:	6824      	ldr	r4, [r4, #0]
 80056c8:	2c00      	cmp	r4, #0
 80056ca:	d1f7      	bne.n	80056bc <_fwalk_sglue+0xc>
 80056cc:	4630      	mov	r0, r6
 80056ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d907      	bls.n	80056e8 <_fwalk_sglue+0x38>
 80056d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056dc:	3301      	adds	r3, #1
 80056de:	d003      	beq.n	80056e8 <_fwalk_sglue+0x38>
 80056e0:	4629      	mov	r1, r5
 80056e2:	4638      	mov	r0, r7
 80056e4:	47c0      	blx	r8
 80056e6:	4306      	orrs	r6, r0
 80056e8:	3568      	adds	r5, #104	; 0x68
 80056ea:	e7e9      	b.n	80056c0 <_fwalk_sglue+0x10>

080056ec <__sread>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	460c      	mov	r4, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	f000 f86c 	bl	80057d0 <_read_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	bfab      	itete	ge
 80056fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005700:	181b      	addge	r3, r3, r0
 8005702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005706:	bfac      	ite	ge
 8005708:	6563      	strge	r3, [r4, #84]	; 0x54
 800570a:	81a3      	strhlt	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__swrite>:
 800570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	461f      	mov	r7, r3
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	05db      	lsls	r3, r3, #23
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
 800571c:	4616      	mov	r6, r2
 800571e:	d505      	bpl.n	800572c <__swrite+0x1e>
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	2302      	movs	r3, #2
 8005726:	2200      	movs	r2, #0
 8005728:	f000 f840 	bl	80057ac <_lseek_r>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	4632      	mov	r2, r6
 800573a:	463b      	mov	r3, r7
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	f000 b857 	b.w	80057f4 <_write_r>

08005746 <__sseek>:
 8005746:	b510      	push	{r4, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 f82d 	bl	80057ac <_lseek_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	bf15      	itete	ne
 8005758:	6560      	strne	r0, [r4, #84]	; 0x54
 800575a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800575e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strheq	r3, [r4, #12]
 8005764:	bf18      	it	ne
 8005766:	81a3      	strhne	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__sclose>:
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 b80d 	b.w	800578c <_close_r>

08005772 <memset>:
 8005772:	4402      	add	r2, r0
 8005774:	4603      	mov	r3, r0
 8005776:	4293      	cmp	r3, r2
 8005778:	d100      	bne.n	800577c <memset+0xa>
 800577a:	4770      	bx	lr
 800577c:	f803 1b01 	strb.w	r1, [r3], #1
 8005780:	e7f9      	b.n	8005776 <memset+0x4>
	...

08005784 <_localeconv_r>:
 8005784:	4800      	ldr	r0, [pc, #0]	; (8005788 <_localeconv_r+0x4>)
 8005786:	4770      	bx	lr
 8005788:	20000164 	.word	0x20000164

0800578c <_close_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d06      	ldr	r5, [pc, #24]	; (80057a8 <_close_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb fd07 	bl	80011aa <_close>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_close_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_close_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000440 	.word	0x20000440

080057ac <_lseek_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	; (80057cc <_lseek_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb fd1c 	bl	80011f8 <_lseek>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_lseek_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_lseek_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000440 	.word	0x20000440

080057d0 <_read_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	; (80057f0 <_read_r+0x20>)
 80057d4:	4604      	mov	r4, r0
 80057d6:	4608      	mov	r0, r1
 80057d8:	4611      	mov	r1, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fb fcaa 	bl	8001138 <_read>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_read_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_read_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000440 	.word	0x20000440

080057f4 <_write_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d07      	ldr	r5, [pc, #28]	; (8005814 <_write_r+0x20>)
 80057f8:	4604      	mov	r4, r0
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fb fcb5 	bl	8001172 <_write>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_write_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_write_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000440 	.word	0x20000440

08005818 <__errno>:
 8005818:	4b01      	ldr	r3, [pc, #4]	; (8005820 <__errno+0x8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000070 	.word	0x20000070

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	4d0d      	ldr	r5, [pc, #52]	; (800585c <__libc_init_array+0x38>)
 8005828:	4c0d      	ldr	r4, [pc, #52]	; (8005860 <__libc_init_array+0x3c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	2600      	movs	r6, #0
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	4d0b      	ldr	r5, [pc, #44]	; (8005864 <__libc_init_array+0x40>)
 8005836:	4c0c      	ldr	r4, [pc, #48]	; (8005868 <__libc_init_array+0x44>)
 8005838:	f001 feee 	bl	8007618 <_init>
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	2600      	movs	r6, #0
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	080079dc 	.word	0x080079dc
 8005860:	080079dc 	.word	0x080079dc
 8005864:	080079dc 	.word	0x080079dc
 8005868:	080079e0 	.word	0x080079e0

0800586c <__retarget_lock_init_recursive>:
 800586c:	4770      	bx	lr

0800586e <__retarget_lock_acquire_recursive>:
 800586e:	4770      	bx	lr

08005870 <__retarget_lock_release_recursive>:
 8005870:	4770      	bx	lr

08005872 <quorem>:
 8005872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005876:	6903      	ldr	r3, [r0, #16]
 8005878:	690c      	ldr	r4, [r1, #16]
 800587a:	42a3      	cmp	r3, r4
 800587c:	4607      	mov	r7, r0
 800587e:	db7e      	blt.n	800597e <quorem+0x10c>
 8005880:	3c01      	subs	r4, #1
 8005882:	f101 0814 	add.w	r8, r1, #20
 8005886:	f100 0514 	add.w	r5, r0, #20
 800588a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005898:	3301      	adds	r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80058a8:	d331      	bcc.n	800590e <quorem+0x9c>
 80058aa:	f04f 0e00 	mov.w	lr, #0
 80058ae:	4640      	mov	r0, r8
 80058b0:	46ac      	mov	ip, r5
 80058b2:	46f2      	mov	sl, lr
 80058b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80058b8:	b293      	uxth	r3, r2
 80058ba:	fb06 e303 	mla	r3, r6, r3, lr
 80058be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058c2:	0c1a      	lsrs	r2, r3, #16
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ebaa 0303 	sub.w	r3, sl, r3
 80058ca:	f8dc a000 	ldr.w	sl, [ip]
 80058ce:	fa13 f38a 	uxtah	r3, r3, sl
 80058d2:	fb06 220e 	mla	r2, r6, lr, r2
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	9b00      	ldr	r3, [sp, #0]
 80058da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058de:	b292      	uxth	r2, r2
 80058e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80058e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80058ec:	4581      	cmp	r9, r0
 80058ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058f2:	f84c 3b04 	str.w	r3, [ip], #4
 80058f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058fa:	d2db      	bcs.n	80058b4 <quorem+0x42>
 80058fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005900:	b92b      	cbnz	r3, 800590e <quorem+0x9c>
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	3b04      	subs	r3, #4
 8005906:	429d      	cmp	r5, r3
 8005908:	461a      	mov	r2, r3
 800590a:	d32c      	bcc.n	8005966 <quorem+0xf4>
 800590c:	613c      	str	r4, [r7, #16]
 800590e:	4638      	mov	r0, r7
 8005910:	f001 f9a8 	bl	8006c64 <__mcmp>
 8005914:	2800      	cmp	r0, #0
 8005916:	db22      	blt.n	800595e <quorem+0xec>
 8005918:	3601      	adds	r6, #1
 800591a:	4629      	mov	r1, r5
 800591c:	2000      	movs	r0, #0
 800591e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005922:	f8d1 c000 	ldr.w	ip, [r1]
 8005926:	b293      	uxth	r3, r2
 8005928:	1ac3      	subs	r3, r0, r3
 800592a:	0c12      	lsrs	r2, r2, #16
 800592c:	fa13 f38c 	uxtah	r3, r3, ip
 8005930:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005938:	b29b      	uxth	r3, r3
 800593a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800593e:	45c1      	cmp	r9, r8
 8005940:	f841 3b04 	str.w	r3, [r1], #4
 8005944:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005948:	d2e9      	bcs.n	800591e <quorem+0xac>
 800594a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800594e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005952:	b922      	cbnz	r2, 800595e <quorem+0xec>
 8005954:	3b04      	subs	r3, #4
 8005956:	429d      	cmp	r5, r3
 8005958:	461a      	mov	r2, r3
 800595a:	d30a      	bcc.n	8005972 <quorem+0x100>
 800595c:	613c      	str	r4, [r7, #16]
 800595e:	4630      	mov	r0, r6
 8005960:	b003      	add	sp, #12
 8005962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	3b04      	subs	r3, #4
 800596a:	2a00      	cmp	r2, #0
 800596c:	d1ce      	bne.n	800590c <quorem+0x9a>
 800596e:	3c01      	subs	r4, #1
 8005970:	e7c9      	b.n	8005906 <quorem+0x94>
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	3b04      	subs	r3, #4
 8005976:	2a00      	cmp	r2, #0
 8005978:	d1f0      	bne.n	800595c <quorem+0xea>
 800597a:	3c01      	subs	r4, #1
 800597c:	e7eb      	b.n	8005956 <quorem+0xe4>
 800597e:	2000      	movs	r0, #0
 8005980:	e7ee      	b.n	8005960 <quorem+0xee>
 8005982:	0000      	movs	r0, r0
 8005984:	0000      	movs	r0, r0
	...

08005988 <_dtoa_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	ed2d 8b04 	vpush	{d8-d9}
 8005990:	69c5      	ldr	r5, [r0, #28]
 8005992:	b093      	sub	sp, #76	; 0x4c
 8005994:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005998:	ec57 6b10 	vmov	r6, r7, d0
 800599c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059a0:	9107      	str	r1, [sp, #28]
 80059a2:	4604      	mov	r4, r0
 80059a4:	920a      	str	r2, [sp, #40]	; 0x28
 80059a6:	930d      	str	r3, [sp, #52]	; 0x34
 80059a8:	b975      	cbnz	r5, 80059c8 <_dtoa_r+0x40>
 80059aa:	2010      	movs	r0, #16
 80059ac:	f000 fe2a 	bl	8006604 <malloc>
 80059b0:	4602      	mov	r2, r0
 80059b2:	61e0      	str	r0, [r4, #28]
 80059b4:	b920      	cbnz	r0, 80059c0 <_dtoa_r+0x38>
 80059b6:	4bae      	ldr	r3, [pc, #696]	; (8005c70 <_dtoa_r+0x2e8>)
 80059b8:	21ef      	movs	r1, #239	; 0xef
 80059ba:	48ae      	ldr	r0, [pc, #696]	; (8005c74 <_dtoa_r+0x2ec>)
 80059bc:	f001 fb1e 	bl	8006ffc <__assert_func>
 80059c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059c4:	6005      	str	r5, [r0, #0]
 80059c6:	60c5      	str	r5, [r0, #12]
 80059c8:	69e3      	ldr	r3, [r4, #28]
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	b151      	cbz	r1, 80059e4 <_dtoa_r+0x5c>
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	604a      	str	r2, [r1, #4]
 80059d2:	2301      	movs	r3, #1
 80059d4:	4093      	lsls	r3, r2
 80059d6:	608b      	str	r3, [r1, #8]
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 ff07 	bl	80067ec <_Bfree>
 80059de:	69e3      	ldr	r3, [r4, #28]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	1e3b      	subs	r3, r7, #0
 80059e6:	bfbb      	ittet	lt
 80059e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059ec:	9303      	strlt	r3, [sp, #12]
 80059ee:	2300      	movge	r3, #0
 80059f0:	2201      	movlt	r2, #1
 80059f2:	bfac      	ite	ge
 80059f4:	f8c8 3000 	strge.w	r3, [r8]
 80059f8:	f8c8 2000 	strlt.w	r2, [r8]
 80059fc:	4b9e      	ldr	r3, [pc, #632]	; (8005c78 <_dtoa_r+0x2f0>)
 80059fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a02:	ea33 0308 	bics.w	r3, r3, r8
 8005a06:	d11b      	bne.n	8005a40 <_dtoa_r+0xb8>
 8005a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a14:	4333      	orrs	r3, r6
 8005a16:	f000 8593 	beq.w	8006540 <_dtoa_r+0xbb8>
 8005a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a1c:	b963      	cbnz	r3, 8005a38 <_dtoa_r+0xb0>
 8005a1e:	4b97      	ldr	r3, [pc, #604]	; (8005c7c <_dtoa_r+0x2f4>)
 8005a20:	e027      	b.n	8005a72 <_dtoa_r+0xea>
 8005a22:	4b97      	ldr	r3, [pc, #604]	; (8005c80 <_dtoa_r+0x2f8>)
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	9800      	ldr	r0, [sp, #0]
 8005a2e:	b013      	add	sp, #76	; 0x4c
 8005a30:	ecbd 8b04 	vpop	{d8-d9}
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a38:	4b90      	ldr	r3, [pc, #576]	; (8005c7c <_dtoa_r+0x2f4>)
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	e7f3      	b.n	8005a28 <_dtoa_r+0xa0>
 8005a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	ec51 0b17 	vmov	r0, r1, d7
 8005a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8005a4e:	eef0 8a67 	vmov.f32	s17, s15
 8005a52:	2300      	movs	r3, #0
 8005a54:	f7fb f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a58:	4681      	mov	r9, r0
 8005a5a:	b160      	cbz	r0, 8005a76 <_dtoa_r+0xee>
 8005a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a5e:	2301      	movs	r3, #1
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8568 	beq.w	800653a <_dtoa_r+0xbb2>
 8005a6a:	4b86      	ldr	r3, [pc, #536]	; (8005c84 <_dtoa_r+0x2fc>)
 8005a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	e7da      	b.n	8005a2c <_dtoa_r+0xa4>
 8005a76:	aa10      	add	r2, sp, #64	; 0x40
 8005a78:	a911      	add	r1, sp, #68	; 0x44
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005a80:	eef0 0a68 	vmov.f32	s1, s17
 8005a84:	f001 f994 	bl	8006db0 <__d2b>
 8005a88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a8c:	4682      	mov	sl, r0
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	d07f      	beq.n	8005b92 <_dtoa_r+0x20a>
 8005a92:	ee18 3a90 	vmov	r3, s17
 8005a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a9e:	ec51 0b18 	vmov	r0, r1, d8
 8005aa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005aaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005aae:	4619      	mov	r1, r3
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4b75      	ldr	r3, [pc, #468]	; (8005c88 <_dtoa_r+0x300>)
 8005ab4:	f7fa fbe8 	bl	8000288 <__aeabi_dsub>
 8005ab8:	a367      	add	r3, pc, #412	; (adr r3, 8005c58 <_dtoa_r+0x2d0>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	a367      	add	r3, pc, #412	; (adr r3, 8005c60 <_dtoa_r+0x2d8>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fbe0 	bl	800028c <__adddf3>
 8005acc:	4606      	mov	r6, r0
 8005ace:	4628      	mov	r0, r5
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	f7fa fd27 	bl	8000524 <__aeabi_i2d>
 8005ad6:	a364      	add	r3, pc, #400	; (adr r3, 8005c68 <_dtoa_r+0x2e0>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fd8c 	bl	80005f8 <__aeabi_dmul>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fbd0 	bl	800028c <__adddf3>
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	f7fb f832 	bl	8000b58 <__aeabi_d2iz>
 8005af4:	2200      	movs	r2, #0
 8005af6:	4683      	mov	fp, r0
 8005af8:	2300      	movs	r3, #0
 8005afa:	4630      	mov	r0, r6
 8005afc:	4639      	mov	r1, r7
 8005afe:	f7fa ffed 	bl	8000adc <__aeabi_dcmplt>
 8005b02:	b148      	cbz	r0, 8005b18 <_dtoa_r+0x190>
 8005b04:	4658      	mov	r0, fp
 8005b06:	f7fa fd0d 	bl	8000524 <__aeabi_i2d>
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	f7fa ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b12:	b908      	cbnz	r0, 8005b18 <_dtoa_r+0x190>
 8005b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b18:	f1bb 0f16 	cmp.w	fp, #22
 8005b1c:	d857      	bhi.n	8005bce <_dtoa_r+0x246>
 8005b1e:	4b5b      	ldr	r3, [pc, #364]	; (8005c8c <_dtoa_r+0x304>)
 8005b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	ec51 0b18 	vmov	r0, r1, d8
 8005b2c:	f7fa ffd6 	bl	8000adc <__aeabi_dcmplt>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d04e      	beq.n	8005bd2 <_dtoa_r+0x24a>
 8005b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b38:	2300      	movs	r3, #0
 8005b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b3e:	1b5b      	subs	r3, r3, r5
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	bf45      	ittet	mi
 8005b44:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b48:	9305      	strmi	r3, [sp, #20]
 8005b4a:	2300      	movpl	r3, #0
 8005b4c:	2300      	movmi	r3, #0
 8005b4e:	9206      	str	r2, [sp, #24]
 8005b50:	bf54      	ite	pl
 8005b52:	9305      	strpl	r3, [sp, #20]
 8005b54:	9306      	strmi	r3, [sp, #24]
 8005b56:	f1bb 0f00 	cmp.w	fp, #0
 8005b5a:	db3c      	blt.n	8005bd6 <_dtoa_r+0x24e>
 8005b5c:	9b06      	ldr	r3, [sp, #24]
 8005b5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b62:	445b      	add	r3, fp
 8005b64:	9306      	str	r3, [sp, #24]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9308      	str	r3, [sp, #32]
 8005b6a:	9b07      	ldr	r3, [sp, #28]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d868      	bhi.n	8005c42 <_dtoa_r+0x2ba>
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	bfc4      	itt	gt
 8005b74:	3b04      	subgt	r3, #4
 8005b76:	9307      	strgt	r3, [sp, #28]
 8005b78:	9b07      	ldr	r3, [sp, #28]
 8005b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8005b7e:	bfcc      	ite	gt
 8005b80:	2500      	movgt	r5, #0
 8005b82:	2501      	movle	r5, #1
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	f200 8085 	bhi.w	8005c94 <_dtoa_r+0x30c>
 8005b8a:	e8df f003 	tbb	[pc, r3]
 8005b8e:	3b2e      	.short	0x3b2e
 8005b90:	5839      	.short	0x5839
 8005b92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b96:	441d      	add	r5, r3
 8005b98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	bfc1      	itttt	gt
 8005ba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ba4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ba8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005bac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005bb0:	bfd6      	itet	le
 8005bb2:	f1c3 0320 	rsble	r3, r3, #32
 8005bb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005bba:	fa06 f003 	lslle.w	r0, r6, r3
 8005bbe:	f7fa fca1 	bl	8000504 <__aeabi_ui2d>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005bc8:	3d01      	subs	r5, #1
 8005bca:	920e      	str	r2, [sp, #56]	; 0x38
 8005bcc:	e76f      	b.n	8005aae <_dtoa_r+0x126>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e7b3      	b.n	8005b3a <_dtoa_r+0x1b2>
 8005bd2:	900c      	str	r0, [sp, #48]	; 0x30
 8005bd4:	e7b2      	b.n	8005b3c <_dtoa_r+0x1b4>
 8005bd6:	9b05      	ldr	r3, [sp, #20]
 8005bd8:	eba3 030b 	sub.w	r3, r3, fp
 8005bdc:	9305      	str	r3, [sp, #20]
 8005bde:	f1cb 0300 	rsb	r3, fp, #0
 8005be2:	9308      	str	r3, [sp, #32]
 8005be4:	2300      	movs	r3, #0
 8005be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005be8:	e7bf      	b.n	8005b6a <_dtoa_r+0x1e2>
 8005bea:	2300      	movs	r3, #0
 8005bec:	9309      	str	r3, [sp, #36]	; 0x24
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc52      	bgt.n	8005c9a <_dtoa_r+0x312>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8005bfe:	e00b      	b.n	8005c18 <_dtoa_r+0x290>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e7f3      	b.n	8005bec <_dtoa_r+0x264>
 8005c04:	2300      	movs	r3, #0
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0a:	445b      	add	r3, fp
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	bfb8      	it	lt
 8005c16:	2301      	movlt	r3, #1
 8005c18:	69e0      	ldr	r0, [r4, #28]
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	f102 0614 	add.w	r6, r2, #20
 8005c22:	429e      	cmp	r6, r3
 8005c24:	d93d      	bls.n	8005ca2 <_dtoa_r+0x31a>
 8005c26:	6041      	str	r1, [r0, #4]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fd9f 	bl	800676c <_Balloc>
 8005c2e:	9000      	str	r0, [sp, #0]
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d139      	bne.n	8005ca8 <_dtoa_r+0x320>
 8005c34:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <_dtoa_r+0x308>)
 8005c36:	4602      	mov	r2, r0
 8005c38:	f240 11af 	movw	r1, #431	; 0x1af
 8005c3c:	e6bd      	b.n	80059ba <_dtoa_r+0x32>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7e1      	b.n	8005c06 <_dtoa_r+0x27e>
 8005c42:	2501      	movs	r5, #1
 8005c44:	2300      	movs	r3, #0
 8005c46:	9307      	str	r3, [sp, #28]
 8005c48:	9509      	str	r5, [sp, #36]	; 0x24
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2312      	movs	r3, #18
 8005c56:	e7d1      	b.n	8005bfc <_dtoa_r+0x274>
 8005c58:	636f4361 	.word	0x636f4361
 8005c5c:	3fd287a7 	.word	0x3fd287a7
 8005c60:	8b60c8b3 	.word	0x8b60c8b3
 8005c64:	3fc68a28 	.word	0x3fc68a28
 8005c68:	509f79fb 	.word	0x509f79fb
 8005c6c:	3fd34413 	.word	0x3fd34413
 8005c70:	080076a9 	.word	0x080076a9
 8005c74:	080076c0 	.word	0x080076c0
 8005c78:	7ff00000 	.word	0x7ff00000
 8005c7c:	080076a5 	.word	0x080076a5
 8005c80:	0800769c 	.word	0x0800769c
 8005c84:	08007679 	.word	0x08007679
 8005c88:	3ff80000 	.word	0x3ff80000
 8005c8c:	080077b0 	.word	0x080077b0
 8005c90:	08007718 	.word	0x08007718
 8005c94:	2301      	movs	r3, #1
 8005c96:	9309      	str	r3, [sp, #36]	; 0x24
 8005c98:	e7d7      	b.n	8005c4a <_dtoa_r+0x2c2>
 8005c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	9304      	str	r3, [sp, #16]
 8005ca0:	e7ba      	b.n	8005c18 <_dtoa_r+0x290>
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	0052      	lsls	r2, r2, #1
 8005ca6:	e7ba      	b.n	8005c1e <_dtoa_r+0x296>
 8005ca8:	69e3      	ldr	r3, [r4, #28]
 8005caa:	9a00      	ldr	r2, [sp, #0]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	2b0e      	cmp	r3, #14
 8005cb2:	f200 80a8 	bhi.w	8005e06 <_dtoa_r+0x47e>
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	f000 80a5 	beq.w	8005e06 <_dtoa_r+0x47e>
 8005cbc:	f1bb 0f00 	cmp.w	fp, #0
 8005cc0:	dd38      	ble.n	8005d34 <_dtoa_r+0x3ac>
 8005cc2:	4bc0      	ldr	r3, [pc, #768]	; (8005fc4 <_dtoa_r+0x63c>)
 8005cc4:	f00b 020f 	and.w	r2, fp, #15
 8005cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ccc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005cd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005cd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005cd8:	d019      	beq.n	8005d0e <_dtoa_r+0x386>
 8005cda:	4bbb      	ldr	r3, [pc, #748]	; (8005fc8 <_dtoa_r+0x640>)
 8005cdc:	ec51 0b18 	vmov	r0, r1, d8
 8005ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ce4:	f7fa fdb2 	bl	800084c <__aeabi_ddiv>
 8005ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cec:	f008 080f 	and.w	r8, r8, #15
 8005cf0:	2503      	movs	r5, #3
 8005cf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005fc8 <_dtoa_r+0x640>
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	d10a      	bne.n	8005d12 <_dtoa_r+0x38a>
 8005cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d00:	4632      	mov	r2, r6
 8005d02:	463b      	mov	r3, r7
 8005d04:	f7fa fda2 	bl	800084c <__aeabi_ddiv>
 8005d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0c:	e02b      	b.n	8005d66 <_dtoa_r+0x3de>
 8005d0e:	2502      	movs	r5, #2
 8005d10:	e7ef      	b.n	8005cf2 <_dtoa_r+0x36a>
 8005d12:	f018 0f01 	tst.w	r8, #1
 8005d16:	d008      	beq.n	8005d2a <_dtoa_r+0x3a2>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d20:	f7fa fc6a 	bl	80005f8 <__aeabi_dmul>
 8005d24:	3501      	adds	r5, #1
 8005d26:	4606      	mov	r6, r0
 8005d28:	460f      	mov	r7, r1
 8005d2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d2e:	f109 0908 	add.w	r9, r9, #8
 8005d32:	e7e0      	b.n	8005cf6 <_dtoa_r+0x36e>
 8005d34:	f000 809f 	beq.w	8005e76 <_dtoa_r+0x4ee>
 8005d38:	f1cb 0600 	rsb	r6, fp, #0
 8005d3c:	4ba1      	ldr	r3, [pc, #644]	; (8005fc4 <_dtoa_r+0x63c>)
 8005d3e:	4fa2      	ldr	r7, [pc, #648]	; (8005fc8 <_dtoa_r+0x640>)
 8005d40:	f006 020f 	and.w	r2, r6, #15
 8005d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	ec51 0b18 	vmov	r0, r1, d8
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d58:	1136      	asrs	r6, r6, #4
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2502      	movs	r5, #2
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d17e      	bne.n	8005e60 <_dtoa_r+0x4d8>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1d0      	bne.n	8005d08 <_dtoa_r+0x380>
 8005d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8084 	beq.w	8005e7a <_dtoa_r+0x4f2>
 8005d72:	4b96      	ldr	r3, [pc, #600]	; (8005fcc <_dtoa_r+0x644>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa feaf 	bl	8000adc <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d07b      	beq.n	8005e7a <_dtoa_r+0x4f2>
 8005d82:	9b04      	ldr	r3, [sp, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d078      	beq.n	8005e7a <_dtoa_r+0x4f2>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dd39      	ble.n	8005e02 <_dtoa_r+0x47a>
 8005d8e:	4b90      	ldr	r3, [pc, #576]	; (8005fd0 <_dtoa_r+0x648>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	4640      	mov	r0, r8
 8005d94:	4649      	mov	r1, r9
 8005d96:	f7fa fc2f 	bl	80005f8 <__aeabi_dmul>
 8005d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9e:	9e01      	ldr	r6, [sp, #4]
 8005da0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005da4:	3501      	adds	r5, #1
 8005da6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fa fbba 	bl	8000524 <__aeabi_i2d>
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	f7fa fc20 	bl	80005f8 <__aeabi_dmul>
 8005db8:	4b86      	ldr	r3, [pc, #536]	; (8005fd4 <_dtoa_r+0x64c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f7fa fa66 	bl	800028c <__adddf3>
 8005dc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc8:	9303      	str	r3, [sp, #12]
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	d158      	bne.n	8005e80 <_dtoa_r+0x4f8>
 8005dce:	4b82      	ldr	r3, [pc, #520]	; (8005fd8 <_dtoa_r+0x650>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dde:	4680      	mov	r8, r0
 8005de0:	4689      	mov	r9, r1
 8005de2:	f7fa fe99 	bl	8000b18 <__aeabi_dcmpgt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f040 8296 	bne.w	8006318 <_dtoa_r+0x990>
 8005dec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005df0:	4640      	mov	r0, r8
 8005df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df6:	4649      	mov	r1, r9
 8005df8:	f7fa fe70 	bl	8000adc <__aeabi_dcmplt>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f040 8289 	bne.w	8006314 <_dtoa_r+0x98c>
 8005e02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f2c0 814e 	blt.w	80060aa <_dtoa_r+0x722>
 8005e0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e12:	f300 814a 	bgt.w	80060aa <_dtoa_r+0x722>
 8005e16:	4b6b      	ldr	r3, [pc, #428]	; (8005fc4 <_dtoa_r+0x63c>)
 8005e18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f280 80dc 	bge.w	8005fe0 <_dtoa_r+0x658>
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f300 80d8 	bgt.w	8005fe0 <_dtoa_r+0x658>
 8005e30:	f040 826f 	bne.w	8006312 <_dtoa_r+0x98a>
 8005e34:	4b68      	ldr	r3, [pc, #416]	; (8005fd8 <_dtoa_r+0x650>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	4640      	mov	r0, r8
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	f7fa fbdc 	bl	80005f8 <__aeabi_dmul>
 8005e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e44:	f7fa fe5e 	bl	8000b04 <__aeabi_dcmpge>
 8005e48:	9e04      	ldr	r6, [sp, #16]
 8005e4a:	4637      	mov	r7, r6
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f040 8245 	bne.w	80062dc <_dtoa_r+0x954>
 8005e52:	9d00      	ldr	r5, [sp, #0]
 8005e54:	2331      	movs	r3, #49	; 0x31
 8005e56:	f805 3b01 	strb.w	r3, [r5], #1
 8005e5a:	f10b 0b01 	add.w	fp, fp, #1
 8005e5e:	e241      	b.n	80062e4 <_dtoa_r+0x95c>
 8005e60:	07f2      	lsls	r2, r6, #31
 8005e62:	d505      	bpl.n	8005e70 <_dtoa_r+0x4e8>
 8005e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e68:	f7fa fbc6 	bl	80005f8 <__aeabi_dmul>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	2301      	movs	r3, #1
 8005e70:	1076      	asrs	r6, r6, #1
 8005e72:	3708      	adds	r7, #8
 8005e74:	e773      	b.n	8005d5e <_dtoa_r+0x3d6>
 8005e76:	2502      	movs	r5, #2
 8005e78:	e775      	b.n	8005d66 <_dtoa_r+0x3de>
 8005e7a:	9e04      	ldr	r6, [sp, #16]
 8005e7c:	465f      	mov	r7, fp
 8005e7e:	e792      	b.n	8005da6 <_dtoa_r+0x41e>
 8005e80:	9900      	ldr	r1, [sp, #0]
 8005e82:	4b50      	ldr	r3, [pc, #320]	; (8005fc4 <_dtoa_r+0x63c>)
 8005e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e88:	4431      	add	r1, r6
 8005e8a:	9102      	str	r1, [sp, #8]
 8005e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e8e:	eeb0 9a47 	vmov.f32	s18, s14
 8005e92:	eef0 9a67 	vmov.f32	s19, s15
 8005e96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d044      	beq.n	8005f2c <_dtoa_r+0x5a4>
 8005ea2:	494e      	ldr	r1, [pc, #312]	; (8005fdc <_dtoa_r+0x654>)
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f7fa fcd1 	bl	800084c <__aeabi_ddiv>
 8005eaa:	ec53 2b19 	vmov	r2, r3, d9
 8005eae:	f7fa f9eb 	bl	8000288 <__aeabi_dsub>
 8005eb2:	9d00      	ldr	r5, [sp, #0]
 8005eb4:	ec41 0b19 	vmov	d9, r0, r1
 8005eb8:	4649      	mov	r1, r9
 8005eba:	4640      	mov	r0, r8
 8005ebc:	f7fa fe4c 	bl	8000b58 <__aeabi_d2iz>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	f7fa fb2f 	bl	8000524 <__aeabi_i2d>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa f9db 	bl	8000288 <__aeabi_dsub>
 8005ed2:	3630      	adds	r6, #48	; 0x30
 8005ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ed8:	ec53 2b19 	vmov	r2, r3, d9
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	f7fa fdfc 	bl	8000adc <__aeabi_dcmplt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d164      	bne.n	8005fb2 <_dtoa_r+0x62a>
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	4937      	ldr	r1, [pc, #220]	; (8005fcc <_dtoa_r+0x644>)
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7fa f9ca 	bl	8000288 <__aeabi_dsub>
 8005ef4:	ec53 2b19 	vmov	r2, r3, d9
 8005ef8:	f7fa fdf0 	bl	8000adc <__aeabi_dcmplt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 80b6 	bne.w	800606e <_dtoa_r+0x6e6>
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	429d      	cmp	r5, r3
 8005f06:	f43f af7c 	beq.w	8005e02 <_dtoa_r+0x47a>
 8005f0a:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <_dtoa_r+0x648>)
 8005f0c:	ec51 0b19 	vmov	r0, r1, d9
 8005f10:	2200      	movs	r2, #0
 8005f12:	f7fa fb71 	bl	80005f8 <__aeabi_dmul>
 8005f16:	4b2e      	ldr	r3, [pc, #184]	; (8005fd0 <_dtoa_r+0x648>)
 8005f18:	ec41 0b19 	vmov	d9, r0, r1
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa fb69 	bl	80005f8 <__aeabi_dmul>
 8005f26:	4680      	mov	r8, r0
 8005f28:	4689      	mov	r9, r1
 8005f2a:	e7c5      	b.n	8005eb8 <_dtoa_r+0x530>
 8005f2c:	ec51 0b17 	vmov	r0, r1, d7
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	9d00      	ldr	r5, [sp, #0]
 8005f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f3a:	ec41 0b19 	vmov	d9, r0, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	f7fa fe09 	bl	8000b58 <__aeabi_d2iz>
 8005f46:	4606      	mov	r6, r0
 8005f48:	f7fa faec 	bl	8000524 <__aeabi_i2d>
 8005f4c:	3630      	adds	r6, #48	; 0x30
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4640      	mov	r0, r8
 8005f54:	4649      	mov	r1, r9
 8005f56:	f7fa f997 	bl	8000288 <__aeabi_dsub>
 8005f5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	429d      	cmp	r5, r3
 8005f62:	4680      	mov	r8, r0
 8005f64:	4689      	mov	r9, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	d124      	bne.n	8005fb6 <_dtoa_r+0x62e>
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <_dtoa_r+0x654>)
 8005f6e:	ec51 0b19 	vmov	r0, r1, d9
 8005f72:	f7fa f98b 	bl	800028c <__adddf3>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d173      	bne.n	800606e <_dtoa_r+0x6e6>
 8005f86:	ec53 2b19 	vmov	r2, r3, d9
 8005f8a:	4914      	ldr	r1, [pc, #80]	; (8005fdc <_dtoa_r+0x654>)
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4640      	mov	r0, r8
 8005f98:	4649      	mov	r1, r9
 8005f9a:	f7fa fd9f 	bl	8000adc <__aeabi_dcmplt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f43f af2f 	beq.w	8005e02 <_dtoa_r+0x47a>
 8005fa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005fa6:	1e6b      	subs	r3, r5, #1
 8005fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fae:	2b30      	cmp	r3, #48	; 0x30
 8005fb0:	d0f8      	beq.n	8005fa4 <_dtoa_r+0x61c>
 8005fb2:	46bb      	mov	fp, r7
 8005fb4:	e04a      	b.n	800604c <_dtoa_r+0x6c4>
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <_dtoa_r+0x648>)
 8005fb8:	f7fa fb1e 	bl	80005f8 <__aeabi_dmul>
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	e7bd      	b.n	8005f3e <_dtoa_r+0x5b6>
 8005fc2:	bf00      	nop
 8005fc4:	080077b0 	.word	0x080077b0
 8005fc8:	08007788 	.word	0x08007788
 8005fcc:	3ff00000 	.word	0x3ff00000
 8005fd0:	40240000 	.word	0x40240000
 8005fd4:	401c0000 	.word	0x401c0000
 8005fd8:	40140000 	.word	0x40140000
 8005fdc:	3fe00000 	.word	0x3fe00000
 8005fe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fe4:	9d00      	ldr	r5, [sp, #0]
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	464b      	mov	r3, r9
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fc2d 	bl	800084c <__aeabi_ddiv>
 8005ff2:	f7fa fdb1 	bl	8000b58 <__aeabi_d2iz>
 8005ff6:	9001      	str	r0, [sp, #4]
 8005ff8:	f7fa fa94 	bl	8000524 <__aeabi_i2d>
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	9e01      	ldr	r6, [sp, #4]
 8006012:	9f04      	ldr	r7, [sp, #16]
 8006014:	3630      	adds	r6, #48	; 0x30
 8006016:	f805 6b01 	strb.w	r6, [r5], #1
 800601a:	9e00      	ldr	r6, [sp, #0]
 800601c:	1bae      	subs	r6, r5, r6
 800601e:	42b7      	cmp	r7, r6
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	d134      	bne.n	8006090 <_dtoa_r+0x708>
 8006026:	f7fa f931 	bl	800028c <__adddf3>
 800602a:	4642      	mov	r2, r8
 800602c:	464b      	mov	r3, r9
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	f7fa fd71 	bl	8000b18 <__aeabi_dcmpgt>
 8006036:	b9c8      	cbnz	r0, 800606c <_dtoa_r+0x6e4>
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006044:	b110      	cbz	r0, 800604c <_dtoa_r+0x6c4>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	07db      	lsls	r3, r3, #31
 800604a:	d40f      	bmi.n	800606c <_dtoa_r+0x6e4>
 800604c:	4651      	mov	r1, sl
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fbcc 	bl	80067ec <_Bfree>
 8006054:	2300      	movs	r3, #0
 8006056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006058:	702b      	strb	r3, [r5, #0]
 800605a:	f10b 0301 	add.w	r3, fp, #1
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006062:	2b00      	cmp	r3, #0
 8006064:	f43f ace2 	beq.w	8005a2c <_dtoa_r+0xa4>
 8006068:	601d      	str	r5, [r3, #0]
 800606a:	e4df      	b.n	8005a2c <_dtoa_r+0xa4>
 800606c:	465f      	mov	r7, fp
 800606e:	462b      	mov	r3, r5
 8006070:	461d      	mov	r5, r3
 8006072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006076:	2a39      	cmp	r2, #57	; 0x39
 8006078:	d106      	bne.n	8006088 <_dtoa_r+0x700>
 800607a:	9a00      	ldr	r2, [sp, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d1f7      	bne.n	8006070 <_dtoa_r+0x6e8>
 8006080:	9900      	ldr	r1, [sp, #0]
 8006082:	2230      	movs	r2, #48	; 0x30
 8006084:	3701      	adds	r7, #1
 8006086:	700a      	strb	r2, [r1, #0]
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e790      	b.n	8005fb2 <_dtoa_r+0x62a>
 8006090:	4ba3      	ldr	r3, [pc, #652]	; (8006320 <_dtoa_r+0x998>)
 8006092:	2200      	movs	r2, #0
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	4606      	mov	r6, r0
 800609e:	460f      	mov	r7, r1
 80060a0:	f7fa fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d09e      	beq.n	8005fe6 <_dtoa_r+0x65e>
 80060a8:	e7d0      	b.n	800604c <_dtoa_r+0x6c4>
 80060aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	f000 80ca 	beq.w	8006246 <_dtoa_r+0x8be>
 80060b2:	9a07      	ldr	r2, [sp, #28]
 80060b4:	2a01      	cmp	r2, #1
 80060b6:	f300 80ad 	bgt.w	8006214 <_dtoa_r+0x88c>
 80060ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060bc:	2a00      	cmp	r2, #0
 80060be:	f000 80a5 	beq.w	800620c <_dtoa_r+0x884>
 80060c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060c6:	9e08      	ldr	r6, [sp, #32]
 80060c8:	9d05      	ldr	r5, [sp, #20]
 80060ca:	9a05      	ldr	r2, [sp, #20]
 80060cc:	441a      	add	r2, r3
 80060ce:	9205      	str	r2, [sp, #20]
 80060d0:	9a06      	ldr	r2, [sp, #24]
 80060d2:	2101      	movs	r1, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	4620      	mov	r0, r4
 80060d8:	9206      	str	r2, [sp, #24]
 80060da:	f000 fc3d 	bl	8006958 <__i2b>
 80060de:	4607      	mov	r7, r0
 80060e0:	b165      	cbz	r5, 80060fc <_dtoa_r+0x774>
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dd09      	ble.n	80060fc <_dtoa_r+0x774>
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	9a05      	ldr	r2, [sp, #20]
 80060ec:	bfa8      	it	ge
 80060ee:	462b      	movge	r3, r5
 80060f0:	1ad2      	subs	r2, r2, r3
 80060f2:	9205      	str	r2, [sp, #20]
 80060f4:	9a06      	ldr	r2, [sp, #24]
 80060f6:	1aed      	subs	r5, r5, r3
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	9306      	str	r3, [sp, #24]
 80060fc:	9b08      	ldr	r3, [sp, #32]
 80060fe:	b1f3      	cbz	r3, 800613e <_dtoa_r+0x7b6>
 8006100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80a3 	beq.w	800624e <_dtoa_r+0x8c6>
 8006108:	2e00      	cmp	r6, #0
 800610a:	dd10      	ble.n	800612e <_dtoa_r+0x7a6>
 800610c:	4639      	mov	r1, r7
 800610e:	4632      	mov	r2, r6
 8006110:	4620      	mov	r0, r4
 8006112:	f000 fce1 	bl	8006ad8 <__pow5mult>
 8006116:	4652      	mov	r2, sl
 8006118:	4601      	mov	r1, r0
 800611a:	4607      	mov	r7, r0
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fc31 	bl	8006984 <__multiply>
 8006122:	4651      	mov	r1, sl
 8006124:	4680      	mov	r8, r0
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fb60 	bl	80067ec <_Bfree>
 800612c:	46c2      	mov	sl, r8
 800612e:	9b08      	ldr	r3, [sp, #32]
 8006130:	1b9a      	subs	r2, r3, r6
 8006132:	d004      	beq.n	800613e <_dtoa_r+0x7b6>
 8006134:	4651      	mov	r1, sl
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fcce 	bl	8006ad8 <__pow5mult>
 800613c:	4682      	mov	sl, r0
 800613e:	2101      	movs	r1, #1
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fc09 	bl	8006958 <__i2b>
 8006146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	4606      	mov	r6, r0
 800614c:	f340 8081 	ble.w	8006252 <_dtoa_r+0x8ca>
 8006150:	461a      	mov	r2, r3
 8006152:	4601      	mov	r1, r0
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fcbf 	bl	8006ad8 <__pow5mult>
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	2b01      	cmp	r3, #1
 800615e:	4606      	mov	r6, r0
 8006160:	dd7a      	ble.n	8006258 <_dtoa_r+0x8d0>
 8006162:	f04f 0800 	mov.w	r8, #0
 8006166:	6933      	ldr	r3, [r6, #16]
 8006168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800616c:	6918      	ldr	r0, [r3, #16]
 800616e:	f000 fba5 	bl	80068bc <__hi0bits>
 8006172:	f1c0 0020 	rsb	r0, r0, #32
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	4418      	add	r0, r3
 800617a:	f010 001f 	ands.w	r0, r0, #31
 800617e:	f000 8094 	beq.w	80062aa <_dtoa_r+0x922>
 8006182:	f1c0 0320 	rsb	r3, r0, #32
 8006186:	2b04      	cmp	r3, #4
 8006188:	f340 8085 	ble.w	8006296 <_dtoa_r+0x90e>
 800618c:	9b05      	ldr	r3, [sp, #20]
 800618e:	f1c0 001c 	rsb	r0, r0, #28
 8006192:	4403      	add	r3, r0
 8006194:	9305      	str	r3, [sp, #20]
 8006196:	9b06      	ldr	r3, [sp, #24]
 8006198:	4403      	add	r3, r0
 800619a:	4405      	add	r5, r0
 800619c:	9306      	str	r3, [sp, #24]
 800619e:	9b05      	ldr	r3, [sp, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dd05      	ble.n	80061b0 <_dtoa_r+0x828>
 80061a4:	4651      	mov	r1, sl
 80061a6:	461a      	mov	r2, r3
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fcef 	bl	8006b8c <__lshift>
 80061ae:	4682      	mov	sl, r0
 80061b0:	9b06      	ldr	r3, [sp, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd05      	ble.n	80061c2 <_dtoa_r+0x83a>
 80061b6:	4631      	mov	r1, r6
 80061b8:	461a      	mov	r2, r3
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fce6 	bl	8006b8c <__lshift>
 80061c0:	4606      	mov	r6, r0
 80061c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d072      	beq.n	80062ae <_dtoa_r+0x926>
 80061c8:	4631      	mov	r1, r6
 80061ca:	4650      	mov	r0, sl
 80061cc:	f000 fd4a 	bl	8006c64 <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	da6c      	bge.n	80062ae <_dtoa_r+0x926>
 80061d4:	2300      	movs	r3, #0
 80061d6:	4651      	mov	r1, sl
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fb28 	bl	8006830 <__multadd>
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e6:	4682      	mov	sl, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 81b0 	beq.w	800654e <_dtoa_r+0xbc6>
 80061ee:	2300      	movs	r3, #0
 80061f0:	4639      	mov	r1, r7
 80061f2:	220a      	movs	r2, #10
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fb1b 	bl	8006830 <__multadd>
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	4607      	mov	r7, r0
 8006200:	f300 8096 	bgt.w	8006330 <_dtoa_r+0x9a8>
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	2b02      	cmp	r3, #2
 8006208:	dc59      	bgt.n	80062be <_dtoa_r+0x936>
 800620a:	e091      	b.n	8006330 <_dtoa_r+0x9a8>
 800620c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800620e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006212:	e758      	b.n	80060c6 <_dtoa_r+0x73e>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	1e5e      	subs	r6, r3, #1
 8006218:	9b08      	ldr	r3, [sp, #32]
 800621a:	42b3      	cmp	r3, r6
 800621c:	bfbf      	itttt	lt
 800621e:	9b08      	ldrlt	r3, [sp, #32]
 8006220:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006222:	9608      	strlt	r6, [sp, #32]
 8006224:	1af3      	sublt	r3, r6, r3
 8006226:	bfb4      	ite	lt
 8006228:	18d2      	addlt	r2, r2, r3
 800622a:	1b9e      	subge	r6, r3, r6
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	bfbc      	itt	lt
 8006230:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006232:	2600      	movlt	r6, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb7      	itett	lt
 8006238:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800623c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006240:	1a9d      	sublt	r5, r3, r2
 8006242:	2300      	movlt	r3, #0
 8006244:	e741      	b.n	80060ca <_dtoa_r+0x742>
 8006246:	9e08      	ldr	r6, [sp, #32]
 8006248:	9d05      	ldr	r5, [sp, #20]
 800624a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800624c:	e748      	b.n	80060e0 <_dtoa_r+0x758>
 800624e:	9a08      	ldr	r2, [sp, #32]
 8006250:	e770      	b.n	8006134 <_dtoa_r+0x7ac>
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	2b01      	cmp	r3, #1
 8006256:	dc19      	bgt.n	800628c <_dtoa_r+0x904>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	b9bb      	cbnz	r3, 800628c <_dtoa_r+0x904>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006262:	b99b      	cbnz	r3, 800628c <_dtoa_r+0x904>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626a:	0d1b      	lsrs	r3, r3, #20
 800626c:	051b      	lsls	r3, r3, #20
 800626e:	b183      	cbz	r3, 8006292 <_dtoa_r+0x90a>
 8006270:	9b05      	ldr	r3, [sp, #20]
 8006272:	3301      	adds	r3, #1
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	9b06      	ldr	r3, [sp, #24]
 8006278:	3301      	adds	r3, #1
 800627a:	9306      	str	r3, [sp, #24]
 800627c:	f04f 0801 	mov.w	r8, #1
 8006280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f af6f 	bne.w	8006166 <_dtoa_r+0x7de>
 8006288:	2001      	movs	r0, #1
 800628a:	e774      	b.n	8006176 <_dtoa_r+0x7ee>
 800628c:	f04f 0800 	mov.w	r8, #0
 8006290:	e7f6      	b.n	8006280 <_dtoa_r+0x8f8>
 8006292:	4698      	mov	r8, r3
 8006294:	e7f4      	b.n	8006280 <_dtoa_r+0x8f8>
 8006296:	d082      	beq.n	800619e <_dtoa_r+0x816>
 8006298:	9a05      	ldr	r2, [sp, #20]
 800629a:	331c      	adds	r3, #28
 800629c:	441a      	add	r2, r3
 800629e:	9205      	str	r2, [sp, #20]
 80062a0:	9a06      	ldr	r2, [sp, #24]
 80062a2:	441a      	add	r2, r3
 80062a4:	441d      	add	r5, r3
 80062a6:	9206      	str	r2, [sp, #24]
 80062a8:	e779      	b.n	800619e <_dtoa_r+0x816>
 80062aa:	4603      	mov	r3, r0
 80062ac:	e7f4      	b.n	8006298 <_dtoa_r+0x910>
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dc37      	bgt.n	8006324 <_dtoa_r+0x99c>
 80062b4:	9b07      	ldr	r3, [sp, #28]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	dd34      	ble.n	8006324 <_dtoa_r+0x99c>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	b963      	cbnz	r3, 80062dc <_dtoa_r+0x954>
 80062c2:	4631      	mov	r1, r6
 80062c4:	2205      	movs	r2, #5
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 fab2 	bl	8006830 <__multadd>
 80062cc:	4601      	mov	r1, r0
 80062ce:	4606      	mov	r6, r0
 80062d0:	4650      	mov	r0, sl
 80062d2:	f000 fcc7 	bl	8006c64 <__mcmp>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f73f adbb 	bgt.w	8005e52 <_dtoa_r+0x4ca>
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	9d00      	ldr	r5, [sp, #0]
 80062e0:	ea6f 0b03 	mvn.w	fp, r3
 80062e4:	f04f 0800 	mov.w	r8, #0
 80062e8:	4631      	mov	r1, r6
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fa7e 	bl	80067ec <_Bfree>
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	f43f aeab 	beq.w	800604c <_dtoa_r+0x6c4>
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	d005      	beq.n	8006308 <_dtoa_r+0x980>
 80062fc:	45b8      	cmp	r8, r7
 80062fe:	d003      	beq.n	8006308 <_dtoa_r+0x980>
 8006300:	4641      	mov	r1, r8
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fa72 	bl	80067ec <_Bfree>
 8006308:	4639      	mov	r1, r7
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fa6e 	bl	80067ec <_Bfree>
 8006310:	e69c      	b.n	800604c <_dtoa_r+0x6c4>
 8006312:	2600      	movs	r6, #0
 8006314:	4637      	mov	r7, r6
 8006316:	e7e1      	b.n	80062dc <_dtoa_r+0x954>
 8006318:	46bb      	mov	fp, r7
 800631a:	4637      	mov	r7, r6
 800631c:	e599      	b.n	8005e52 <_dtoa_r+0x4ca>
 800631e:	bf00      	nop
 8006320:	40240000 	.word	0x40240000
 8006324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80c8 	beq.w	80064bc <_dtoa_r+0xb34>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2d00      	cmp	r5, #0
 8006332:	dd05      	ble.n	8006340 <_dtoa_r+0x9b8>
 8006334:	4639      	mov	r1, r7
 8006336:	462a      	mov	r2, r5
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fc27 	bl	8006b8c <__lshift>
 800633e:	4607      	mov	r7, r0
 8006340:	f1b8 0f00 	cmp.w	r8, #0
 8006344:	d05b      	beq.n	80063fe <_dtoa_r+0xa76>
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fa0f 	bl	800676c <_Balloc>
 800634e:	4605      	mov	r5, r0
 8006350:	b928      	cbnz	r0, 800635e <_dtoa_r+0x9d6>
 8006352:	4b83      	ldr	r3, [pc, #524]	; (8006560 <_dtoa_r+0xbd8>)
 8006354:	4602      	mov	r2, r0
 8006356:	f240 21ef 	movw	r1, #751	; 0x2ef
 800635a:	f7ff bb2e 	b.w	80059ba <_dtoa_r+0x32>
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	3202      	adds	r2, #2
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	f107 010c 	add.w	r1, r7, #12
 8006368:	300c      	adds	r0, #12
 800636a:	f000 fe39 	bl	8006fe0 <memcpy>
 800636e:	2201      	movs	r2, #1
 8006370:	4629      	mov	r1, r5
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fc0a 	bl	8006b8c <__lshift>
 8006378:	9b00      	ldr	r3, [sp, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006382:	4413      	add	r3, r2
 8006384:	9308      	str	r3, [sp, #32]
 8006386:	9b02      	ldr	r3, [sp, #8]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	46b8      	mov	r8, r7
 800638e:	9306      	str	r3, [sp, #24]
 8006390:	4607      	mov	r7, r0
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	4631      	mov	r1, r6
 8006396:	3b01      	subs	r3, #1
 8006398:	4650      	mov	r0, sl
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	f7ff fa69 	bl	8005872 <quorem>
 80063a0:	4641      	mov	r1, r8
 80063a2:	9002      	str	r0, [sp, #8]
 80063a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063a8:	4650      	mov	r0, sl
 80063aa:	f000 fc5b 	bl	8006c64 <__mcmp>
 80063ae:	463a      	mov	r2, r7
 80063b0:	9005      	str	r0, [sp, #20]
 80063b2:	4631      	mov	r1, r6
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 fc71 	bl	8006c9c <__mdiff>
 80063ba:	68c2      	ldr	r2, [r0, #12]
 80063bc:	4605      	mov	r5, r0
 80063be:	bb02      	cbnz	r2, 8006402 <_dtoa_r+0xa7a>
 80063c0:	4601      	mov	r1, r0
 80063c2:	4650      	mov	r0, sl
 80063c4:	f000 fc4e 	bl	8006c64 <__mcmp>
 80063c8:	4602      	mov	r2, r0
 80063ca:	4629      	mov	r1, r5
 80063cc:	4620      	mov	r0, r4
 80063ce:	9209      	str	r2, [sp, #36]	; 0x24
 80063d0:	f000 fa0c 	bl	80067ec <_Bfree>
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	9d04      	ldr	r5, [sp, #16]
 80063da:	ea43 0102 	orr.w	r1, r3, r2
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	4319      	orrs	r1, r3
 80063e2:	d110      	bne.n	8006406 <_dtoa_r+0xa7e>
 80063e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063e8:	d029      	beq.n	800643e <_dtoa_r+0xab6>
 80063ea:	9b05      	ldr	r3, [sp, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd02      	ble.n	80063f6 <_dtoa_r+0xa6e>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	f883 9000 	strb.w	r9, [r3]
 80063fc:	e774      	b.n	80062e8 <_dtoa_r+0x960>
 80063fe:	4638      	mov	r0, r7
 8006400:	e7ba      	b.n	8006378 <_dtoa_r+0x9f0>
 8006402:	2201      	movs	r2, #1
 8006404:	e7e1      	b.n	80063ca <_dtoa_r+0xa42>
 8006406:	9b05      	ldr	r3, [sp, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	db04      	blt.n	8006416 <_dtoa_r+0xa8e>
 800640c:	9907      	ldr	r1, [sp, #28]
 800640e:	430b      	orrs	r3, r1
 8006410:	9906      	ldr	r1, [sp, #24]
 8006412:	430b      	orrs	r3, r1
 8006414:	d120      	bne.n	8006458 <_dtoa_r+0xad0>
 8006416:	2a00      	cmp	r2, #0
 8006418:	dded      	ble.n	80063f6 <_dtoa_r+0xa6e>
 800641a:	4651      	mov	r1, sl
 800641c:	2201      	movs	r2, #1
 800641e:	4620      	mov	r0, r4
 8006420:	f000 fbb4 	bl	8006b8c <__lshift>
 8006424:	4631      	mov	r1, r6
 8006426:	4682      	mov	sl, r0
 8006428:	f000 fc1c 	bl	8006c64 <__mcmp>
 800642c:	2800      	cmp	r0, #0
 800642e:	dc03      	bgt.n	8006438 <_dtoa_r+0xab0>
 8006430:	d1e1      	bne.n	80063f6 <_dtoa_r+0xa6e>
 8006432:	f019 0f01 	tst.w	r9, #1
 8006436:	d0de      	beq.n	80063f6 <_dtoa_r+0xa6e>
 8006438:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800643c:	d1d8      	bne.n	80063f0 <_dtoa_r+0xa68>
 800643e:	9a01      	ldr	r2, [sp, #4]
 8006440:	2339      	movs	r3, #57	; 0x39
 8006442:	7013      	strb	r3, [r2, #0]
 8006444:	462b      	mov	r3, r5
 8006446:	461d      	mov	r5, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800644e:	2a39      	cmp	r2, #57	; 0x39
 8006450:	d06c      	beq.n	800652c <_dtoa_r+0xba4>
 8006452:	3201      	adds	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e747      	b.n	80062e8 <_dtoa_r+0x960>
 8006458:	2a00      	cmp	r2, #0
 800645a:	dd07      	ble.n	800646c <_dtoa_r+0xae4>
 800645c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006460:	d0ed      	beq.n	800643e <_dtoa_r+0xab6>
 8006462:	9a01      	ldr	r2, [sp, #4]
 8006464:	f109 0301 	add.w	r3, r9, #1
 8006468:	7013      	strb	r3, [r2, #0]
 800646a:	e73d      	b.n	80062e8 <_dtoa_r+0x960>
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	9a08      	ldr	r2, [sp, #32]
 8006470:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006474:	4293      	cmp	r3, r2
 8006476:	d043      	beq.n	8006500 <_dtoa_r+0xb78>
 8006478:	4651      	mov	r1, sl
 800647a:	2300      	movs	r3, #0
 800647c:	220a      	movs	r2, #10
 800647e:	4620      	mov	r0, r4
 8006480:	f000 f9d6 	bl	8006830 <__multadd>
 8006484:	45b8      	cmp	r8, r7
 8006486:	4682      	mov	sl, r0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	f04f 020a 	mov.w	r2, #10
 8006490:	4641      	mov	r1, r8
 8006492:	4620      	mov	r0, r4
 8006494:	d107      	bne.n	80064a6 <_dtoa_r+0xb1e>
 8006496:	f000 f9cb 	bl	8006830 <__multadd>
 800649a:	4680      	mov	r8, r0
 800649c:	4607      	mov	r7, r0
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	3301      	adds	r3, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	e775      	b.n	8006392 <_dtoa_r+0xa0a>
 80064a6:	f000 f9c3 	bl	8006830 <__multadd>
 80064aa:	4639      	mov	r1, r7
 80064ac:	4680      	mov	r8, r0
 80064ae:	2300      	movs	r3, #0
 80064b0:	220a      	movs	r2, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f9bc 	bl	8006830 <__multadd>
 80064b8:	4607      	mov	r7, r0
 80064ba:	e7f0      	b.n	800649e <_dtoa_r+0xb16>
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	9d00      	ldr	r5, [sp, #0]
 80064c2:	4631      	mov	r1, r6
 80064c4:	4650      	mov	r0, sl
 80064c6:	f7ff f9d4 	bl	8005872 <quorem>
 80064ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	f805 9b01 	strb.w	r9, [r5], #1
 80064d4:	1aea      	subs	r2, r5, r3
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	4293      	cmp	r3, r2
 80064da:	dd07      	ble.n	80064ec <_dtoa_r+0xb64>
 80064dc:	4651      	mov	r1, sl
 80064de:	2300      	movs	r3, #0
 80064e0:	220a      	movs	r2, #10
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f9a4 	bl	8006830 <__multadd>
 80064e8:	4682      	mov	sl, r0
 80064ea:	e7ea      	b.n	80064c2 <_dtoa_r+0xb3a>
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfc8      	it	gt
 80064f2:	461d      	movgt	r5, r3
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	bfd8      	it	le
 80064f8:	2501      	movle	r5, #1
 80064fa:	441d      	add	r5, r3
 80064fc:	f04f 0800 	mov.w	r8, #0
 8006500:	4651      	mov	r1, sl
 8006502:	2201      	movs	r2, #1
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fb41 	bl	8006b8c <__lshift>
 800650a:	4631      	mov	r1, r6
 800650c:	4682      	mov	sl, r0
 800650e:	f000 fba9 	bl	8006c64 <__mcmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	dc96      	bgt.n	8006444 <_dtoa_r+0xabc>
 8006516:	d102      	bne.n	800651e <_dtoa_r+0xb96>
 8006518:	f019 0f01 	tst.w	r9, #1
 800651c:	d192      	bne.n	8006444 <_dtoa_r+0xabc>
 800651e:	462b      	mov	r3, r5
 8006520:	461d      	mov	r5, r3
 8006522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006526:	2a30      	cmp	r2, #48	; 0x30
 8006528:	d0fa      	beq.n	8006520 <_dtoa_r+0xb98>
 800652a:	e6dd      	b.n	80062e8 <_dtoa_r+0x960>
 800652c:	9a00      	ldr	r2, [sp, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d189      	bne.n	8006446 <_dtoa_r+0xabe>
 8006532:	f10b 0b01 	add.w	fp, fp, #1
 8006536:	2331      	movs	r3, #49	; 0x31
 8006538:	e796      	b.n	8006468 <_dtoa_r+0xae0>
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <_dtoa_r+0xbdc>)
 800653c:	f7ff ba99 	b.w	8005a72 <_dtoa_r+0xea>
 8006540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006542:	2b00      	cmp	r3, #0
 8006544:	f47f aa6d 	bne.w	8005a22 <_dtoa_r+0x9a>
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <_dtoa_r+0xbe0>)
 800654a:	f7ff ba92 	b.w	8005a72 <_dtoa_r+0xea>
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	dcb5      	bgt.n	80064c0 <_dtoa_r+0xb38>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	2b02      	cmp	r3, #2
 8006558:	f73f aeb1 	bgt.w	80062be <_dtoa_r+0x936>
 800655c:	e7b0      	b.n	80064c0 <_dtoa_r+0xb38>
 800655e:	bf00      	nop
 8006560:	08007718 	.word	0x08007718
 8006564:	08007678 	.word	0x08007678
 8006568:	0800769c 	.word	0x0800769c

0800656c <_free_r>:
 800656c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800656e:	2900      	cmp	r1, #0
 8006570:	d044      	beq.n	80065fc <_free_r+0x90>
 8006572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006576:	9001      	str	r0, [sp, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f1a1 0404 	sub.w	r4, r1, #4
 800657e:	bfb8      	it	lt
 8006580:	18e4      	addlt	r4, r4, r3
 8006582:	f000 f8e7 	bl	8006754 <__malloc_lock>
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <_free_r+0x94>)
 8006588:	9801      	ldr	r0, [sp, #4]
 800658a:	6813      	ldr	r3, [r2, #0]
 800658c:	b933      	cbnz	r3, 800659c <_free_r+0x30>
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	6014      	str	r4, [r2, #0]
 8006592:	b003      	add	sp, #12
 8006594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006598:	f000 b8e2 	b.w	8006760 <__malloc_unlock>
 800659c:	42a3      	cmp	r3, r4
 800659e:	d908      	bls.n	80065b2 <_free_r+0x46>
 80065a0:	6825      	ldr	r5, [r4, #0]
 80065a2:	1961      	adds	r1, r4, r5
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf01      	itttt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	1949      	addeq	r1, r1, r5
 80065ae:	6021      	streq	r1, [r4, #0]
 80065b0:	e7ed      	b.n	800658e <_free_r+0x22>
 80065b2:	461a      	mov	r2, r3
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b10b      	cbz	r3, 80065bc <_free_r+0x50>
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	d9fa      	bls.n	80065b2 <_free_r+0x46>
 80065bc:	6811      	ldr	r1, [r2, #0]
 80065be:	1855      	adds	r5, r2, r1
 80065c0:	42a5      	cmp	r5, r4
 80065c2:	d10b      	bne.n	80065dc <_free_r+0x70>
 80065c4:	6824      	ldr	r4, [r4, #0]
 80065c6:	4421      	add	r1, r4
 80065c8:	1854      	adds	r4, r2, r1
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	d1e0      	bne.n	8006592 <_free_r+0x26>
 80065d0:	681c      	ldr	r4, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	6053      	str	r3, [r2, #4]
 80065d6:	440c      	add	r4, r1
 80065d8:	6014      	str	r4, [r2, #0]
 80065da:	e7da      	b.n	8006592 <_free_r+0x26>
 80065dc:	d902      	bls.n	80065e4 <_free_r+0x78>
 80065de:	230c      	movs	r3, #12
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	e7d6      	b.n	8006592 <_free_r+0x26>
 80065e4:	6825      	ldr	r5, [r4, #0]
 80065e6:	1961      	adds	r1, r4, r5
 80065e8:	428b      	cmp	r3, r1
 80065ea:	bf04      	itt	eq
 80065ec:	6819      	ldreq	r1, [r3, #0]
 80065ee:	685b      	ldreq	r3, [r3, #4]
 80065f0:	6063      	str	r3, [r4, #4]
 80065f2:	bf04      	itt	eq
 80065f4:	1949      	addeq	r1, r1, r5
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	6054      	str	r4, [r2, #4]
 80065fa:	e7ca      	b.n	8006592 <_free_r+0x26>
 80065fc:	b003      	add	sp, #12
 80065fe:	bd30      	pop	{r4, r5, pc}
 8006600:	20000448 	.word	0x20000448

08006604 <malloc>:
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <malloc+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f000 b823 	b.w	8006654 <_malloc_r>
 800660e:	bf00      	nop
 8006610:	20000070 	.word	0x20000070

08006614 <sbrk_aligned>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	4e0e      	ldr	r6, [pc, #56]	; (8006650 <sbrk_aligned+0x3c>)
 8006618:	460c      	mov	r4, r1
 800661a:	6831      	ldr	r1, [r6, #0]
 800661c:	4605      	mov	r5, r0
 800661e:	b911      	cbnz	r1, 8006626 <sbrk_aligned+0x12>
 8006620:	f000 fcce 	bl	8006fc0 <_sbrk_r>
 8006624:	6030      	str	r0, [r6, #0]
 8006626:	4621      	mov	r1, r4
 8006628:	4628      	mov	r0, r5
 800662a:	f000 fcc9 	bl	8006fc0 <_sbrk_r>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d00a      	beq.n	8006648 <sbrk_aligned+0x34>
 8006632:	1cc4      	adds	r4, r0, #3
 8006634:	f024 0403 	bic.w	r4, r4, #3
 8006638:	42a0      	cmp	r0, r4
 800663a:	d007      	beq.n	800664c <sbrk_aligned+0x38>
 800663c:	1a21      	subs	r1, r4, r0
 800663e:	4628      	mov	r0, r5
 8006640:	f000 fcbe 	bl	8006fc0 <_sbrk_r>
 8006644:	3001      	adds	r0, #1
 8006646:	d101      	bne.n	800664c <sbrk_aligned+0x38>
 8006648:	f04f 34ff 	mov.w	r4, #4294967295
 800664c:	4620      	mov	r0, r4
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	2000044c 	.word	0x2000044c

08006654 <_malloc_r>:
 8006654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006658:	1ccd      	adds	r5, r1, #3
 800665a:	f025 0503 	bic.w	r5, r5, #3
 800665e:	3508      	adds	r5, #8
 8006660:	2d0c      	cmp	r5, #12
 8006662:	bf38      	it	cc
 8006664:	250c      	movcc	r5, #12
 8006666:	2d00      	cmp	r5, #0
 8006668:	4607      	mov	r7, r0
 800666a:	db01      	blt.n	8006670 <_malloc_r+0x1c>
 800666c:	42a9      	cmp	r1, r5
 800666e:	d905      	bls.n	800667c <_malloc_r+0x28>
 8006670:	230c      	movs	r3, #12
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	2600      	movs	r6, #0
 8006676:	4630      	mov	r0, r6
 8006678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006750 <_malloc_r+0xfc>
 8006680:	f000 f868 	bl	8006754 <__malloc_lock>
 8006684:	f8d8 3000 	ldr.w	r3, [r8]
 8006688:	461c      	mov	r4, r3
 800668a:	bb5c      	cbnz	r4, 80066e4 <_malloc_r+0x90>
 800668c:	4629      	mov	r1, r5
 800668e:	4638      	mov	r0, r7
 8006690:	f7ff ffc0 	bl	8006614 <sbrk_aligned>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	4604      	mov	r4, r0
 8006698:	d155      	bne.n	8006746 <_malloc_r+0xf2>
 800669a:	f8d8 4000 	ldr.w	r4, [r8]
 800669e:	4626      	mov	r6, r4
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	d145      	bne.n	8006730 <_malloc_r+0xdc>
 80066a4:	2c00      	cmp	r4, #0
 80066a6:	d048      	beq.n	800673a <_malloc_r+0xe6>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	4631      	mov	r1, r6
 80066ac:	4638      	mov	r0, r7
 80066ae:	eb04 0903 	add.w	r9, r4, r3
 80066b2:	f000 fc85 	bl	8006fc0 <_sbrk_r>
 80066b6:	4581      	cmp	r9, r0
 80066b8:	d13f      	bne.n	800673a <_malloc_r+0xe6>
 80066ba:	6821      	ldr	r1, [r4, #0]
 80066bc:	1a6d      	subs	r5, r5, r1
 80066be:	4629      	mov	r1, r5
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff ffa7 	bl	8006614 <sbrk_aligned>
 80066c6:	3001      	adds	r0, #1
 80066c8:	d037      	beq.n	800673a <_malloc_r+0xe6>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	442b      	add	r3, r5
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	f8d8 3000 	ldr.w	r3, [r8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d038      	beq.n	800674a <_malloc_r+0xf6>
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	42a2      	cmp	r2, r4
 80066dc:	d12b      	bne.n	8006736 <_malloc_r+0xe2>
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	e00f      	b.n	8006704 <_malloc_r+0xb0>
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	1b52      	subs	r2, r2, r5
 80066e8:	d41f      	bmi.n	800672a <_malloc_r+0xd6>
 80066ea:	2a0b      	cmp	r2, #11
 80066ec:	d917      	bls.n	800671e <_malloc_r+0xca>
 80066ee:	1961      	adds	r1, r4, r5
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	6025      	str	r5, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	6059      	strne	r1, [r3, #4]
 80066f8:	6863      	ldr	r3, [r4, #4]
 80066fa:	bf08      	it	eq
 80066fc:	f8c8 1000 	streq.w	r1, [r8]
 8006700:	5162      	str	r2, [r4, r5]
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	4638      	mov	r0, r7
 8006706:	f104 060b 	add.w	r6, r4, #11
 800670a:	f000 f829 	bl	8006760 <__malloc_unlock>
 800670e:	f026 0607 	bic.w	r6, r6, #7
 8006712:	1d23      	adds	r3, r4, #4
 8006714:	1af2      	subs	r2, r6, r3
 8006716:	d0ae      	beq.n	8006676 <_malloc_r+0x22>
 8006718:	1b9b      	subs	r3, r3, r6
 800671a:	50a3      	str	r3, [r4, r2]
 800671c:	e7ab      	b.n	8006676 <_malloc_r+0x22>
 800671e:	42a3      	cmp	r3, r4
 8006720:	6862      	ldr	r2, [r4, #4]
 8006722:	d1dd      	bne.n	80066e0 <_malloc_r+0x8c>
 8006724:	f8c8 2000 	str.w	r2, [r8]
 8006728:	e7ec      	b.n	8006704 <_malloc_r+0xb0>
 800672a:	4623      	mov	r3, r4
 800672c:	6864      	ldr	r4, [r4, #4]
 800672e:	e7ac      	b.n	800668a <_malloc_r+0x36>
 8006730:	4634      	mov	r4, r6
 8006732:	6876      	ldr	r6, [r6, #4]
 8006734:	e7b4      	b.n	80066a0 <_malloc_r+0x4c>
 8006736:	4613      	mov	r3, r2
 8006738:	e7cc      	b.n	80066d4 <_malloc_r+0x80>
 800673a:	230c      	movs	r3, #12
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	4638      	mov	r0, r7
 8006740:	f000 f80e 	bl	8006760 <__malloc_unlock>
 8006744:	e797      	b.n	8006676 <_malloc_r+0x22>
 8006746:	6025      	str	r5, [r4, #0]
 8006748:	e7dc      	b.n	8006704 <_malloc_r+0xb0>
 800674a:	605b      	str	r3, [r3, #4]
 800674c:	deff      	udf	#255	; 0xff
 800674e:	bf00      	nop
 8006750:	20000448 	.word	0x20000448

08006754 <__malloc_lock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_lock+0x8>)
 8006756:	f7ff b88a 	b.w	800586e <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20000444 	.word	0x20000444

08006760 <__malloc_unlock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_unlock+0x8>)
 8006762:	f7ff b885 	b.w	8005870 <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20000444 	.word	0x20000444

0800676c <_Balloc>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	69c6      	ldr	r6, [r0, #28]
 8006770:	4604      	mov	r4, r0
 8006772:	460d      	mov	r5, r1
 8006774:	b976      	cbnz	r6, 8006794 <_Balloc+0x28>
 8006776:	2010      	movs	r0, #16
 8006778:	f7ff ff44 	bl	8006604 <malloc>
 800677c:	4602      	mov	r2, r0
 800677e:	61e0      	str	r0, [r4, #28]
 8006780:	b920      	cbnz	r0, 800678c <_Balloc+0x20>
 8006782:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <_Balloc+0x78>)
 8006784:	4818      	ldr	r0, [pc, #96]	; (80067e8 <_Balloc+0x7c>)
 8006786:	216b      	movs	r1, #107	; 0x6b
 8006788:	f000 fc38 	bl	8006ffc <__assert_func>
 800678c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006790:	6006      	str	r6, [r0, #0]
 8006792:	60c6      	str	r6, [r0, #12]
 8006794:	69e6      	ldr	r6, [r4, #28]
 8006796:	68f3      	ldr	r3, [r6, #12]
 8006798:	b183      	cbz	r3, 80067bc <_Balloc+0x50>
 800679a:	69e3      	ldr	r3, [r4, #28]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067a2:	b9b8      	cbnz	r0, 80067d4 <_Balloc+0x68>
 80067a4:	2101      	movs	r1, #1
 80067a6:	fa01 f605 	lsl.w	r6, r1, r5
 80067aa:	1d72      	adds	r2, r6, #5
 80067ac:	0092      	lsls	r2, r2, #2
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fc42 	bl	8007038 <_calloc_r>
 80067b4:	b160      	cbz	r0, 80067d0 <_Balloc+0x64>
 80067b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ba:	e00e      	b.n	80067da <_Balloc+0x6e>
 80067bc:	2221      	movs	r2, #33	; 0x21
 80067be:	2104      	movs	r1, #4
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fc39 	bl	8007038 <_calloc_r>
 80067c6:	69e3      	ldr	r3, [r4, #28]
 80067c8:	60f0      	str	r0, [r6, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e4      	bne.n	800679a <_Balloc+0x2e>
 80067d0:	2000      	movs	r0, #0
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	6802      	ldr	r2, [r0, #0]
 80067d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067da:	2300      	movs	r3, #0
 80067dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067e0:	e7f7      	b.n	80067d2 <_Balloc+0x66>
 80067e2:	bf00      	nop
 80067e4:	080076a9 	.word	0x080076a9
 80067e8:	08007729 	.word	0x08007729

080067ec <_Bfree>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	69c6      	ldr	r6, [r0, #28]
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b976      	cbnz	r6, 8006814 <_Bfree+0x28>
 80067f6:	2010      	movs	r0, #16
 80067f8:	f7ff ff04 	bl	8006604 <malloc>
 80067fc:	4602      	mov	r2, r0
 80067fe:	61e8      	str	r0, [r5, #28]
 8006800:	b920      	cbnz	r0, 800680c <_Bfree+0x20>
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <_Bfree+0x3c>)
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <_Bfree+0x40>)
 8006806:	218f      	movs	r1, #143	; 0x8f
 8006808:	f000 fbf8 	bl	8006ffc <__assert_func>
 800680c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006810:	6006      	str	r6, [r0, #0]
 8006812:	60c6      	str	r6, [r0, #12]
 8006814:	b13c      	cbz	r4, 8006826 <_Bfree+0x3a>
 8006816:	69eb      	ldr	r3, [r5, #28]
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006820:	6021      	str	r1, [r4, #0]
 8006822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	080076a9 	.word	0x080076a9
 800682c:	08007729 	.word	0x08007729

08006830 <__multadd>:
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	690d      	ldr	r5, [r1, #16]
 8006836:	4607      	mov	r7, r0
 8006838:	460c      	mov	r4, r1
 800683a:	461e      	mov	r6, r3
 800683c:	f101 0c14 	add.w	ip, r1, #20
 8006840:	2000      	movs	r0, #0
 8006842:	f8dc 3000 	ldr.w	r3, [ip]
 8006846:	b299      	uxth	r1, r3
 8006848:	fb02 6101 	mla	r1, r2, r1, r6
 800684c:	0c1e      	lsrs	r6, r3, #16
 800684e:	0c0b      	lsrs	r3, r1, #16
 8006850:	fb02 3306 	mla	r3, r2, r6, r3
 8006854:	b289      	uxth	r1, r1
 8006856:	3001      	adds	r0, #1
 8006858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800685c:	4285      	cmp	r5, r0
 800685e:	f84c 1b04 	str.w	r1, [ip], #4
 8006862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006866:	dcec      	bgt.n	8006842 <__multadd+0x12>
 8006868:	b30e      	cbz	r6, 80068ae <__multadd+0x7e>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	42ab      	cmp	r3, r5
 800686e:	dc19      	bgt.n	80068a4 <__multadd+0x74>
 8006870:	6861      	ldr	r1, [r4, #4]
 8006872:	4638      	mov	r0, r7
 8006874:	3101      	adds	r1, #1
 8006876:	f7ff ff79 	bl	800676c <_Balloc>
 800687a:	4680      	mov	r8, r0
 800687c:	b928      	cbnz	r0, 800688a <__multadd+0x5a>
 800687e:	4602      	mov	r2, r0
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <__multadd+0x84>)
 8006882:	480d      	ldr	r0, [pc, #52]	; (80068b8 <__multadd+0x88>)
 8006884:	21ba      	movs	r1, #186	; 0xba
 8006886:	f000 fbb9 	bl	8006ffc <__assert_func>
 800688a:	6922      	ldr	r2, [r4, #16]
 800688c:	3202      	adds	r2, #2
 800688e:	f104 010c 	add.w	r1, r4, #12
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	300c      	adds	r0, #12
 8006896:	f000 fba3 	bl	8006fe0 <memcpy>
 800689a:	4621      	mov	r1, r4
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff ffa5 	bl	80067ec <_Bfree>
 80068a2:	4644      	mov	r4, r8
 80068a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068a8:	3501      	adds	r5, #1
 80068aa:	615e      	str	r6, [r3, #20]
 80068ac:	6125      	str	r5, [r4, #16]
 80068ae:	4620      	mov	r0, r4
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	08007718 	.word	0x08007718
 80068b8:	08007729 	.word	0x08007729

080068bc <__hi0bits>:
 80068bc:	0c03      	lsrs	r3, r0, #16
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	b9d3      	cbnz	r3, 80068f8 <__hi0bits+0x3c>
 80068c2:	0400      	lsls	r0, r0, #16
 80068c4:	2310      	movs	r3, #16
 80068c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068ca:	bf04      	itt	eq
 80068cc:	0200      	lsleq	r0, r0, #8
 80068ce:	3308      	addeq	r3, #8
 80068d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068d4:	bf04      	itt	eq
 80068d6:	0100      	lsleq	r0, r0, #4
 80068d8:	3304      	addeq	r3, #4
 80068da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068de:	bf04      	itt	eq
 80068e0:	0080      	lsleq	r0, r0, #2
 80068e2:	3302      	addeq	r3, #2
 80068e4:	2800      	cmp	r0, #0
 80068e6:	db05      	blt.n	80068f4 <__hi0bits+0x38>
 80068e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068ec:	f103 0301 	add.w	r3, r3, #1
 80068f0:	bf08      	it	eq
 80068f2:	2320      	moveq	r3, #32
 80068f4:	4618      	mov	r0, r3
 80068f6:	4770      	bx	lr
 80068f8:	2300      	movs	r3, #0
 80068fa:	e7e4      	b.n	80068c6 <__hi0bits+0xa>

080068fc <__lo0bits>:
 80068fc:	6803      	ldr	r3, [r0, #0]
 80068fe:	f013 0207 	ands.w	r2, r3, #7
 8006902:	d00c      	beq.n	800691e <__lo0bits+0x22>
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d422      	bmi.n	800694e <__lo0bits+0x52>
 8006908:	079a      	lsls	r2, r3, #30
 800690a:	bf49      	itett	mi
 800690c:	085b      	lsrmi	r3, r3, #1
 800690e:	089b      	lsrpl	r3, r3, #2
 8006910:	6003      	strmi	r3, [r0, #0]
 8006912:	2201      	movmi	r2, #1
 8006914:	bf5c      	itt	pl
 8006916:	6003      	strpl	r3, [r0, #0]
 8006918:	2202      	movpl	r2, #2
 800691a:	4610      	mov	r0, r2
 800691c:	4770      	bx	lr
 800691e:	b299      	uxth	r1, r3
 8006920:	b909      	cbnz	r1, 8006926 <__lo0bits+0x2a>
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	2210      	movs	r2, #16
 8006926:	b2d9      	uxtb	r1, r3
 8006928:	b909      	cbnz	r1, 800692e <__lo0bits+0x32>
 800692a:	3208      	adds	r2, #8
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	0719      	lsls	r1, r3, #28
 8006930:	bf04      	itt	eq
 8006932:	091b      	lsreq	r3, r3, #4
 8006934:	3204      	addeq	r2, #4
 8006936:	0799      	lsls	r1, r3, #30
 8006938:	bf04      	itt	eq
 800693a:	089b      	lsreq	r3, r3, #2
 800693c:	3202      	addeq	r2, #2
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	d403      	bmi.n	800694a <__lo0bits+0x4e>
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	f102 0201 	add.w	r2, r2, #1
 8006948:	d003      	beq.n	8006952 <__lo0bits+0x56>
 800694a:	6003      	str	r3, [r0, #0]
 800694c:	e7e5      	b.n	800691a <__lo0bits+0x1e>
 800694e:	2200      	movs	r2, #0
 8006950:	e7e3      	b.n	800691a <__lo0bits+0x1e>
 8006952:	2220      	movs	r2, #32
 8006954:	e7e1      	b.n	800691a <__lo0bits+0x1e>
	...

08006958 <__i2b>:
 8006958:	b510      	push	{r4, lr}
 800695a:	460c      	mov	r4, r1
 800695c:	2101      	movs	r1, #1
 800695e:	f7ff ff05 	bl	800676c <_Balloc>
 8006962:	4602      	mov	r2, r0
 8006964:	b928      	cbnz	r0, 8006972 <__i2b+0x1a>
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <__i2b+0x24>)
 8006968:	4805      	ldr	r0, [pc, #20]	; (8006980 <__i2b+0x28>)
 800696a:	f240 1145 	movw	r1, #325	; 0x145
 800696e:	f000 fb45 	bl	8006ffc <__assert_func>
 8006972:	2301      	movs	r3, #1
 8006974:	6144      	str	r4, [r0, #20]
 8006976:	6103      	str	r3, [r0, #16]
 8006978:	bd10      	pop	{r4, pc}
 800697a:	bf00      	nop
 800697c:	08007718 	.word	0x08007718
 8006980:	08007729 	.word	0x08007729

08006984 <__multiply>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	4691      	mov	r9, r2
 800698a:	690a      	ldr	r2, [r1, #16]
 800698c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006990:	429a      	cmp	r2, r3
 8006992:	bfb8      	it	lt
 8006994:	460b      	movlt	r3, r1
 8006996:	460c      	mov	r4, r1
 8006998:	bfbc      	itt	lt
 800699a:	464c      	movlt	r4, r9
 800699c:	4699      	movlt	r9, r3
 800699e:	6927      	ldr	r7, [r4, #16]
 80069a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069a4:	68a3      	ldr	r3, [r4, #8]
 80069a6:	6861      	ldr	r1, [r4, #4]
 80069a8:	eb07 060a 	add.w	r6, r7, sl
 80069ac:	42b3      	cmp	r3, r6
 80069ae:	b085      	sub	sp, #20
 80069b0:	bfb8      	it	lt
 80069b2:	3101      	addlt	r1, #1
 80069b4:	f7ff feda 	bl	800676c <_Balloc>
 80069b8:	b930      	cbnz	r0, 80069c8 <__multiply+0x44>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b44      	ldr	r3, [pc, #272]	; (8006ad0 <__multiply+0x14c>)
 80069be:	4845      	ldr	r0, [pc, #276]	; (8006ad4 <__multiply+0x150>)
 80069c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069c4:	f000 fb1a 	bl	8006ffc <__assert_func>
 80069c8:	f100 0514 	add.w	r5, r0, #20
 80069cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069d0:	462b      	mov	r3, r5
 80069d2:	2200      	movs	r2, #0
 80069d4:	4543      	cmp	r3, r8
 80069d6:	d321      	bcc.n	8006a1c <__multiply+0x98>
 80069d8:	f104 0314 	add.w	r3, r4, #20
 80069dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069e0:	f109 0314 	add.w	r3, r9, #20
 80069e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069e8:	9202      	str	r2, [sp, #8]
 80069ea:	1b3a      	subs	r2, r7, r4
 80069ec:	3a15      	subs	r2, #21
 80069ee:	f022 0203 	bic.w	r2, r2, #3
 80069f2:	3204      	adds	r2, #4
 80069f4:	f104 0115 	add.w	r1, r4, #21
 80069f8:	428f      	cmp	r7, r1
 80069fa:	bf38      	it	cc
 80069fc:	2204      	movcc	r2, #4
 80069fe:	9201      	str	r2, [sp, #4]
 8006a00:	9a02      	ldr	r2, [sp, #8]
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d80c      	bhi.n	8006a22 <__multiply+0x9e>
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	dd03      	ble.n	8006a14 <__multiply+0x90>
 8006a0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d05b      	beq.n	8006acc <__multiply+0x148>
 8006a14:	6106      	str	r6, [r0, #16]
 8006a16:	b005      	add	sp, #20
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	f843 2b04 	str.w	r2, [r3], #4
 8006a20:	e7d8      	b.n	80069d4 <__multiply+0x50>
 8006a22:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a26:	f1ba 0f00 	cmp.w	sl, #0
 8006a2a:	d024      	beq.n	8006a76 <__multiply+0xf2>
 8006a2c:	f104 0e14 	add.w	lr, r4, #20
 8006a30:	46a9      	mov	r9, r5
 8006a32:	f04f 0c00 	mov.w	ip, #0
 8006a36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a3a:	f8d9 1000 	ldr.w	r1, [r9]
 8006a3e:	fa1f fb82 	uxth.w	fp, r2
 8006a42:	b289      	uxth	r1, r1
 8006a44:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006a50:	4461      	add	r1, ip
 8006a52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a56:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a5e:	b289      	uxth	r1, r1
 8006a60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a64:	4577      	cmp	r7, lr
 8006a66:	f849 1b04 	str.w	r1, [r9], #4
 8006a6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a6e:	d8e2      	bhi.n	8006a36 <__multiply+0xb2>
 8006a70:	9a01      	ldr	r2, [sp, #4]
 8006a72:	f845 c002 	str.w	ip, [r5, r2]
 8006a76:	9a03      	ldr	r2, [sp, #12]
 8006a78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	f1b9 0f00 	cmp.w	r9, #0
 8006a82:	d021      	beq.n	8006ac8 <__multiply+0x144>
 8006a84:	6829      	ldr	r1, [r5, #0]
 8006a86:	f104 0c14 	add.w	ip, r4, #20
 8006a8a:	46ae      	mov	lr, r5
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	f8bc b000 	ldrh.w	fp, [ip]
 8006a94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a98:	fb09 220b 	mla	r2, r9, fp, r2
 8006a9c:	4452      	add	r2, sl
 8006a9e:	b289      	uxth	r1, r1
 8006aa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006aa4:	f84e 1b04 	str.w	r1, [lr], #4
 8006aa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006aac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ab0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ab4:	fb09 110a 	mla	r1, r9, sl, r1
 8006ab8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006abc:	4567      	cmp	r7, ip
 8006abe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ac2:	d8e5      	bhi.n	8006a90 <__multiply+0x10c>
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	50a9      	str	r1, [r5, r2]
 8006ac8:	3504      	adds	r5, #4
 8006aca:	e799      	b.n	8006a00 <__multiply+0x7c>
 8006acc:	3e01      	subs	r6, #1
 8006ace:	e79b      	b.n	8006a08 <__multiply+0x84>
 8006ad0:	08007718 	.word	0x08007718
 8006ad4:	08007729 	.word	0x08007729

08006ad8 <__pow5mult>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	4615      	mov	r5, r2
 8006ade:	f012 0203 	ands.w	r2, r2, #3
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	d007      	beq.n	8006af8 <__pow5mult+0x20>
 8006ae8:	4c25      	ldr	r4, [pc, #148]	; (8006b80 <__pow5mult+0xa8>)
 8006aea:	3a01      	subs	r2, #1
 8006aec:	2300      	movs	r3, #0
 8006aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006af2:	f7ff fe9d 	bl	8006830 <__multadd>
 8006af6:	4607      	mov	r7, r0
 8006af8:	10ad      	asrs	r5, r5, #2
 8006afa:	d03d      	beq.n	8006b78 <__pow5mult+0xa0>
 8006afc:	69f4      	ldr	r4, [r6, #28]
 8006afe:	b97c      	cbnz	r4, 8006b20 <__pow5mult+0x48>
 8006b00:	2010      	movs	r0, #16
 8006b02:	f7ff fd7f 	bl	8006604 <malloc>
 8006b06:	4602      	mov	r2, r0
 8006b08:	61f0      	str	r0, [r6, #28]
 8006b0a:	b928      	cbnz	r0, 8006b18 <__pow5mult+0x40>
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <__pow5mult+0xac>)
 8006b0e:	481e      	ldr	r0, [pc, #120]	; (8006b88 <__pow5mult+0xb0>)
 8006b10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b14:	f000 fa72 	bl	8006ffc <__assert_func>
 8006b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b1c:	6004      	str	r4, [r0, #0]
 8006b1e:	60c4      	str	r4, [r0, #12]
 8006b20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b28:	b94c      	cbnz	r4, 8006b3e <__pow5mult+0x66>
 8006b2a:	f240 2171 	movw	r1, #625	; 0x271
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ff12 	bl	8006958 <__i2b>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	6003      	str	r3, [r0, #0]
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	07eb      	lsls	r3, r5, #31
 8006b44:	d50a      	bpl.n	8006b5c <__pow5mult+0x84>
 8006b46:	4639      	mov	r1, r7
 8006b48:	4622      	mov	r2, r4
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7ff ff1a 	bl	8006984 <__multiply>
 8006b50:	4639      	mov	r1, r7
 8006b52:	4680      	mov	r8, r0
 8006b54:	4630      	mov	r0, r6
 8006b56:	f7ff fe49 	bl	80067ec <_Bfree>
 8006b5a:	4647      	mov	r7, r8
 8006b5c:	106d      	asrs	r5, r5, #1
 8006b5e:	d00b      	beq.n	8006b78 <__pow5mult+0xa0>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	b938      	cbnz	r0, 8006b74 <__pow5mult+0x9c>
 8006b64:	4622      	mov	r2, r4
 8006b66:	4621      	mov	r1, r4
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff ff0b 	bl	8006984 <__multiply>
 8006b6e:	6020      	str	r0, [r4, #0]
 8006b70:	f8c0 9000 	str.w	r9, [r0]
 8006b74:	4604      	mov	r4, r0
 8006b76:	e7e4      	b.n	8006b42 <__pow5mult+0x6a>
 8006b78:	4638      	mov	r0, r7
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	bf00      	nop
 8006b80:	08007878 	.word	0x08007878
 8006b84:	080076a9 	.word	0x080076a9
 8006b88:	08007729 	.word	0x08007729

08006b8c <__lshift>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	460c      	mov	r4, r1
 8006b92:	6849      	ldr	r1, [r1, #4]
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	4691      	mov	r9, r2
 8006ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba4:	f108 0601 	add.w	r6, r8, #1
 8006ba8:	42b3      	cmp	r3, r6
 8006baa:	db0b      	blt.n	8006bc4 <__lshift+0x38>
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff fddd 	bl	800676c <_Balloc>
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	b948      	cbnz	r0, 8006bca <__lshift+0x3e>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <__lshift+0xd0>)
 8006bba:	4829      	ldr	r0, [pc, #164]	; (8006c60 <__lshift+0xd4>)
 8006bbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bc0:	f000 fa1c 	bl	8006ffc <__assert_func>
 8006bc4:	3101      	adds	r1, #1
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__lshift+0x1c>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f100 0114 	add.w	r1, r0, #20
 8006bd0:	f100 0210 	add.w	r2, r0, #16
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4553      	cmp	r3, sl
 8006bd8:	db33      	blt.n	8006c42 <__lshift+0xb6>
 8006bda:	6920      	ldr	r0, [r4, #16]
 8006bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be0:	f104 0314 	add.w	r3, r4, #20
 8006be4:	f019 091f 	ands.w	r9, r9, #31
 8006be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf0:	d02b      	beq.n	8006c4a <__lshift+0xbe>
 8006bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8006bf6:	468a      	mov	sl, r1
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8006c00:	4310      	orrs	r0, r2
 8006c02:	f84a 0b04 	str.w	r0, [sl], #4
 8006c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0a:	459c      	cmp	ip, r3
 8006c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c10:	d8f3      	bhi.n	8006bfa <__lshift+0x6e>
 8006c12:	ebac 0304 	sub.w	r3, ip, r4
 8006c16:	3b15      	subs	r3, #21
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	f104 0015 	add.w	r0, r4, #21
 8006c22:	4584      	cmp	ip, r0
 8006c24:	bf38      	it	cc
 8006c26:	2304      	movcc	r3, #4
 8006c28:	50ca      	str	r2, [r1, r3]
 8006c2a:	b10a      	cbz	r2, 8006c30 <__lshift+0xa4>
 8006c2c:	f108 0602 	add.w	r6, r8, #2
 8006c30:	3e01      	subs	r6, #1
 8006c32:	4638      	mov	r0, r7
 8006c34:	612e      	str	r6, [r5, #16]
 8006c36:	4621      	mov	r1, r4
 8006c38:	f7ff fdd8 	bl	80067ec <_Bfree>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c46:	3301      	adds	r3, #1
 8006c48:	e7c5      	b.n	8006bd6 <__lshift+0x4a>
 8006c4a:	3904      	subs	r1, #4
 8006c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c54:	459c      	cmp	ip, r3
 8006c56:	d8f9      	bhi.n	8006c4c <__lshift+0xc0>
 8006c58:	e7ea      	b.n	8006c30 <__lshift+0xa4>
 8006c5a:	bf00      	nop
 8006c5c:	08007718 	.word	0x08007718
 8006c60:	08007729 	.word	0x08007729

08006c64 <__mcmp>:
 8006c64:	b530      	push	{r4, r5, lr}
 8006c66:	6902      	ldr	r2, [r0, #16]
 8006c68:	690c      	ldr	r4, [r1, #16]
 8006c6a:	1b12      	subs	r2, r2, r4
 8006c6c:	d10e      	bne.n	8006c8c <__mcmp+0x28>
 8006c6e:	f100 0314 	add.w	r3, r0, #20
 8006c72:	3114      	adds	r1, #20
 8006c74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d003      	beq.n	8006c90 <__mcmp+0x2c>
 8006c88:	d305      	bcc.n	8006c96 <__mcmp+0x32>
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	bd30      	pop	{r4, r5, pc}
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d3f3      	bcc.n	8006c7c <__mcmp+0x18>
 8006c94:	e7fa      	b.n	8006c8c <__mcmp+0x28>
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e7f7      	b.n	8006c8c <__mcmp+0x28>

08006c9c <__mdiff>:
 8006c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4690      	mov	r8, r2
 8006caa:	f7ff ffdb 	bl	8006c64 <__mcmp>
 8006cae:	1e05      	subs	r5, r0, #0
 8006cb0:	d110      	bne.n	8006cd4 <__mdiff+0x38>
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff fd59 	bl	800676c <_Balloc>
 8006cba:	b930      	cbnz	r0, 8006cca <__mdiff+0x2e>
 8006cbc:	4b3a      	ldr	r3, [pc, #232]	; (8006da8 <__mdiff+0x10c>)
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	f240 2137 	movw	r1, #567	; 0x237
 8006cc4:	4839      	ldr	r0, [pc, #228]	; (8006dac <__mdiff+0x110>)
 8006cc6:	f000 f999 	bl	8006ffc <__assert_func>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	bfa4      	itt	ge
 8006cd6:	4643      	movge	r3, r8
 8006cd8:	46a0      	movge	r8, r4
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ce0:	bfa6      	itte	ge
 8006ce2:	461c      	movge	r4, r3
 8006ce4:	2500      	movge	r5, #0
 8006ce6:	2501      	movlt	r5, #1
 8006ce8:	f7ff fd40 	bl	800676c <_Balloc>
 8006cec:	b920      	cbnz	r0, 8006cf8 <__mdiff+0x5c>
 8006cee:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <__mdiff+0x10c>)
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	f240 2145 	movw	r1, #581	; 0x245
 8006cf6:	e7e5      	b.n	8006cc4 <__mdiff+0x28>
 8006cf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cfc:	6926      	ldr	r6, [r4, #16]
 8006cfe:	60c5      	str	r5, [r0, #12]
 8006d00:	f104 0914 	add.w	r9, r4, #20
 8006d04:	f108 0514 	add.w	r5, r8, #20
 8006d08:	f100 0e14 	add.w	lr, r0, #20
 8006d0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d14:	f108 0210 	add.w	r2, r8, #16
 8006d18:	46f2      	mov	sl, lr
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d24:	fa11 f88b 	uxtah	r8, r1, fp
 8006d28:	b299      	uxth	r1, r3
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	eba8 0801 	sub.w	r8, r8, r1
 8006d30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d38:	fa1f f888 	uxth.w	r8, r8
 8006d3c:	1419      	asrs	r1, r3, #16
 8006d3e:	454e      	cmp	r6, r9
 8006d40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d44:	f84a 3b04 	str.w	r3, [sl], #4
 8006d48:	d8e8      	bhi.n	8006d1c <__mdiff+0x80>
 8006d4a:	1b33      	subs	r3, r6, r4
 8006d4c:	3b15      	subs	r3, #21
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	3304      	adds	r3, #4
 8006d54:	3415      	adds	r4, #21
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	bf38      	it	cc
 8006d5a:	2304      	movcc	r3, #4
 8006d5c:	441d      	add	r5, r3
 8006d5e:	4473      	add	r3, lr
 8006d60:	469e      	mov	lr, r3
 8006d62:	462e      	mov	r6, r5
 8006d64:	4566      	cmp	r6, ip
 8006d66:	d30e      	bcc.n	8006d86 <__mdiff+0xea>
 8006d68:	f10c 0203 	add.w	r2, ip, #3
 8006d6c:	1b52      	subs	r2, r2, r5
 8006d6e:	f022 0203 	bic.w	r2, r2, #3
 8006d72:	3d03      	subs	r5, #3
 8006d74:	45ac      	cmp	ip, r5
 8006d76:	bf38      	it	cc
 8006d78:	2200      	movcc	r2, #0
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d80:	b17a      	cbz	r2, 8006da2 <__mdiff+0x106>
 8006d82:	6107      	str	r7, [r0, #16]
 8006d84:	e7a4      	b.n	8006cd0 <__mdiff+0x34>
 8006d86:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d8a:	fa11 f288 	uxtah	r2, r1, r8
 8006d8e:	1414      	asrs	r4, r2, #16
 8006d90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d94:	b292      	uxth	r2, r2
 8006d96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d9a:	f84e 2b04 	str.w	r2, [lr], #4
 8006d9e:	1421      	asrs	r1, r4, #16
 8006da0:	e7e0      	b.n	8006d64 <__mdiff+0xc8>
 8006da2:	3f01      	subs	r7, #1
 8006da4:	e7ea      	b.n	8006d7c <__mdiff+0xe0>
 8006da6:	bf00      	nop
 8006da8:	08007718 	.word	0x08007718
 8006dac:	08007729 	.word	0x08007729

08006db0 <__d2b>:
 8006db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	460f      	mov	r7, r1
 8006db6:	2101      	movs	r1, #1
 8006db8:	ec59 8b10 	vmov	r8, r9, d0
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	f7ff fcd5 	bl	800676c <_Balloc>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	b930      	cbnz	r0, 8006dd4 <__d2b+0x24>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <__d2b+0xac>)
 8006dca:	4825      	ldr	r0, [pc, #148]	; (8006e60 <__d2b+0xb0>)
 8006dcc:	f240 310f 	movw	r1, #783	; 0x30f
 8006dd0:	f000 f914 	bl	8006ffc <__assert_func>
 8006dd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ddc:	bb2d      	cbnz	r5, 8006e2a <__d2b+0x7a>
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f1b8 0300 	subs.w	r3, r8, #0
 8006de4:	d026      	beq.n	8006e34 <__d2b+0x84>
 8006de6:	4668      	mov	r0, sp
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	f7ff fd87 	bl	80068fc <__lo0bits>
 8006dee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006df2:	b1e8      	cbz	r0, 8006e30 <__d2b+0x80>
 8006df4:	f1c0 0320 	rsb	r3, r0, #32
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	40c2      	lsrs	r2, r0
 8006e00:	6163      	str	r3, [r4, #20]
 8006e02:	9201      	str	r2, [sp, #4]
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	61a3      	str	r3, [r4, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bf14      	ite	ne
 8006e0c:	2202      	movne	r2, #2
 8006e0e:	2201      	moveq	r2, #1
 8006e10:	6122      	str	r2, [r4, #16]
 8006e12:	b1bd      	cbz	r5, 8006e44 <__d2b+0x94>
 8006e14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e18:	4405      	add	r5, r0
 8006e1a:	603d      	str	r5, [r7, #0]
 8006e1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e20:	6030      	str	r0, [r6, #0]
 8006e22:	4620      	mov	r0, r4
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e2e:	e7d6      	b.n	8006dde <__d2b+0x2e>
 8006e30:	6161      	str	r1, [r4, #20]
 8006e32:	e7e7      	b.n	8006e04 <__d2b+0x54>
 8006e34:	a801      	add	r0, sp, #4
 8006e36:	f7ff fd61 	bl	80068fc <__lo0bits>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	6163      	str	r3, [r4, #20]
 8006e3e:	3020      	adds	r0, #32
 8006e40:	2201      	movs	r2, #1
 8006e42:	e7e5      	b.n	8006e10 <__d2b+0x60>
 8006e44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e4c:	6038      	str	r0, [r7, #0]
 8006e4e:	6918      	ldr	r0, [r3, #16]
 8006e50:	f7ff fd34 	bl	80068bc <__hi0bits>
 8006e54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e58:	e7e2      	b.n	8006e20 <__d2b+0x70>
 8006e5a:	bf00      	nop
 8006e5c:	08007718 	.word	0x08007718
 8006e60:	08007729 	.word	0x08007729

08006e64 <__sflush_r>:
 8006e64:	898a      	ldrh	r2, [r1, #12]
 8006e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	0710      	lsls	r0, r2, #28
 8006e6e:	460c      	mov	r4, r1
 8006e70:	d458      	bmi.n	8006f24 <__sflush_r+0xc0>
 8006e72:	684b      	ldr	r3, [r1, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc05      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dc02      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d0f9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e90:	682f      	ldr	r7, [r5, #0]
 8006e92:	6a21      	ldr	r1, [r4, #32]
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	d032      	beq.n	8006efe <__sflush_r+0x9a>
 8006e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	075a      	lsls	r2, r3, #29
 8006e9e:	d505      	bpl.n	8006eac <__sflush_r+0x48>
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	1ac0      	subs	r0, r0, r3
 8006ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea6:	b10b      	cbz	r3, 8006eac <__sflush_r+0x48>
 8006ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eaa:	1ac0      	subs	r0, r0, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b0      	blx	r6
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	d106      	bne.n	8006ecc <__sflush_r+0x68>
 8006ebe:	6829      	ldr	r1, [r5, #0]
 8006ec0:	291d      	cmp	r1, #29
 8006ec2:	d82b      	bhi.n	8006f1c <__sflush_r+0xb8>
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <__sflush_r+0x108>)
 8006ec6:	410a      	asrs	r2, r1
 8006ec8:	07d6      	lsls	r6, r2, #31
 8006eca:	d427      	bmi.n	8006f1c <__sflush_r+0xb8>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	6062      	str	r2, [r4, #4]
 8006ed0:	04d9      	lsls	r1, r3, #19
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	d504      	bpl.n	8006ee2 <__sflush_r+0x7e>
 8006ed8:	1c42      	adds	r2, r0, #1
 8006eda:	d101      	bne.n	8006ee0 <__sflush_r+0x7c>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b903      	cbnz	r3, 8006ee2 <__sflush_r+0x7e>
 8006ee0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee4:	602f      	str	r7, [r5, #0]
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	d0c9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	d002      	beq.n	8006ef8 <__sflush_r+0x94>
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f7ff fb3a 	bl	800656c <_free_r>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	6360      	str	r0, [r4, #52]	; 0x34
 8006efc:	e7c0      	b.n	8006e80 <__sflush_r+0x1c>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	1c41      	adds	r1, r0, #1
 8006f06:	d1c8      	bne.n	8006e9a <__sflush_r+0x36>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c5      	beq.n	8006e9a <__sflush_r+0x36>
 8006f0e:	2b1d      	cmp	r3, #29
 8006f10:	d001      	beq.n	8006f16 <__sflush_r+0xb2>
 8006f12:	2b16      	cmp	r3, #22
 8006f14:	d101      	bne.n	8006f1a <__sflush_r+0xb6>
 8006f16:	602f      	str	r7, [r5, #0]
 8006f18:	e7b1      	b.n	8006e7e <__sflush_r+0x1a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7ad      	b.n	8006e80 <__sflush_r+0x1c>
 8006f24:	690f      	ldr	r7, [r1, #16]
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	d0a9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006f2a:	0793      	lsls	r3, r2, #30
 8006f2c:	680e      	ldr	r6, [r1, #0]
 8006f2e:	bf08      	it	eq
 8006f30:	694b      	ldreq	r3, [r1, #20]
 8006f32:	600f      	str	r7, [r1, #0]
 8006f34:	bf18      	it	ne
 8006f36:	2300      	movne	r3, #0
 8006f38:	eba6 0807 	sub.w	r8, r6, r7
 8006f3c:	608b      	str	r3, [r1, #8]
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	dd9c      	ble.n	8006e7e <__sflush_r+0x1a>
 8006f44:	6a21      	ldr	r1, [r4, #32]
 8006f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f48:	4643      	mov	r3, r8
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dc06      	bgt.n	8006f62 <__sflush_r+0xfe>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e78e      	b.n	8006e80 <__sflush_r+0x1c>
 8006f62:	4407      	add	r7, r0
 8006f64:	eba8 0800 	sub.w	r8, r8, r0
 8006f68:	e7e9      	b.n	8006f3e <__sflush_r+0xda>
 8006f6a:	bf00      	nop
 8006f6c:	dfbffffe 	.word	0xdfbffffe

08006f70 <_fflush_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	690b      	ldr	r3, [r1, #16]
 8006f74:	4605      	mov	r5, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	b913      	cbnz	r3, 8006f80 <_fflush_r+0x10>
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	b118      	cbz	r0, 8006f8a <_fflush_r+0x1a>
 8006f82:	6a03      	ldr	r3, [r0, #32]
 8006f84:	b90b      	cbnz	r3, 8006f8a <_fflush_r+0x1a>
 8006f86:	f7fe fb7b 	bl	8005680 <__sinit>
 8006f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f3      	beq.n	8006f7a <_fflush_r+0xa>
 8006f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f94:	07d0      	lsls	r0, r2, #31
 8006f96:	d404      	bmi.n	8006fa2 <_fflush_r+0x32>
 8006f98:	0599      	lsls	r1, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_fflush_r+0x32>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f7fe fc66 	bl	800586e <__retarget_lock_acquire_recursive>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	f7ff ff5d 	bl	8006e64 <__sflush_r>
 8006faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fac:	07da      	lsls	r2, r3, #31
 8006fae:	4605      	mov	r5, r0
 8006fb0:	d4e4      	bmi.n	8006f7c <_fflush_r+0xc>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	059b      	lsls	r3, r3, #22
 8006fb6:	d4e1      	bmi.n	8006f7c <_fflush_r+0xc>
 8006fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fba:	f7fe fc59 	bl	8005870 <__retarget_lock_release_recursive>
 8006fbe:	e7dd      	b.n	8006f7c <_fflush_r+0xc>

08006fc0 <_sbrk_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d06      	ldr	r5, [pc, #24]	; (8006fdc <_sbrk_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7fa f922 	bl	8001214 <_sbrk>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_sbrk_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_sbrk_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20000440 	.word	0x20000440

08006fe0 <memcpy>:
 8006fe0:	440a      	add	r2, r1
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe8:	d100      	bne.n	8006fec <memcpy+0xc>
 8006fea:	4770      	bx	lr
 8006fec:	b510      	push	{r4, lr}
 8006fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff6:	4291      	cmp	r1, r2
 8006ff8:	d1f9      	bne.n	8006fee <memcpy+0xe>
 8006ffa:	bd10      	pop	{r4, pc}

08006ffc <__assert_func>:
 8006ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ffe:	4614      	mov	r4, r2
 8007000:	461a      	mov	r2, r3
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <__assert_func+0x2c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4605      	mov	r5, r0
 8007008:	68d8      	ldr	r0, [r3, #12]
 800700a:	b14c      	cbz	r4, 8007020 <__assert_func+0x24>
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <__assert_func+0x30>)
 800700e:	9100      	str	r1, [sp, #0]
 8007010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <__assert_func+0x34>)
 8007016:	462b      	mov	r3, r5
 8007018:	f000 f844 	bl	80070a4 <fiprintf>
 800701c:	f000 f854 	bl	80070c8 <abort>
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <__assert_func+0x38>)
 8007022:	461c      	mov	r4, r3
 8007024:	e7f3      	b.n	800700e <__assert_func+0x12>
 8007026:	bf00      	nop
 8007028:	20000070 	.word	0x20000070
 800702c:	0800788e 	.word	0x0800788e
 8007030:	0800789b 	.word	0x0800789b
 8007034:	080078c9 	.word	0x080078c9

08007038 <_calloc_r>:
 8007038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703a:	fba1 2402 	umull	r2, r4, r1, r2
 800703e:	b94c      	cbnz	r4, 8007054 <_calloc_r+0x1c>
 8007040:	4611      	mov	r1, r2
 8007042:	9201      	str	r2, [sp, #4]
 8007044:	f7ff fb06 	bl	8006654 <_malloc_r>
 8007048:	9a01      	ldr	r2, [sp, #4]
 800704a:	4605      	mov	r5, r0
 800704c:	b930      	cbnz	r0, 800705c <_calloc_r+0x24>
 800704e:	4628      	mov	r0, r5
 8007050:	b003      	add	sp, #12
 8007052:	bd30      	pop	{r4, r5, pc}
 8007054:	220c      	movs	r2, #12
 8007056:	6002      	str	r2, [r0, #0]
 8007058:	2500      	movs	r5, #0
 800705a:	e7f8      	b.n	800704e <_calloc_r+0x16>
 800705c:	4621      	mov	r1, r4
 800705e:	f7fe fb88 	bl	8005772 <memset>
 8007062:	e7f4      	b.n	800704e <_calloc_r+0x16>

08007064 <__ascii_mbtowc>:
 8007064:	b082      	sub	sp, #8
 8007066:	b901      	cbnz	r1, 800706a <__ascii_mbtowc+0x6>
 8007068:	a901      	add	r1, sp, #4
 800706a:	b142      	cbz	r2, 800707e <__ascii_mbtowc+0x1a>
 800706c:	b14b      	cbz	r3, 8007082 <__ascii_mbtowc+0x1e>
 800706e:	7813      	ldrb	r3, [r2, #0]
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	7812      	ldrb	r2, [r2, #0]
 8007074:	1e10      	subs	r0, r2, #0
 8007076:	bf18      	it	ne
 8007078:	2001      	movne	r0, #1
 800707a:	b002      	add	sp, #8
 800707c:	4770      	bx	lr
 800707e:	4610      	mov	r0, r2
 8007080:	e7fb      	b.n	800707a <__ascii_mbtowc+0x16>
 8007082:	f06f 0001 	mvn.w	r0, #1
 8007086:	e7f8      	b.n	800707a <__ascii_mbtowc+0x16>

08007088 <__ascii_wctomb>:
 8007088:	b149      	cbz	r1, 800709e <__ascii_wctomb+0x16>
 800708a:	2aff      	cmp	r2, #255	; 0xff
 800708c:	bf85      	ittet	hi
 800708e:	238a      	movhi	r3, #138	; 0x8a
 8007090:	6003      	strhi	r3, [r0, #0]
 8007092:	700a      	strbls	r2, [r1, #0]
 8007094:	f04f 30ff 	movhi.w	r0, #4294967295
 8007098:	bf98      	it	ls
 800709a:	2001      	movls	r0, #1
 800709c:	4770      	bx	lr
 800709e:	4608      	mov	r0, r1
 80070a0:	4770      	bx	lr
	...

080070a4 <fiprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b503      	push	{r0, r1, lr}
 80070a8:	4601      	mov	r1, r0
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	4805      	ldr	r0, [pc, #20]	; (80070c4 <fiprintf+0x20>)
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f000 f837 	bl	8007128 <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	20000070 	.word	0x20000070

080070c8 <abort>:
 80070c8:	b508      	push	{r3, lr}
 80070ca:	2006      	movs	r0, #6
 80070cc:	f000 fa04 	bl	80074d8 <raise>
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7fa f827 	bl	8001124 <_exit>

080070d6 <__sfputc_r>:
 80070d6:	6893      	ldr	r3, [r2, #8]
 80070d8:	3b01      	subs	r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	b410      	push	{r4}
 80070de:	6093      	str	r3, [r2, #8]
 80070e0:	da08      	bge.n	80070f4 <__sfputc_r+0x1e>
 80070e2:	6994      	ldr	r4, [r2, #24]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	db01      	blt.n	80070ec <__sfputc_r+0x16>
 80070e8:	290a      	cmp	r1, #10
 80070ea:	d103      	bne.n	80070f4 <__sfputc_r+0x1e>
 80070ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f0:	f000 b934 	b.w	800735c <__swbuf_r>
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	1c58      	adds	r0, r3, #1
 80070f8:	6010      	str	r0, [r2, #0]
 80070fa:	7019      	strb	r1, [r3, #0]
 80070fc:	4608      	mov	r0, r1
 80070fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007102:	4770      	bx	lr

08007104 <__sfputs_r>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	4606      	mov	r6, r0
 8007108:	460f      	mov	r7, r1
 800710a:	4614      	mov	r4, r2
 800710c:	18d5      	adds	r5, r2, r3
 800710e:	42ac      	cmp	r4, r5
 8007110:	d101      	bne.n	8007116 <__sfputs_r+0x12>
 8007112:	2000      	movs	r0, #0
 8007114:	e007      	b.n	8007126 <__sfputs_r+0x22>
 8007116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711a:	463a      	mov	r2, r7
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffda 	bl	80070d6 <__sfputc_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d1f3      	bne.n	800710e <__sfputs_r+0xa>
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007128 <_vfiprintf_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	460d      	mov	r5, r1
 800712e:	b09d      	sub	sp, #116	; 0x74
 8007130:	4614      	mov	r4, r2
 8007132:	4698      	mov	r8, r3
 8007134:	4606      	mov	r6, r0
 8007136:	b118      	cbz	r0, 8007140 <_vfiprintf_r+0x18>
 8007138:	6a03      	ldr	r3, [r0, #32]
 800713a:	b90b      	cbnz	r3, 8007140 <_vfiprintf_r+0x18>
 800713c:	f7fe faa0 	bl	8005680 <__sinit>
 8007140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007142:	07d9      	lsls	r1, r3, #31
 8007144:	d405      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	059a      	lsls	r2, r3, #22
 800714a:	d402      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 800714c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714e:	f7fe fb8e 	bl	800586e <__retarget_lock_acquire_recursive>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	d501      	bpl.n	800715c <_vfiprintf_r+0x34>
 8007158:	692b      	ldr	r3, [r5, #16]
 800715a:	b99b      	cbnz	r3, 8007184 <_vfiprintf_r+0x5c>
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f93a 	bl	80073d8 <__swsetup_r>
 8007164:	b170      	cbz	r0, 8007184 <_vfiprintf_r+0x5c>
 8007166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007168:	07dc      	lsls	r4, r3, #31
 800716a:	d504      	bpl.n	8007176 <_vfiprintf_r+0x4e>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	b01d      	add	sp, #116	; 0x74
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4f7      	bmi.n	800716c <_vfiprintf_r+0x44>
 800717c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717e:	f7fe fb77 	bl	8005870 <__retarget_lock_release_recursive>
 8007182:	e7f3      	b.n	800716c <_vfiprintf_r+0x44>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	; 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007192:	2330      	movs	r3, #48	; 0x30
 8007194:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007348 <_vfiprintf_r+0x220>
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719c:	f04f 0901 	mov.w	r9, #1
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0x86>
 80071aa:	2a25      	cmp	r2, #37	; 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x7a>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xa4>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffa2 	bl	8007104 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80a9 	beq.w	8007318 <_vfiprintf_r+0x1f0>
 80071c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	; 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a1 	beq.w	8007318 <_vfiprintf_r+0x1f0>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ec:	931a      	str	r3, [sp, #104]	; 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4854      	ldr	r0, [pc, #336]	; (8007348 <_vfiprintf_r+0x220>)
 80071f8:	f7f8 ffea 	bl	80001d0 <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x110>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	; 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	; 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x120>
 800721c:	9a07      	ldr	r2, [sp, #28]
 800721e:	4654      	mov	r4, sl
 8007220:	2000      	movs	r0, #0
 8007222:	f04f 0c0a 	mov.w	ip, #10
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	; 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94d      	bls.n	80072ce <_vfiprintf_r+0x1a6>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x13a>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x13a>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	46a2      	mov	sl, r4
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xc6>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	; 0x2e
 8007266:	d10c      	bne.n	8007282 <_vfiprintf_r+0x15a>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	; 0x2a
 800726c:	d134      	bne.n	80072d8 <_vfiprintf_r+0x1b0>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9203      	str	r2, [sp, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfb8      	it	lt
 800727a:	f04f 33ff 	movlt.w	r3, #4294967295
 800727e:	3402      	adds	r4, #2
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007358 <_vfiprintf_r+0x230>
 8007286:	7821      	ldrb	r1, [r4, #0]
 8007288:	2203      	movs	r2, #3
 800728a:	4650      	mov	r0, sl
 800728c:	f7f8 ffa0 	bl	80001d0 <memchr>
 8007290:	b138      	cbz	r0, 80072a2 <_vfiprintf_r+0x17a>
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	eba0 000a 	sub.w	r0, r0, sl
 8007298:	2240      	movs	r2, #64	; 0x40
 800729a:	4082      	lsls	r2, r0
 800729c:	4313      	orrs	r3, r2
 800729e:	3401      	adds	r4, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a6:	4829      	ldr	r0, [pc, #164]	; (800734c <_vfiprintf_r+0x224>)
 80072a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ac:	2206      	movs	r2, #6
 80072ae:	f7f8 ff8f 	bl	80001d0 <memchr>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d03f      	beq.n	8007336 <_vfiprintf_r+0x20e>
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <_vfiprintf_r+0x228>)
 80072b8:	bb1b      	cbnz	r3, 8007302 <_vfiprintf_r+0x1da>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	3307      	adds	r3, #7
 80072be:	f023 0307 	bic.w	r3, r3, #7
 80072c2:	3308      	adds	r3, #8
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	443b      	add	r3, r7
 80072ca:	9309      	str	r3, [sp, #36]	; 0x24
 80072cc:	e768      	b.n	80071a0 <_vfiprintf_r+0x78>
 80072ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d2:	460c      	mov	r4, r1
 80072d4:	2001      	movs	r0, #1
 80072d6:	e7a6      	b.n	8007226 <_vfiprintf_r+0xfe>
 80072d8:	2300      	movs	r3, #0
 80072da:	3401      	adds	r4, #1
 80072dc:	9305      	str	r3, [sp, #20]
 80072de:	4619      	mov	r1, r3
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4620      	mov	r0, r4
 80072e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ea:	3a30      	subs	r2, #48	; 0x30
 80072ec:	2a09      	cmp	r2, #9
 80072ee:	d903      	bls.n	80072f8 <_vfiprintf_r+0x1d0>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0c6      	beq.n	8007282 <_vfiprintf_r+0x15a>
 80072f4:	9105      	str	r1, [sp, #20]
 80072f6:	e7c4      	b.n	8007282 <_vfiprintf_r+0x15a>
 80072f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fc:	4604      	mov	r4, r0
 80072fe:	2301      	movs	r3, #1
 8007300:	e7f0      	b.n	80072e4 <_vfiprintf_r+0x1bc>
 8007302:	ab03      	add	r3, sp, #12
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	462a      	mov	r2, r5
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <_vfiprintf_r+0x22c>)
 800730a:	a904      	add	r1, sp, #16
 800730c:	4630      	mov	r0, r6
 800730e:	f7fd fd65 	bl	8004ddc <_printf_float>
 8007312:	4607      	mov	r7, r0
 8007314:	1c78      	adds	r0, r7, #1
 8007316:	d1d6      	bne.n	80072c6 <_vfiprintf_r+0x19e>
 8007318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d405      	bmi.n	800732a <_vfiprintf_r+0x202>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	059a      	lsls	r2, r3, #22
 8007322:	d402      	bmi.n	800732a <_vfiprintf_r+0x202>
 8007324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007326:	f7fe faa3 	bl	8005870 <__retarget_lock_release_recursive>
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	065b      	lsls	r3, r3, #25
 800732e:	f53f af1d 	bmi.w	800716c <_vfiprintf_r+0x44>
 8007332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007334:	e71c      	b.n	8007170 <_vfiprintf_r+0x48>
 8007336:	ab03      	add	r3, sp, #12
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	462a      	mov	r2, r5
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <_vfiprintf_r+0x22c>)
 800733e:	a904      	add	r1, sp, #16
 8007340:	4630      	mov	r0, r6
 8007342:	f7fd ffef 	bl	8005324 <_printf_i>
 8007346:	e7e4      	b.n	8007312 <_vfiprintf_r+0x1ea>
 8007348:	080079cb 	.word	0x080079cb
 800734c:	080079d5 	.word	0x080079d5
 8007350:	08004ddd 	.word	0x08004ddd
 8007354:	08007105 	.word	0x08007105
 8007358:	080079d1 	.word	0x080079d1

0800735c <__swbuf_r>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	460e      	mov	r6, r1
 8007360:	4614      	mov	r4, r2
 8007362:	4605      	mov	r5, r0
 8007364:	b118      	cbz	r0, 800736e <__swbuf_r+0x12>
 8007366:	6a03      	ldr	r3, [r0, #32]
 8007368:	b90b      	cbnz	r3, 800736e <__swbuf_r+0x12>
 800736a:	f7fe f989 	bl	8005680 <__sinit>
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	60a3      	str	r3, [r4, #8]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	071a      	lsls	r2, r3, #28
 8007376:	d525      	bpl.n	80073c4 <__swbuf_r+0x68>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	b31b      	cbz	r3, 80073c4 <__swbuf_r+0x68>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	6922      	ldr	r2, [r4, #16]
 8007380:	1a98      	subs	r0, r3, r2
 8007382:	6963      	ldr	r3, [r4, #20]
 8007384:	b2f6      	uxtb	r6, r6
 8007386:	4283      	cmp	r3, r0
 8007388:	4637      	mov	r7, r6
 800738a:	dc04      	bgt.n	8007396 <__swbuf_r+0x3a>
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f7ff fdee 	bl	8006f70 <_fflush_r>
 8007394:	b9e0      	cbnz	r0, 80073d0 <__swbuf_r+0x74>
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	3b01      	subs	r3, #1
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	701e      	strb	r6, [r3, #0]
 80073a4:	6962      	ldr	r2, [r4, #20]
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d004      	beq.n	80073b6 <__swbuf_r+0x5a>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	07db      	lsls	r3, r3, #31
 80073b0:	d506      	bpl.n	80073c0 <__swbuf_r+0x64>
 80073b2:	2e0a      	cmp	r6, #10
 80073b4:	d104      	bne.n	80073c0 <__swbuf_r+0x64>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7ff fdd9 	bl	8006f70 <_fflush_r>
 80073be:	b938      	cbnz	r0, 80073d0 <__swbuf_r+0x74>
 80073c0:	4638      	mov	r0, r7
 80073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f806 	bl	80073d8 <__swsetup_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d0d5      	beq.n	800737c <__swbuf_r+0x20>
 80073d0:	f04f 37ff 	mov.w	r7, #4294967295
 80073d4:	e7f4      	b.n	80073c0 <__swbuf_r+0x64>
	...

080073d8 <__swsetup_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <__swsetup_r+0xac>)
 80073dc:	4605      	mov	r5, r0
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	460c      	mov	r4, r1
 80073e2:	b118      	cbz	r0, 80073ec <__swsetup_r+0x14>
 80073e4:	6a03      	ldr	r3, [r0, #32]
 80073e6:	b90b      	cbnz	r3, 80073ec <__swsetup_r+0x14>
 80073e8:	f7fe f94a 	bl	8005680 <__sinit>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f2:	0718      	lsls	r0, r3, #28
 80073f4:	d422      	bmi.n	800743c <__swsetup_r+0x64>
 80073f6:	06d9      	lsls	r1, r3, #27
 80073f8:	d407      	bmi.n	800740a <__swsetup_r+0x32>
 80073fa:	2309      	movs	r3, #9
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	e034      	b.n	8007474 <__swsetup_r+0x9c>
 800740a:	0758      	lsls	r0, r3, #29
 800740c:	d512      	bpl.n	8007434 <__swsetup_r+0x5c>
 800740e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007410:	b141      	cbz	r1, 8007424 <__swsetup_r+0x4c>
 8007412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007416:	4299      	cmp	r1, r3
 8007418:	d002      	beq.n	8007420 <__swsetup_r+0x48>
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff f8a6 	bl	800656c <_free_r>
 8007420:	2300      	movs	r3, #0
 8007422:	6363      	str	r3, [r4, #52]	; 0x34
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	2300      	movs	r3, #0
 800742e:	6063      	str	r3, [r4, #4]
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f043 0308 	orr.w	r3, r3, #8
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	b94b      	cbnz	r3, 8007454 <__swsetup_r+0x7c>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744a:	d003      	beq.n	8007454 <__swsetup_r+0x7c>
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f884 	bl	800755c <__smakebuf_r>
 8007454:	89a0      	ldrh	r0, [r4, #12]
 8007456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745a:	f010 0301 	ands.w	r3, r0, #1
 800745e:	d00a      	beq.n	8007476 <__swsetup_r+0x9e>
 8007460:	2300      	movs	r3, #0
 8007462:	60a3      	str	r3, [r4, #8]
 8007464:	6963      	ldr	r3, [r4, #20]
 8007466:	425b      	negs	r3, r3
 8007468:	61a3      	str	r3, [r4, #24]
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	b943      	cbnz	r3, 8007480 <__swsetup_r+0xa8>
 800746e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007472:	d1c4      	bne.n	80073fe <__swsetup_r+0x26>
 8007474:	bd38      	pop	{r3, r4, r5, pc}
 8007476:	0781      	lsls	r1, r0, #30
 8007478:	bf58      	it	pl
 800747a:	6963      	ldrpl	r3, [r4, #20]
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	e7f4      	b.n	800746a <__swsetup_r+0x92>
 8007480:	2000      	movs	r0, #0
 8007482:	e7f7      	b.n	8007474 <__swsetup_r+0x9c>
 8007484:	20000070 	.word	0x20000070

08007488 <_raise_r>:
 8007488:	291f      	cmp	r1, #31
 800748a:	b538      	push	{r3, r4, r5, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	d904      	bls.n	800749c <_raise_r+0x14>
 8007492:	2316      	movs	r3, #22
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800749e:	b112      	cbz	r2, 80074a6 <_raise_r+0x1e>
 80074a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074a4:	b94b      	cbnz	r3, 80074ba <_raise_r+0x32>
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f830 	bl	800750c <_getpid_r>
 80074ac:	462a      	mov	r2, r5
 80074ae:	4601      	mov	r1, r0
 80074b0:	4620      	mov	r0, r4
 80074b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b6:	f000 b817 	b.w	80074e8 <_kill_r>
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d00a      	beq.n	80074d4 <_raise_r+0x4c>
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	d103      	bne.n	80074ca <_raise_r+0x42>
 80074c2:	2316      	movs	r3, #22
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	2001      	movs	r0, #1
 80074c8:	e7e7      	b.n	800749a <_raise_r+0x12>
 80074ca:	2400      	movs	r4, #0
 80074cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074d0:	4628      	mov	r0, r5
 80074d2:	4798      	blx	r3
 80074d4:	2000      	movs	r0, #0
 80074d6:	e7e0      	b.n	800749a <_raise_r+0x12>

080074d8 <raise>:
 80074d8:	4b02      	ldr	r3, [pc, #8]	; (80074e4 <raise+0xc>)
 80074da:	4601      	mov	r1, r0
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f7ff bfd3 	b.w	8007488 <_raise_r>
 80074e2:	bf00      	nop
 80074e4:	20000070 	.word	0x20000070

080074e8 <_kill_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <_kill_r+0x20>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f7f9 fe05 	bl	8001104 <_kill>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d102      	bne.n	8007504 <_kill_r+0x1c>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b103      	cbz	r3, 8007504 <_kill_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	bf00      	nop
 8007508:	20000440 	.word	0x20000440

0800750c <_getpid_r>:
 800750c:	f7f9 bdf2 	b.w	80010f4 <_getpid>

08007510 <__swhatbuf_r>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	460c      	mov	r4, r1
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	2900      	cmp	r1, #0
 800751a:	b096      	sub	sp, #88	; 0x58
 800751c:	4615      	mov	r5, r2
 800751e:	461e      	mov	r6, r3
 8007520:	da0d      	bge.n	800753e <__swhatbuf_r+0x2e>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007528:	f04f 0100 	mov.w	r1, #0
 800752c:	bf0c      	ite	eq
 800752e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007532:	2340      	movne	r3, #64	; 0x40
 8007534:	2000      	movs	r0, #0
 8007536:	6031      	str	r1, [r6, #0]
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	b016      	add	sp, #88	; 0x58
 800753c:	bd70      	pop	{r4, r5, r6, pc}
 800753e:	466a      	mov	r2, sp
 8007540:	f000 f848 	bl	80075d4 <_fstat_r>
 8007544:	2800      	cmp	r0, #0
 8007546:	dbec      	blt.n	8007522 <__swhatbuf_r+0x12>
 8007548:	9901      	ldr	r1, [sp, #4]
 800754a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800754e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007552:	4259      	negs	r1, r3
 8007554:	4159      	adcs	r1, r3
 8007556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800755a:	e7eb      	b.n	8007534 <__swhatbuf_r+0x24>

0800755c <__smakebuf_r>:
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007560:	079d      	lsls	r5, r3, #30
 8007562:	4606      	mov	r6, r0
 8007564:	460c      	mov	r4, r1
 8007566:	d507      	bpl.n	8007578 <__smakebuf_r+0x1c>
 8007568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	2301      	movs	r3, #1
 8007572:	6163      	str	r3, [r4, #20]
 8007574:	b002      	add	sp, #8
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	ab01      	add	r3, sp, #4
 800757a:	466a      	mov	r2, sp
 800757c:	f7ff ffc8 	bl	8007510 <__swhatbuf_r>
 8007580:	9900      	ldr	r1, [sp, #0]
 8007582:	4605      	mov	r5, r0
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff f865 	bl	8006654 <_malloc_r>
 800758a:	b948      	cbnz	r0, 80075a0 <__smakebuf_r+0x44>
 800758c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007590:	059a      	lsls	r2, r3, #22
 8007592:	d4ef      	bmi.n	8007574 <__smakebuf_r+0x18>
 8007594:	f023 0303 	bic.w	r3, r3, #3
 8007598:	f043 0302 	orr.w	r3, r3, #2
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	e7e3      	b.n	8007568 <__smakebuf_r+0xc>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	6020      	str	r0, [r4, #0]
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	81a3      	strh	r3, [r4, #12]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	6163      	str	r3, [r4, #20]
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	6120      	str	r0, [r4, #16]
 80075b2:	b15b      	cbz	r3, 80075cc <__smakebuf_r+0x70>
 80075b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f81d 	bl	80075f8 <_isatty_r>
 80075be:	b128      	cbz	r0, 80075cc <__smakebuf_r+0x70>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	431d      	orrs	r5, r3
 80075d0:	81a5      	strh	r5, [r4, #12]
 80075d2:	e7cf      	b.n	8007574 <__smakebuf_r+0x18>

080075d4 <_fstat_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_fstat_r+0x20>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	f7f9 fdee 	bl	80011c2 <_fstat>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d102      	bne.n	80075f0 <_fstat_r+0x1c>
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	b103      	cbz	r3, 80075f0 <_fstat_r+0x1c>
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	bd38      	pop	{r3, r4, r5, pc}
 80075f2:	bf00      	nop
 80075f4:	20000440 	.word	0x20000440

080075f8 <_isatty_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d06      	ldr	r5, [pc, #24]	; (8007614 <_isatty_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	f7f9 fded 	bl	80011e2 <_isatty>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_isatty_r+0x1a>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_isatty_r+0x1a>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000440 	.word	0x20000440

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
