
MotorDirection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008c00  08008c00  00018c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800900c  0800900c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800900c  0800900c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800900c  0800900c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          0000038c  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000578  20000578  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010281  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002687  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db0  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a9a  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217cf  00000000  00000000  000343b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001235e  00000000  00000000  00055b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c52da  00000000  00000000  00067edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000485c  00000000  00000000  0012d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00131a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008be8 	.word	0x08008be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008be8 	.word	0x08008be8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <GETVAL>:

// some extra variables working as temporary storage
int input = 0;int integration_sum = 0;

// To Get Current Count
int GETVAL(void){
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	 return SysTick->VAL;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <GETVAL+0x14>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_IncTick>:
// To account for Multiple Cycles of Timer
// for more than the period of the timer
void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	i++;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	6013      	str	r3, [r2, #0]
	cpt_time++;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x28>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x28>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000021c 	.word	0x2000021c
 8000cdc:	20000224 	.word	0x20000224

08000ce0 <Timer_start_func>:


// Timer Start Function
// when called the timer starts counting
void Timer_start_func(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	  SysTick->LOAD  = 64000 - 1;                                  /* set reload register */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <Timer_start_func+0x28>)
 8000ce6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000cea:	605a      	str	r2, [r3, #4]
	  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000cec:	210f      	movs	r1, #15
 8000cee:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf2:	f7ff ffa9 	bl	8000c48 <__NVIC_SetPriority>
	  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <Timer_start_func+0x28>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <Timer_start_func+0x28>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	601a      	str	r2, [r3, #0]
	                   SysTick_CTRL_TICKINT_Msk   |
	                   SysTick_CTRL_ENABLE_Msk;
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <Timer_end_func>:

// Timer Count End Function
// when called the timer stops counting
void Timer_end_func(void){
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	 SysTick->CTRL  = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <Timer_end_func+0x1c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	 i=0;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <Timer_end_func+0x20>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010
 8000d2c:	2000021c 	.word	0x2000021c

08000d30 <pid_calculation>:

void pid_calculation(int r_speed, GPIO_TypeDef * GPIO_PORT, uint16_t GPIO_PIN)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	80fb      	strh	r3, [r7, #6]
		ref_speed = r_speed;
 8000d3e:	4a84      	ldr	r2, [pc, #528]	; (8000f50 <pid_calculation+0x220>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6013      	str	r3, [r2, #0]

	  // reads the current state of PA1
	      	// default function used


	      		if(GPIO_PIN==SPEED_SENSORM1_Pin)
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	f040 80d7 	bne.w	8000efa <pid_calculation+0x1ca>
	      		{


	      			if(finished_measure)
 8000d4c:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <pid_calculation+0x224>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 81ca 	beq.w	80010ea <pid_calculation+0x3ba>
	      			{
	      				//iteration_time=time_elapsed/20;
						//speedL = 3000/iteration_time;

	      				speedL=getSpeed();
 8000d56:	f000 fbdb 	bl	8001510 <getSpeed>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b7e      	ldr	r3, [pc, #504]	; (8000f58 <pid_calculation+0x228>)
 8000d60:	601a      	str	r2, [r3, #0]

						// to remove certain high level debouncing values
						if ((speedL) <= 250) {
 8000d62:	4b7d      	ldr	r3, [pc, #500]	; (8000f58 <pid_calculation+0x228>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2bfa      	cmp	r3, #250	; 0xfa
 8000d68:	d80e      	bhi.n	8000d88 <pid_calculation+0x58>
							input = (speedL+previous_speedL+previous_speedL2+previous_speedL3)/4;
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	; (8000f58 <pid_calculation+0x228>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <pid_calculation+0x22c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	441a      	add	r2, r3
 8000d74:	4b7a      	ldr	r3, [pc, #488]	; (8000f60 <pid_calculation+0x230>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	441a      	add	r2, r3
 8000d7a:	4b7a      	ldr	r3, [pc, #488]	; (8000f64 <pid_calculation+0x234>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <pid_calculation+0x238>)
 8000d86:	601a      	str	r2, [r3, #0]
						}
						//else
							//input = previous_speedL;

						if(input==0) input=1;
 8000d88:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <pid_calculation+0x238>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <pid_calculation+0x66>
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <pid_calculation+0x238>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
						iteration_time = 3000/input;
 8000d96:	4b74      	ldr	r3, [pc, #464]	; (8000f68 <pid_calculation+0x238>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da2:	4a72      	ldr	r2, [pc, #456]	; (8000f6c <pid_calculation+0x23c>)
 8000da4:	6013      	str	r3, [r2, #0]

						printf("speed=%d\r\n",speedL);
 8000da6:	4b6c      	ldr	r3, [pc, #432]	; (8000f58 <pid_calculation+0x228>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4870      	ldr	r0, [pc, #448]	; (8000f70 <pid_calculation+0x240>)
 8000dae:	f005 ff17 	bl	8006be0 <iprintf>
						printf("previous_speedL=%d\r\n",previous_speedL);
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <pid_calculation+0x22c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	486e      	ldr	r0, [pc, #440]	; (8000f74 <pid_calculation+0x244>)
 8000dba:	f005 ff11 	bl	8006be0 <iprintf>
						//******************************************///
						//PId has been implemented here
						//PID constants are
						// KP =0.1 Kd = 1 KI =10
						// input to the pid setup is the current_error
						current_errorL = ref_speed - input;
 8000dbe:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <pid_calculation+0x220>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <pid_calculation+0x238>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd0:	4b69      	ldr	r3, [pc, #420]	; (8000f78 <pid_calculation+0x248>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
						error_somme+=current_errorL;
 8000dd6:	4b69      	ldr	r3, [pc, #420]	; (8000f7c <pid_calculation+0x24c>)
 8000dd8:	ed93 7a00 	vldr	s14, [r3]
 8000ddc:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <pid_calculation+0x248>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	4b65      	ldr	r3, [pc, #404]	; (8000f7c <pid_calculation+0x24c>)
 8000de8:	edc3 7a00 	vstr	s15, [r3]
						integration_sum += (current_errorL * iteration_time);
 8000dec:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <pid_calculation+0x250>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df8:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <pid_calculation+0x23c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e04:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <pid_calculation+0x248>)
 8000e06:	edd3 7a00 	vldr	s15, [r3]
 8000e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e16:	ee17 2a90 	vmov	r2, s15
 8000e1a:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <pid_calculation+0x250>)
 8000e1c:	601a      	str	r2, [r3, #0]
						delta_erreur=current_errorL-previous_errorL;
 8000e1e:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <pid_calculation+0x248>)
 8000e20:	ed93 7a00 	vldr	s14, [r3]
 8000e24:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <pid_calculation+0x254>)
 8000e26:	edd3 7a00 	vldr	s15, [r3]
 8000e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2e:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <pid_calculation+0x258>)
 8000e30:	edc3 7a00 	vstr	s15, [r3]

						duty = KP * current_errorL + KI * error_somme + KD*delta_erreur;//+ KD * 1000 * (current_errorL -previous_errorL)/iteration_time;
 8000e34:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <pid_calculation+0x25c>)
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <pid_calculation+0x248>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <pid_calculation+0x260>)
 8000e46:	edd3 6a00 	vldr	s13, [r3]
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <pid_calculation+0x24c>)
 8000e4c:	edd3 7a00 	vldr	s15, [r3]
 8000e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <pid_calculation+0x264>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <pid_calculation+0x258>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e72:	4b49      	ldr	r3, [pc, #292]	; (8000f98 <pid_calculation+0x268>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]

						// directly loaded to the current compare register value instead of using the funtion for
						// PWM to speed up the iteration tim intervals
						//TIM1->CCR1 = duty;
						uint32_t duty_int = (uint32_t)duty ;
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <pid_calculation+0x268>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e82:	ee17 3a90 	vmov	r3, s15
 8000e86:	617b      	str	r3, [r7, #20]

						//printf("duty=%d\r\n",duty);
						if(duty_int>1999){duty_int=1999;}
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e8e:	d302      	bcc.n	8000e96 <pid_calculation+0x166>
 8000e90:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000e94:	617b      	str	r3, [r7, #20]
						if(duty_int<300){duty_int=300;}
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e9c:	d202      	bcs.n	8000ea4 <pid_calculation+0x174>
 8000e9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ea2:	617b      	str	r3, [r7, #20]

						TIM1->CCR1=duty_int;
 8000ea4:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <pid_calculation+0x26c>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	6353      	str	r3, [r2, #52]	; 0x34

						printf("RPM=%d\r\n",input);
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <pid_calculation+0x238>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483b      	ldr	r0, [pc, #236]	; (8000fa0 <pid_calculation+0x270>)
 8000eb2:	f005 fe95 	bl	8006be0 <iprintf>
						printf("duty=%f\r\n",duty);
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <pid_calculation+0x268>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb44 	bl	8000548 <__aeabi_f2d>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <pid_calculation+0x274>)
 8000ec6:	f005 fe8b 	bl	8006be0 <iprintf>



						// to keep a track of the previous error
						previous_errorL = current_errorL;
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <pid_calculation+0x248>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <pid_calculation+0x254>)
 8000ed0:	6013      	str	r3, [r2, #0]
						previous_speedL3 = previous_speedL2;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <pid_calculation+0x230>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <pid_calculation+0x234>)
 8000ed8:	6013      	str	r3, [r2, #0]
						previous_speedL2 = previous_speedL;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <pid_calculation+0x22c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <pid_calculation+0x230>)
 8000ee0:	6013      	str	r3, [r2, #0]
						previous_speedL = input;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <pid_calculation+0x238>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <pid_calculation+0x22c>)
 8000eea:	601a      	str	r2, [r3, #0]
						finished_measure=1;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <pid_calculation+0x224>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
						//*******************************************///
						res=0;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <pid_calculation+0x278>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
						//*******************************************///
						res=0;
					}
					}
				}
	      	}
 8000ef8:	e0f7      	b.n	80010ea <pid_calculation+0x3ba>
				else if(GPIO_PIN==SPEED_SENSORM2_Pin)
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	f040 80f4 	bne.w	80010ea <pid_calculation+0x3ba>
					if(is_firstR)
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <pid_calculation+0x27c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <pid_calculation+0x1e8>
						TIM1->CCR2=first_dutyR;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <pid_calculation+0x280>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <pid_calculation+0x26c>)
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
						is_firstR=0;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <pid_calculation+0x27c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
	    	      	if ( HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68b8      	ldr	r0, [r7, #8]
 8000f1e:	f001 fb39 	bl	8002594 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 80e0 	bne.w	80010ea <pid_calculation+0x3ba>
	    	      		while(HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){}
 8000f2a:	bf00      	nop
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f001 fb2f 	bl	8002594 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f7      	beq.n	8000f2c <pid_calculation+0x1fc>
					if (res==0){
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <pid_calculation+0x278>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d137      	bne.n	8000fb4 <pid_calculation+0x284>
						Timer_start_func();
 8000f44:	f7ff fecc 	bl	8000ce0 <Timer_start_func>
						res=1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <pid_calculation+0x278>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
	      	}
 8000f4e:	e0cc      	b.n	80010ea <pid_calculation+0x3ba>
 8000f50:	20000228 	.word	0x20000228
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000208 	.word	0x20000208
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	20000214 	.word	0x20000214
 8000f64:	20000218 	.word	0x20000218
 8000f68:	2000024c 	.word	0x2000024c
 8000f6c:	20000230 	.word	0x20000230
 8000f70:	08008c00 	.word	0x08008c00
 8000f74:	08008c0c 	.word	0x08008c0c
 8000f78:	20000238 	.word	0x20000238
 8000f7c:	20000244 	.word	0x20000244
 8000f80:	20000250 	.word	0x20000250
 8000f84:	20000234 	.word	0x20000234
 8000f88:	20000248 	.word	0x20000248
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000010 	.word	0x20000010
 8000f94:	20000014 	.word	0x20000014
 8000f98:	2000022c 	.word	0x2000022c
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	08008c24 	.word	0x08008c24
 8000fa4:	08008c30 	.word	0x08008c30
 8000fa8:	20000220 	.word	0x20000220
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004
					} else if (res==1){
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <pid_calculation+0x3c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 8096 	bne.w	80010ea <pid_calculation+0x3ba>
						iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000fbe:	f7ff fe6d 	bl	8000c9c <GETVAL>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <pid_calculation+0x3c8>)
 8000fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fca:	1312      	asrs	r2, r2, #12
 8000fcc:	17db      	asrs	r3, r3, #31
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <pid_calculation+0x3cc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a49      	ldr	r2, [pc, #292]	; (8001100 <pid_calculation+0x3d0>)
 8000fda:	6013      	str	r3, [r2, #0]
						speedR = 3000/iteration_time;
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <pid_calculation+0x3d0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <pid_calculation+0x3d4>)
 8000fec:	601a      	str	r2, [r3, #0]
						Timer_end_func();
 8000fee:	f7ff fe8d 	bl	8000d0c <Timer_end_func>
						if (speedR < 3000) {
 8000ff2:	4b44      	ldr	r3, [pc, #272]	; (8001104 <pid_calculation+0x3d4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d804      	bhi.n	8001008 <pid_calculation+0x2d8>
							input = speedR;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <pid_calculation+0x3d4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <pid_calculation+0x3d8>)
 8001006:	601a      	str	r2, [r3, #0]
						current_errorR = ref_speed - input;
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <pid_calculation+0x3dc>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <pid_calculation+0x3d8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <pid_calculation+0x3e0>)
 800101c:	edc3 7a00 	vstr	s15, [r3]
						integration_sum += (current_errorR * iteration_time);
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <pid_calculation+0x3e4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <pid_calculation+0x3d0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <pid_calculation+0x3e0>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104a:	ee17 2a90 	vmov	r2, s15
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <pid_calculation+0x3e4>)
 8001050:	601a      	str	r2, [r3, #0]
						duty = KP * current_errorR + KI * integration_sum + KD * 1000 * (current_errorR -previous_errorR)/iteration_time;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <pid_calculation+0x3e8>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <pid_calculation+0x3e0>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <pid_calculation+0x3e4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <pid_calculation+0x3ec>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <pid_calculation+0x3f0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <pid_calculation+0x3e0>)
 8001092:	ed93 6a00 	vldr	s12, [r3]
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <pid_calculation+0x3f4>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010a0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <pid_calculation+0x3d0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <pid_calculation+0x3f8>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
						printf("speedR=%d\r\n",speedR);
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <pid_calculation+0x3d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <pid_calculation+0x3fc>)
 80010c6:	f005 fd8b 	bl	8006be0 <iprintf>
						TIM1->CCR2=duty;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <pid_calculation+0x3f8>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <pid_calculation+0x400>)
 80010d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d6:	ee17 2a90 	vmov	r2, s15
 80010da:	639a      	str	r2, [r3, #56]	; 0x38
						previous_errorR = current_errorR;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <pid_calculation+0x3e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <pid_calculation+0x3f4>)
 80010e2:	6013      	str	r3, [r2, #0]
						res=0;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <pid_calculation+0x3c4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
	      	}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000220 	.word	0x20000220
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	2000021c 	.word	0x2000021c
 8001100:	20000230 	.word	0x20000230
 8001104:	2000020c 	.word	0x2000020c
 8001108:	2000024c 	.word	0x2000024c
 800110c:	20000228 	.word	0x20000228
 8001110:	20000240 	.word	0x20000240
 8001114:	20000250 	.word	0x20000250
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000010 	.word	0x20000010
 8001120:	20000014 	.word	0x20000014
 8001124:	2000023c 	.word	0x2000023c
 8001128:	2000022c 	.word	0x2000022c
 800112c:	08008c3c 	.word	0x08008c3c
 8001130:	40012c00 	.word	0x40012c00

08001134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <MX_GPIO_Init+0x160>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a51      	ldr	r2, [pc, #324]	; (8001294 <MX_GPIO_Init+0x160>)
 8001150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <MX_GPIO_Init+0x160>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <MX_GPIO_Init+0x160>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <MX_GPIO_Init+0x160>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	6153      	str	r3, [r2, #20]
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <MX_GPIO_Init+0x160>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <MX_GPIO_Init+0x160>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <MX_GPIO_Init+0x160>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <MX_GPIO_Init+0x160>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <MX_GPIO_Init+0x160>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <MX_GPIO_Init+0x160>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <MX_GPIO_Init+0x160>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_GPIO_Init+0x160>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a39      	ldr	r2, [pc, #228]	; (8001294 <MX_GPIO_Init+0x160>)
 80011b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <MX_GPIO_Init+0x160>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	21cc      	movs	r1, #204	; 0xcc
 80011c6:	4834      	ldr	r0, [pc, #208]	; (8001298 <MX_GPIO_Init+0x164>)
 80011c8:	f001 f9fc 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2120      	movs	r1, #32
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f001 f9f6 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SPEED_SENSORM2_Pin;
 80011d8:	f242 0320 	movw	r3, #8224	; 0x2020
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	482a      	ldr	r0, [pc, #168]	; (8001298 <MX_GPIO_Init+0x164>)
 80011f0:	f001 f85e 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin;
 80011f4:	23cc      	movs	r3, #204	; 0xcc
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <MX_GPIO_Init+0x164>)
 800120c:	f001 f850 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001210:	2320      	movs	r3, #32
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 f841 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPEED_SENSORM1_Pin;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPEED_SENSORM1_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4815      	ldr	r0, [pc, #84]	; (8001298 <MX_GPIO_Init+0x164>)
 8001244:	f001 f834 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR5_Pin|IR1_Pin|IR2_Pin|IR3_Pin;
 8001248:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_GPIO_Init+0x164>)
 800125e:	f001 f827 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR4_Pin;
 8001262:	2304      	movs	r3, #4
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_GPIO_Init+0x168>)
 8001276:	f001 f81b 	bl	80022b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	200a      	movs	r0, #10
 8001280:	f000 ffdf 	bl	8002242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001284:	200a      	movs	r0, #10
 8001286:	f000 fff8 	bl	800227a <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	48000800 	.word	0x48000800
 800129c:	48000c00 	.word	0x48000c00

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f000 fea0 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f830 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f7ff ff42 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012b0:	f000 fdfe 	bl	8001eb0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012b4:	f000 fb20 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012b8:	f000 fc58 	bl	8001b6c <MX_TIM3_Init>
  MX_TIM6_Init();
 80012bc:	f000 fcd6 	bl	8001c6c <MX_TIM6_Init>
  MX_TIM2_Init();
 80012c0:	f000 fbe4 	bl	8001a8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("start=0\r\n");
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <main+0x58>)
 80012c6:	f005 fcf1 	bl	8006cac <puts>
  HAL_TIM_Base_Start_IT(&htim6);
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <main+0x5c>)
 80012cc:	f002 fe0c 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80012d0:	2108      	movs	r1, #8
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <main+0x60>)
 80012d4:	f003 f814 	bl	8004300 <HAL_TIM_IC_Start_IT>

  printf("start=1\r\n");
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <main+0x64>)
 80012da:	f005 fce7 	bl	8006cac <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(cpt_ms>=20)
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <main+0x68>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b13      	cmp	r3, #19
 80012e4:	d9fb      	bls.n	80012de <main+0x3e>
	  {
		  forward(100,110);
 80012e6:	216e      	movs	r1, #110	; 0x6e
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f000 f98d 	bl	8001608 <forward>
		  cpt_ms=0;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <main+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
	  if(cpt_ms>=20)
 80012f4:	e7f3      	b.n	80012de <main+0x3e>
 80012f6:	bf00      	nop
 80012f8:	08008c48 	.word	0x08008c48
 80012fc:	20000354 	.word	0x20000354
 8001300:	200002bc 	.word	0x200002bc
 8001304:	08008c54 	.word	0x08008c54
 8001308:	20000268 	.word	0x20000268

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b096      	sub	sp, #88	; 0x58
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	2228      	movs	r2, #40	; 0x28
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fda6 	bl	8006e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001342:	2302      	movs	r3, #2
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2310      	movs	r3, #16
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001352:	2300      	movs	r3, #0
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001356:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800135a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001360:	4618      	mov	r0, r3
 8001362:	f001 f96b 	bl	800263c <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800136c:	f000 f946 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2102      	movs	r1, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f993 	bl	80036b8 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001398:	f000 f930 	bl	80015fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fbbb 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013b4:	f000 f922 	bl	80015fc <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3758      	adds	r7, #88	; 0x58
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013c8:	1d39      	adds	r1, r7, #4
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	2201      	movs	r2, #1
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <__io_putchar+0x20>)
 80013d2:	f004 fb07 	bl	80059e4 <HAL_UART_Transmit>

  return ch;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200003a0 	.word	0x200003a0

080013e4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7f1b      	ldrb	r3, [r3, #28]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d17d      	bne.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
	{


		if(Is_First_Captured_Left==0)
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11a      	bne.n	8001432 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			ICVal1_Left= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80013fc:	2108      	movs	r1, #8
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f003 fc4c 	bl	8004c9c <HAL_TIM_ReadCapturedValue>
 8001404:	4603      	mov	r3, r0
 8001406:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x118>)
 8001408:	6013      	str	r3, [r2, #0]
			Is_First_Captured_Left=1;
 800140a:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a1a      	ldr	r2, [r3, #32]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800142e:	621a      	str	r2, [r3, #32]
			Is_First_Captured_Left=0;
			__HAL_TIM_SET_COUNTER(htim,0);
			__HAL_TIM_DISABLE_IT(&htim2,TIM_IT_CC3);
		}
	}
}
 8001430:	e05e      	b.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
		else if(Is_First_Captured_Left==1)
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d136      	bne.n	80014a8 <HAL_TIM_IC_CaptureCallback+0xc4>
			ICVal2_Left= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800143a:	2108      	movs	r1, #8
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f003 fc2d 	bl	8004c9c <HAL_TIM_ReadCapturedValue>
 8001442:	4603      	mov	r3, r0
 8001444:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001446:	6013      	str	r3, [r2, #0]
			Is_First_Captured_Left=2;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800145c:	621a      	str	r2, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a12      	ldr	r2, [r2, #32]
 8001468:	621a      	str	r2, [r3, #32]
			if(ICVal2_Left>ICVal1_Left)
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x118>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d907      	bls.n	8001486 <HAL_TIM_IC_CaptureCallback+0xa2>
				Difference_Left = ICVal2_Left-ICVal1_Left; //microsecondes
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x118>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	e034      	b.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
			else if(ICVal2_Left<ICVal1_Left)
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x118>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d22e      	bcs.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
				Difference_Left =  (0xffff-ICVal1_Left)+ICVal2_Left;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x118>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014a0:	33ff      	adds	r3, #255	; 0xff
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	e023      	b.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
		else if(Is_First_Captured_Left==2)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d11f      	bne.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x10c>
			ICVal3_Left = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80014b0:	2108      	movs	r1, #8
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f003 fbf2 	bl	8004c9c <HAL_TIM_ReadCapturedValue>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x124>)
 80014bc:	6013      	str	r3, [r2, #0]
			Difference_Left += ICVal3_Left - ICVal2_Left;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x124>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014d0:	6013      	str	r3, [r2, #0]
			Is_First_Captured_Left=0;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x114>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_DISABLE_IT(&htim2,TIM_IT_CC3);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_TIM_IC_CaptureCallback+0x128>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_TIM_IC_CaptureCallback+0x128>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	60da      	str	r2, [r3, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000258 	.word	0x20000258
 80014fc:	2000025c 	.word	0x2000025c
 8001500:	20000260 	.word	0x20000260
 8001504:	20000264 	.word	0x20000264
 8001508:	20000254 	.word	0x20000254
 800150c:	200002bc 	.word	0x200002bc

08001510 <getSpeed>:


int getSpeed(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
	int speed=0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
	float duree=0, RPM=0;
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	607b      	str	r3, [r7, #4]

	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC3);
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <getSpeed+0xb0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <getSpeed+0xb0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0208 	orr.w	r2, r2, #8
 8001534:	60da      	str	r2, [r3, #12]


	 //  go_forward();
	 duree=(float)Difference_Left*(1.0/64000.0);
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <getSpeed+0xb4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001542:	ee17 0a90 	vmov	r0, s15
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	a319      	add	r3, pc, #100	; (adr r3, 80015b0 <getSpeed+0xa0>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f852 	bl	80005f8 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fb24 	bl	8000ba8 <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	60bb      	str	r3, [r7, #8]

	 RPM = (60.0*1000.0) / (20.0*duree);
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7fe ffef 	bl	8000548 <__aeabi_f2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <getSpeed+0xb8>)
 8001570:	f7ff f842 	bl	80005f8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	a10f      	add	r1, pc, #60	; (adr r1, 80015b8 <getSpeed+0xa8>)
 800157a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800157e:	f7ff f965 	bl	800084c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb0d 	bl	8000ba8 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	607b      	str	r3, [r7, #4]

	 speed= RPM;
 8001592:	edd7 7a01 	vldr	s15, [r7, #4]
 8001596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159a:	ee17 3a90 	vmov	r3, s15
 800159e:	60fb      	str	r3, [r7, #12]

	return speed;
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015b4:	3ef0624d 	.word	0x3ef0624d
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40ed4c00 	.word	0x40ed4c00
 80015c0:	200002bc 	.word	0x200002bc
 80015c4:	20000264 	.word	0x20000264
 80015c8:	40340000 	.word	0x40340000

080015cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim6 )
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d104      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		cpt_ms++;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015e4:	6013      	str	r3, [r2, #0]
	}
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000354 	.word	0x20000354
 80015f8:	20000268 	.word	0x20000268

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <forward>:
#include "tim.h"



void forward(uint8_t speedL, uint8_t speedR)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	71bb      	strb	r3, [r7, #6]
	  /* TIM1 counter enable */


	  HAL_TIM_Base_Start(&htim1);
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <forward+0x64>)
 800161a:	f002 fc11 	bl	8003e40 <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800161e:	2100      	movs	r1, #0
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <forward+0x64>)
 8001622:	f002 fd1f 	bl	8004064 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001626:	2104      	movs	r1, #4
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <forward+0x64>)
 800162a:	f002 fd1b 	bl	8004064 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(SENS1_M1_GPIO_Port, SENS1_M1_Pin, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	2104      	movs	r1, #4
 8001632:	480f      	ldr	r0, [pc, #60]	; (8001670 <forward+0x68>)
 8001634:	f000 ffc6 	bl	80025c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SENS2_M1_GPIO_Port, SENS2_M1_Pin, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2108      	movs	r1, #8
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <forward+0x68>)
 800163e:	f000 ffc1 	bl	80025c4 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(SENS1_M2_GPIO_Port, SENS1_M2_Pin, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2140      	movs	r1, #64	; 0x40
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <forward+0x68>)
 8001648:	f000 ffbc 	bl	80025c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SENS2_M2_GPIO_Port, SENS2_M2_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <forward+0x68>)
 8001652:	f000 ffb7 	bl	80025c4 <HAL_GPIO_WritePin>

		  pid_calculation(speedL, SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2210      	movs	r2, #16
 800165a:	4905      	ldr	r1, [pc, #20]	; (8001670 <forward+0x68>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb67 	bl	8000d30 <pid_calculation>

	  //HAL_TIM_Base_Stop(&htim1);
	  //HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	  //HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000270 	.word	0x20000270
 8001670:	48000800 	.word	0x48000800

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x44>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_MspInit+0x44>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x44>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x44>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x44>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x44>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016aa:	2007      	movs	r0, #7
 80016ac:	f000 fdbe 	bl	800222c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f7ff fad4 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SENSORM1_Pin);
 8001714:	2010      	movs	r0, #16
 8001716:	f000 ff6d 	bl	80025f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <TIM2_IRQHandler+0x10>)
 8001726:	f002 ff1f 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002bc 	.word	0x200002bc

08001734 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM6_DAC1_IRQHandler+0x10>)
 800173a:	f002 ff15 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000354 	.word	0x20000354

08001748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_kill>:

int _kill(int pid, int sig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001762:	f005 fbd5 	bl	8006f10 <__errno>
 8001766:	4603      	mov	r3, r0
 8001768:	2216      	movs	r2, #22
 800176a:	601a      	str	r2, [r3, #0]
  return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_exit>:

void _exit (int status)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe7 	bl	8001758 <_kill>
  while (1) {}    /* Make sure we hang here */
 800178a:	e7fe      	b.n	800178a <_exit+0x12>

0800178c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
  }

  return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e009      	b.n	80017ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fded 	bl	80013c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf1      	blt.n	80017d8 <_write+0x12>
  }
  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_close>:

int _close(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f005 fb3a 	bl	8006f10 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20003000 	.word	0x20003000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	2000026c 	.word	0x2000026c
 80018d0:	20000578 	.word	0x20000578

080018d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09a      	sub	sp, #104	; 0x68
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	222c      	movs	r2, #44	; 0x2c
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f005 fa9a 	bl	8006e6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <MX_TIM1_Init+0x18c>)
 800193a:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <MX_TIM1_Init+0x190>)
 800193c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 800193e:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001940:	f240 227f 	movw	r2, #639	; 0x27f
 8001944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800194c:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <MX_TIM1_Init+0x18c>)
 800194e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195a:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <MX_TIM1_Init+0x18c>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001966:	4847      	ldr	r0, [pc, #284]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001968:	f002 fa12 	bl	8003d90 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001972:	f7ff fe43 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001980:	4619      	mov	r1, r3
 8001982:	4840      	ldr	r0, [pc, #256]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001984:	f003 f8c0 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800198e:	f7ff fe35 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001992:	483c      	ldr	r0, [pc, #240]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001994:	f002 fb04 	bl	8003fa0 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800199e:	f7ff fe2d 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4833      	ldr	r0, [pc, #204]	; (8001a84 <MX_TIM1_Init+0x18c>)
 80019b6:	f003 fec3 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80019c0:	f7ff fe1c 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4826      	ldr	r0, [pc, #152]	; (8001a84 <MX_TIM1_Init+0x18c>)
 80019ea:	f002 ff79 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019f4:	f7ff fe02 	bl	80015fc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_TIM1_Init+0x18c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a12:	f002 ff65 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a1c:	f7ff fdee 	bl	80015fc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a66:	f003 fed9 	bl	800581c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001a70:	f7ff fdc4 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM1_Init+0x18c>)
 8001a76:	f000 f9bd 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001a7a:	bf00      	nop
 8001a7c:	3768      	adds	r7, #104	; 0x68
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000270 	.word	0x20000270
 8001a88:	40012c00 	.word	0x40012c00

08001a8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ae0:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001ae2:	f002 f955 	bl	8003d90 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001aec:	f7ff fd86 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	4619      	mov	r1, r3
 8001afc:	481a      	ldr	r0, [pc, #104]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001afe:	f003 f803 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b08:	f7ff fd78 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001b0e:	f002 fb95 	bl	800423c <HAL_TIM_IC_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b18:	f7ff fd70 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480f      	ldr	r0, [pc, #60]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001b2c:	f003 fe08 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001b36:	f7ff fd61 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM2_Init+0xdc>)
 8001b52:	f002 fe28 	bl	80047a6 <HAL_TIM_IC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001b5c:	f7ff fd4e 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002bc 	.word	0x200002bc

08001b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <MX_TIM3_Init+0xfc>)
 8001ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001ba6:	f240 227f 	movw	r2, #639	; 0x27f
 8001baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bb4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc6:	4827      	ldr	r0, [pc, #156]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bc8:	f002 f8e2 	bl	8003d90 <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bd2:	f7ff fd13 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4820      	ldr	r0, [pc, #128]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001be4:	f002 ff90 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001bee:	f7ff fd05 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf2:	481c      	ldr	r0, [pc, #112]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001bf4:	f002 f9d4 	bl	8003fa0 <HAL_TIM_PWM_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001bfe:	f7ff fcfd 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4814      	ldr	r0, [pc, #80]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001c12:	f003 fd95 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c1c:	f7ff fcee 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c20:	2360      	movs	r3, #96	; 0x60
 8001c22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	220c      	movs	r2, #12
 8001c34:	4619      	mov	r1, r3
 8001c36:	480b      	ldr	r0, [pc, #44]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001c38:	f002 fe52 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001c42:	f7ff fcdb 	bl	80015fc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c54:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MX_TIM3_Init+0xf8>)
 8001c58:	f000 f8cc 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001c5c:	bf00      	nop
 8001c5e:	3738      	adds	r7, #56	; 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000308 	.word	0x20000308
 8001c68:	40000400 	.word	0x40000400

08001c6c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <MX_TIM6_Init+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000-1;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c90:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c94:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001c9e:	f002 f877 	bl	8003d90 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ca8:	f7ff fca8 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_TIM6_Init+0x64>)
 8001cba:	f003 fd41 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f7ff fc9a 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000354 	.word	0x20000354
 8001cd4:	40001000 	.word	0x40001000

08001cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <HAL_TIM_Base_MspInit+0x108>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d04:	6193      	str	r3, [r2, #24]
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d12:	e061      	b.n	8001dd8 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d131      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPEED_SENSORM10_Pin;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPEED_SENSORM10_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481f      	ldr	r0, [pc, #124]	; (8001de8 <HAL_TIM_Base_MspInit+0x110>)
 8001d6c:	f000 faa0 	bl	80022b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	201c      	movs	r0, #28
 8001d76:	f000 fa64 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d7a:	201c      	movs	r0, #28
 8001d7c:	f000 fa7d 	bl	800227a <HAL_NVIC_EnableIRQ>
}
 8001d80:	e02a      	b.n	8001dd8 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_TIM_Base_MspInit+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10c      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	61d3      	str	r3, [r2, #28]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	e018      	b.n	8001dd8 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM6)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d113      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	61d3      	str	r3, [r2, #28]
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_Base_MspInit+0x10c>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2036      	movs	r0, #54	; 0x36
 8001dce:	f000 fa38 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001dd2:	2036      	movs	r0, #54	; 0x36
 8001dd4:	f000 fa51 	bl	800227a <HAL_NVIC_EnableIRQ>
}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000400 	.word	0x48000400
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40001000 	.word	0x40001000

08001df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_MspPostInit+0xa8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11c      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e20:	6153      	str	r3, [r2, #20]
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <HAL_TIM_MspPostInit+0xb0>)
 8001e4a:	f000 fa31 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e4e:	e020      	b.n	8001e92 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6153      	str	r3, [r2, #20]
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_TIM_MspPostInit+0xac>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_M3_Pin;
 8001e72:	2302      	movs	r3, #2
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e82:	2302      	movs	r3, #2
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M3_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <HAL_TIM_MspPostInit+0xb8>)
 8001e8e:	f000 fa0f 	bl	80022b0 <HAL_GPIO_Init>
}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000800 	.word	0x48000800
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	48000400 	.word	0x48000400

08001eb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <MX_USART2_UART_Init+0x5c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_USART2_UART_Init+0x58>)
 8001ef4:	f003 fd28 	bl	8005948 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001efe:	f7ff fb7d 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003a0 	.word	0x200003a0
 8001f0c:	40004400 	.word	0x40004400

08001f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d128      	bne.n	8001f84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	61d3      	str	r3, [r2, #28]
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	6153      	str	r3, [r2, #20]
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f72:	2307      	movs	r3, #7
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f000 f996 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40021000 	.word	0x40021000

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff fc9c 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f004 ffab 	bl	8006f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7ff f96b 	bl	80012a0 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fcc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fd8:	08009014 	.word	0x08009014
  ldr r2, =_sbss
 8001fdc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001fe0:	20000578 	.word	0x20000578

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f917 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fb36 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f92f 	bl	8002296 <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 f8f7 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000018 	.word	0x20000018
 800206c:	20000020 	.word	0x20000020
 8002070:	2000001c 	.word	0x2000001c

08002074 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;  
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000428 	.word	0x20000428

0800208c <__NVIC_SetPriorityGrouping>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff29 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff3e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff31 	bl	80020f0 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e14e      	b.n	800255e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8140 	beq.w	8002558 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d005      	beq.n	80022f0 <HAL_GPIO_Init+0x40>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b03      	cmp	r3, #3
 800235c:	d017      	beq.n	800238e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d123      	bne.n	80023e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 809a 	beq.w	8002558 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_GPIO_Init+0x2cc>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a54      	ldr	r2, [pc, #336]	; (800257c <HAL_GPIO_Init+0x2cc>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_GPIO_Init+0x2cc>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243c:	4a50      	ldr	r2, [pc, #320]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1e0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_GPIO_Init+0x2d4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a45      	ldr	r2, [pc, #276]	; (8002588 <HAL_GPIO_Init+0x2d8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1d8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_GPIO_Init+0x2dc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1d4>
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002484:	2305      	movs	r3, #5
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x1e2>
 8002490:	2300      	movs	r3, #0
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a2:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b0:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d4:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x2e0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f aea9 	bne.w	80022c0 <HAL_GPIO_Init+0x10>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	48000400 	.word	0x48000400
 8002588:	48000800 	.word	0x48000800
 800258c:	48000c00 	.word	0x48000c00
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f806 	bl	8002624 <HAL_GPIO_EXTI_Callback>
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002642:	af00      	add	r7, sp, #0
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f001 b823 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 817d 	beq.w	8002972 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002678:	4bbc      	ldr	r3, [pc, #752]	; (800296c <HAL_RCC_OscConfig+0x330>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002684:	4bb9      	ldr	r3, [pc, #740]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d15c      	bne.n	800274a <HAL_RCC_OscConfig+0x10e>
 8002690:	4bb6      	ldr	r3, [pc, #728]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d155      	bne.n	800274a <HAL_RCC_OscConfig+0x10e>
 800269e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x94>
 80026ca:	4ba8      	ldr	r3, [pc, #672]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e015      	b.n	80026fc <HAL_RCC_OscConfig+0xc0>
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026f8:	4b9c      	ldr	r3, [pc, #624]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002700:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002704:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002708:	fa92 f2a2 	rbit	r2, r2
 800270c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002710:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 811f 	beq.w	8002970 <HAL_RCC_OscConfig+0x334>
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 8116 	bne.w	8002970 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f000 bfaf 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x12e>
 800275c:	4b83      	ldr	r3, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x330>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a82      	ldr	r2, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e036      	b.n	80027d8 <HAL_RCC_OscConfig+0x19c>
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x158>
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x330>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b79      	ldr	r3, [pc, #484]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a78      	ldr	r2, [pc, #480]	; (800296c <HAL_RCC_OscConfig+0x330>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e021      	b.n	80027d8 <HAL_RCC_OscConfig+0x19c>
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x184>
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a70      	ldr	r2, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6d      	ldr	r2, [pc, #436]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x19c>
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a69      	ldr	r2, [pc, #420]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f023 020f 	bic.w	r2, r3, #15
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	495f      	ldr	r1, [pc, #380]	; (800296c <HAL_RCC_OscConfig+0x330>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d059      	beq.n	80028b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff fc37 	bl	8002074 <HAL_GetTick>
 8002806:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff fc32 	bl	8002074 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d902      	bls.n	8002822 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	f000 bf43 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 8002822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002826:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002836:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_RCC_OscConfig+0x218>
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e015      	b.n	8002880 <HAL_RCC_OscConfig+0x244>
 8002854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002858:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002870:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x330>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002884:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002888:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002894:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ab      	beq.n	800280c <HAL_RCC_OscConfig+0x1d0>
 80028b4:	e05d      	b.n	8002972 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7ff fbdd 	bl	8002074 <HAL_GetTick>
 80028ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff fbd8 	bl	8002074 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b64      	cmp	r3, #100	; 0x64
 80028ce:	d902      	bls.n	80028d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f000 bee9 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 80028d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0x2cc>
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e015      	b.n	8002934 <HAL_RCC_OscConfig+0x2f8>
 8002908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800291c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002920:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002924:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_RCC_OscConfig+0x330>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002938:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800293c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002940:	fa92 f2a2 	rbit	r2, r2
 8002944:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002948:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f042 0220 	orr.w	r2, r2, #32
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f002 021f 	and.w	r2, r2, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ab      	bne.n	80028c0 <HAL_RCC_OscConfig+0x284>
 8002968:	e003      	b.n	8002972 <HAL_RCC_OscConfig+0x336>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 817d 	beq.w	8002c82 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002988:	4ba6      	ldr	r3, [pc, #664]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002994:	4ba3      	ldr	r3, [pc, #652]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d172      	bne.n	8002a86 <HAL_RCC_OscConfig+0x44a>
 80029a0:	4ba0      	ldr	r3, [pc, #640]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d16c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x44a>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x3a0>
 80029d6:	4b93      	ldr	r3, [pc, #588]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a00:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a16:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCC_OscConfig+0x410>
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f000 be2e 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	21f8      	movs	r1, #248	; 0xf8
 8002a62:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a6a:	fa91 f1a1 	rbit	r1, r1
 8002a6e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a72:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a76:	fab1 f181 	clz	r1, r1
 8002a7a:	b2c9      	uxtb	r1, r1
 8002a7c:	408b      	lsls	r3, r1
 8002a7e:	4969      	ldr	r1, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a84:	e0fd      	b.n	8002c82 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8088 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x56c>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002aaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7ff fad6 	bl	8002074 <HAL_GetTick>
 8002ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff fad1 	bl	8002074 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	f000 bde2 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002af6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
 8002b0e:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	e013      	b.n	8002b3c <HAL_RCC_OscConfig+0x500>
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0af      	beq.n	8002ace <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	21f8      	movs	r1, #248	; 0xf8
 8002b84:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b8c:	fa91 f1a1 	rbit	r1, r1
 8002b90:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b94:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b98:	fab1 f181 	clz	r1, r1
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	408b      	lsls	r3, r1
 8002ba0:	4920      	ldr	r1, [pc, #128]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e06c      	b.n	8002c82 <HAL_RCC_OscConfig+0x646>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002bba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fa4e 	bl	8002074 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bde:	f7ff fa49 	bl	8002074 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f000 bd5a 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d104      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5ec>
 8002c1e:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <HAL_RCC_OscConfig+0x5e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x614>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c4c:	4bc8      	ldr	r3, [pc, #800]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2202      	movs	r2, #2
 8002c52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c62:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f042 0220 	orr.w	r2, r2, #32
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f002 021f 	and.w	r2, r2, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ad      	bne.n	8002bde <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8110 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d079      	beq.n	8002d9c <HAL_RCC_OscConfig+0x760>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4bab      	ldr	r3, [pc, #684]	; (8002f74 <HAL_RCC_OscConfig+0x938>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f9cf 	bl	8002074 <HAL_GetTick>
 8002cd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f9ca 	bl	8002074 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d902      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	f000 bcdb 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4c:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d58:	2102      	movs	r1, #2
 8002d5a:	6019      	str	r1, [r3, #0]
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f1a3 	rbit	r1, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d72:	6019      	str	r1, [r3, #0]
  return result;
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0a0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x6a0>
 8002d9a:	e08d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x87c>
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x938>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7ff f949 	bl	8002074 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7ff f944 	bl	8002074 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d902      	bls.n	8002dfe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f000 bc55 	b.w	80036a8 <HAL_RCC_OscConfig+0x106c>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e06:	2202      	movs	r2, #2
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e4e:	2202      	movs	r2, #2
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e76:	2102      	movs	r1, #2
 8002e78:	6019      	str	r1, [r3, #0]
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f1a3 	rbit	r1, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e90:	6019      	str	r1, [r3, #0]
  return result;
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d197      	bne.n	8002de8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 81a1 	beq.w	8003210 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	61d3      	str	r3, [r2, #28]
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_RCC_OscConfig+0x93c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11a      	bne.n	8002f50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCC_OscConfig+0x93c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_RCC_OscConfig+0x93c>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7ff f8a5 	bl	8002074 <HAL_GetTick>
 8002f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	e009      	b.n	8002f44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f30:	f7ff f8a0 	bl	8002074 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e3b1      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_RCC_OscConfig+0x93c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ef      	beq.n	8002f30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10d      	bne.n	8002f7c <HAL_RCC_OscConfig+0x940>
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a02      	ldr	r2, [pc, #8]	; (8002f70 <HAL_RCC_OscConfig+0x934>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e03c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9ac>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	10908120 	.word	0x10908120
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x96a>
 8002f8c:	4bc1      	ldr	r3, [pc, #772]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4ac0      	ldr	r2, [pc, #768]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	4bbe      	ldr	r3, [pc, #760]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4abd      	ldr	r2, [pc, #756]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6213      	str	r3, [r2, #32]
 8002fa4:	e020      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9ac>
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x994>
 8002fb6:	4bb7      	ldr	r3, [pc, #732]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4ab6      	ldr	r2, [pc, #728]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4bb4      	ldr	r3, [pc, #720]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4ab3      	ldr	r2, [pc, #716]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9ac>
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4aaf      	ldr	r2, [pc, #700]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	4bad      	ldr	r3, [pc, #692]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4aac      	ldr	r2, [pc, #688]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8081 	beq.w	80030fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f83b 	bl	8002074 <HAL_GetTick>
 8002ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7ff f836 	bl	8002074 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e345      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003024:	2202      	movs	r2, #2
 8003026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003048:	2202      	movs	r2, #2
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003062:	601a      	str	r2, [r3, #0]
  return result;
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800306c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d102      	bne.n	8003088 <HAL_RCC_OscConfig+0xa4c>
 8003082:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	e013      	b.n	80030b0 <HAL_RCC_OscConfig+0xa74>
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030b8:	2102      	movs	r1, #2
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	fa92 f1a2 	rbit	r1, r2
 80030ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030d2:	6011      	str	r1, [r2, #0]
  return result;
 80030d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d084      	beq.n	8003004 <HAL_RCC_OscConfig+0x9c8>
 80030fa:	e07f      	b.n	80031fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe ffba 	bl	8002074 <HAL_GetTick>
 8003100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00b      	b.n	800311e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe ffb5 	bl	8002074 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e2c4      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003126:	2202      	movs	r2, #2
 8003128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003164:	601a      	str	r2, [r3, #0]
  return result;
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800316e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0xb4e>
 8003184:	4b43      	ldr	r3, [pc, #268]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	e013      	b.n	80031b2 <HAL_RCC_OscConfig+0xb76>
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031ba:	2102      	movs	r1, #2
 80031bc:	6011      	str	r1, [r2, #0]
 80031be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	fa92 f1a2 	rbit	r1, r2
 80031cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031d4:	6011      	str	r1, [r2, #0]
  return result;
 80031d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f002 021f 	and.w	r2, r2, #31
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d184      	bne.n	8003106 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8242 	beq.w	80036a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_RCC_OscConfig+0xc58>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	f000 8213 	beq.w	8003656 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b02      	cmp	r3, #2
 800323e:	f040 8162 	bne.w	8003506 <HAL_RCC_OscConfig+0xeca>
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800324a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003266:	601a      	str	r2, [r3, #0]
  return result;
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003270:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800327c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fef4 	bl	8002074 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e00c      	b.n	80032ac <HAL_RCC_OscConfig+0xc70>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe feec 	bl	8002074 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1fd      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032d0:	601a      	str	r2, [r3, #0]
  return result;
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_RCC_OscConfig+0xcba>
 80032f0:	4bb0      	ldr	r3, [pc, #704]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e027      	b.n	8003346 <HAL_RCC_OscConfig+0xd0a>
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800334a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800334e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003352:	6011      	str	r1, [r2, #0]
 8003354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003358:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	fa92 f1a2 	rbit	r1, r2
 8003362:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003366:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800336a:	6011      	str	r1, [r2, #0]
  return result;
 800336c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003370:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	fab2 f282 	clz	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f042 0220 	orr.w	r2, r2, #32
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f002 021f 	and.w	r2, r2, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f202 	lsl.w	r2, r1, r2
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d182      	bne.n	8003298 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	430b      	orrs	r3, r1
 80033b4:	497f      	ldr	r1, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033de:	601a      	str	r2, [r3, #0]
  return result;
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2301      	movs	r3, #1
 80033fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fe38 	bl	8002074 <HAL_GetTick>
 8003404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003408:	e009      	b.n	800341e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fe33 	bl	8002074 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e144      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800344c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0xe2c>
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e027      	b.n	80034b8 <HAL_RCC_OscConfig+0xe7c>
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034bc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	fa92 f1a2 	rbit	r1, r2
 80034d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034dc:	6011      	str	r1, [r2, #0]
  return result;
 80034de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f042 0220 	orr.w	r2, r2, #32
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f002 021f 	and.w	r2, r2, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f202 	lsl.w	r2, r1, r2
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d082      	beq.n	800340a <HAL_RCC_OscConfig+0xdce>
 8003504:	e0cf      	b.n	80036a6 <HAL_RCC_OscConfig+0x106a>
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800350e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800352a:	601a      	str	r2, [r3, #0]
  return result;
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003534:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	461a      	mov	r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fe fd92 	bl	8002074 <HAL_GetTick>
 8003550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003554:	e009      	b.n	800356a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fd8d 	bl	8002074 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e09e      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800358e:	601a      	str	r2, [r3, #0]
  return result;
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003598:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d104      	bne.n	80035b8 <HAL_RCC_OscConfig+0xf7c>
 80035ae:	4b01      	ldr	r3, [pc, #4]	; (80035b4 <HAL_RCC_OscConfig+0xf78>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e029      	b.n	8003608 <HAL_RCC_OscConfig+0xfcc>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x1078>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003610:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	fa92 f1a2 	rbit	r1, r2
 8003624:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003628:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800362c:	6011      	str	r1, [r2, #0]
  return result;
 800362e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003632:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	fab2 f282 	clz	r2, r2
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f042 0220 	orr.w	r2, r2, #32
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d180      	bne.n	8003556 <HAL_RCC_OscConfig+0xf1a>
 8003654:	e027      	b.n	80036a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01e      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_OscConfig+0x1078>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003672:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003676:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	429a      	cmp	r2, r3
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800368a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b09e      	sub	sp, #120	; 0x78
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e162      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b90      	ldr	r3, [pc, #576]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	498b      	ldr	r1, [pc, #556]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e14a      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	497f      	ldr	r1, [pc, #508]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80dc 	beq.w	80038e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d13c      	bne.n	80037ae <HAL_RCC_ClockConfig+0xf6>
 8003734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003738:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_RCC_ClockConfig+0xa6>
 8003758:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e00f      	b.n	800377e <HAL_RCC_ClockConfig+0xc6>
 800375e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	667b      	str	r3, [r7, #100]	; 0x64
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	663b      	str	r3, [r7, #96]	; 0x60
 8003772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377a:	4b67      	ldr	r3, [pc, #412]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003782:	65ba      	str	r2, [r7, #88]	; 0x58
 8003784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003786:	fa92 f2a2 	rbit	r2, r2
 800378a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800378c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800378e:	fab2 f282 	clz	r2, r2
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f002 021f 	and.w	r2, r2, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d17b      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0f3      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d13c      	bne.n	8003830 <HAL_RCC_ClockConfig+0x178>
 80037b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x128>
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e00f      	b.n	8003800 <HAL_RCC_ClockConfig+0x148>
 80037e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
 80037ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003804:	63ba      	str	r2, [r7, #56]	; 0x38
 8003806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800380e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f042 0220 	orr.w	r2, r2, #32
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f002 021f 	and.w	r2, r2, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13a      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b2      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
 8003830:	2302      	movs	r3, #2
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_RCC_ClockConfig+0x1a0>
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e00d      	b.n	8003874 <HAL_RCC_ClockConfig+0x1bc>
 8003858:	2302      	movs	r3, #2
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	2302      	movs	r3, #2
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2202      	movs	r2, #2
 8003876:	61ba      	str	r2, [r7, #24]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	617a      	str	r2, [r7, #20]
  return result;
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f042 0220 	orr.w	r2, r2, #32
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f002 021f 	and.w	r2, r2, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e079      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	491a      	ldr	r1, [pc, #104]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe fbde 	bl	8002074 <HAL_GetTick>
 80038b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fe fbda 	bl	8002074 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e061      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d214      	bcs.n	800391c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 0207 	bic.w	r2, r3, #7
 80038fa:	4906      	ldr	r1, [pc, #24]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCC_ClockConfig+0x25c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e040      	b.n	8003996 <HAL_RCC_ClockConfig+0x2de>
 8003914:	40022000 	.word	0x40022000
 8003918:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_ClockConfig+0x2e8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4912      	ldr	r1, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800395a:	f000 f829 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800395e:	4601      	mov	r1, r0
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003968:	22f0      	movs	r2, #240	; 0xf0
 800396a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	fa92 f2a2 	rbit	r2, r2
 8003972:	60fa      	str	r2, [r7, #12]
  return result;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	fab2 f282 	clz	r2, r2
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	40d3      	lsrs	r3, r2
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	fa21 f303 	lsr.w	r3, r1, r3
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCC_ClockConfig+0x2f4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fb40 	bl	8002014 <HAL_InitTick>
  
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3778      	adds	r7, #120	; 0x78
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08008c60 	.word	0x08008c60
 80039a8:	20000018 	.word	0x20000018
 80039ac:	2000001c 	.word	0x2000001c

080039b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b08b      	sub	sp, #44	; 0x2c
 80039b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x30>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x36>
 80039de:	e03c      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039e2:	623b      	str	r3, [r7, #32]
      break;
 80039e4:	e03c      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	fa92 f2a2 	rbit	r2, r2
 80039f8:	607a      	str	r2, [r7, #4]
  return result;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	40d3      	lsrs	r3, r2
 8003a04:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	220f      	movs	r2, #15
 8003a14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	fa92 f2a2 	rbit	r2, r2
 8003a1c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	40d3      	lsrs	r3, r2
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a38:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e004      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a5c:	623b      	str	r3, [r7, #32]
      break;
 8003a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	372c      	adds	r7, #44	; 0x2c
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	007a1200 	.word	0x007a1200
 8003a78:	08008c78 	.word	0x08008c78
 8003a7c:	08008c88 	.word	0x08008c88
 8003a80:	003d0900 	.word	0x003d0900

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000018 	.word	0x20000018

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003aa2:	f7ff ffef 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ab4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	fa92 f2a2 	rbit	r2, r2
 8003abc:	603a      	str	r2, [r7, #0]
  return result;
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	40d3      	lsrs	r3, r2
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08008c70 	.word	0x08008c70

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ae6:	f7ff ffcd 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aea:	4601      	mov	r1, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003af4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	fa92 f2a2 	rbit	r2, r2
 8003b00:	603a      	str	r2, [r7, #0]
  return result;
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	fab2 f282 	clz	r2, r2
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	40d3      	lsrs	r3, r2
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	08008c70 	.word	0x08008c70

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b092      	sub	sp, #72	; 0x48
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80cd 	beq.w	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b48:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	61d3      	str	r3, [r2, #28]
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b85      	ldr	r3, [pc, #532]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b82      	ldr	r3, [pc, #520]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a81      	ldr	r2, [pc, #516]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fa73 	bl	8002074 <HAL_GetTick>
 8003b8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fe fa6f 	bl	8002074 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0ea      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b78      	ldr	r3, [pc, #480]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb0:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d07d      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d076      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d045      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fe fa20 	bl	8002074 <HAL_GetTick>
 8003c34:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fe fa1c 	bl	8002074 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e095      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	61fb      	str	r3, [r7, #28]
  return result;
 8003c66:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	e007      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2202      	movs	r2, #2
 8003c94:	613a      	str	r2, [r7, #16]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	fab2 f282 	clz	r2, r2
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f002 021f 	and.w	r2, r2, #31
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0bd      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	492e      	ldr	r1, [pc, #184]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4922      	ldr	r1, [pc, #136]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f023 0210 	bic.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	491a      	ldr	r1, [pc, #104]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4913      	ldr	r1, [pc, #76]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	490b      	ldr	r1, [pc, #44]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	4904      	ldr	r1, [pc, #16]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3748      	adds	r7, #72	; 0x48
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	10908100 	.word	0x10908100

08003d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e049      	b.n	8003e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd ff8e 	bl	8001cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 ffc6 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d001      	beq.n	8003e58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e038      	b.n	8003eca <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIM_Base_Start+0x98>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d009      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIM_Base_Start+0x9c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start+0x48>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_TIM_Base_Start+0xa0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d115      	bne.n	8003eb4 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_TIM_Base_Start+0xa4>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d015      	beq.n	8003ec6 <HAL_TIM_Base_Start+0x86>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d011      	beq.n	8003ec6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	e008      	b.n	8003ec6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e000      	b.n	8003ec8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	00010007 	.word	0x00010007

08003ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d001      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e040      	b.n	8003f82 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x58>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x58>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_TIM_Base_Start_IT+0xac>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x58>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d115      	bne.n	8003f6c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_TIM_Base_Start_IT+0xb4>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d015      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x96>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d011      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	e008      	b.n	8003f7e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	00010007 	.word	0x00010007

08003fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e049      	b.n	8004046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f841 	bl	800404e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 febe 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_TIM_PWM_Start+0x24>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e03c      	b.n	8004102 <HAL_TIM_PWM_Start+0x9e>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b04      	cmp	r3, #4
 800408c:	d109      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x3e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e02f      	b.n	8004102 <HAL_TIM_PWM_Start+0x9e>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d109      	bne.n	80040bc <HAL_TIM_PWM_Start+0x58>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e022      	b.n	8004102 <HAL_TIM_PWM_Start+0x9e>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d109      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x72>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e015      	b.n	8004102 <HAL_TIM_PWM_Start+0x9e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d109      	bne.n	80040f0 <HAL_TIM_PWM_Start+0x8c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e008      	b.n	8004102 <HAL_TIM_PWM_Start+0x9e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e088      	b.n	800421c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_TIM_PWM_Start+0xb6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	e023      	b.n	8004162 <HAL_TIM_PWM_Start+0xfe>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0xc6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	e01b      	b.n	8004162 <HAL_TIM_PWM_Start+0xfe>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0xd6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	e013      	b.n	8004162 <HAL_TIM_PWM_Start+0xfe>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xe6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004148:	e00b      	b.n	8004162 <HAL_TIM_PWM_Start+0xfe>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xf6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	e003      	b.n	8004162 <HAL_TIM_PWM_Start+0xfe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	6839      	ldr	r1, [r7, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f001 fac2 	bl	80056f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <HAL_TIM_PWM_Start+0x1c0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_TIM_PWM_Start+0x134>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <HAL_TIM_PWM_Start+0x1c4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_TIM_PWM_Start+0x134>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <HAL_TIM_PWM_Start+0x1c8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIM_PWM_Start+0x134>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <HAL_TIM_PWM_Start+0x1cc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_TIM_PWM_Start+0x138>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_TIM_PWM_Start+0x13a>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <HAL_TIM_PWM_Start+0x1c0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIM_PWM_Start+0x176>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d009      	beq.n	80041da <HAL_TIM_PWM_Start+0x176>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_TIM_PWM_Start+0x1d0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIM_PWM_Start+0x176>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a14      	ldr	r2, [pc, #80]	; (8004228 <HAL_TIM_PWM_Start+0x1c4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d115      	bne.n	8004206 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_TIM_PWM_Start+0x1d4>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b06      	cmp	r3, #6
 80041ea:	d015      	beq.n	8004218 <HAL_TIM_PWM_Start+0x1b4>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d011      	beq.n	8004218 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	e008      	b.n	8004218 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40000400 	.word	0x40000400
 8004238:	00010007 	.word	0x00010007

0800423c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e049      	b.n	80042e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f841 	bl	80042ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fd70 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <HAL_TIM_IC_Start_IT+0x1e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e023      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x66>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d104      	bne.n	800432e <HAL_TIM_IC_Start_IT+0x2e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e01b      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x66>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d104      	bne.n	800433e <HAL_TIM_IC_Start_IT+0x3e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e013      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x66>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d104      	bne.n	800434e <HAL_TIM_IC_Start_IT+0x4e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e00b      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x66>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b10      	cmp	r3, #16
 8004352:	d104      	bne.n	800435e <HAL_TIM_IC_Start_IT+0x5e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e003      	b.n	8004366 <HAL_TIM_IC_Start_IT+0x66>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004364:	b2db      	uxtb	r3, r3
 8004366:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_TIM_IC_Start_IT+0x78>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e013      	b.n	80043a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d104      	bne.n	8004388 <HAL_TIM_IC_Start_IT+0x88>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e00b      	b.n	80043a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b08      	cmp	r3, #8
 800438c:	d104      	bne.n	8004398 <HAL_TIM_IC_Start_IT+0x98>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e003      	b.n	80043a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d102      	bne.n	80043ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043a8:	7b7b      	ldrb	r3, [r7, #13]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0ce      	b.n	8004550 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_IC_Start_IT+0xc2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	e023      	b.n	800440a <HAL_TIM_IC_Start_IT+0x10a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0xd2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	e01b      	b.n	800440a <HAL_TIM_IC_Start_IT+0x10a>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_IC_Start_IT+0xe2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	e013      	b.n	800440a <HAL_TIM_IC_Start_IT+0x10a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_IC_Start_IT+0xf2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f0:	e00b      	b.n	800440a <HAL_TIM_IC_Start_IT+0x10a>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d104      	bne.n	8004402 <HAL_TIM_IC_Start_IT+0x102>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	e003      	b.n	800440a <HAL_TIM_IC_Start_IT+0x10a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_TIM_IC_Start_IT+0x11a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004418:	e013      	b.n	8004442 <HAL_TIM_IC_Start_IT+0x142>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d104      	bne.n	800442a <HAL_TIM_IC_Start_IT+0x12a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004428:	e00b      	b.n	8004442 <HAL_TIM_IC_Start_IT+0x142>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d104      	bne.n	800443a <HAL_TIM_IC_Start_IT+0x13a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004438:	e003      	b.n	8004442 <HAL_TIM_IC_Start_IT+0x142>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d841      	bhi.n	80044cc <HAL_TIM_IC_Start_IT+0x1cc>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_TIM_IC_Start_IT+0x150>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004485 	.word	0x08004485
 8004454:	080044cd 	.word	0x080044cd
 8004458:	080044cd 	.word	0x080044cd
 800445c:	080044cd 	.word	0x080044cd
 8004460:	08004497 	.word	0x08004497
 8004464:	080044cd 	.word	0x080044cd
 8004468:	080044cd 	.word	0x080044cd
 800446c:	080044cd 	.word	0x080044cd
 8004470:	080044a9 	.word	0x080044a9
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044cd 	.word	0x080044cd
 800447c:	080044cd 	.word	0x080044cd
 8004480:	080044bb 	.word	0x080044bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0202 	orr.w	r2, r2, #2
 8004492:	60da      	str	r2, [r3, #12]
      break;
 8004494:	e01d      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0204 	orr.w	r2, r2, #4
 80044a4:	60da      	str	r2, [r3, #12]
      break;
 80044a6:	e014      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	60da      	str	r2, [r3, #12]
      break;
 80044b8:	e00b      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0210 	orr.w	r2, r2, #16
 80044c8:	60da      	str	r2, [r3, #12]
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d13a      	bne.n	800454e <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 f907 	bl	80056f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <HAL_TIM_IC_Start_IT+0x258>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIM_IC_Start_IT+0x20e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d009      	beq.n	800450e <HAL_TIM_IC_Start_IT+0x20e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <HAL_TIM_IC_Start_IT+0x25c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIM_IC_Start_IT+0x20e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <HAL_TIM_IC_Start_IT+0x260>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d115      	bne.n	800453a <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_TIM_IC_Start_IT+0x264>)
 8004516:	4013      	ands	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d015      	beq.n	800454c <HAL_TIM_IC_Start_IT+0x24c>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d011      	beq.n	800454c <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e008      	b.n	800454c <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e000      	b.n	800454e <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40014000 	.word	0x40014000
 8004564:	00010007 	.word	0x00010007

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc ff1a 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fbb6 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fbbd 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fef0 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fb8c 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb93 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc fec6 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fb62 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fb69 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fe9c 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb38 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb3f 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc ff70 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 f904 	bl	8005920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d10e      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 f8f7 	bl	8005934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d107      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 faed 	bl	8004d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d10e      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d107      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0220 	mvn.w	r2, #32
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f8b7 	bl	800590c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e088      	b.n	80048d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11b      	bne.n	800480a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047e2:	f000 fddb 	bl	800539c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 020c 	bic.w	r2, r2, #12
 80047f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6999      	ldr	r1, [r3, #24]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	e060      	b.n	80048cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d11c      	bne.n	800484a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004820:	f000 fe47 	bl	80054b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004832:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	619a      	str	r2, [r3, #24]
 8004848:	e040      	b.n	80048cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004860:	f000 fe94 	bl	800558c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 020c 	bic.w	r2, r2, #12
 8004872:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69d9      	ldr	r1, [r3, #28]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
 8004886:	e021      	b.n	80048cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d11c      	bne.n	80048c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800489e:	f000 feb1 	bl	8005604 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	61da      	str	r2, [r3, #28]
 80048c6:	e001      	b.n	80048cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ff      	b.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b14      	cmp	r3, #20
 800490a:	f200 80f0 	bhi.w	8004aee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004969 	.word	0x08004969
 8004918:	08004aef 	.word	0x08004aef
 800491c:	08004aef 	.word	0x08004aef
 8004920:	08004aef 	.word	0x08004aef
 8004924:	080049a9 	.word	0x080049a9
 8004928:	08004aef 	.word	0x08004aef
 800492c:	08004aef 	.word	0x08004aef
 8004930:	08004aef 	.word	0x08004aef
 8004934:	080049eb 	.word	0x080049eb
 8004938:	08004aef 	.word	0x08004aef
 800493c:	08004aef 	.word	0x08004aef
 8004940:	08004aef 	.word	0x08004aef
 8004944:	08004a2b 	.word	0x08004a2b
 8004948:	08004aef 	.word	0x08004aef
 800494c:	08004aef 	.word	0x08004aef
 8004950:	08004aef 	.word	0x08004aef
 8004954:	08004a6d 	.word	0x08004a6d
 8004958:	08004aef 	.word	0x08004aef
 800495c:	08004aef 	.word	0x08004aef
 8004960:	08004aef 	.word	0x08004aef
 8004964:	08004aad 	.word	0x08004aad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa6e 	bl	8004e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	619a      	str	r2, [r3, #24]
      break;
 80049a6:	e0a5      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fad4 	bl	8004f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
      break;
 80049e8:	e084      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fb33 	bl	800505c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0208 	orr.w	r2, r2, #8
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0204 	bic.w	r2, r2, #4
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	61da      	str	r2, [r3, #28]
      break;
 8004a28:	e064      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fb91 	bl	8005158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	021a      	lsls	r2, r3, #8
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	61da      	str	r2, [r3, #28]
      break;
 8004a6a:	e043      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fbd4 	bl	8005220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aaa:	e023      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fc12 	bl	80052dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aec:	e002      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
      break;
 8004af2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_ConfigClockSource+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0b6      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x18a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d03e      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0xd8>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	f200 8087 	bhi.w	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	f000 8086 	beq.w	8004c7e <HAL_TIM_ConfigClockSource+0x176>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d87f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b78:	2b70      	cmp	r3, #112	; 0x70
 8004b7a:	d01a      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xaa>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d87b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d050      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x11e>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d877      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b88:	2b50      	cmp	r3, #80	; 0x50
 8004b8a:	d03c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xfe>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d873      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d058      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x13e>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d86f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d064      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d86b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d060      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d867      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05c      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d05a      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004bb0:	e062      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	f000 fd77 	bl	80056b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	609a      	str	r2, [r3, #8]
      break;
 8004bde:	e04f      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf0:	f000 fd60 	bl	80056b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c02:	609a      	str	r2, [r3, #8]
      break;
 8004c04:	e03c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 fc1e 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2150      	movs	r1, #80	; 0x50
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fd2d 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004c24:	e02c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fc7a 	bl	800552c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2160      	movs	r1, #96	; 0x60
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fd1d 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004c44:	e01c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fbfe 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fd0d 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 fd04 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d831      	bhi.n	8004d14 <HAL_TIM_ReadCapturedValue+0x78>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004d15 	.word	0x08004d15
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d15 	.word	0x08004d15
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d0b 	.word	0x08004d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	60fb      	str	r3, [r7, #12]

      break;
 8004cf4:	e00f      	b.n	8004d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	60fb      	str	r3, [r7, #12]

      break;
 8004cfe:	e00a      	b.n	8004d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	60fb      	str	r3, [r7, #12]

      break;
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	60fb      	str	r3, [r7, #12]

      break;
 8004d12:	e000      	b.n	8004d16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d14:	bf00      	nop
  }

  return tmpreg;
 8004d16:	68fb      	ldr	r3, [r7, #12]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a32      	ldr	r2, [pc, #200]	; (8004e3c <TIM_Base_SetConfig+0xdc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_Base_SetConfig+0x28>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0x28>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <TIM_Base_SetConfig+0xe0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <TIM_Base_SetConfig+0xdc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <TIM_Base_SetConfig+0x6a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d00f      	beq.n	8004dca <TIM_Base_SetConfig+0x6a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <TIM_Base_SetConfig+0xe0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_Base_SetConfig+0x6a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <TIM_Base_SetConfig+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_Base_SetConfig+0x6a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <TIM_Base_SetConfig+0xe8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_Base_SetConfig+0x6a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <TIM_Base_SetConfig+0xec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0e      	ldr	r2, [pc, #56]	; (8004e3c <TIM_Base_SetConfig+0xdc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0xc0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <TIM_Base_SetConfig+0xe4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0xc0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <TIM_Base_SetConfig+0xe8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0xc0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <TIM_Base_SetConfig+0xec>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800

08004e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0302 	bic.w	r3, r3, #2
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <TIM_OC1_SetConfig+0xfc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x78>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <TIM_OC1_SetConfig+0x100>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x78>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <TIM_OC1_SetConfig+0x104>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x78>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <TIM_OC1_SetConfig+0x108>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <TIM_OC1_SetConfig+0xfc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_OC1_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <TIM_OC1_SetConfig+0x100>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_OC1_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <TIM_OC1_SetConfig+0x104>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC1_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <TIM_OC1_SetConfig+0x108>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0320 	bic.w	r3, r3, #32
 8004faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <TIM_OC2_SetConfig+0xf0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10d      	bne.n	8004fdc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <TIM_OC2_SetConfig+0xf0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_OC2_SetConfig+0xa0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <TIM_OC2_SetConfig+0xf4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_OC2_SetConfig+0xa0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <TIM_OC2_SetConfig+0xf8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC2_SetConfig+0xa0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <TIM_OC2_SetConfig+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d113      	bne.n	8005024 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005002:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <TIM_OC3_SetConfig+0xec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10d      	bne.n	80050da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <TIM_OC3_SetConfig+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <TIM_OC3_SetConfig+0x9e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <TIM_OC3_SetConfig+0xf0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <TIM_OC3_SetConfig+0x9e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_OC3_SetConfig+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_OC3_SetConfig+0x9e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC3_SetConfig+0xf8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	031b      	lsls	r3, r3, #12
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC4_SetConfig+0xb8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_OC4_SetConfig+0x7c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a15      	ldr	r2, [pc, #84]	; (8005214 <TIM_OC4_SetConfig+0xbc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_OC4_SetConfig+0x7c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <TIM_OC4_SetConfig+0xc0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC4_SetConfig+0x7c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_OC4_SetConfig+0xc4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d109      	bne.n	80051e8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	019b      	lsls	r3, r3, #6
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800

08005220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a15      	ldr	r2, [pc, #84]	; (80052cc <TIM_OC5_SetConfig+0xac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_OC5_SetConfig+0x72>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <TIM_OC5_SetConfig+0xb0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_OC5_SetConfig+0x72>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <TIM_OC5_SetConfig+0xb4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC5_SetConfig+0x72>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <TIM_OC5_SetConfig+0xb8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d109      	bne.n	80052a6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800

080052dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	051b      	lsls	r3, r3, #20
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <TIM_OC6_SetConfig+0xb0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00b      	beq.n	8005350 <TIM_OC6_SetConfig+0x74>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <TIM_OC6_SetConfig+0xb4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_OC6_SetConfig+0x74>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a14      	ldr	r2, [pc, #80]	; (8005394 <TIM_OC6_SetConfig+0xb8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC6_SetConfig+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <TIM_OC6_SetConfig+0xbc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d109      	bne.n	8005364 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005356:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	029b      	lsls	r3, r3, #10
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <TIM_TI1_SetConfig+0xac>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <TIM_TI1_SetConfig+0x46>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d007      	beq.n	80053e2 <TIM_TI1_SetConfig+0x46>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	; (800544c <TIM_TI1_SetConfig+0xb0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_TI1_SetConfig+0x46>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <TIM_TI1_SetConfig+0xb4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <TIM_TI1_SetConfig+0x4a>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <TIM_TI1_SetConfig+0x4c>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e003      	b.n	8005406 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800540c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	b2db      	uxtb	r3, r3
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 030a 	bic.w	r3, r3, #10
 8005420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f003 030a 	and.w	r3, r3, #10
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40014000 	.word	0x40014000

08005454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 030a 	bic.w	r3, r3, #10
 8005490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f023 0210 	bic.w	r2, r3, #16
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005504:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 0210 	bic.w	r2, r3, #16
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005556:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	031b      	lsls	r3, r3, #12
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005568:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	621a      	str	r2, [r3, #32]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 0303 	bic.w	r3, r3, #3
 80055b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80055dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005642:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	031b      	lsls	r3, r3, #12
 8005648:	b29b      	uxth	r3, r3
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005656:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	031b      	lsls	r3, r3, #12
 800565c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	f043 0307 	orr.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2201      	movs	r2, #1
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1a      	ldr	r2, [r3, #32]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	43db      	mvns	r3, r3
 8005716:	401a      	ands	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1a      	ldr	r2, [r3, #32]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e054      	b.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c0:	d009      	beq.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a13      	ldr	r2, [pc, #76]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a11      	ldr	r2, [pc, #68]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d10c      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40000400 	.word	0x40000400
 8005818:	40014000 	.word	0x40014000

0800581c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e060      	b.n	80058fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a14      	ldr	r2, [pc, #80]	; (8005908 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d115      	bne.n	80058e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	051b      	lsls	r3, r3, #20
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00

0800590c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e040      	b.n	80059dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fc fad0 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2224      	movs	r2, #36	; 0x24
 8005974:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8b6 	bl	8005af8 <UART_SetConfig>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e022      	b.n	80059dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9e0 	bl	8005d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa67 	bl	8005ea8 <UART_CheckIdleState>
 80059da:	4603      	mov	r3, r0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d178      	bne.n	8005aee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_UART_Transmit+0x24>
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e071      	b.n	8005af0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2221      	movs	r2, #33	; 0x21
 8005a18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1a:	f7fc fb2b 	bl	8002074 <HAL_GetTick>
 8005a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a38:	d108      	bne.n	8005a4c <HAL_UART_Transmit+0x68>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e003      	b.n	8005a54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a54:	e030      	b.n	8005ab8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fac9 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e03c      	b.n	8005af0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	3302      	adds	r3, #2
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e008      	b.n	8005aa6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1c8      	bne.n	8005a56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa92 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e005      	b.n	8005af0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b8a      	ldr	r3, [pc, #552]	; (8005d4c <UART_SetConfig+0x254>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a78      	ldr	r2, [pc, #480]	; (8005d50 <UART_SetConfig+0x258>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d120      	bne.n	8005bb6 <UART_SetConfig+0xbe>
 8005b74:	4b77      	ldr	r3, [pc, #476]	; (8005d54 <UART_SetConfig+0x25c>)
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d817      	bhi.n	8005bb0 <UART_SetConfig+0xb8>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x90>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bab 	.word	0x08005bab
 8005b94:	08005b9f 	.word	0x08005b9f
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e01d      	b.n	8005bda <UART_SetConfig+0xe2>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	77fb      	strb	r3, [r7, #31]
 8005ba2:	e01a      	b.n	8005bda <UART_SetConfig+0xe2>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e017      	b.n	8005bda <UART_SetConfig+0xe2>
 8005baa:	2308      	movs	r3, #8
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e014      	b.n	8005bda <UART_SetConfig+0xe2>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e011      	b.n	8005bda <UART_SetConfig+0xe2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a67      	ldr	r2, [pc, #412]	; (8005d58 <UART_SetConfig+0x260>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <UART_SetConfig+0xce>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e009      	b.n	8005bda <UART_SetConfig+0xe2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a64      	ldr	r2, [pc, #400]	; (8005d5c <UART_SetConfig+0x264>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d102      	bne.n	8005bd6 <UART_SetConfig+0xde>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e001      	b.n	8005bda <UART_SetConfig+0xe2>
 8005bd6:	2310      	movs	r3, #16
 8005bd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be2:	d15a      	bne.n	8005c9a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005be4:	7ffb      	ldrb	r3, [r7, #31]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d827      	bhi.n	8005c3a <UART_SetConfig+0x142>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0xf8>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c3b 	.word	0x08005c3b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd ff42 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005c18:	61b8      	str	r0, [r7, #24]
        break;
 8005c1a:	e013      	b.n	8005c44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fd ff60 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005c20:	61b8      	str	r0, [r7, #24]
        break;
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <UART_SetConfig+0x268>)
 8005c26:	61bb      	str	r3, [r7, #24]
        break;
 8005c28:	e00c      	b.n	8005c44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fd fec1 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005c2e:	61b8      	str	r0, [r7, #24]
        break;
 8005c30:	e008      	b.n	8005c44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e004      	b.n	8005c44 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	77bb      	strb	r3, [r7, #30]
        break;
 8005c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d074      	beq.n	8005d34 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	005a      	lsls	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	d916      	bls.n	8005c94 <UART_SetConfig+0x19c>
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d212      	bcs.n	8005c94 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f023 030f 	bic.w	r3, r3, #15
 8005c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	89fa      	ldrh	r2, [r7, #14]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e04f      	b.n	8005d34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	77bb      	strb	r3, [r7, #30]
 8005c98:	e04c      	b.n	8005d34 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c9a:	7ffb      	ldrb	r3, [r7, #31]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d828      	bhi.n	8005cf2 <UART_SetConfig+0x1fa>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x1b0>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	08005cf3 	.word	0x08005cf3
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005cf3 	.word	0x08005cf3
 8005cc0:	08005cf3 	.word	0x08005cf3
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	08005ceb 	.word	0x08005ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fd fee6 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005cd0:	61b8      	str	r0, [r7, #24]
        break;
 8005cd2:	e013      	b.n	8005cfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd4:	f7fd ff04 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005cd8:	61b8      	str	r0, [r7, #24]
        break;
 8005cda:	e00f      	b.n	8005cfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <UART_SetConfig+0x268>)
 8005cde:	61bb      	str	r3, [r7, #24]
        break;
 8005ce0:	e00c      	b.n	8005cfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce2:	f7fd fe65 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005ce6:	61b8      	str	r0, [r7, #24]
        break;
 8005ce8:	e008      	b.n	8005cfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61bb      	str	r3, [r7, #24]
        break;
 8005cf0:	e004      	b.n	8005cfc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d018      	beq.n	8005d34 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085a      	lsrs	r2, r3, #1
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d909      	bls.n	8005d30 <UART_SetConfig+0x238>
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d205      	bcs.n	8005d30 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e001      	b.n	8005d34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	efff69f3 	.word	0xefff69f3
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40021000 	.word	0x40021000
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	007a1200 	.word	0x007a1200

08005d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e62:	d10a      	bne.n	8005e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b098      	sub	sp, #96	; 0x60
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005eb8:	f7fc f8dc 	bl	8002074 <HAL_GetTick>
 8005ebc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d12e      	bne.n	8005f2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f88c 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d021      	beq.n	8005f2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e6      	bne.n	8005ee6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e062      	b.n	8005ff0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d149      	bne.n	8005fcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f856 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d03c      	beq.n	8005fcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
 8005f72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e6      	bne.n	8005f52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fa4:	61fa      	str	r2, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e5      	bne.n	8005f84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e011      	b.n	8005ff0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3758      	adds	r7, #88	; 0x58
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	e049      	b.n	800609e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d045      	beq.n	800609e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fc f82f 	bl	8002074 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <UART_WaitOnFlagUntilTimeout+0x30>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e048      	b.n	80060be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d031      	beq.n	800609e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b08      	cmp	r3, #8
 8006046:	d110      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2208      	movs	r2, #8
 800604e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f838 	bl	80060c6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2208      	movs	r2, #8
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e029      	b.n	80060be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006078:	d111      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f81e 	bl	80060c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e00f      	b.n	80060be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	bf0c      	ite	eq
 80060ae:	2301      	moveq	r3, #1
 80060b0:	2300      	movne	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d0a6      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b095      	sub	sp, #84	; 0x54
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	643b      	str	r3, [r7, #64]	; 0x40
 80060ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	64bb      	str	r3, [r7, #72]	; 0x48
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	2b01      	cmp	r3, #1
 800613a:	d118      	bne.n	800616e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	60bb      	str	r3, [r7, #8]
   return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0310 	bic.w	r3, r3, #16
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e6      	bne.n	800613c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006182:	bf00      	nop
 8006184:	3754      	adds	r7, #84	; 0x54
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <__cvt>:
 800618e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006192:	ec55 4b10 	vmov	r4, r5, d0
 8006196:	2d00      	cmp	r5, #0
 8006198:	460e      	mov	r6, r1
 800619a:	4619      	mov	r1, r3
 800619c:	462b      	mov	r3, r5
 800619e:	bfbb      	ittet	lt
 80061a0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061a4:	461d      	movlt	r5, r3
 80061a6:	2300      	movge	r3, #0
 80061a8:	232d      	movlt	r3, #45	; 0x2d
 80061aa:	700b      	strb	r3, [r1, #0]
 80061ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061b2:	4691      	mov	r9, r2
 80061b4:	f023 0820 	bic.w	r8, r3, #32
 80061b8:	bfbc      	itt	lt
 80061ba:	4622      	movlt	r2, r4
 80061bc:	4614      	movlt	r4, r2
 80061be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061c2:	d005      	beq.n	80061d0 <__cvt+0x42>
 80061c4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061c8:	d100      	bne.n	80061cc <__cvt+0x3e>
 80061ca:	3601      	adds	r6, #1
 80061cc:	2102      	movs	r1, #2
 80061ce:	e000      	b.n	80061d2 <__cvt+0x44>
 80061d0:	2103      	movs	r1, #3
 80061d2:	ab03      	add	r3, sp, #12
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	ab02      	add	r3, sp, #8
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	ec45 4b10 	vmov	d0, r4, r5
 80061de:	4653      	mov	r3, sl
 80061e0:	4632      	mov	r2, r6
 80061e2:	f000 ff4d 	bl	8007080 <_dtoa_r>
 80061e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061ea:	4607      	mov	r7, r0
 80061ec:	d102      	bne.n	80061f4 <__cvt+0x66>
 80061ee:	f019 0f01 	tst.w	r9, #1
 80061f2:	d022      	beq.n	800623a <__cvt+0xac>
 80061f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f8:	eb07 0906 	add.w	r9, r7, r6
 80061fc:	d110      	bne.n	8006220 <__cvt+0x92>
 80061fe:	783b      	ldrb	r3, [r7, #0]
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d10a      	bne.n	800621a <__cvt+0x8c>
 8006204:	2200      	movs	r2, #0
 8006206:	2300      	movs	r3, #0
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7fa fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006210:	b918      	cbnz	r0, 800621a <__cvt+0x8c>
 8006212:	f1c6 0601 	rsb	r6, r6, #1
 8006216:	f8ca 6000 	str.w	r6, [sl]
 800621a:	f8da 3000 	ldr.w	r3, [sl]
 800621e:	4499      	add	r9, r3
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800622c:	b108      	cbz	r0, 8006232 <__cvt+0xa4>
 800622e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006232:	2230      	movs	r2, #48	; 0x30
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	454b      	cmp	r3, r9
 8006238:	d307      	bcc.n	800624a <__cvt+0xbc>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800623e:	1bdb      	subs	r3, r3, r7
 8006240:	4638      	mov	r0, r7
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	b004      	add	sp, #16
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	9103      	str	r1, [sp, #12]
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e7f0      	b.n	8006234 <__cvt+0xa6>

08006252 <__exponent>:
 8006252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006254:	4603      	mov	r3, r0
 8006256:	2900      	cmp	r1, #0
 8006258:	bfb8      	it	lt
 800625a:	4249      	neglt	r1, r1
 800625c:	f803 2b02 	strb.w	r2, [r3], #2
 8006260:	bfb4      	ite	lt
 8006262:	222d      	movlt	r2, #45	; 0x2d
 8006264:	222b      	movge	r2, #43	; 0x2b
 8006266:	2909      	cmp	r1, #9
 8006268:	7042      	strb	r2, [r0, #1]
 800626a:	dd2a      	ble.n	80062c2 <__exponent+0x70>
 800626c:	f10d 0207 	add.w	r2, sp, #7
 8006270:	4617      	mov	r7, r2
 8006272:	260a      	movs	r6, #10
 8006274:	4694      	mov	ip, r2
 8006276:	fb91 f5f6 	sdiv	r5, r1, r6
 800627a:	fb06 1415 	mls	r4, r6, r5, r1
 800627e:	3430      	adds	r4, #48	; 0x30
 8006280:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006284:	460c      	mov	r4, r1
 8006286:	2c63      	cmp	r4, #99	; 0x63
 8006288:	f102 32ff 	add.w	r2, r2, #4294967295
 800628c:	4629      	mov	r1, r5
 800628e:	dcf1      	bgt.n	8006274 <__exponent+0x22>
 8006290:	3130      	adds	r1, #48	; 0x30
 8006292:	f1ac 0402 	sub.w	r4, ip, #2
 8006296:	f802 1c01 	strb.w	r1, [r2, #-1]
 800629a:	1c41      	adds	r1, r0, #1
 800629c:	4622      	mov	r2, r4
 800629e:	42ba      	cmp	r2, r7
 80062a0:	d30a      	bcc.n	80062b8 <__exponent+0x66>
 80062a2:	f10d 0209 	add.w	r2, sp, #9
 80062a6:	eba2 020c 	sub.w	r2, r2, ip
 80062aa:	42bc      	cmp	r4, r7
 80062ac:	bf88      	it	hi
 80062ae:	2200      	movhi	r2, #0
 80062b0:	4413      	add	r3, r2
 80062b2:	1a18      	subs	r0, r3, r0
 80062b4:	b003      	add	sp, #12
 80062b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062bc:	f801 5f01 	strb.w	r5, [r1, #1]!
 80062c0:	e7ed      	b.n	800629e <__exponent+0x4c>
 80062c2:	2330      	movs	r3, #48	; 0x30
 80062c4:	3130      	adds	r1, #48	; 0x30
 80062c6:	7083      	strb	r3, [r0, #2]
 80062c8:	70c1      	strb	r1, [r0, #3]
 80062ca:	1d03      	adds	r3, r0, #4
 80062cc:	e7f1      	b.n	80062b2 <__exponent+0x60>
	...

080062d0 <_printf_float>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	ed2d 8b02 	vpush	{d8}
 80062d8:	b08d      	sub	sp, #52	; 0x34
 80062da:	460c      	mov	r4, r1
 80062dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062e0:	4616      	mov	r6, r2
 80062e2:	461f      	mov	r7, r3
 80062e4:	4605      	mov	r5, r0
 80062e6:	f000 fdc9 	bl	8006e7c <_localeconv_r>
 80062ea:	f8d0 a000 	ldr.w	sl, [r0]
 80062ee:	4650      	mov	r0, sl
 80062f0:	f7f9 ffbe 	bl	8000270 <strlen>
 80062f4:	2300      	movs	r3, #0
 80062f6:	930a      	str	r3, [sp, #40]	; 0x28
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006300:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006304:	3307      	adds	r3, #7
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	f103 0208 	add.w	r2, r3, #8
 800630e:	f8c8 2000 	str.w	r2, [r8]
 8006312:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006320:	ee08 0a10 	vmov	s16, r0
 8006324:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800632c:	4b9e      	ldr	r3, [pc, #632]	; (80065a8 <_printf_float+0x2d8>)
 800632e:	f04f 32ff 	mov.w	r2, #4294967295
 8006332:	f7fa fbfb 	bl	8000b2c <__aeabi_dcmpun>
 8006336:	bb88      	cbnz	r0, 800639c <_printf_float+0xcc>
 8006338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800633c:	4b9a      	ldr	r3, [pc, #616]	; (80065a8 <_printf_float+0x2d8>)
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	f7fa fbd5 	bl	8000af0 <__aeabi_dcmple>
 8006346:	bb48      	cbnz	r0, 800639c <_printf_float+0xcc>
 8006348:	2200      	movs	r2, #0
 800634a:	2300      	movs	r3, #0
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbc4 	bl	8000adc <__aeabi_dcmplt>
 8006354:	b110      	cbz	r0, 800635c <_printf_float+0x8c>
 8006356:	232d      	movs	r3, #45	; 0x2d
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635c:	4a93      	ldr	r2, [pc, #588]	; (80065ac <_printf_float+0x2dc>)
 800635e:	4b94      	ldr	r3, [pc, #592]	; (80065b0 <_printf_float+0x2e0>)
 8006360:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006364:	bf94      	ite	ls
 8006366:	4690      	movls	r8, r2
 8006368:	4698      	movhi	r8, r3
 800636a:	2303      	movs	r3, #3
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	f023 0304 	bic.w	r3, r3, #4
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	f04f 0900 	mov.w	r9, #0
 800637a:	9700      	str	r7, [sp, #0]
 800637c:	4633      	mov	r3, r6
 800637e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006380:	4621      	mov	r1, r4
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f9da 	bl	800673c <_printf_common>
 8006388:	3001      	adds	r0, #1
 800638a:	f040 8090 	bne.w	80064ae <_printf_float+0x1de>
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	b00d      	add	sp, #52	; 0x34
 8006394:	ecbd 8b02 	vpop	{d8}
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7fa fbc2 	bl	8000b2c <__aeabi_dcmpun>
 80063a8:	b140      	cbz	r0, 80063bc <_printf_float+0xec>
 80063aa:	464b      	mov	r3, r9
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfbc      	itt	lt
 80063b0:	232d      	movlt	r3, #45	; 0x2d
 80063b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063b6:	4a7f      	ldr	r2, [pc, #508]	; (80065b4 <_printf_float+0x2e4>)
 80063b8:	4b7f      	ldr	r3, [pc, #508]	; (80065b8 <_printf_float+0x2e8>)
 80063ba:	e7d1      	b.n	8006360 <_printf_float+0x90>
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063c2:	9206      	str	r2, [sp, #24]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	d13f      	bne.n	8006448 <_printf_float+0x178>
 80063c8:	2306      	movs	r3, #6
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063d4:	2300      	movs	r3, #0
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	ab0a      	add	r3, sp, #40	; 0x28
 80063da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063de:	ab09      	add	r3, sp, #36	; 0x24
 80063e0:	ec49 8b10 	vmov	d0, r8, r9
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6022      	str	r2, [r4, #0]
 80063e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063ec:	4628      	mov	r0, r5
 80063ee:	f7ff fece 	bl	800618e <__cvt>
 80063f2:	9b06      	ldr	r3, [sp, #24]
 80063f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f6:	2b47      	cmp	r3, #71	; 0x47
 80063f8:	4680      	mov	r8, r0
 80063fa:	d108      	bne.n	800640e <_printf_float+0x13e>
 80063fc:	1cc8      	adds	r0, r1, #3
 80063fe:	db02      	blt.n	8006406 <_printf_float+0x136>
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	4299      	cmp	r1, r3
 8006404:	dd41      	ble.n	800648a <_printf_float+0x1ba>
 8006406:	f1ab 0302 	sub.w	r3, fp, #2
 800640a:	fa5f fb83 	uxtb.w	fp, r3
 800640e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006412:	d820      	bhi.n	8006456 <_printf_float+0x186>
 8006414:	3901      	subs	r1, #1
 8006416:	465a      	mov	r2, fp
 8006418:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800641c:	9109      	str	r1, [sp, #36]	; 0x24
 800641e:	f7ff ff18 	bl	8006252 <__exponent>
 8006422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006424:	1813      	adds	r3, r2, r0
 8006426:	2a01      	cmp	r2, #1
 8006428:	4681      	mov	r9, r0
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	dc02      	bgt.n	8006434 <_printf_float+0x164>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	07d2      	lsls	r2, r2, #31
 8006432:	d501      	bpl.n	8006438 <_printf_float+0x168>
 8006434:	3301      	adds	r3, #1
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800643c:	2b00      	cmp	r3, #0
 800643e:	d09c      	beq.n	800637a <_printf_float+0xaa>
 8006440:	232d      	movs	r3, #45	; 0x2d
 8006442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006446:	e798      	b.n	800637a <_printf_float+0xaa>
 8006448:	9a06      	ldr	r2, [sp, #24]
 800644a:	2a47      	cmp	r2, #71	; 0x47
 800644c:	d1be      	bne.n	80063cc <_printf_float+0xfc>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1bc      	bne.n	80063cc <_printf_float+0xfc>
 8006452:	2301      	movs	r3, #1
 8006454:	e7b9      	b.n	80063ca <_printf_float+0xfa>
 8006456:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800645a:	d118      	bne.n	800648e <_printf_float+0x1be>
 800645c:	2900      	cmp	r1, #0
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	dd0b      	ble.n	800647a <_printf_float+0x1aa>
 8006462:	6121      	str	r1, [r4, #16]
 8006464:	b913      	cbnz	r3, 800646c <_printf_float+0x19c>
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	07d0      	lsls	r0, r2, #31
 800646a:	d502      	bpl.n	8006472 <_printf_float+0x1a2>
 800646c:	3301      	adds	r3, #1
 800646e:	440b      	add	r3, r1
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	65a1      	str	r1, [r4, #88]	; 0x58
 8006474:	f04f 0900 	mov.w	r9, #0
 8006478:	e7de      	b.n	8006438 <_printf_float+0x168>
 800647a:	b913      	cbnz	r3, 8006482 <_printf_float+0x1b2>
 800647c:	6822      	ldr	r2, [r4, #0]
 800647e:	07d2      	lsls	r2, r2, #31
 8006480:	d501      	bpl.n	8006486 <_printf_float+0x1b6>
 8006482:	3302      	adds	r3, #2
 8006484:	e7f4      	b.n	8006470 <_printf_float+0x1a0>
 8006486:	2301      	movs	r3, #1
 8006488:	e7f2      	b.n	8006470 <_printf_float+0x1a0>
 800648a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006490:	4299      	cmp	r1, r3
 8006492:	db05      	blt.n	80064a0 <_printf_float+0x1d0>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	6121      	str	r1, [r4, #16]
 8006498:	07d8      	lsls	r0, r3, #31
 800649a:	d5ea      	bpl.n	8006472 <_printf_float+0x1a2>
 800649c:	1c4b      	adds	r3, r1, #1
 800649e:	e7e7      	b.n	8006470 <_printf_float+0x1a0>
 80064a0:	2900      	cmp	r1, #0
 80064a2:	bfd4      	ite	le
 80064a4:	f1c1 0202 	rsble	r2, r1, #2
 80064a8:	2201      	movgt	r2, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	e7e0      	b.n	8006470 <_printf_float+0x1a0>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	055a      	lsls	r2, r3, #21
 80064b2:	d407      	bmi.n	80064c4 <_printf_float+0x1f4>
 80064b4:	6923      	ldr	r3, [r4, #16]
 80064b6:	4642      	mov	r2, r8
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	d12c      	bne.n	800651c <_printf_float+0x24c>
 80064c2:	e764      	b.n	800638e <_printf_float+0xbe>
 80064c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064c8:	f240 80e0 	bls.w	800668c <_printf_float+0x3bc>
 80064cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	f7fa faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d034      	beq.n	8006546 <_printf_float+0x276>
 80064dc:	4a37      	ldr	r2, [pc, #220]	; (80065bc <_printf_float+0x2ec>)
 80064de:	2301      	movs	r3, #1
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f af51 	beq.w	800638e <_printf_float+0xbe>
 80064ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f0:	429a      	cmp	r2, r3
 80064f2:	db02      	blt.n	80064fa <_printf_float+0x22a>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	07d8      	lsls	r0, r3, #31
 80064f8:	d510      	bpl.n	800651c <_printf_float+0x24c>
 80064fa:	ee18 3a10 	vmov	r3, s16
 80064fe:	4652      	mov	r2, sl
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f af41 	beq.w	800638e <_printf_float+0xbe>
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	f104 091a 	add.w	r9, r4, #26
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	4543      	cmp	r3, r8
 800651a:	dc09      	bgt.n	8006530 <_printf_float+0x260>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	079b      	lsls	r3, r3, #30
 8006520:	f100 8107 	bmi.w	8006732 <_printf_float+0x462>
 8006524:	68e0      	ldr	r0, [r4, #12]
 8006526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006528:	4298      	cmp	r0, r3
 800652a:	bfb8      	it	lt
 800652c:	4618      	movlt	r0, r3
 800652e:	e730      	b.n	8006392 <_printf_float+0xc2>
 8006530:	2301      	movs	r3, #1
 8006532:	464a      	mov	r2, r9
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f af27 	beq.w	800638e <_printf_float+0xbe>
 8006540:	f108 0801 	add.w	r8, r8, #1
 8006544:	e7e6      	b.n	8006514 <_printf_float+0x244>
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	dc39      	bgt.n	80065c0 <_printf_float+0x2f0>
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <_printf_float+0x2ec>)
 800654e:	2301      	movs	r3, #1
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	f43f af19 	beq.w	800638e <_printf_float+0xbe>
 800655c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006560:	4313      	orrs	r3, r2
 8006562:	d102      	bne.n	800656a <_printf_float+0x29a>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07d9      	lsls	r1, r3, #31
 8006568:	d5d8      	bpl.n	800651c <_printf_float+0x24c>
 800656a:	ee18 3a10 	vmov	r3, s16
 800656e:	4652      	mov	r2, sl
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f af09 	beq.w	800638e <_printf_float+0xbe>
 800657c:	f04f 0900 	mov.w	r9, #0
 8006580:	f104 0a1a 	add.w	sl, r4, #26
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	425b      	negs	r3, r3
 8006588:	454b      	cmp	r3, r9
 800658a:	dc01      	bgt.n	8006590 <_printf_float+0x2c0>
 800658c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658e:	e792      	b.n	80064b6 <_printf_float+0x1e6>
 8006590:	2301      	movs	r3, #1
 8006592:	4652      	mov	r2, sl
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f aef7 	beq.w	800638e <_printf_float+0xbe>
 80065a0:	f109 0901 	add.w	r9, r9, #1
 80065a4:	e7ee      	b.n	8006584 <_printf_float+0x2b4>
 80065a6:	bf00      	nop
 80065a8:	7fefffff 	.word	0x7fefffff
 80065ac:	08008c98 	.word	0x08008c98
 80065b0:	08008c9c 	.word	0x08008c9c
 80065b4:	08008ca0 	.word	0x08008ca0
 80065b8:	08008ca4 	.word	0x08008ca4
 80065bc:	08008ca8 	.word	0x08008ca8
 80065c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c4:	429a      	cmp	r2, r3
 80065c6:	bfa8      	it	ge
 80065c8:	461a      	movge	r2, r3
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	4691      	mov	r9, r2
 80065ce:	dc37      	bgt.n	8006640 <_printf_float+0x370>
 80065d0:	f04f 0b00 	mov.w	fp, #0
 80065d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065d8:	f104 021a 	add.w	r2, r4, #26
 80065dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065de:	9305      	str	r3, [sp, #20]
 80065e0:	eba3 0309 	sub.w	r3, r3, r9
 80065e4:	455b      	cmp	r3, fp
 80065e6:	dc33      	bgt.n	8006650 <_printf_float+0x380>
 80065e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ec:	429a      	cmp	r2, r3
 80065ee:	db3b      	blt.n	8006668 <_printf_float+0x398>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	07da      	lsls	r2, r3, #31
 80065f4:	d438      	bmi.n	8006668 <_printf_float+0x398>
 80065f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065fa:	eba2 0903 	sub.w	r9, r2, r3
 80065fe:	9b05      	ldr	r3, [sp, #20]
 8006600:	1ad2      	subs	r2, r2, r3
 8006602:	4591      	cmp	r9, r2
 8006604:	bfa8      	it	ge
 8006606:	4691      	movge	r9, r2
 8006608:	f1b9 0f00 	cmp.w	r9, #0
 800660c:	dc35      	bgt.n	800667a <_printf_float+0x3aa>
 800660e:	f04f 0800 	mov.w	r8, #0
 8006612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006616:	f104 0a1a 	add.w	sl, r4, #26
 800661a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	eba3 0309 	sub.w	r3, r3, r9
 8006624:	4543      	cmp	r3, r8
 8006626:	f77f af79 	ble.w	800651c <_printf_float+0x24c>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f aeaa 	beq.w	800638e <_printf_float+0xbe>
 800663a:	f108 0801 	add.w	r8, r8, #1
 800663e:	e7ec      	b.n	800661a <_printf_float+0x34a>
 8006640:	4613      	mov	r3, r2
 8006642:	4631      	mov	r1, r6
 8006644:	4642      	mov	r2, r8
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	d1c0      	bne.n	80065d0 <_printf_float+0x300>
 800664e:	e69e      	b.n	800638e <_printf_float+0xbe>
 8006650:	2301      	movs	r3, #1
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	9205      	str	r2, [sp, #20]
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	f43f ae97 	beq.w	800638e <_printf_float+0xbe>
 8006660:	9a05      	ldr	r2, [sp, #20]
 8006662:	f10b 0b01 	add.w	fp, fp, #1
 8006666:	e7b9      	b.n	80065dc <_printf_float+0x30c>
 8006668:	ee18 3a10 	vmov	r3, s16
 800666c:	4652      	mov	r2, sl
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d1be      	bne.n	80065f6 <_printf_float+0x326>
 8006678:	e689      	b.n	800638e <_printf_float+0xbe>
 800667a:	9a05      	ldr	r2, [sp, #20]
 800667c:	464b      	mov	r3, r9
 800667e:	4442      	add	r2, r8
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	d1c1      	bne.n	800660e <_printf_float+0x33e>
 800668a:	e680      	b.n	800638e <_printf_float+0xbe>
 800668c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800668e:	2a01      	cmp	r2, #1
 8006690:	dc01      	bgt.n	8006696 <_printf_float+0x3c6>
 8006692:	07db      	lsls	r3, r3, #31
 8006694:	d53a      	bpl.n	800670c <_printf_float+0x43c>
 8006696:	2301      	movs	r3, #1
 8006698:	4642      	mov	r2, r8
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae74 	beq.w	800638e <_printf_float+0xbe>
 80066a6:	ee18 3a10 	vmov	r3, s16
 80066aa:	4652      	mov	r2, sl
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f ae6b 	beq.w	800638e <_printf_float+0xbe>
 80066b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80066c4:	f7fa fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c8:	b9d8      	cbnz	r0, 8006702 <_printf_float+0x432>
 80066ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066ce:	f108 0201 	add.w	r2, r8, #1
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	d10e      	bne.n	80066fa <_printf_float+0x42a>
 80066dc:	e657      	b.n	800638e <_printf_float+0xbe>
 80066de:	2301      	movs	r3, #1
 80066e0:	4652      	mov	r2, sl
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	f43f ae50 	beq.w	800638e <_printf_float+0xbe>
 80066ee:	f108 0801 	add.w	r8, r8, #1
 80066f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f4:	3b01      	subs	r3, #1
 80066f6:	4543      	cmp	r3, r8
 80066f8:	dcf1      	bgt.n	80066de <_printf_float+0x40e>
 80066fa:	464b      	mov	r3, r9
 80066fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006700:	e6da      	b.n	80064b8 <_printf_float+0x1e8>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	f104 0a1a 	add.w	sl, r4, #26
 800670a:	e7f2      	b.n	80066f2 <_printf_float+0x422>
 800670c:	2301      	movs	r3, #1
 800670e:	4642      	mov	r2, r8
 8006710:	e7df      	b.n	80066d2 <_printf_float+0x402>
 8006712:	2301      	movs	r3, #1
 8006714:	464a      	mov	r2, r9
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	f43f ae36 	beq.w	800638e <_printf_float+0xbe>
 8006722:	f108 0801 	add.w	r8, r8, #1
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800672a:	1a5b      	subs	r3, r3, r1
 800672c:	4543      	cmp	r3, r8
 800672e:	dcf0      	bgt.n	8006712 <_printf_float+0x442>
 8006730:	e6f8      	b.n	8006524 <_printf_float+0x254>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	f104 0919 	add.w	r9, r4, #25
 800673a:	e7f4      	b.n	8006726 <_printf_float+0x456>

0800673c <_printf_common>:
 800673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006740:	4616      	mov	r6, r2
 8006742:	4699      	mov	r9, r3
 8006744:	688a      	ldr	r2, [r1, #8]
 8006746:	690b      	ldr	r3, [r1, #16]
 8006748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800674c:	4293      	cmp	r3, r2
 800674e:	bfb8      	it	lt
 8006750:	4613      	movlt	r3, r2
 8006752:	6033      	str	r3, [r6, #0]
 8006754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006758:	4607      	mov	r7, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b10a      	cbz	r2, 8006762 <_printf_common+0x26>
 800675e:	3301      	adds	r3, #1
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	0699      	lsls	r1, r3, #26
 8006766:	bf42      	ittt	mi
 8006768:	6833      	ldrmi	r3, [r6, #0]
 800676a:	3302      	addmi	r3, #2
 800676c:	6033      	strmi	r3, [r6, #0]
 800676e:	6825      	ldr	r5, [r4, #0]
 8006770:	f015 0506 	ands.w	r5, r5, #6
 8006774:	d106      	bne.n	8006784 <_printf_common+0x48>
 8006776:	f104 0a19 	add.w	sl, r4, #25
 800677a:	68e3      	ldr	r3, [r4, #12]
 800677c:	6832      	ldr	r2, [r6, #0]
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	42ab      	cmp	r3, r5
 8006782:	dc26      	bgt.n	80067d2 <_printf_common+0x96>
 8006784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006788:	1e13      	subs	r3, r2, #0
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	bf18      	it	ne
 800678e:	2301      	movne	r3, #1
 8006790:	0692      	lsls	r2, r2, #26
 8006792:	d42b      	bmi.n	80067ec <_printf_common+0xb0>
 8006794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006798:	4649      	mov	r1, r9
 800679a:	4638      	mov	r0, r7
 800679c:	47c0      	blx	r8
 800679e:	3001      	adds	r0, #1
 80067a0:	d01e      	beq.n	80067e0 <_printf_common+0xa4>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	f003 0306 	and.w	r3, r3, #6
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	bf02      	ittt	eq
 80067ae:	68e5      	ldreq	r5, [r4, #12]
 80067b0:	6833      	ldreq	r3, [r6, #0]
 80067b2:	1aed      	subeq	r5, r5, r3
 80067b4:	68a3      	ldr	r3, [r4, #8]
 80067b6:	bf0c      	ite	eq
 80067b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067bc:	2500      	movne	r5, #0
 80067be:	4293      	cmp	r3, r2
 80067c0:	bfc4      	itt	gt
 80067c2:	1a9b      	subgt	r3, r3, r2
 80067c4:	18ed      	addgt	r5, r5, r3
 80067c6:	2600      	movs	r6, #0
 80067c8:	341a      	adds	r4, #26
 80067ca:	42b5      	cmp	r5, r6
 80067cc:	d11a      	bne.n	8006804 <_printf_common+0xc8>
 80067ce:	2000      	movs	r0, #0
 80067d0:	e008      	b.n	80067e4 <_printf_common+0xa8>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4649      	mov	r1, r9
 80067d8:	4638      	mov	r0, r7
 80067da:	47c0      	blx	r8
 80067dc:	3001      	adds	r0, #1
 80067de:	d103      	bne.n	80067e8 <_printf_common+0xac>
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e8:	3501      	adds	r5, #1
 80067ea:	e7c6      	b.n	800677a <_printf_common+0x3e>
 80067ec:	18e1      	adds	r1, r4, r3
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	2030      	movs	r0, #48	; 0x30
 80067f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067f6:	4422      	add	r2, r4
 80067f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006800:	3302      	adds	r3, #2
 8006802:	e7c7      	b.n	8006794 <_printf_common+0x58>
 8006804:	2301      	movs	r3, #1
 8006806:	4622      	mov	r2, r4
 8006808:	4649      	mov	r1, r9
 800680a:	4638      	mov	r0, r7
 800680c:	47c0      	blx	r8
 800680e:	3001      	adds	r0, #1
 8006810:	d0e6      	beq.n	80067e0 <_printf_common+0xa4>
 8006812:	3601      	adds	r6, #1
 8006814:	e7d9      	b.n	80067ca <_printf_common+0x8e>
	...

08006818 <_printf_i>:
 8006818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	7e0f      	ldrb	r7, [r1, #24]
 800681e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006820:	2f78      	cmp	r7, #120	; 0x78
 8006822:	4691      	mov	r9, r2
 8006824:	4680      	mov	r8, r0
 8006826:	460c      	mov	r4, r1
 8006828:	469a      	mov	sl, r3
 800682a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800682e:	d807      	bhi.n	8006840 <_printf_i+0x28>
 8006830:	2f62      	cmp	r7, #98	; 0x62
 8006832:	d80a      	bhi.n	800684a <_printf_i+0x32>
 8006834:	2f00      	cmp	r7, #0
 8006836:	f000 80d4 	beq.w	80069e2 <_printf_i+0x1ca>
 800683a:	2f58      	cmp	r7, #88	; 0x58
 800683c:	f000 80c0 	beq.w	80069c0 <_printf_i+0x1a8>
 8006840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006848:	e03a      	b.n	80068c0 <_printf_i+0xa8>
 800684a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800684e:	2b15      	cmp	r3, #21
 8006850:	d8f6      	bhi.n	8006840 <_printf_i+0x28>
 8006852:	a101      	add	r1, pc, #4	; (adr r1, 8006858 <_printf_i+0x40>)
 8006854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006858:	080068b1 	.word	0x080068b1
 800685c:	080068c5 	.word	0x080068c5
 8006860:	08006841 	.word	0x08006841
 8006864:	08006841 	.word	0x08006841
 8006868:	08006841 	.word	0x08006841
 800686c:	08006841 	.word	0x08006841
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006841 	.word	0x08006841
 8006878:	08006841 	.word	0x08006841
 800687c:	08006841 	.word	0x08006841
 8006880:	08006841 	.word	0x08006841
 8006884:	080069c9 	.word	0x080069c9
 8006888:	080068f1 	.word	0x080068f1
 800688c:	08006983 	.word	0x08006983
 8006890:	08006841 	.word	0x08006841
 8006894:	08006841 	.word	0x08006841
 8006898:	080069eb 	.word	0x080069eb
 800689c:	08006841 	.word	0x08006841
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	08006841 	.word	0x08006841
 80068a8:	08006841 	.word	0x08006841
 80068ac:	0800698b 	.word	0x0800698b
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	1d1a      	adds	r2, r3, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	602a      	str	r2, [r5, #0]
 80068b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c0:	2301      	movs	r3, #1
 80068c2:	e09f      	b.n	8006a04 <_printf_i+0x1ec>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	0607      	lsls	r7, r0, #24
 80068ca:	f103 0104 	add.w	r1, r3, #4
 80068ce:	6029      	str	r1, [r5, #0]
 80068d0:	d501      	bpl.n	80068d6 <_printf_i+0xbe>
 80068d2:	681e      	ldr	r6, [r3, #0]
 80068d4:	e003      	b.n	80068de <_printf_i+0xc6>
 80068d6:	0646      	lsls	r6, r0, #25
 80068d8:	d5fb      	bpl.n	80068d2 <_printf_i+0xba>
 80068da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068de:	2e00      	cmp	r6, #0
 80068e0:	da03      	bge.n	80068ea <_printf_i+0xd2>
 80068e2:	232d      	movs	r3, #45	; 0x2d
 80068e4:	4276      	negs	r6, r6
 80068e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ea:	485a      	ldr	r0, [pc, #360]	; (8006a54 <_printf_i+0x23c>)
 80068ec:	230a      	movs	r3, #10
 80068ee:	e012      	b.n	8006916 <_printf_i+0xfe>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	6029      	str	r1, [r5, #0]
 80068f8:	0605      	lsls	r5, r0, #24
 80068fa:	d501      	bpl.n	8006900 <_printf_i+0xe8>
 80068fc:	681e      	ldr	r6, [r3, #0]
 80068fe:	e002      	b.n	8006906 <_printf_i+0xee>
 8006900:	0641      	lsls	r1, r0, #25
 8006902:	d5fb      	bpl.n	80068fc <_printf_i+0xe4>
 8006904:	881e      	ldrh	r6, [r3, #0]
 8006906:	4853      	ldr	r0, [pc, #332]	; (8006a54 <_printf_i+0x23c>)
 8006908:	2f6f      	cmp	r7, #111	; 0x6f
 800690a:	bf0c      	ite	eq
 800690c:	2308      	moveq	r3, #8
 800690e:	230a      	movne	r3, #10
 8006910:	2100      	movs	r1, #0
 8006912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006916:	6865      	ldr	r5, [r4, #4]
 8006918:	60a5      	str	r5, [r4, #8]
 800691a:	2d00      	cmp	r5, #0
 800691c:	bfa2      	ittt	ge
 800691e:	6821      	ldrge	r1, [r4, #0]
 8006920:	f021 0104 	bicge.w	r1, r1, #4
 8006924:	6021      	strge	r1, [r4, #0]
 8006926:	b90e      	cbnz	r6, 800692c <_printf_i+0x114>
 8006928:	2d00      	cmp	r5, #0
 800692a:	d04b      	beq.n	80069c4 <_printf_i+0x1ac>
 800692c:	4615      	mov	r5, r2
 800692e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006932:	fb03 6711 	mls	r7, r3, r1, r6
 8006936:	5dc7      	ldrb	r7, [r0, r7]
 8006938:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800693c:	4637      	mov	r7, r6
 800693e:	42bb      	cmp	r3, r7
 8006940:	460e      	mov	r6, r1
 8006942:	d9f4      	bls.n	800692e <_printf_i+0x116>
 8006944:	2b08      	cmp	r3, #8
 8006946:	d10b      	bne.n	8006960 <_printf_i+0x148>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07de      	lsls	r6, r3, #31
 800694c:	d508      	bpl.n	8006960 <_printf_i+0x148>
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	6861      	ldr	r1, [r4, #4]
 8006952:	4299      	cmp	r1, r3
 8006954:	bfde      	ittt	le
 8006956:	2330      	movle	r3, #48	; 0x30
 8006958:	f805 3c01 	strble.w	r3, [r5, #-1]
 800695c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006960:	1b52      	subs	r2, r2, r5
 8006962:	6122      	str	r2, [r4, #16]
 8006964:	f8cd a000 	str.w	sl, [sp]
 8006968:	464b      	mov	r3, r9
 800696a:	aa03      	add	r2, sp, #12
 800696c:	4621      	mov	r1, r4
 800696e:	4640      	mov	r0, r8
 8006970:	f7ff fee4 	bl	800673c <_printf_common>
 8006974:	3001      	adds	r0, #1
 8006976:	d14a      	bne.n	8006a0e <_printf_i+0x1f6>
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	b004      	add	sp, #16
 800697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f043 0320 	orr.w	r3, r3, #32
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	4833      	ldr	r0, [pc, #204]	; (8006a58 <_printf_i+0x240>)
 800698c:	2778      	movs	r7, #120	; 0x78
 800698e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	6829      	ldr	r1, [r5, #0]
 8006996:	061f      	lsls	r7, r3, #24
 8006998:	f851 6b04 	ldr.w	r6, [r1], #4
 800699c:	d402      	bmi.n	80069a4 <_printf_i+0x18c>
 800699e:	065f      	lsls	r7, r3, #25
 80069a0:	bf48      	it	mi
 80069a2:	b2b6      	uxthmi	r6, r6
 80069a4:	07df      	lsls	r7, r3, #31
 80069a6:	bf48      	it	mi
 80069a8:	f043 0320 	orrmi.w	r3, r3, #32
 80069ac:	6029      	str	r1, [r5, #0]
 80069ae:	bf48      	it	mi
 80069b0:	6023      	strmi	r3, [r4, #0]
 80069b2:	b91e      	cbnz	r6, 80069bc <_printf_i+0x1a4>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	f023 0320 	bic.w	r3, r3, #32
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	2310      	movs	r3, #16
 80069be:	e7a7      	b.n	8006910 <_printf_i+0xf8>
 80069c0:	4824      	ldr	r0, [pc, #144]	; (8006a54 <_printf_i+0x23c>)
 80069c2:	e7e4      	b.n	800698e <_printf_i+0x176>
 80069c4:	4615      	mov	r5, r2
 80069c6:	e7bd      	b.n	8006944 <_printf_i+0x12c>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	6826      	ldr	r6, [r4, #0]
 80069cc:	6961      	ldr	r1, [r4, #20]
 80069ce:	1d18      	adds	r0, r3, #4
 80069d0:	6028      	str	r0, [r5, #0]
 80069d2:	0635      	lsls	r5, r6, #24
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0x1c4>
 80069d8:	6019      	str	r1, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0x1ca>
 80069dc:	0670      	lsls	r0, r6, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0x1c0>
 80069e0:	8019      	strh	r1, [r3, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	4615      	mov	r5, r2
 80069e8:	e7bc      	b.n	8006964 <_printf_i+0x14c>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	602a      	str	r2, [r5, #0]
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7f9 fbea 	bl	80001d0 <memchr>
 80069fc:	b108      	cbz	r0, 8006a02 <_printf_i+0x1ea>
 80069fe:	1b40      	subs	r0, r0, r5
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	2300      	movs	r3, #0
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	e7aa      	b.n	8006964 <_printf_i+0x14c>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0ad      	beq.n	8006978 <_printf_i+0x160>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	d413      	bmi.n	8006a4a <_printf_i+0x232>
 8006a22:	68e0      	ldr	r0, [r4, #12]
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	bfb8      	it	lt
 8006a2a:	4618      	movlt	r0, r3
 8006a2c:	e7a6      	b.n	800697c <_printf_i+0x164>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d09d      	beq.n	8006978 <_printf_i+0x160>
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	9903      	ldr	r1, [sp, #12]
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	dcf2      	bgt.n	8006a2e <_printf_i+0x216>
 8006a48:	e7eb      	b.n	8006a22 <_printf_i+0x20a>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	f104 0619 	add.w	r6, r4, #25
 8006a50:	e7f5      	b.n	8006a3e <_printf_i+0x226>
 8006a52:	bf00      	nop
 8006a54:	08008caa 	.word	0x08008caa
 8006a58:	08008cbb 	.word	0x08008cbb

08006a5c <std>:
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	e9c0 3300 	strd	r3, r3, [r0]
 8006a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a6a:	6083      	str	r3, [r0, #8]
 8006a6c:	8181      	strh	r1, [r0, #12]
 8006a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a70:	81c2      	strh	r2, [r0, #14]
 8006a72:	6183      	str	r3, [r0, #24]
 8006a74:	4619      	mov	r1, r3
 8006a76:	2208      	movs	r2, #8
 8006a78:	305c      	adds	r0, #92	; 0x5c
 8006a7a:	f000 f9f7 	bl	8006e6c <memset>
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <std+0x58>)
 8006a80:	6263      	str	r3, [r4, #36]	; 0x24
 8006a82:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <std+0x5c>)
 8006a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <std+0x60>)
 8006a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <std+0x64>)
 8006a8c:	6323      	str	r3, [r4, #48]	; 0x30
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <std+0x68>)
 8006a90:	6224      	str	r4, [r4, #32]
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d006      	beq.n	8006aa4 <std+0x48>
 8006a96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a9a:	4294      	cmp	r4, r2
 8006a9c:	d002      	beq.n	8006aa4 <std+0x48>
 8006a9e:	33d0      	adds	r3, #208	; 0xd0
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	d105      	bne.n	8006ab0 <std+0x54>
 8006aa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	f000 ba5a 	b.w	8006f64 <__retarget_lock_init_recursive>
 8006ab0:	bd10      	pop	{r4, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08006cbd 	.word	0x08006cbd
 8006ab8:	08006cdf 	.word	0x08006cdf
 8006abc:	08006d17 	.word	0x08006d17
 8006ac0:	08006d3b 	.word	0x08006d3b
 8006ac4:	2000042c 	.word	0x2000042c

08006ac8 <stdio_exit_handler>:
 8006ac8:	4a02      	ldr	r2, [pc, #8]	; (8006ad4 <stdio_exit_handler+0xc>)
 8006aca:	4903      	ldr	r1, [pc, #12]	; (8006ad8 <stdio_exit_handler+0x10>)
 8006acc:	4803      	ldr	r0, [pc, #12]	; (8006adc <stdio_exit_handler+0x14>)
 8006ace:	f000 b869 	b.w	8006ba4 <_fwalk_sglue>
 8006ad2:	bf00      	nop
 8006ad4:	20000024 	.word	0x20000024
 8006ad8:	080088f1 	.word	0x080088f1
 8006adc:	20000030 	.word	0x20000030

08006ae0 <cleanup_stdio>:
 8006ae0:	6841      	ldr	r1, [r0, #4]
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <cleanup_stdio+0x34>)
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	d001      	beq.n	8006af0 <cleanup_stdio+0x10>
 8006aec:	f001 ff00 	bl	80088f0 <_fflush_r>
 8006af0:	68a1      	ldr	r1, [r4, #8]
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <cleanup_stdio+0x38>)
 8006af4:	4299      	cmp	r1, r3
 8006af6:	d002      	beq.n	8006afe <cleanup_stdio+0x1e>
 8006af8:	4620      	mov	r0, r4
 8006afa:	f001 fef9 	bl	80088f0 <_fflush_r>
 8006afe:	68e1      	ldr	r1, [r4, #12]
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <cleanup_stdio+0x3c>)
 8006b02:	4299      	cmp	r1, r3
 8006b04:	d004      	beq.n	8006b10 <cleanup_stdio+0x30>
 8006b06:	4620      	mov	r0, r4
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f001 bef0 	b.w	80088f0 <_fflush_r>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	2000042c 	.word	0x2000042c
 8006b18:	20000494 	.word	0x20000494
 8006b1c:	200004fc 	.word	0x200004fc

08006b20 <global_stdio_init.part.0>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <global_stdio_init.part.0+0x30>)
 8006b24:	4c0b      	ldr	r4, [pc, #44]	; (8006b54 <global_stdio_init.part.0+0x34>)
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <global_stdio_init.part.0+0x38>)
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2104      	movs	r1, #4
 8006b30:	f7ff ff94 	bl	8006a5c <std>
 8006b34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006b38:	2201      	movs	r2, #1
 8006b3a:	2109      	movs	r1, #9
 8006b3c:	f7ff ff8e 	bl	8006a5c <std>
 8006b40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b44:	2202      	movs	r2, #2
 8006b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b4a:	2112      	movs	r1, #18
 8006b4c:	f7ff bf86 	b.w	8006a5c <std>
 8006b50:	20000564 	.word	0x20000564
 8006b54:	2000042c 	.word	0x2000042c
 8006b58:	08006ac9 	.word	0x08006ac9

08006b5c <__sfp_lock_acquire>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_acquire+0x8>)
 8006b5e:	f000 ba02 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	2000056d 	.word	0x2000056d

08006b68 <__sfp_lock_release>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sfp_lock_release+0x8>)
 8006b6a:	f000 b9fd 	b.w	8006f68 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	2000056d 	.word	0x2000056d

08006b74 <__sinit>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	f7ff fff0 	bl	8006b5c <__sfp_lock_acquire>
 8006b7c:	6a23      	ldr	r3, [r4, #32]
 8006b7e:	b11b      	cbz	r3, 8006b88 <__sinit+0x14>
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f7ff bff0 	b.w	8006b68 <__sfp_lock_release>
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <__sinit+0x28>)
 8006b8a:	6223      	str	r3, [r4, #32]
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <__sinit+0x2c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f5      	bne.n	8006b80 <__sinit+0xc>
 8006b94:	f7ff ffc4 	bl	8006b20 <global_stdio_init.part.0>
 8006b98:	e7f2      	b.n	8006b80 <__sinit+0xc>
 8006b9a:	bf00      	nop
 8006b9c:	08006ae1 	.word	0x08006ae1
 8006ba0:	20000564 	.word	0x20000564

08006ba4 <_fwalk_sglue>:
 8006ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	4607      	mov	r7, r0
 8006baa:	4688      	mov	r8, r1
 8006bac:	4614      	mov	r4, r2
 8006bae:	2600      	movs	r6, #0
 8006bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006bb8:	d505      	bpl.n	8006bc6 <_fwalk_sglue+0x22>
 8006bba:	6824      	ldr	r4, [r4, #0]
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	d1f7      	bne.n	8006bb0 <_fwalk_sglue+0xc>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d907      	bls.n	8006bdc <_fwalk_sglue+0x38>
 8006bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	d003      	beq.n	8006bdc <_fwalk_sglue+0x38>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	4306      	orrs	r6, r0
 8006bdc:	3568      	adds	r5, #104	; 0x68
 8006bde:	e7e9      	b.n	8006bb4 <_fwalk_sglue+0x10>

08006be0 <iprintf>:
 8006be0:	b40f      	push	{r0, r1, r2, r3}
 8006be2:	b507      	push	{r0, r1, r2, lr}
 8006be4:	4906      	ldr	r1, [pc, #24]	; (8006c00 <iprintf+0x20>)
 8006be6:	ab04      	add	r3, sp, #16
 8006be8:	6808      	ldr	r0, [r1, #0]
 8006bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bee:	6881      	ldr	r1, [r0, #8]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	f001 fcdd 	bl	80085b0 <_vfiprintf_r>
 8006bf6:	b003      	add	sp, #12
 8006bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bfc:	b004      	add	sp, #16
 8006bfe:	4770      	bx	lr
 8006c00:	2000007c 	.word	0x2000007c

08006c04 <_puts_r>:
 8006c04:	6a03      	ldr	r3, [r0, #32]
 8006c06:	b570      	push	{r4, r5, r6, lr}
 8006c08:	6884      	ldr	r4, [r0, #8]
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	460e      	mov	r6, r1
 8006c0e:	b90b      	cbnz	r3, 8006c14 <_puts_r+0x10>
 8006c10:	f7ff ffb0 	bl	8006b74 <__sinit>
 8006c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c16:	07db      	lsls	r3, r3, #31
 8006c18:	d405      	bmi.n	8006c26 <_puts_r+0x22>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	0598      	lsls	r0, r3, #22
 8006c1e:	d402      	bmi.n	8006c26 <_puts_r+0x22>
 8006c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c22:	f000 f9a0 	bl	8006f66 <__retarget_lock_acquire_recursive>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	0719      	lsls	r1, r3, #28
 8006c2a:	d513      	bpl.n	8006c54 <_puts_r+0x50>
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	b18b      	cbz	r3, 8006c54 <_puts_r+0x50>
 8006c30:	3e01      	subs	r6, #1
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	60a3      	str	r3, [r4, #8]
 8006c3c:	b9e9      	cbnz	r1, 8006c7a <_puts_r+0x76>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da2e      	bge.n	8006ca0 <_puts_r+0x9c>
 8006c42:	4622      	mov	r2, r4
 8006c44:	210a      	movs	r1, #10
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 f87b 	bl	8006d42 <__swbuf_r>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d007      	beq.n	8006c60 <_puts_r+0x5c>
 8006c50:	250a      	movs	r5, #10
 8006c52:	e007      	b.n	8006c64 <_puts_r+0x60>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f8b0 	bl	8006dbc <__swsetup_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0e7      	beq.n	8006c30 <_puts_r+0x2c>
 8006c60:	f04f 35ff 	mov.w	r5, #4294967295
 8006c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c66:	07da      	lsls	r2, r3, #31
 8006c68:	d405      	bmi.n	8006c76 <_puts_r+0x72>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	059b      	lsls	r3, r3, #22
 8006c6e:	d402      	bmi.n	8006c76 <_puts_r+0x72>
 8006c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c72:	f000 f979 	bl	8006f68 <__retarget_lock_release_recursive>
 8006c76:	4628      	mov	r0, r5
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da04      	bge.n	8006c88 <_puts_r+0x84>
 8006c7e:	69a2      	ldr	r2, [r4, #24]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	dc06      	bgt.n	8006c92 <_puts_r+0x8e>
 8006c84:	290a      	cmp	r1, #10
 8006c86:	d004      	beq.n	8006c92 <_puts_r+0x8e>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	7019      	strb	r1, [r3, #0]
 8006c90:	e7cf      	b.n	8006c32 <_puts_r+0x2e>
 8006c92:	4622      	mov	r2, r4
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f854 	bl	8006d42 <__swbuf_r>
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d1c9      	bne.n	8006c32 <_puts_r+0x2e>
 8006c9e:	e7df      	b.n	8006c60 <_puts_r+0x5c>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	250a      	movs	r5, #10
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	701d      	strb	r5, [r3, #0]
 8006caa:	e7db      	b.n	8006c64 <_puts_r+0x60>

08006cac <puts>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <puts+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f7ff bfa7 	b.w	8006c04 <_puts_r>
 8006cb6:	bf00      	nop
 8006cb8:	2000007c 	.word	0x2000007c

08006cbc <__sread>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	f000 f900 	bl	8006ec8 <_read_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	bfab      	itete	ge
 8006ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cce:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd0:	181b      	addge	r3, r3, r0
 8006cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cd6:	bfac      	ite	ge
 8006cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cda:	81a3      	strhlt	r3, [r4, #12]
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <__swrite>:
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	05db      	lsls	r3, r3, #23
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4616      	mov	r6, r2
 8006cee:	d505      	bpl.n	8006cfc <__swrite+0x1e>
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f000 f8d4 	bl	8006ea4 <_lseek_r>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	f000 b8eb 	b.w	8006eec <_write_r>

08006d16 <__sseek>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 f8c1 	bl	8006ea4 <_lseek_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	bf15      	itete	ne
 8006d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d32:	81a3      	strheq	r3, [r4, #12]
 8006d34:	bf18      	it	ne
 8006d36:	81a3      	strhne	r3, [r4, #12]
 8006d38:	bd10      	pop	{r4, pc}

08006d3a <__sclose>:
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 b8a1 	b.w	8006e84 <_close_r>

08006d42 <__swbuf_r>:
 8006d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d44:	460e      	mov	r6, r1
 8006d46:	4614      	mov	r4, r2
 8006d48:	4605      	mov	r5, r0
 8006d4a:	b118      	cbz	r0, 8006d54 <__swbuf_r+0x12>
 8006d4c:	6a03      	ldr	r3, [r0, #32]
 8006d4e:	b90b      	cbnz	r3, 8006d54 <__swbuf_r+0x12>
 8006d50:	f7ff ff10 	bl	8006b74 <__sinit>
 8006d54:	69a3      	ldr	r3, [r4, #24]
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	071a      	lsls	r2, r3, #28
 8006d5c:	d525      	bpl.n	8006daa <__swbuf_r+0x68>
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b31b      	cbz	r3, 8006daa <__swbuf_r+0x68>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	1a98      	subs	r0, r3, r2
 8006d68:	6963      	ldr	r3, [r4, #20]
 8006d6a:	b2f6      	uxtb	r6, r6
 8006d6c:	4283      	cmp	r3, r0
 8006d6e:	4637      	mov	r7, r6
 8006d70:	dc04      	bgt.n	8006d7c <__swbuf_r+0x3a>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f001 fdbb 	bl	80088f0 <_fflush_r>
 8006d7a:	b9e0      	cbnz	r0, 8006db6 <__swbuf_r+0x74>
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	701e      	strb	r6, [r3, #0]
 8006d8a:	6962      	ldr	r2, [r4, #20]
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d004      	beq.n	8006d9c <__swbuf_r+0x5a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	07db      	lsls	r3, r3, #31
 8006d96:	d506      	bpl.n	8006da6 <__swbuf_r+0x64>
 8006d98:	2e0a      	cmp	r6, #10
 8006d9a:	d104      	bne.n	8006da6 <__swbuf_r+0x64>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f001 fda6 	bl	80088f0 <_fflush_r>
 8006da4:	b938      	cbnz	r0, 8006db6 <__swbuf_r+0x74>
 8006da6:	4638      	mov	r0, r7
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	4621      	mov	r1, r4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 f805 	bl	8006dbc <__swsetup_r>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0d5      	beq.n	8006d62 <__swbuf_r+0x20>
 8006db6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dba:	e7f4      	b.n	8006da6 <__swbuf_r+0x64>

08006dbc <__swsetup_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4b2a      	ldr	r3, [pc, #168]	; (8006e68 <__swsetup_r+0xac>)
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	b118      	cbz	r0, 8006dd0 <__swsetup_r+0x14>
 8006dc8:	6a03      	ldr	r3, [r0, #32]
 8006dca:	b90b      	cbnz	r3, 8006dd0 <__swsetup_r+0x14>
 8006dcc:	f7ff fed2 	bl	8006b74 <__sinit>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd6:	0718      	lsls	r0, r3, #28
 8006dd8:	d422      	bmi.n	8006e20 <__swsetup_r+0x64>
 8006dda:	06d9      	lsls	r1, r3, #27
 8006ddc:	d407      	bmi.n	8006dee <__swsetup_r+0x32>
 8006dde:	2309      	movs	r3, #9
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	e034      	b.n	8006e58 <__swsetup_r+0x9c>
 8006dee:	0758      	lsls	r0, r3, #29
 8006df0:	d512      	bpl.n	8006e18 <__swsetup_r+0x5c>
 8006df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df4:	b141      	cbz	r1, 8006e08 <__swsetup_r+0x4c>
 8006df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	d002      	beq.n	8006e04 <__swsetup_r+0x48>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 ff30 	bl	8007c64 <_free_r>
 8006e04:	2300      	movs	r3, #0
 8006e06:	6363      	str	r3, [r4, #52]	; 0x34
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	2300      	movs	r3, #0
 8006e12:	6063      	str	r3, [r4, #4]
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f043 0308 	orr.w	r3, r3, #8
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	b94b      	cbnz	r3, 8006e38 <__swsetup_r+0x7c>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2e:	d003      	beq.n	8006e38 <__swsetup_r+0x7c>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f001 fdaa 	bl	800898c <__smakebuf_r>
 8006e38:	89a0      	ldrh	r0, [r4, #12]
 8006e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e3e:	f010 0301 	ands.w	r3, r0, #1
 8006e42:	d00a      	beq.n	8006e5a <__swsetup_r+0x9e>
 8006e44:	2300      	movs	r3, #0
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	6963      	ldr	r3, [r4, #20]
 8006e4a:	425b      	negs	r3, r3
 8006e4c:	61a3      	str	r3, [r4, #24]
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	b943      	cbnz	r3, 8006e64 <__swsetup_r+0xa8>
 8006e52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e56:	d1c4      	bne.n	8006de2 <__swsetup_r+0x26>
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	0781      	lsls	r1, r0, #30
 8006e5c:	bf58      	it	pl
 8006e5e:	6963      	ldrpl	r3, [r4, #20]
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	e7f4      	b.n	8006e4e <__swsetup_r+0x92>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e7f7      	b.n	8006e58 <__swsetup_r+0x9c>
 8006e68:	2000007c 	.word	0x2000007c

08006e6c <memset>:
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	; (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000170 	.word	0x20000170

08006e84 <_close_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d06      	ldr	r5, [pc, #24]	; (8006ea0 <_close_r+0x1c>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fa fcb5 	bl	80017fe <_close>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_close_r+0x1a>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_close_r+0x1a>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	20000568 	.word	0x20000568

08006ea4 <_lseek_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d07      	ldr	r5, [pc, #28]	; (8006ec4 <_lseek_r+0x20>)
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4608      	mov	r0, r1
 8006eac:	4611      	mov	r1, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fa fcca 	bl	800184c <_lseek>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_lseek_r+0x1e>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_lseek_r+0x1e>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20000568 	.word	0x20000568

08006ec8 <_read_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d07      	ldr	r5, [pc, #28]	; (8006ee8 <_read_r+0x20>)
 8006ecc:	4604      	mov	r4, r0
 8006ece:	4608      	mov	r0, r1
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7fa fc58 	bl	800178c <_read>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_read_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_read_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	20000568 	.word	0x20000568

08006eec <_write_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	; (8006f0c <_write_r+0x20>)
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	602a      	str	r2, [r5, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f7fa fc63 	bl	80017c6 <_write>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_write_r+0x1e>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_write_r+0x1e>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20000568 	.word	0x20000568

08006f10 <__errno>:
 8006f10:	4b01      	ldr	r3, [pc, #4]	; (8006f18 <__errno+0x8>)
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	2000007c 	.word	0x2000007c

08006f1c <__libc_init_array>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4d0d      	ldr	r5, [pc, #52]	; (8006f54 <__libc_init_array+0x38>)
 8006f20:	4c0d      	ldr	r4, [pc, #52]	; (8006f58 <__libc_init_array+0x3c>)
 8006f22:	1b64      	subs	r4, r4, r5
 8006f24:	10a4      	asrs	r4, r4, #2
 8006f26:	2600      	movs	r6, #0
 8006f28:	42a6      	cmp	r6, r4
 8006f2a:	d109      	bne.n	8006f40 <__libc_init_array+0x24>
 8006f2c:	4d0b      	ldr	r5, [pc, #44]	; (8006f5c <__libc_init_array+0x40>)
 8006f2e:	4c0c      	ldr	r4, [pc, #48]	; (8006f60 <__libc_init_array+0x44>)
 8006f30:	f001 fe5a 	bl	8008be8 <_init>
 8006f34:	1b64      	subs	r4, r4, r5
 8006f36:	10a4      	asrs	r4, r4, #2
 8006f38:	2600      	movs	r6, #0
 8006f3a:	42a6      	cmp	r6, r4
 8006f3c:	d105      	bne.n	8006f4a <__libc_init_array+0x2e>
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f44:	4798      	blx	r3
 8006f46:	3601      	adds	r6, #1
 8006f48:	e7ee      	b.n	8006f28 <__libc_init_array+0xc>
 8006f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4e:	4798      	blx	r3
 8006f50:	3601      	adds	r6, #1
 8006f52:	e7f2      	b.n	8006f3a <__libc_init_array+0x1e>
 8006f54:	0800900c 	.word	0x0800900c
 8006f58:	0800900c 	.word	0x0800900c
 8006f5c:	0800900c 	.word	0x0800900c
 8006f60:	08009010 	.word	0x08009010

08006f64 <__retarget_lock_init_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <__retarget_lock_acquire_recursive>:
 8006f66:	4770      	bx	lr

08006f68 <__retarget_lock_release_recursive>:
 8006f68:	4770      	bx	lr

08006f6a <quorem>:
 8006f6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6e:	6903      	ldr	r3, [r0, #16]
 8006f70:	690c      	ldr	r4, [r1, #16]
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	4607      	mov	r7, r0
 8006f76:	db7e      	blt.n	8007076 <quorem+0x10c>
 8006f78:	3c01      	subs	r4, #1
 8006f7a:	f101 0814 	add.w	r8, r1, #20
 8006f7e:	f100 0514 	add.w	r5, r0, #20
 8006f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f90:	3301      	adds	r3, #1
 8006f92:	429a      	cmp	r2, r3
 8006f94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa0:	d331      	bcc.n	8007006 <quorem+0x9c>
 8006fa2:	f04f 0e00 	mov.w	lr, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	46ac      	mov	ip, r5
 8006faa:	46f2      	mov	sl, lr
 8006fac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fb0:	b293      	uxth	r3, r2
 8006fb2:	fb06 e303 	mla	r3, r6, r3, lr
 8006fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fba:	0c1a      	lsrs	r2, r3, #16
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ebaa 0303 	sub.w	r3, sl, r3
 8006fc2:	f8dc a000 	ldr.w	sl, [ip]
 8006fc6:	fa13 f38a 	uxtah	r3, r3, sl
 8006fca:	fb06 220e 	mla	r2, r6, lr, r2
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fe0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fe4:	4581      	cmp	r9, r0
 8006fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fea:	f84c 3b04 	str.w	r3, [ip], #4
 8006fee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ff2:	d2db      	bcs.n	8006fac <quorem+0x42>
 8006ff4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ff8:	b92b      	cbnz	r3, 8007006 <quorem+0x9c>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	429d      	cmp	r5, r3
 8007000:	461a      	mov	r2, r3
 8007002:	d32c      	bcc.n	800705e <quorem+0xf4>
 8007004:	613c      	str	r4, [r7, #16]
 8007006:	4638      	mov	r0, r7
 8007008:	f001 f9a8 	bl	800835c <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	db22      	blt.n	8007056 <quorem+0xec>
 8007010:	3601      	adds	r6, #1
 8007012:	4629      	mov	r1, r5
 8007014:	2000      	movs	r0, #0
 8007016:	f858 2b04 	ldr.w	r2, [r8], #4
 800701a:	f8d1 c000 	ldr.w	ip, [r1]
 800701e:	b293      	uxth	r3, r2
 8007020:	1ac3      	subs	r3, r0, r3
 8007022:	0c12      	lsrs	r2, r2, #16
 8007024:	fa13 f38c 	uxtah	r3, r3, ip
 8007028:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800702c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007030:	b29b      	uxth	r3, r3
 8007032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007036:	45c1      	cmp	r9, r8
 8007038:	f841 3b04 	str.w	r3, [r1], #4
 800703c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007040:	d2e9      	bcs.n	8007016 <quorem+0xac>
 8007042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800704a:	b922      	cbnz	r2, 8007056 <quorem+0xec>
 800704c:	3b04      	subs	r3, #4
 800704e:	429d      	cmp	r5, r3
 8007050:	461a      	mov	r2, r3
 8007052:	d30a      	bcc.n	800706a <quorem+0x100>
 8007054:	613c      	str	r4, [r7, #16]
 8007056:	4630      	mov	r0, r6
 8007058:	b003      	add	sp, #12
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	3b04      	subs	r3, #4
 8007062:	2a00      	cmp	r2, #0
 8007064:	d1ce      	bne.n	8007004 <quorem+0x9a>
 8007066:	3c01      	subs	r4, #1
 8007068:	e7c9      	b.n	8006ffe <quorem+0x94>
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	3b04      	subs	r3, #4
 800706e:	2a00      	cmp	r2, #0
 8007070:	d1f0      	bne.n	8007054 <quorem+0xea>
 8007072:	3c01      	subs	r4, #1
 8007074:	e7eb      	b.n	800704e <quorem+0xe4>
 8007076:	2000      	movs	r0, #0
 8007078:	e7ee      	b.n	8007058 <quorem+0xee>
 800707a:	0000      	movs	r0, r0
 800707c:	0000      	movs	r0, r0
	...

08007080 <_dtoa_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b04 	vpush	{d8-d9}
 8007088:	69c5      	ldr	r5, [r0, #28]
 800708a:	b093      	sub	sp, #76	; 0x4c
 800708c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007090:	ec57 6b10 	vmov	r6, r7, d0
 8007094:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007098:	9107      	str	r1, [sp, #28]
 800709a:	4604      	mov	r4, r0
 800709c:	920a      	str	r2, [sp, #40]	; 0x28
 800709e:	930d      	str	r3, [sp, #52]	; 0x34
 80070a0:	b975      	cbnz	r5, 80070c0 <_dtoa_r+0x40>
 80070a2:	2010      	movs	r0, #16
 80070a4:	f000 fe2a 	bl	8007cfc <malloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	61e0      	str	r0, [r4, #28]
 80070ac:	b920      	cbnz	r0, 80070b8 <_dtoa_r+0x38>
 80070ae:	4bae      	ldr	r3, [pc, #696]	; (8007368 <_dtoa_r+0x2e8>)
 80070b0:	21ef      	movs	r1, #239	; 0xef
 80070b2:	48ae      	ldr	r0, [pc, #696]	; (800736c <_dtoa_r+0x2ec>)
 80070b4:	f001 fce6 	bl	8008a84 <__assert_func>
 80070b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070bc:	6005      	str	r5, [r0, #0]
 80070be:	60c5      	str	r5, [r0, #12]
 80070c0:	69e3      	ldr	r3, [r4, #28]
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	b151      	cbz	r1, 80070dc <_dtoa_r+0x5c>
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	604a      	str	r2, [r1, #4]
 80070ca:	2301      	movs	r3, #1
 80070cc:	4093      	lsls	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 ff07 	bl	8007ee4 <_Bfree>
 80070d6:	69e3      	ldr	r3, [r4, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	1e3b      	subs	r3, r7, #0
 80070de:	bfbb      	ittet	lt
 80070e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	9303      	strlt	r3, [sp, #12]
 80070e6:	2300      	movge	r3, #0
 80070e8:	2201      	movlt	r2, #1
 80070ea:	bfac      	ite	ge
 80070ec:	f8c8 3000 	strge.w	r3, [r8]
 80070f0:	f8c8 2000 	strlt.w	r2, [r8]
 80070f4:	4b9e      	ldr	r3, [pc, #632]	; (8007370 <_dtoa_r+0x2f0>)
 80070f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070fa:	ea33 0308 	bics.w	r3, r3, r8
 80070fe:	d11b      	bne.n	8007138 <_dtoa_r+0xb8>
 8007100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007102:	f242 730f 	movw	r3, #9999	; 0x270f
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800710c:	4333      	orrs	r3, r6
 800710e:	f000 8593 	beq.w	8007c38 <_dtoa_r+0xbb8>
 8007112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007114:	b963      	cbnz	r3, 8007130 <_dtoa_r+0xb0>
 8007116:	4b97      	ldr	r3, [pc, #604]	; (8007374 <_dtoa_r+0x2f4>)
 8007118:	e027      	b.n	800716a <_dtoa_r+0xea>
 800711a:	4b97      	ldr	r3, [pc, #604]	; (8007378 <_dtoa_r+0x2f8>)
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	9800      	ldr	r0, [sp, #0]
 8007126:	b013      	add	sp, #76	; 0x4c
 8007128:	ecbd 8b04 	vpop	{d8-d9}
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	4b90      	ldr	r3, [pc, #576]	; (8007374 <_dtoa_r+0x2f4>)
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	3303      	adds	r3, #3
 8007136:	e7f3      	b.n	8007120 <_dtoa_r+0xa0>
 8007138:	ed9d 7b02 	vldr	d7, [sp, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	ec51 0b17 	vmov	r0, r1, d7
 8007142:	eeb0 8a47 	vmov.f32	s16, s14
 8007146:	eef0 8a67 	vmov.f32	s17, s15
 800714a:	2300      	movs	r3, #0
 800714c:	f7f9 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007150:	4681      	mov	r9, r0
 8007152:	b160      	cbz	r0, 800716e <_dtoa_r+0xee>
 8007154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007156:	2301      	movs	r3, #1
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8568 	beq.w	8007c32 <_dtoa_r+0xbb2>
 8007162:	4b86      	ldr	r3, [pc, #536]	; (800737c <_dtoa_r+0x2fc>)
 8007164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	3b01      	subs	r3, #1
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	e7da      	b.n	8007124 <_dtoa_r+0xa4>
 800716e:	aa10      	add	r2, sp, #64	; 0x40
 8007170:	a911      	add	r1, sp, #68	; 0x44
 8007172:	4620      	mov	r0, r4
 8007174:	eeb0 0a48 	vmov.f32	s0, s16
 8007178:	eef0 0a68 	vmov.f32	s1, s17
 800717c:	f001 f994 	bl	80084a8 <__d2b>
 8007180:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007184:	4682      	mov	sl, r0
 8007186:	2d00      	cmp	r5, #0
 8007188:	d07f      	beq.n	800728a <_dtoa_r+0x20a>
 800718a:	ee18 3a90 	vmov	r3, s17
 800718e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007192:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007196:	ec51 0b18 	vmov	r0, r1, d8
 800719a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800719e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80071a6:	4619      	mov	r1, r3
 80071a8:	2200      	movs	r2, #0
 80071aa:	4b75      	ldr	r3, [pc, #468]	; (8007380 <_dtoa_r+0x300>)
 80071ac:	f7f9 f86c 	bl	8000288 <__aeabi_dsub>
 80071b0:	a367      	add	r3, pc, #412	; (adr r3, 8007350 <_dtoa_r+0x2d0>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	a367      	add	r3, pc, #412	; (adr r3, 8007358 <_dtoa_r+0x2d8>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f864 	bl	800028c <__adddf3>
 80071c4:	4606      	mov	r6, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	460f      	mov	r7, r1
 80071ca:	f7f9 f9ab 	bl	8000524 <__aeabi_i2d>
 80071ce:	a364      	add	r3, pc, #400	; (adr r3, 8007360 <_dtoa_r+0x2e0>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f9 fa10 	bl	80005f8 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 f854 	bl	800028c <__adddf3>
 80071e4:	4606      	mov	r6, r0
 80071e6:	460f      	mov	r7, r1
 80071e8:	f7f9 fcb6 	bl	8000b58 <__aeabi_d2iz>
 80071ec:	2200      	movs	r2, #0
 80071ee:	4683      	mov	fp, r0
 80071f0:	2300      	movs	r3, #0
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	f7f9 fc71 	bl	8000adc <__aeabi_dcmplt>
 80071fa:	b148      	cbz	r0, 8007210 <_dtoa_r+0x190>
 80071fc:	4658      	mov	r0, fp
 80071fe:	f7f9 f991 	bl	8000524 <__aeabi_i2d>
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	f7f9 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800720a:	b908      	cbnz	r0, 8007210 <_dtoa_r+0x190>
 800720c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007210:	f1bb 0f16 	cmp.w	fp, #22
 8007214:	d857      	bhi.n	80072c6 <_dtoa_r+0x246>
 8007216:	4b5b      	ldr	r3, [pc, #364]	; (8007384 <_dtoa_r+0x304>)
 8007218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	ec51 0b18 	vmov	r0, r1, d8
 8007224:	f7f9 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8007228:	2800      	cmp	r0, #0
 800722a:	d04e      	beq.n	80072ca <_dtoa_r+0x24a>
 800722c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007230:	2300      	movs	r3, #0
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007236:	1b5b      	subs	r3, r3, r5
 8007238:	1e5a      	subs	r2, r3, #1
 800723a:	bf45      	ittet	mi
 800723c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007240:	9305      	strmi	r3, [sp, #20]
 8007242:	2300      	movpl	r3, #0
 8007244:	2300      	movmi	r3, #0
 8007246:	9206      	str	r2, [sp, #24]
 8007248:	bf54      	ite	pl
 800724a:	9305      	strpl	r3, [sp, #20]
 800724c:	9306      	strmi	r3, [sp, #24]
 800724e:	f1bb 0f00 	cmp.w	fp, #0
 8007252:	db3c      	blt.n	80072ce <_dtoa_r+0x24e>
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800725a:	445b      	add	r3, fp
 800725c:	9306      	str	r3, [sp, #24]
 800725e:	2300      	movs	r3, #0
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9b07      	ldr	r3, [sp, #28]
 8007264:	2b09      	cmp	r3, #9
 8007266:	d868      	bhi.n	800733a <_dtoa_r+0x2ba>
 8007268:	2b05      	cmp	r3, #5
 800726a:	bfc4      	itt	gt
 800726c:	3b04      	subgt	r3, #4
 800726e:	9307      	strgt	r3, [sp, #28]
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	f1a3 0302 	sub.w	r3, r3, #2
 8007276:	bfcc      	ite	gt
 8007278:	2500      	movgt	r5, #0
 800727a:	2501      	movle	r5, #1
 800727c:	2b03      	cmp	r3, #3
 800727e:	f200 8085 	bhi.w	800738c <_dtoa_r+0x30c>
 8007282:	e8df f003 	tbb	[pc, r3]
 8007286:	3b2e      	.short	0x3b2e
 8007288:	5839      	.short	0x5839
 800728a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800728e:	441d      	add	r5, r3
 8007290:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007294:	2b20      	cmp	r3, #32
 8007296:	bfc1      	itttt	gt
 8007298:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800729c:	fa08 f803 	lslgt.w	r8, r8, r3
 80072a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80072a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072a8:	bfd6      	itet	le
 80072aa:	f1c3 0320 	rsble	r3, r3, #32
 80072ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80072b2:	fa06 f003 	lslle.w	r0, r6, r3
 80072b6:	f7f9 f925 	bl	8000504 <__aeabi_ui2d>
 80072ba:	2201      	movs	r2, #1
 80072bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072c0:	3d01      	subs	r5, #1
 80072c2:	920e      	str	r2, [sp, #56]	; 0x38
 80072c4:	e76f      	b.n	80071a6 <_dtoa_r+0x126>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7b3      	b.n	8007232 <_dtoa_r+0x1b2>
 80072ca:	900c      	str	r0, [sp, #48]	; 0x30
 80072cc:	e7b2      	b.n	8007234 <_dtoa_r+0x1b4>
 80072ce:	9b05      	ldr	r3, [sp, #20]
 80072d0:	eba3 030b 	sub.w	r3, r3, fp
 80072d4:	9305      	str	r3, [sp, #20]
 80072d6:	f1cb 0300 	rsb	r3, fp, #0
 80072da:	9308      	str	r3, [sp, #32]
 80072dc:	2300      	movs	r3, #0
 80072de:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e0:	e7bf      	b.n	8007262 <_dtoa_r+0x1e2>
 80072e2:	2300      	movs	r3, #0
 80072e4:	9309      	str	r3, [sp, #36]	; 0x24
 80072e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dc52      	bgt.n	8007392 <_dtoa_r+0x312>
 80072ec:	2301      	movs	r3, #1
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	461a      	mov	r2, r3
 80072f4:	920a      	str	r2, [sp, #40]	; 0x28
 80072f6:	e00b      	b.n	8007310 <_dtoa_r+0x290>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e7f3      	b.n	80072e4 <_dtoa_r+0x264>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	445b      	add	r3, fp
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	3301      	adds	r3, #1
 8007308:	2b01      	cmp	r3, #1
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	bfb8      	it	lt
 800730e:	2301      	movlt	r3, #1
 8007310:	69e0      	ldr	r0, [r4, #28]
 8007312:	2100      	movs	r1, #0
 8007314:	2204      	movs	r2, #4
 8007316:	f102 0614 	add.w	r6, r2, #20
 800731a:	429e      	cmp	r6, r3
 800731c:	d93d      	bls.n	800739a <_dtoa_r+0x31a>
 800731e:	6041      	str	r1, [r0, #4]
 8007320:	4620      	mov	r0, r4
 8007322:	f000 fd9f 	bl	8007e64 <_Balloc>
 8007326:	9000      	str	r0, [sp, #0]
 8007328:	2800      	cmp	r0, #0
 800732a:	d139      	bne.n	80073a0 <_dtoa_r+0x320>
 800732c:	4b16      	ldr	r3, [pc, #88]	; (8007388 <_dtoa_r+0x308>)
 800732e:	4602      	mov	r2, r0
 8007330:	f240 11af 	movw	r1, #431	; 0x1af
 8007334:	e6bd      	b.n	80070b2 <_dtoa_r+0x32>
 8007336:	2301      	movs	r3, #1
 8007338:	e7e1      	b.n	80072fe <_dtoa_r+0x27e>
 800733a:	2501      	movs	r5, #1
 800733c:	2300      	movs	r3, #0
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	9509      	str	r5, [sp, #36]	; 0x24
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	2200      	movs	r2, #0
 800734c:	2312      	movs	r3, #18
 800734e:	e7d1      	b.n	80072f4 <_dtoa_r+0x274>
 8007350:	636f4361 	.word	0x636f4361
 8007354:	3fd287a7 	.word	0x3fd287a7
 8007358:	8b60c8b3 	.word	0x8b60c8b3
 800735c:	3fc68a28 	.word	0x3fc68a28
 8007360:	509f79fb 	.word	0x509f79fb
 8007364:	3fd34413 	.word	0x3fd34413
 8007368:	08008cd9 	.word	0x08008cd9
 800736c:	08008cf0 	.word	0x08008cf0
 8007370:	7ff00000 	.word	0x7ff00000
 8007374:	08008cd5 	.word	0x08008cd5
 8007378:	08008ccc 	.word	0x08008ccc
 800737c:	08008ca9 	.word	0x08008ca9
 8007380:	3ff80000 	.word	0x3ff80000
 8007384:	08008de0 	.word	0x08008de0
 8007388:	08008d48 	.word	0x08008d48
 800738c:	2301      	movs	r3, #1
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	e7d7      	b.n	8007342 <_dtoa_r+0x2c2>
 8007392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	e7ba      	b.n	8007310 <_dtoa_r+0x290>
 800739a:	3101      	adds	r1, #1
 800739c:	0052      	lsls	r2, r2, #1
 800739e:	e7ba      	b.n	8007316 <_dtoa_r+0x296>
 80073a0:	69e3      	ldr	r3, [r4, #28]
 80073a2:	9a00      	ldr	r2, [sp, #0]
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	2b0e      	cmp	r3, #14
 80073aa:	f200 80a8 	bhi.w	80074fe <_dtoa_r+0x47e>
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f000 80a5 	beq.w	80074fe <_dtoa_r+0x47e>
 80073b4:	f1bb 0f00 	cmp.w	fp, #0
 80073b8:	dd38      	ble.n	800742c <_dtoa_r+0x3ac>
 80073ba:	4bc0      	ldr	r3, [pc, #768]	; (80076bc <_dtoa_r+0x63c>)
 80073bc:	f00b 020f 	and.w	r2, fp, #15
 80073c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80073cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80073d0:	d019      	beq.n	8007406 <_dtoa_r+0x386>
 80073d2:	4bbb      	ldr	r3, [pc, #748]	; (80076c0 <_dtoa_r+0x640>)
 80073d4:	ec51 0b18 	vmov	r0, r1, d8
 80073d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073dc:	f7f9 fa36 	bl	800084c <__aeabi_ddiv>
 80073e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e4:	f008 080f 	and.w	r8, r8, #15
 80073e8:	2503      	movs	r5, #3
 80073ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80076c0 <_dtoa_r+0x640>
 80073ee:	f1b8 0f00 	cmp.w	r8, #0
 80073f2:	d10a      	bne.n	800740a <_dtoa_r+0x38a>
 80073f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	f7f9 fa26 	bl	800084c <__aeabi_ddiv>
 8007400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007404:	e02b      	b.n	800745e <_dtoa_r+0x3de>
 8007406:	2502      	movs	r5, #2
 8007408:	e7ef      	b.n	80073ea <_dtoa_r+0x36a>
 800740a:	f018 0f01 	tst.w	r8, #1
 800740e:	d008      	beq.n	8007422 <_dtoa_r+0x3a2>
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007418:	f7f9 f8ee 	bl	80005f8 <__aeabi_dmul>
 800741c:	3501      	adds	r5, #1
 800741e:	4606      	mov	r6, r0
 8007420:	460f      	mov	r7, r1
 8007422:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007426:	f109 0908 	add.w	r9, r9, #8
 800742a:	e7e0      	b.n	80073ee <_dtoa_r+0x36e>
 800742c:	f000 809f 	beq.w	800756e <_dtoa_r+0x4ee>
 8007430:	f1cb 0600 	rsb	r6, fp, #0
 8007434:	4ba1      	ldr	r3, [pc, #644]	; (80076bc <_dtoa_r+0x63c>)
 8007436:	4fa2      	ldr	r7, [pc, #648]	; (80076c0 <_dtoa_r+0x640>)
 8007438:	f006 020f 	and.w	r2, r6, #15
 800743c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	ec51 0b18 	vmov	r0, r1, d8
 8007448:	f7f9 f8d6 	bl	80005f8 <__aeabi_dmul>
 800744c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007450:	1136      	asrs	r6, r6, #4
 8007452:	2300      	movs	r3, #0
 8007454:	2502      	movs	r5, #2
 8007456:	2e00      	cmp	r6, #0
 8007458:	d17e      	bne.n	8007558 <_dtoa_r+0x4d8>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1d0      	bne.n	8007400 <_dtoa_r+0x380>
 800745e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007460:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8084 	beq.w	8007572 <_dtoa_r+0x4f2>
 800746a:	4b96      	ldr	r3, [pc, #600]	; (80076c4 <_dtoa_r+0x644>)
 800746c:	2200      	movs	r2, #0
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 fb33 	bl	8000adc <__aeabi_dcmplt>
 8007476:	2800      	cmp	r0, #0
 8007478:	d07b      	beq.n	8007572 <_dtoa_r+0x4f2>
 800747a:	9b04      	ldr	r3, [sp, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d078      	beq.n	8007572 <_dtoa_r+0x4f2>
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd39      	ble.n	80074fa <_dtoa_r+0x47a>
 8007486:	4b90      	ldr	r3, [pc, #576]	; (80076c8 <_dtoa_r+0x648>)
 8007488:	2200      	movs	r2, #0
 800748a:	4640      	mov	r0, r8
 800748c:	4649      	mov	r1, r9
 800748e:	f7f9 f8b3 	bl	80005f8 <__aeabi_dmul>
 8007492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007496:	9e01      	ldr	r6, [sp, #4]
 8007498:	f10b 37ff 	add.w	r7, fp, #4294967295
 800749c:	3501      	adds	r5, #1
 800749e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7f9 f83e 	bl	8000524 <__aeabi_i2d>
 80074a8:	4642      	mov	r2, r8
 80074aa:	464b      	mov	r3, r9
 80074ac:	f7f9 f8a4 	bl	80005f8 <__aeabi_dmul>
 80074b0:	4b86      	ldr	r3, [pc, #536]	; (80076cc <_dtoa_r+0x64c>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	f7f8 feea 	bl	800028c <__adddf3>
 80074b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d158      	bne.n	8007578 <_dtoa_r+0x4f8>
 80074c6:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <_dtoa_r+0x650>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074d6:	4680      	mov	r8, r0
 80074d8:	4689      	mov	r9, r1
 80074da:	f7f9 fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	f040 8296 	bne.w	8007a10 <_dtoa_r+0x990>
 80074e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80074e8:	4640      	mov	r0, r8
 80074ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 faf4 	bl	8000adc <__aeabi_dcmplt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f040 8289 	bne.w	8007a0c <_dtoa_r+0x98c>
 80074fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80074fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007500:	2b00      	cmp	r3, #0
 8007502:	f2c0 814e 	blt.w	80077a2 <_dtoa_r+0x722>
 8007506:	f1bb 0f0e 	cmp.w	fp, #14
 800750a:	f300 814a 	bgt.w	80077a2 <_dtoa_r+0x722>
 800750e:	4b6b      	ldr	r3, [pc, #428]	; (80076bc <_dtoa_r+0x63c>)
 8007510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800751a:	2b00      	cmp	r3, #0
 800751c:	f280 80dc 	bge.w	80076d8 <_dtoa_r+0x658>
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f300 80d8 	bgt.w	80076d8 <_dtoa_r+0x658>
 8007528:	f040 826f 	bne.w	8007a0a <_dtoa_r+0x98a>
 800752c:	4b68      	ldr	r3, [pc, #416]	; (80076d0 <_dtoa_r+0x650>)
 800752e:	2200      	movs	r2, #0
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800753c:	f7f9 fae2 	bl	8000b04 <__aeabi_dcmpge>
 8007540:	9e04      	ldr	r6, [sp, #16]
 8007542:	4637      	mov	r7, r6
 8007544:	2800      	cmp	r0, #0
 8007546:	f040 8245 	bne.w	80079d4 <_dtoa_r+0x954>
 800754a:	9d00      	ldr	r5, [sp, #0]
 800754c:	2331      	movs	r3, #49	; 0x31
 800754e:	f805 3b01 	strb.w	r3, [r5], #1
 8007552:	f10b 0b01 	add.w	fp, fp, #1
 8007556:	e241      	b.n	80079dc <_dtoa_r+0x95c>
 8007558:	07f2      	lsls	r2, r6, #31
 800755a:	d505      	bpl.n	8007568 <_dtoa_r+0x4e8>
 800755c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007560:	f7f9 f84a 	bl	80005f8 <__aeabi_dmul>
 8007564:	3501      	adds	r5, #1
 8007566:	2301      	movs	r3, #1
 8007568:	1076      	asrs	r6, r6, #1
 800756a:	3708      	adds	r7, #8
 800756c:	e773      	b.n	8007456 <_dtoa_r+0x3d6>
 800756e:	2502      	movs	r5, #2
 8007570:	e775      	b.n	800745e <_dtoa_r+0x3de>
 8007572:	9e04      	ldr	r6, [sp, #16]
 8007574:	465f      	mov	r7, fp
 8007576:	e792      	b.n	800749e <_dtoa_r+0x41e>
 8007578:	9900      	ldr	r1, [sp, #0]
 800757a:	4b50      	ldr	r3, [pc, #320]	; (80076bc <_dtoa_r+0x63c>)
 800757c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007580:	4431      	add	r1, r6
 8007582:	9102      	str	r1, [sp, #8]
 8007584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007586:	eeb0 9a47 	vmov.f32	s18, s14
 800758a:	eef0 9a67 	vmov.f32	s19, s15
 800758e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007592:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007596:	2900      	cmp	r1, #0
 8007598:	d044      	beq.n	8007624 <_dtoa_r+0x5a4>
 800759a:	494e      	ldr	r1, [pc, #312]	; (80076d4 <_dtoa_r+0x654>)
 800759c:	2000      	movs	r0, #0
 800759e:	f7f9 f955 	bl	800084c <__aeabi_ddiv>
 80075a2:	ec53 2b19 	vmov	r2, r3, d9
 80075a6:	f7f8 fe6f 	bl	8000288 <__aeabi_dsub>
 80075aa:	9d00      	ldr	r5, [sp, #0]
 80075ac:	ec41 0b19 	vmov	d9, r0, r1
 80075b0:	4649      	mov	r1, r9
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7f9 fad0 	bl	8000b58 <__aeabi_d2iz>
 80075b8:	4606      	mov	r6, r0
 80075ba:	f7f8 ffb3 	bl	8000524 <__aeabi_i2d>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	3630      	adds	r6, #48	; 0x30
 80075cc:	f805 6b01 	strb.w	r6, [r5], #1
 80075d0:	ec53 2b19 	vmov	r2, r3, d9
 80075d4:	4680      	mov	r8, r0
 80075d6:	4689      	mov	r9, r1
 80075d8:	f7f9 fa80 	bl	8000adc <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d164      	bne.n	80076aa <_dtoa_r+0x62a>
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	4937      	ldr	r1, [pc, #220]	; (80076c4 <_dtoa_r+0x644>)
 80075e6:	2000      	movs	r0, #0
 80075e8:	f7f8 fe4e 	bl	8000288 <__aeabi_dsub>
 80075ec:	ec53 2b19 	vmov	r2, r3, d9
 80075f0:	f7f9 fa74 	bl	8000adc <__aeabi_dcmplt>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f040 80b6 	bne.w	8007766 <_dtoa_r+0x6e6>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	429d      	cmp	r5, r3
 80075fe:	f43f af7c 	beq.w	80074fa <_dtoa_r+0x47a>
 8007602:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <_dtoa_r+0x648>)
 8007604:	ec51 0b19 	vmov	r0, r1, d9
 8007608:	2200      	movs	r2, #0
 800760a:	f7f8 fff5 	bl	80005f8 <__aeabi_dmul>
 800760e:	4b2e      	ldr	r3, [pc, #184]	; (80076c8 <_dtoa_r+0x648>)
 8007610:	ec41 0b19 	vmov	d9, r0, r1
 8007614:	2200      	movs	r2, #0
 8007616:	4640      	mov	r0, r8
 8007618:	4649      	mov	r1, r9
 800761a:	f7f8 ffed 	bl	80005f8 <__aeabi_dmul>
 800761e:	4680      	mov	r8, r0
 8007620:	4689      	mov	r9, r1
 8007622:	e7c5      	b.n	80075b0 <_dtoa_r+0x530>
 8007624:	ec51 0b17 	vmov	r0, r1, d7
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	9d00      	ldr	r5, [sp, #0]
 8007630:	930f      	str	r3, [sp, #60]	; 0x3c
 8007632:	ec41 0b19 	vmov	d9, r0, r1
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	f7f9 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800763e:	4606      	mov	r6, r0
 8007640:	f7f8 ff70 	bl	8000524 <__aeabi_i2d>
 8007644:	3630      	adds	r6, #48	; 0x30
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f8 fe1b 	bl	8000288 <__aeabi_dsub>
 8007652:	f805 6b01 	strb.w	r6, [r5], #1
 8007656:	9b02      	ldr	r3, [sp, #8]
 8007658:	429d      	cmp	r5, r3
 800765a:	4680      	mov	r8, r0
 800765c:	4689      	mov	r9, r1
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	d124      	bne.n	80076ae <_dtoa_r+0x62e>
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <_dtoa_r+0x654>)
 8007666:	ec51 0b19 	vmov	r0, r1, d9
 800766a:	f7f8 fe0f 	bl	800028c <__adddf3>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f9 fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800767a:	2800      	cmp	r0, #0
 800767c:	d173      	bne.n	8007766 <_dtoa_r+0x6e6>
 800767e:	ec53 2b19 	vmov	r2, r3, d9
 8007682:	4914      	ldr	r1, [pc, #80]	; (80076d4 <_dtoa_r+0x654>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f8 fdff 	bl	8000288 <__aeabi_dsub>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f9 fa23 	bl	8000adc <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f af2f 	beq.w	80074fa <_dtoa_r+0x47a>
 800769c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800769e:	1e6b      	subs	r3, r5, #1
 80076a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076a6:	2b30      	cmp	r3, #48	; 0x30
 80076a8:	d0f8      	beq.n	800769c <_dtoa_r+0x61c>
 80076aa:	46bb      	mov	fp, r7
 80076ac:	e04a      	b.n	8007744 <_dtoa_r+0x6c4>
 80076ae:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <_dtoa_r+0x648>)
 80076b0:	f7f8 ffa2 	bl	80005f8 <__aeabi_dmul>
 80076b4:	4680      	mov	r8, r0
 80076b6:	4689      	mov	r9, r1
 80076b8:	e7bd      	b.n	8007636 <_dtoa_r+0x5b6>
 80076ba:	bf00      	nop
 80076bc:	08008de0 	.word	0x08008de0
 80076c0:	08008db8 	.word	0x08008db8
 80076c4:	3ff00000 	.word	0x3ff00000
 80076c8:	40240000 	.word	0x40240000
 80076cc:	401c0000 	.word	0x401c0000
 80076d0:	40140000 	.word	0x40140000
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076dc:	9d00      	ldr	r5, [sp, #0]
 80076de:	4642      	mov	r2, r8
 80076e0:	464b      	mov	r3, r9
 80076e2:	4630      	mov	r0, r6
 80076e4:	4639      	mov	r1, r7
 80076e6:	f7f9 f8b1 	bl	800084c <__aeabi_ddiv>
 80076ea:	f7f9 fa35 	bl	8000b58 <__aeabi_d2iz>
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	f7f8 ff18 	bl	8000524 <__aeabi_i2d>
 80076f4:	4642      	mov	r2, r8
 80076f6:	464b      	mov	r3, r9
 80076f8:	f7f8 ff7e 	bl	80005f8 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fdc0 	bl	8000288 <__aeabi_dsub>
 8007708:	9e01      	ldr	r6, [sp, #4]
 800770a:	9f04      	ldr	r7, [sp, #16]
 800770c:	3630      	adds	r6, #48	; 0x30
 800770e:	f805 6b01 	strb.w	r6, [r5], #1
 8007712:	9e00      	ldr	r6, [sp, #0]
 8007714:	1bae      	subs	r6, r5, r6
 8007716:	42b7      	cmp	r7, r6
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	d134      	bne.n	8007788 <_dtoa_r+0x708>
 800771e:	f7f8 fdb5 	bl	800028c <__adddf3>
 8007722:	4642      	mov	r2, r8
 8007724:	464b      	mov	r3, r9
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	f7f9 f9f5 	bl	8000b18 <__aeabi_dcmpgt>
 800772e:	b9c8      	cbnz	r0, 8007764 <_dtoa_r+0x6e4>
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800773c:	b110      	cbz	r0, 8007744 <_dtoa_r+0x6c4>
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	07db      	lsls	r3, r3, #31
 8007742:	d40f      	bmi.n	8007764 <_dtoa_r+0x6e4>
 8007744:	4651      	mov	r1, sl
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fbcc 	bl	8007ee4 <_Bfree>
 800774c:	2300      	movs	r3, #0
 800774e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007750:	702b      	strb	r3, [r5, #0]
 8007752:	f10b 0301 	add.w	r3, fp, #1
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800775a:	2b00      	cmp	r3, #0
 800775c:	f43f ace2 	beq.w	8007124 <_dtoa_r+0xa4>
 8007760:	601d      	str	r5, [r3, #0]
 8007762:	e4df      	b.n	8007124 <_dtoa_r+0xa4>
 8007764:	465f      	mov	r7, fp
 8007766:	462b      	mov	r3, r5
 8007768:	461d      	mov	r5, r3
 800776a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800776e:	2a39      	cmp	r2, #57	; 0x39
 8007770:	d106      	bne.n	8007780 <_dtoa_r+0x700>
 8007772:	9a00      	ldr	r2, [sp, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d1f7      	bne.n	8007768 <_dtoa_r+0x6e8>
 8007778:	9900      	ldr	r1, [sp, #0]
 800777a:	2230      	movs	r2, #48	; 0x30
 800777c:	3701      	adds	r7, #1
 800777e:	700a      	strb	r2, [r1, #0]
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	3201      	adds	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e790      	b.n	80076aa <_dtoa_r+0x62a>
 8007788:	4ba3      	ldr	r3, [pc, #652]	; (8007a18 <_dtoa_r+0x998>)
 800778a:	2200      	movs	r2, #0
 800778c:	f7f8 ff34 	bl	80005f8 <__aeabi_dmul>
 8007790:	2200      	movs	r2, #0
 8007792:	2300      	movs	r3, #0
 8007794:	4606      	mov	r6, r0
 8007796:	460f      	mov	r7, r1
 8007798:	f7f9 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800779c:	2800      	cmp	r0, #0
 800779e:	d09e      	beq.n	80076de <_dtoa_r+0x65e>
 80077a0:	e7d0      	b.n	8007744 <_dtoa_r+0x6c4>
 80077a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	f000 80ca 	beq.w	800793e <_dtoa_r+0x8be>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	2a01      	cmp	r2, #1
 80077ae:	f300 80ad 	bgt.w	800790c <_dtoa_r+0x88c>
 80077b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	f000 80a5 	beq.w	8007904 <_dtoa_r+0x884>
 80077ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077be:	9e08      	ldr	r6, [sp, #32]
 80077c0:	9d05      	ldr	r5, [sp, #20]
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	441a      	add	r2, r3
 80077c6:	9205      	str	r2, [sp, #20]
 80077c8:	9a06      	ldr	r2, [sp, #24]
 80077ca:	2101      	movs	r1, #1
 80077cc:	441a      	add	r2, r3
 80077ce:	4620      	mov	r0, r4
 80077d0:	9206      	str	r2, [sp, #24]
 80077d2:	f000 fc3d 	bl	8008050 <__i2b>
 80077d6:	4607      	mov	r7, r0
 80077d8:	b165      	cbz	r5, 80077f4 <_dtoa_r+0x774>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dd09      	ble.n	80077f4 <_dtoa_r+0x774>
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	9a05      	ldr	r2, [sp, #20]
 80077e4:	bfa8      	it	ge
 80077e6:	462b      	movge	r3, r5
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	9205      	str	r2, [sp, #20]
 80077ec:	9a06      	ldr	r2, [sp, #24]
 80077ee:	1aed      	subs	r5, r5, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	9306      	str	r3, [sp, #24]
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	b1f3      	cbz	r3, 8007836 <_dtoa_r+0x7b6>
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a3 	beq.w	8007946 <_dtoa_r+0x8c6>
 8007800:	2e00      	cmp	r6, #0
 8007802:	dd10      	ble.n	8007826 <_dtoa_r+0x7a6>
 8007804:	4639      	mov	r1, r7
 8007806:	4632      	mov	r2, r6
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fce1 	bl	80081d0 <__pow5mult>
 800780e:	4652      	mov	r2, sl
 8007810:	4601      	mov	r1, r0
 8007812:	4607      	mov	r7, r0
 8007814:	4620      	mov	r0, r4
 8007816:	f000 fc31 	bl	800807c <__multiply>
 800781a:	4651      	mov	r1, sl
 800781c:	4680      	mov	r8, r0
 800781e:	4620      	mov	r0, r4
 8007820:	f000 fb60 	bl	8007ee4 <_Bfree>
 8007824:	46c2      	mov	sl, r8
 8007826:	9b08      	ldr	r3, [sp, #32]
 8007828:	1b9a      	subs	r2, r3, r6
 800782a:	d004      	beq.n	8007836 <_dtoa_r+0x7b6>
 800782c:	4651      	mov	r1, sl
 800782e:	4620      	mov	r0, r4
 8007830:	f000 fcce 	bl	80081d0 <__pow5mult>
 8007834:	4682      	mov	sl, r0
 8007836:	2101      	movs	r1, #1
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fc09 	bl	8008050 <__i2b>
 800783e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	4606      	mov	r6, r0
 8007844:	f340 8081 	ble.w	800794a <_dtoa_r+0x8ca>
 8007848:	461a      	mov	r2, r3
 800784a:	4601      	mov	r1, r0
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fcbf 	bl	80081d0 <__pow5mult>
 8007852:	9b07      	ldr	r3, [sp, #28]
 8007854:	2b01      	cmp	r3, #1
 8007856:	4606      	mov	r6, r0
 8007858:	dd7a      	ble.n	8007950 <_dtoa_r+0x8d0>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	6933      	ldr	r3, [r6, #16]
 8007860:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007864:	6918      	ldr	r0, [r3, #16]
 8007866:	f000 fba5 	bl	8007fb4 <__hi0bits>
 800786a:	f1c0 0020 	rsb	r0, r0, #32
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	4418      	add	r0, r3
 8007872:	f010 001f 	ands.w	r0, r0, #31
 8007876:	f000 8094 	beq.w	80079a2 <_dtoa_r+0x922>
 800787a:	f1c0 0320 	rsb	r3, r0, #32
 800787e:	2b04      	cmp	r3, #4
 8007880:	f340 8085 	ble.w	800798e <_dtoa_r+0x90e>
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	f1c0 001c 	rsb	r0, r0, #28
 800788a:	4403      	add	r3, r0
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	4403      	add	r3, r0
 8007892:	4405      	add	r5, r0
 8007894:	9306      	str	r3, [sp, #24]
 8007896:	9b05      	ldr	r3, [sp, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	dd05      	ble.n	80078a8 <_dtoa_r+0x828>
 800789c:	4651      	mov	r1, sl
 800789e:	461a      	mov	r2, r3
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fcef 	bl	8008284 <__lshift>
 80078a6:	4682      	mov	sl, r0
 80078a8:	9b06      	ldr	r3, [sp, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dd05      	ble.n	80078ba <_dtoa_r+0x83a>
 80078ae:	4631      	mov	r1, r6
 80078b0:	461a      	mov	r2, r3
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 fce6 	bl	8008284 <__lshift>
 80078b8:	4606      	mov	r6, r0
 80078ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d072      	beq.n	80079a6 <_dtoa_r+0x926>
 80078c0:	4631      	mov	r1, r6
 80078c2:	4650      	mov	r0, sl
 80078c4:	f000 fd4a 	bl	800835c <__mcmp>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	da6c      	bge.n	80079a6 <_dtoa_r+0x926>
 80078cc:	2300      	movs	r3, #0
 80078ce:	4651      	mov	r1, sl
 80078d0:	220a      	movs	r2, #10
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fb28 	bl	8007f28 <__multadd>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078de:	4682      	mov	sl, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 81b0 	beq.w	8007c46 <_dtoa_r+0xbc6>
 80078e6:	2300      	movs	r3, #0
 80078e8:	4639      	mov	r1, r7
 80078ea:	220a      	movs	r2, #10
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fb1b 	bl	8007f28 <__multadd>
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	4607      	mov	r7, r0
 80078f8:	f300 8096 	bgt.w	8007a28 <_dtoa_r+0x9a8>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc59      	bgt.n	80079b6 <_dtoa_r+0x936>
 8007902:	e091      	b.n	8007a28 <_dtoa_r+0x9a8>
 8007904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800790a:	e758      	b.n	80077be <_dtoa_r+0x73e>
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	1e5e      	subs	r6, r3, #1
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	42b3      	cmp	r3, r6
 8007914:	bfbf      	itttt	lt
 8007916:	9b08      	ldrlt	r3, [sp, #32]
 8007918:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800791a:	9608      	strlt	r6, [sp, #32]
 800791c:	1af3      	sublt	r3, r6, r3
 800791e:	bfb4      	ite	lt
 8007920:	18d2      	addlt	r2, r2, r3
 8007922:	1b9e      	subge	r6, r3, r6
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	bfbc      	itt	lt
 8007928:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800792a:	2600      	movlt	r6, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfb7      	itett	lt
 8007930:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007934:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007938:	1a9d      	sublt	r5, r3, r2
 800793a:	2300      	movlt	r3, #0
 800793c:	e741      	b.n	80077c2 <_dtoa_r+0x742>
 800793e:	9e08      	ldr	r6, [sp, #32]
 8007940:	9d05      	ldr	r5, [sp, #20]
 8007942:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007944:	e748      	b.n	80077d8 <_dtoa_r+0x758>
 8007946:	9a08      	ldr	r2, [sp, #32]
 8007948:	e770      	b.n	800782c <_dtoa_r+0x7ac>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	2b01      	cmp	r3, #1
 800794e:	dc19      	bgt.n	8007984 <_dtoa_r+0x904>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	b9bb      	cbnz	r3, 8007984 <_dtoa_r+0x904>
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800795a:	b99b      	cbnz	r3, 8007984 <_dtoa_r+0x904>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007962:	0d1b      	lsrs	r3, r3, #20
 8007964:	051b      	lsls	r3, r3, #20
 8007966:	b183      	cbz	r3, 800798a <_dtoa_r+0x90a>
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	3301      	adds	r3, #1
 800796c:	9305      	str	r3, [sp, #20]
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	3301      	adds	r3, #1
 8007972:	9306      	str	r3, [sp, #24]
 8007974:	f04f 0801 	mov.w	r8, #1
 8007978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	f47f af6f 	bne.w	800785e <_dtoa_r+0x7de>
 8007980:	2001      	movs	r0, #1
 8007982:	e774      	b.n	800786e <_dtoa_r+0x7ee>
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	e7f6      	b.n	8007978 <_dtoa_r+0x8f8>
 800798a:	4698      	mov	r8, r3
 800798c:	e7f4      	b.n	8007978 <_dtoa_r+0x8f8>
 800798e:	d082      	beq.n	8007896 <_dtoa_r+0x816>
 8007990:	9a05      	ldr	r2, [sp, #20]
 8007992:	331c      	adds	r3, #28
 8007994:	441a      	add	r2, r3
 8007996:	9205      	str	r2, [sp, #20]
 8007998:	9a06      	ldr	r2, [sp, #24]
 800799a:	441a      	add	r2, r3
 800799c:	441d      	add	r5, r3
 800799e:	9206      	str	r2, [sp, #24]
 80079a0:	e779      	b.n	8007896 <_dtoa_r+0x816>
 80079a2:	4603      	mov	r3, r0
 80079a4:	e7f4      	b.n	8007990 <_dtoa_r+0x910>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc37      	bgt.n	8007a1c <_dtoa_r+0x99c>
 80079ac:	9b07      	ldr	r3, [sp, #28]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	dd34      	ble.n	8007a1c <_dtoa_r+0x99c>
 80079b2:	9b04      	ldr	r3, [sp, #16]
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	b963      	cbnz	r3, 80079d4 <_dtoa_r+0x954>
 80079ba:	4631      	mov	r1, r6
 80079bc:	2205      	movs	r2, #5
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 fab2 	bl	8007f28 <__multadd>
 80079c4:	4601      	mov	r1, r0
 80079c6:	4606      	mov	r6, r0
 80079c8:	4650      	mov	r0, sl
 80079ca:	f000 fcc7 	bl	800835c <__mcmp>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f73f adbb 	bgt.w	800754a <_dtoa_r+0x4ca>
 80079d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d6:	9d00      	ldr	r5, [sp, #0]
 80079d8:	ea6f 0b03 	mvn.w	fp, r3
 80079dc:	f04f 0800 	mov.w	r8, #0
 80079e0:	4631      	mov	r1, r6
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fa7e 	bl	8007ee4 <_Bfree>
 80079e8:	2f00      	cmp	r7, #0
 80079ea:	f43f aeab 	beq.w	8007744 <_dtoa_r+0x6c4>
 80079ee:	f1b8 0f00 	cmp.w	r8, #0
 80079f2:	d005      	beq.n	8007a00 <_dtoa_r+0x980>
 80079f4:	45b8      	cmp	r8, r7
 80079f6:	d003      	beq.n	8007a00 <_dtoa_r+0x980>
 80079f8:	4641      	mov	r1, r8
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fa72 	bl	8007ee4 <_Bfree>
 8007a00:	4639      	mov	r1, r7
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 fa6e 	bl	8007ee4 <_Bfree>
 8007a08:	e69c      	b.n	8007744 <_dtoa_r+0x6c4>
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	4637      	mov	r7, r6
 8007a0e:	e7e1      	b.n	80079d4 <_dtoa_r+0x954>
 8007a10:	46bb      	mov	fp, r7
 8007a12:	4637      	mov	r7, r6
 8007a14:	e599      	b.n	800754a <_dtoa_r+0x4ca>
 8007a16:	bf00      	nop
 8007a18:	40240000 	.word	0x40240000
 8007a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80c8 	beq.w	8007bb4 <_dtoa_r+0xb34>
 8007a24:	9b04      	ldr	r3, [sp, #16]
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	dd05      	ble.n	8007a38 <_dtoa_r+0x9b8>
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 fc27 	bl	8008284 <__lshift>
 8007a36:	4607      	mov	r7, r0
 8007a38:	f1b8 0f00 	cmp.w	r8, #0
 8007a3c:	d05b      	beq.n	8007af6 <_dtoa_r+0xa76>
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fa0f 	bl	8007e64 <_Balloc>
 8007a46:	4605      	mov	r5, r0
 8007a48:	b928      	cbnz	r0, 8007a56 <_dtoa_r+0x9d6>
 8007a4a:	4b83      	ldr	r3, [pc, #524]	; (8007c58 <_dtoa_r+0xbd8>)
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a52:	f7ff bb2e 	b.w	80070b2 <_dtoa_r+0x32>
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	3202      	adds	r2, #2
 8007a5a:	0092      	lsls	r2, r2, #2
 8007a5c:	f107 010c 	add.w	r1, r7, #12
 8007a60:	300c      	adds	r0, #12
 8007a62:	f001 f801 	bl	8008a68 <memcpy>
 8007a66:	2201      	movs	r2, #1
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fc0a 	bl	8008284 <__lshift>
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9b02      	ldr	r3, [sp, #8]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	46b8      	mov	r8, r7
 8007a86:	9306      	str	r3, [sp, #24]
 8007a88:	4607      	mov	r7, r0
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4650      	mov	r0, sl
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	f7ff fa69 	bl	8006f6a <quorem>
 8007a98:	4641      	mov	r1, r8
 8007a9a:	9002      	str	r0, [sp, #8]
 8007a9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	f000 fc5b 	bl	800835c <__mcmp>
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	9005      	str	r0, [sp, #20]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fc71 	bl	8008394 <__mdiff>
 8007ab2:	68c2      	ldr	r2, [r0, #12]
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	bb02      	cbnz	r2, 8007afa <_dtoa_r+0xa7a>
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4650      	mov	r0, sl
 8007abc:	f000 fc4e 	bl	800835c <__mcmp>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac8:	f000 fa0c 	bl	8007ee4 <_Bfree>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad0:	9d04      	ldr	r5, [sp, #16]
 8007ad2:	ea43 0102 	orr.w	r1, r3, r2
 8007ad6:	9b06      	ldr	r3, [sp, #24]
 8007ad8:	4319      	orrs	r1, r3
 8007ada:	d110      	bne.n	8007afe <_dtoa_r+0xa7e>
 8007adc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ae0:	d029      	beq.n	8007b36 <_dtoa_r+0xab6>
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd02      	ble.n	8007aee <_dtoa_r+0xa6e>
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	f883 9000 	strb.w	r9, [r3]
 8007af4:	e774      	b.n	80079e0 <_dtoa_r+0x960>
 8007af6:	4638      	mov	r0, r7
 8007af8:	e7ba      	b.n	8007a70 <_dtoa_r+0x9f0>
 8007afa:	2201      	movs	r2, #1
 8007afc:	e7e1      	b.n	8007ac2 <_dtoa_r+0xa42>
 8007afe:	9b05      	ldr	r3, [sp, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	db04      	blt.n	8007b0e <_dtoa_r+0xa8e>
 8007b04:	9907      	ldr	r1, [sp, #28]
 8007b06:	430b      	orrs	r3, r1
 8007b08:	9906      	ldr	r1, [sp, #24]
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	d120      	bne.n	8007b50 <_dtoa_r+0xad0>
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	dded      	ble.n	8007aee <_dtoa_r+0xa6e>
 8007b12:	4651      	mov	r1, sl
 8007b14:	2201      	movs	r2, #1
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fbb4 	bl	8008284 <__lshift>
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4682      	mov	sl, r0
 8007b20:	f000 fc1c 	bl	800835c <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	dc03      	bgt.n	8007b30 <_dtoa_r+0xab0>
 8007b28:	d1e1      	bne.n	8007aee <_dtoa_r+0xa6e>
 8007b2a:	f019 0f01 	tst.w	r9, #1
 8007b2e:	d0de      	beq.n	8007aee <_dtoa_r+0xa6e>
 8007b30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b34:	d1d8      	bne.n	8007ae8 <_dtoa_r+0xa68>
 8007b36:	9a01      	ldr	r2, [sp, #4]
 8007b38:	2339      	movs	r3, #57	; 0x39
 8007b3a:	7013      	strb	r3, [r2, #0]
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	461d      	mov	r5, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b46:	2a39      	cmp	r2, #57	; 0x39
 8007b48:	d06c      	beq.n	8007c24 <_dtoa_r+0xba4>
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e747      	b.n	80079e0 <_dtoa_r+0x960>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	dd07      	ble.n	8007b64 <_dtoa_r+0xae4>
 8007b54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b58:	d0ed      	beq.n	8007b36 <_dtoa_r+0xab6>
 8007b5a:	9a01      	ldr	r2, [sp, #4]
 8007b5c:	f109 0301 	add.w	r3, r9, #1
 8007b60:	7013      	strb	r3, [r2, #0]
 8007b62:	e73d      	b.n	80079e0 <_dtoa_r+0x960>
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	9a08      	ldr	r2, [sp, #32]
 8007b68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d043      	beq.n	8007bf8 <_dtoa_r+0xb78>
 8007b70:	4651      	mov	r1, sl
 8007b72:	2300      	movs	r3, #0
 8007b74:	220a      	movs	r2, #10
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f9d6 	bl	8007f28 <__multadd>
 8007b7c:	45b8      	cmp	r8, r7
 8007b7e:	4682      	mov	sl, r0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	f04f 020a 	mov.w	r2, #10
 8007b88:	4641      	mov	r1, r8
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	d107      	bne.n	8007b9e <_dtoa_r+0xb1e>
 8007b8e:	f000 f9cb 	bl	8007f28 <__multadd>
 8007b92:	4680      	mov	r8, r0
 8007b94:	4607      	mov	r7, r0
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	e775      	b.n	8007a8a <_dtoa_r+0xa0a>
 8007b9e:	f000 f9c3 	bl	8007f28 <__multadd>
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	220a      	movs	r2, #10
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f9bc 	bl	8007f28 <__multadd>
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	e7f0      	b.n	8007b96 <_dtoa_r+0xb16>
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	9d00      	ldr	r5, [sp, #0]
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7ff f9d4 	bl	8006f6a <quorem>
 8007bc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	f805 9b01 	strb.w	r9, [r5], #1
 8007bcc:	1aea      	subs	r2, r5, r3
 8007bce:	9b01      	ldr	r3, [sp, #4]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	dd07      	ble.n	8007be4 <_dtoa_r+0xb64>
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	220a      	movs	r2, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f9a4 	bl	8007f28 <__multadd>
 8007be0:	4682      	mov	sl, r0
 8007be2:	e7ea      	b.n	8007bba <_dtoa_r+0xb3a>
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfc8      	it	gt
 8007bea:	461d      	movgt	r5, r3
 8007bec:	9b00      	ldr	r3, [sp, #0]
 8007bee:	bfd8      	it	le
 8007bf0:	2501      	movle	r5, #1
 8007bf2:	441d      	add	r5, r3
 8007bf4:	f04f 0800 	mov.w	r8, #0
 8007bf8:	4651      	mov	r1, sl
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fb41 	bl	8008284 <__lshift>
 8007c02:	4631      	mov	r1, r6
 8007c04:	4682      	mov	sl, r0
 8007c06:	f000 fba9 	bl	800835c <__mcmp>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	dc96      	bgt.n	8007b3c <_dtoa_r+0xabc>
 8007c0e:	d102      	bne.n	8007c16 <_dtoa_r+0xb96>
 8007c10:	f019 0f01 	tst.w	r9, #1
 8007c14:	d192      	bne.n	8007b3c <_dtoa_r+0xabc>
 8007c16:	462b      	mov	r3, r5
 8007c18:	461d      	mov	r5, r3
 8007c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c1e:	2a30      	cmp	r2, #48	; 0x30
 8007c20:	d0fa      	beq.n	8007c18 <_dtoa_r+0xb98>
 8007c22:	e6dd      	b.n	80079e0 <_dtoa_r+0x960>
 8007c24:	9a00      	ldr	r2, [sp, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d189      	bne.n	8007b3e <_dtoa_r+0xabe>
 8007c2a:	f10b 0b01 	add.w	fp, fp, #1
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	e796      	b.n	8007b60 <_dtoa_r+0xae0>
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <_dtoa_r+0xbdc>)
 8007c34:	f7ff ba99 	b.w	800716a <_dtoa_r+0xea>
 8007c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f47f aa6d 	bne.w	800711a <_dtoa_r+0x9a>
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <_dtoa_r+0xbe0>)
 8007c42:	f7ff ba92 	b.w	800716a <_dtoa_r+0xea>
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dcb5      	bgt.n	8007bb8 <_dtoa_r+0xb38>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	f73f aeb1 	bgt.w	80079b6 <_dtoa_r+0x936>
 8007c54:	e7b0      	b.n	8007bb8 <_dtoa_r+0xb38>
 8007c56:	bf00      	nop
 8007c58:	08008d48 	.word	0x08008d48
 8007c5c:	08008ca8 	.word	0x08008ca8
 8007c60:	08008ccc 	.word	0x08008ccc

08007c64 <_free_r>:
 8007c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d044      	beq.n	8007cf4 <_free_r+0x90>
 8007c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6e:	9001      	str	r0, [sp, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f1a1 0404 	sub.w	r4, r1, #4
 8007c76:	bfb8      	it	lt
 8007c78:	18e4      	addlt	r4, r4, r3
 8007c7a:	f000 f8e7 	bl	8007e4c <__malloc_lock>
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <_free_r+0x94>)
 8007c80:	9801      	ldr	r0, [sp, #4]
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b933      	cbnz	r3, 8007c94 <_free_r+0x30>
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	b003      	add	sp, #12
 8007c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c90:	f000 b8e2 	b.w	8007e58 <__malloc_unlock>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d908      	bls.n	8007caa <_free_r+0x46>
 8007c98:	6825      	ldr	r5, [r4, #0]
 8007c9a:	1961      	adds	r1, r4, r5
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1949      	addeq	r1, r1, r5
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	e7ed      	b.n	8007c86 <_free_r+0x22>
 8007caa:	461a      	mov	r2, r3
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b10b      	cbz	r3, 8007cb4 <_free_r+0x50>
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x46>
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	1855      	adds	r5, r2, r1
 8007cb8:	42a5      	cmp	r5, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x70>
 8007cbc:	6824      	ldr	r4, [r4, #0]
 8007cbe:	4421      	add	r1, r4
 8007cc0:	1854      	adds	r4, r2, r1
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	d1e0      	bne.n	8007c8a <_free_r+0x26>
 8007cc8:	681c      	ldr	r4, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	6053      	str	r3, [r2, #4]
 8007cce:	440c      	add	r4, r1
 8007cd0:	6014      	str	r4, [r2, #0]
 8007cd2:	e7da      	b.n	8007c8a <_free_r+0x26>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x78>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	e7d6      	b.n	8007c8a <_free_r+0x26>
 8007cdc:	6825      	ldr	r5, [r4, #0]
 8007cde:	1961      	adds	r1, r4, r5
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf04      	itt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	bf04      	itt	eq
 8007cec:	1949      	addeq	r1, r1, r5
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	6054      	str	r4, [r2, #4]
 8007cf2:	e7ca      	b.n	8007c8a <_free_r+0x26>
 8007cf4:	b003      	add	sp, #12
 8007cf6:	bd30      	pop	{r4, r5, pc}
 8007cf8:	20000570 	.word	0x20000570

08007cfc <malloc>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <malloc+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f000 b823 	b.w	8007d4c <_malloc_r>
 8007d06:	bf00      	nop
 8007d08:	2000007c 	.word	0x2000007c

08007d0c <sbrk_aligned>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4e0e      	ldr	r6, [pc, #56]	; (8007d48 <sbrk_aligned+0x3c>)
 8007d10:	460c      	mov	r4, r1
 8007d12:	6831      	ldr	r1, [r6, #0]
 8007d14:	4605      	mov	r5, r0
 8007d16:	b911      	cbnz	r1, 8007d1e <sbrk_aligned+0x12>
 8007d18:	f000 fe96 	bl	8008a48 <_sbrk_r>
 8007d1c:	6030      	str	r0, [r6, #0]
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 fe91 	bl	8008a48 <_sbrk_r>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d00a      	beq.n	8007d40 <sbrk_aligned+0x34>
 8007d2a:	1cc4      	adds	r4, r0, #3
 8007d2c:	f024 0403 	bic.w	r4, r4, #3
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d007      	beq.n	8007d44 <sbrk_aligned+0x38>
 8007d34:	1a21      	subs	r1, r4, r0
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fe86 	bl	8008a48 <_sbrk_r>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d101      	bne.n	8007d44 <sbrk_aligned+0x38>
 8007d40:	f04f 34ff 	mov.w	r4, #4294967295
 8007d44:	4620      	mov	r0, r4
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	20000574 	.word	0x20000574

08007d4c <_malloc_r>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	1ccd      	adds	r5, r1, #3
 8007d52:	f025 0503 	bic.w	r5, r5, #3
 8007d56:	3508      	adds	r5, #8
 8007d58:	2d0c      	cmp	r5, #12
 8007d5a:	bf38      	it	cc
 8007d5c:	250c      	movcc	r5, #12
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	4607      	mov	r7, r0
 8007d62:	db01      	blt.n	8007d68 <_malloc_r+0x1c>
 8007d64:	42a9      	cmp	r1, r5
 8007d66:	d905      	bls.n	8007d74 <_malloc_r+0x28>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	4630      	mov	r0, r6
 8007d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e48 <_malloc_r+0xfc>
 8007d78:	f000 f868 	bl	8007e4c <__malloc_lock>
 8007d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d80:	461c      	mov	r4, r3
 8007d82:	bb5c      	cbnz	r4, 8007ddc <_malloc_r+0x90>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7ff ffc0 	bl	8007d0c <sbrk_aligned>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	4604      	mov	r4, r0
 8007d90:	d155      	bne.n	8007e3e <_malloc_r+0xf2>
 8007d92:	f8d8 4000 	ldr.w	r4, [r8]
 8007d96:	4626      	mov	r6, r4
 8007d98:	2e00      	cmp	r6, #0
 8007d9a:	d145      	bne.n	8007e28 <_malloc_r+0xdc>
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	d048      	beq.n	8007e32 <_malloc_r+0xe6>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	4631      	mov	r1, r6
 8007da4:	4638      	mov	r0, r7
 8007da6:	eb04 0903 	add.w	r9, r4, r3
 8007daa:	f000 fe4d 	bl	8008a48 <_sbrk_r>
 8007dae:	4581      	cmp	r9, r0
 8007db0:	d13f      	bne.n	8007e32 <_malloc_r+0xe6>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	1a6d      	subs	r5, r5, r1
 8007db6:	4629      	mov	r1, r5
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ffa7 	bl	8007d0c <sbrk_aligned>
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d037      	beq.n	8007e32 <_malloc_r+0xe6>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	442b      	add	r3, r5
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d038      	beq.n	8007e42 <_malloc_r+0xf6>
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	42a2      	cmp	r2, r4
 8007dd4:	d12b      	bne.n	8007e2e <_malloc_r+0xe2>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	e00f      	b.n	8007dfc <_malloc_r+0xb0>
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	1b52      	subs	r2, r2, r5
 8007de0:	d41f      	bmi.n	8007e22 <_malloc_r+0xd6>
 8007de2:	2a0b      	cmp	r2, #11
 8007de4:	d917      	bls.n	8007e16 <_malloc_r+0xca>
 8007de6:	1961      	adds	r1, r4, r5
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	6025      	str	r5, [r4, #0]
 8007dec:	bf18      	it	ne
 8007dee:	6059      	strne	r1, [r3, #4]
 8007df0:	6863      	ldr	r3, [r4, #4]
 8007df2:	bf08      	it	eq
 8007df4:	f8c8 1000 	streq.w	r1, [r8]
 8007df8:	5162      	str	r2, [r4, r5]
 8007dfa:	604b      	str	r3, [r1, #4]
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f104 060b 	add.w	r6, r4, #11
 8007e02:	f000 f829 	bl	8007e58 <__malloc_unlock>
 8007e06:	f026 0607 	bic.w	r6, r6, #7
 8007e0a:	1d23      	adds	r3, r4, #4
 8007e0c:	1af2      	subs	r2, r6, r3
 8007e0e:	d0ae      	beq.n	8007d6e <_malloc_r+0x22>
 8007e10:	1b9b      	subs	r3, r3, r6
 8007e12:	50a3      	str	r3, [r4, r2]
 8007e14:	e7ab      	b.n	8007d6e <_malloc_r+0x22>
 8007e16:	42a3      	cmp	r3, r4
 8007e18:	6862      	ldr	r2, [r4, #4]
 8007e1a:	d1dd      	bne.n	8007dd8 <_malloc_r+0x8c>
 8007e1c:	f8c8 2000 	str.w	r2, [r8]
 8007e20:	e7ec      	b.n	8007dfc <_malloc_r+0xb0>
 8007e22:	4623      	mov	r3, r4
 8007e24:	6864      	ldr	r4, [r4, #4]
 8007e26:	e7ac      	b.n	8007d82 <_malloc_r+0x36>
 8007e28:	4634      	mov	r4, r6
 8007e2a:	6876      	ldr	r6, [r6, #4]
 8007e2c:	e7b4      	b.n	8007d98 <_malloc_r+0x4c>
 8007e2e:	4613      	mov	r3, r2
 8007e30:	e7cc      	b.n	8007dcc <_malloc_r+0x80>
 8007e32:	230c      	movs	r3, #12
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	4638      	mov	r0, r7
 8007e38:	f000 f80e 	bl	8007e58 <__malloc_unlock>
 8007e3c:	e797      	b.n	8007d6e <_malloc_r+0x22>
 8007e3e:	6025      	str	r5, [r4, #0]
 8007e40:	e7dc      	b.n	8007dfc <_malloc_r+0xb0>
 8007e42:	605b      	str	r3, [r3, #4]
 8007e44:	deff      	udf	#255	; 0xff
 8007e46:	bf00      	nop
 8007e48:	20000570 	.word	0x20000570

08007e4c <__malloc_lock>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__malloc_lock+0x8>)
 8007e4e:	f7ff b88a 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8007e52:	bf00      	nop
 8007e54:	2000056c 	.word	0x2000056c

08007e58 <__malloc_unlock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__malloc_unlock+0x8>)
 8007e5a:	f7ff b885 	b.w	8006f68 <__retarget_lock_release_recursive>
 8007e5e:	bf00      	nop
 8007e60:	2000056c 	.word	0x2000056c

08007e64 <_Balloc>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	69c6      	ldr	r6, [r0, #28]
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	b976      	cbnz	r6, 8007e8c <_Balloc+0x28>
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f7ff ff44 	bl	8007cfc <malloc>
 8007e74:	4602      	mov	r2, r0
 8007e76:	61e0      	str	r0, [r4, #28]
 8007e78:	b920      	cbnz	r0, 8007e84 <_Balloc+0x20>
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <_Balloc+0x78>)
 8007e7c:	4818      	ldr	r0, [pc, #96]	; (8007ee0 <_Balloc+0x7c>)
 8007e7e:	216b      	movs	r1, #107	; 0x6b
 8007e80:	f000 fe00 	bl	8008a84 <__assert_func>
 8007e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e88:	6006      	str	r6, [r0, #0]
 8007e8a:	60c6      	str	r6, [r0, #12]
 8007e8c:	69e6      	ldr	r6, [r4, #28]
 8007e8e:	68f3      	ldr	r3, [r6, #12]
 8007e90:	b183      	cbz	r3, 8007eb4 <_Balloc+0x50>
 8007e92:	69e3      	ldr	r3, [r4, #28]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e9a:	b9b8      	cbnz	r0, 8007ecc <_Balloc+0x68>
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007ea2:	1d72      	adds	r2, r6, #5
 8007ea4:	0092      	lsls	r2, r2, #2
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 fe0a 	bl	8008ac0 <_calloc_r>
 8007eac:	b160      	cbz	r0, 8007ec8 <_Balloc+0x64>
 8007eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eb2:	e00e      	b.n	8007ed2 <_Balloc+0x6e>
 8007eb4:	2221      	movs	r2, #33	; 0x21
 8007eb6:	2104      	movs	r1, #4
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fe01 	bl	8008ac0 <_calloc_r>
 8007ebe:	69e3      	ldr	r3, [r4, #28]
 8007ec0:	60f0      	str	r0, [r6, #12]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e4      	bne.n	8007e92 <_Balloc+0x2e>
 8007ec8:	2000      	movs	r0, #0
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	6802      	ldr	r2, [r0, #0]
 8007ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ed8:	e7f7      	b.n	8007eca <_Balloc+0x66>
 8007eda:	bf00      	nop
 8007edc:	08008cd9 	.word	0x08008cd9
 8007ee0:	08008d59 	.word	0x08008d59

08007ee4 <_Bfree>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	69c6      	ldr	r6, [r0, #28]
 8007ee8:	4605      	mov	r5, r0
 8007eea:	460c      	mov	r4, r1
 8007eec:	b976      	cbnz	r6, 8007f0c <_Bfree+0x28>
 8007eee:	2010      	movs	r0, #16
 8007ef0:	f7ff ff04 	bl	8007cfc <malloc>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	61e8      	str	r0, [r5, #28]
 8007ef8:	b920      	cbnz	r0, 8007f04 <_Bfree+0x20>
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <_Bfree+0x3c>)
 8007efc:	4809      	ldr	r0, [pc, #36]	; (8007f24 <_Bfree+0x40>)
 8007efe:	218f      	movs	r1, #143	; 0x8f
 8007f00:	f000 fdc0 	bl	8008a84 <__assert_func>
 8007f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f08:	6006      	str	r6, [r0, #0]
 8007f0a:	60c6      	str	r6, [r0, #12]
 8007f0c:	b13c      	cbz	r4, 8007f1e <_Bfree+0x3a>
 8007f0e:	69eb      	ldr	r3, [r5, #28]
 8007f10:	6862      	ldr	r2, [r4, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f18:	6021      	str	r1, [r4, #0]
 8007f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	08008cd9 	.word	0x08008cd9
 8007f24:	08008d59 	.word	0x08008d59

08007f28 <__multadd>:
 8007f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	690d      	ldr	r5, [r1, #16]
 8007f2e:	4607      	mov	r7, r0
 8007f30:	460c      	mov	r4, r1
 8007f32:	461e      	mov	r6, r3
 8007f34:	f101 0c14 	add.w	ip, r1, #20
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f3e:	b299      	uxth	r1, r3
 8007f40:	fb02 6101 	mla	r1, r2, r1, r6
 8007f44:	0c1e      	lsrs	r6, r3, #16
 8007f46:	0c0b      	lsrs	r3, r1, #16
 8007f48:	fb02 3306 	mla	r3, r2, r6, r3
 8007f4c:	b289      	uxth	r1, r1
 8007f4e:	3001      	adds	r0, #1
 8007f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f54:	4285      	cmp	r5, r0
 8007f56:	f84c 1b04 	str.w	r1, [ip], #4
 8007f5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f5e:	dcec      	bgt.n	8007f3a <__multadd+0x12>
 8007f60:	b30e      	cbz	r6, 8007fa6 <__multadd+0x7e>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	42ab      	cmp	r3, r5
 8007f66:	dc19      	bgt.n	8007f9c <__multadd+0x74>
 8007f68:	6861      	ldr	r1, [r4, #4]
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	f7ff ff79 	bl	8007e64 <_Balloc>
 8007f72:	4680      	mov	r8, r0
 8007f74:	b928      	cbnz	r0, 8007f82 <__multadd+0x5a>
 8007f76:	4602      	mov	r2, r0
 8007f78:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <__multadd+0x84>)
 8007f7a:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <__multadd+0x88>)
 8007f7c:	21ba      	movs	r1, #186	; 0xba
 8007f7e:	f000 fd81 	bl	8008a84 <__assert_func>
 8007f82:	6922      	ldr	r2, [r4, #16]
 8007f84:	3202      	adds	r2, #2
 8007f86:	f104 010c 	add.w	r1, r4, #12
 8007f8a:	0092      	lsls	r2, r2, #2
 8007f8c:	300c      	adds	r0, #12
 8007f8e:	f000 fd6b 	bl	8008a68 <memcpy>
 8007f92:	4621      	mov	r1, r4
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff ffa5 	bl	8007ee4 <_Bfree>
 8007f9a:	4644      	mov	r4, r8
 8007f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	615e      	str	r6, [r3, #20]
 8007fa4:	6125      	str	r5, [r4, #16]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	08008d48 	.word	0x08008d48
 8007fb0:	08008d59 	.word	0x08008d59

08007fb4 <__hi0bits>:
 8007fb4:	0c03      	lsrs	r3, r0, #16
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	b9d3      	cbnz	r3, 8007ff0 <__hi0bits+0x3c>
 8007fba:	0400      	lsls	r0, r0, #16
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fc2:	bf04      	itt	eq
 8007fc4:	0200      	lsleq	r0, r0, #8
 8007fc6:	3308      	addeq	r3, #8
 8007fc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fcc:	bf04      	itt	eq
 8007fce:	0100      	lsleq	r0, r0, #4
 8007fd0:	3304      	addeq	r3, #4
 8007fd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fd6:	bf04      	itt	eq
 8007fd8:	0080      	lsleq	r0, r0, #2
 8007fda:	3302      	addeq	r3, #2
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	db05      	blt.n	8007fec <__hi0bits+0x38>
 8007fe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007fe4:	f103 0301 	add.w	r3, r3, #1
 8007fe8:	bf08      	it	eq
 8007fea:	2320      	moveq	r3, #32
 8007fec:	4618      	mov	r0, r3
 8007fee:	4770      	bx	lr
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e7e4      	b.n	8007fbe <__hi0bits+0xa>

08007ff4 <__lo0bits>:
 8007ff4:	6803      	ldr	r3, [r0, #0]
 8007ff6:	f013 0207 	ands.w	r2, r3, #7
 8007ffa:	d00c      	beq.n	8008016 <__lo0bits+0x22>
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	d422      	bmi.n	8008046 <__lo0bits+0x52>
 8008000:	079a      	lsls	r2, r3, #30
 8008002:	bf49      	itett	mi
 8008004:	085b      	lsrmi	r3, r3, #1
 8008006:	089b      	lsrpl	r3, r3, #2
 8008008:	6003      	strmi	r3, [r0, #0]
 800800a:	2201      	movmi	r2, #1
 800800c:	bf5c      	itt	pl
 800800e:	6003      	strpl	r3, [r0, #0]
 8008010:	2202      	movpl	r2, #2
 8008012:	4610      	mov	r0, r2
 8008014:	4770      	bx	lr
 8008016:	b299      	uxth	r1, r3
 8008018:	b909      	cbnz	r1, 800801e <__lo0bits+0x2a>
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	2210      	movs	r2, #16
 800801e:	b2d9      	uxtb	r1, r3
 8008020:	b909      	cbnz	r1, 8008026 <__lo0bits+0x32>
 8008022:	3208      	adds	r2, #8
 8008024:	0a1b      	lsrs	r3, r3, #8
 8008026:	0719      	lsls	r1, r3, #28
 8008028:	bf04      	itt	eq
 800802a:	091b      	lsreq	r3, r3, #4
 800802c:	3204      	addeq	r2, #4
 800802e:	0799      	lsls	r1, r3, #30
 8008030:	bf04      	itt	eq
 8008032:	089b      	lsreq	r3, r3, #2
 8008034:	3202      	addeq	r2, #2
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	d403      	bmi.n	8008042 <__lo0bits+0x4e>
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	f102 0201 	add.w	r2, r2, #1
 8008040:	d003      	beq.n	800804a <__lo0bits+0x56>
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	e7e5      	b.n	8008012 <__lo0bits+0x1e>
 8008046:	2200      	movs	r2, #0
 8008048:	e7e3      	b.n	8008012 <__lo0bits+0x1e>
 800804a:	2220      	movs	r2, #32
 800804c:	e7e1      	b.n	8008012 <__lo0bits+0x1e>
	...

08008050 <__i2b>:
 8008050:	b510      	push	{r4, lr}
 8008052:	460c      	mov	r4, r1
 8008054:	2101      	movs	r1, #1
 8008056:	f7ff ff05 	bl	8007e64 <_Balloc>
 800805a:	4602      	mov	r2, r0
 800805c:	b928      	cbnz	r0, 800806a <__i2b+0x1a>
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <__i2b+0x24>)
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <__i2b+0x28>)
 8008062:	f240 1145 	movw	r1, #325	; 0x145
 8008066:	f000 fd0d 	bl	8008a84 <__assert_func>
 800806a:	2301      	movs	r3, #1
 800806c:	6144      	str	r4, [r0, #20]
 800806e:	6103      	str	r3, [r0, #16]
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop
 8008074:	08008d48 	.word	0x08008d48
 8008078:	08008d59 	.word	0x08008d59

0800807c <__multiply>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	4691      	mov	r9, r2
 8008082:	690a      	ldr	r2, [r1, #16]
 8008084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008088:	429a      	cmp	r2, r3
 800808a:	bfb8      	it	lt
 800808c:	460b      	movlt	r3, r1
 800808e:	460c      	mov	r4, r1
 8008090:	bfbc      	itt	lt
 8008092:	464c      	movlt	r4, r9
 8008094:	4699      	movlt	r9, r3
 8008096:	6927      	ldr	r7, [r4, #16]
 8008098:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800809c:	68a3      	ldr	r3, [r4, #8]
 800809e:	6861      	ldr	r1, [r4, #4]
 80080a0:	eb07 060a 	add.w	r6, r7, sl
 80080a4:	42b3      	cmp	r3, r6
 80080a6:	b085      	sub	sp, #20
 80080a8:	bfb8      	it	lt
 80080aa:	3101      	addlt	r1, #1
 80080ac:	f7ff feda 	bl	8007e64 <_Balloc>
 80080b0:	b930      	cbnz	r0, 80080c0 <__multiply+0x44>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b44      	ldr	r3, [pc, #272]	; (80081c8 <__multiply+0x14c>)
 80080b6:	4845      	ldr	r0, [pc, #276]	; (80081cc <__multiply+0x150>)
 80080b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080bc:	f000 fce2 	bl	8008a84 <__assert_func>
 80080c0:	f100 0514 	add.w	r5, r0, #20
 80080c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080c8:	462b      	mov	r3, r5
 80080ca:	2200      	movs	r2, #0
 80080cc:	4543      	cmp	r3, r8
 80080ce:	d321      	bcc.n	8008114 <__multiply+0x98>
 80080d0:	f104 0314 	add.w	r3, r4, #20
 80080d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080d8:	f109 0314 	add.w	r3, r9, #20
 80080dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080e0:	9202      	str	r2, [sp, #8]
 80080e2:	1b3a      	subs	r2, r7, r4
 80080e4:	3a15      	subs	r2, #21
 80080e6:	f022 0203 	bic.w	r2, r2, #3
 80080ea:	3204      	adds	r2, #4
 80080ec:	f104 0115 	add.w	r1, r4, #21
 80080f0:	428f      	cmp	r7, r1
 80080f2:	bf38      	it	cc
 80080f4:	2204      	movcc	r2, #4
 80080f6:	9201      	str	r2, [sp, #4]
 80080f8:	9a02      	ldr	r2, [sp, #8]
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d80c      	bhi.n	800811a <__multiply+0x9e>
 8008100:	2e00      	cmp	r6, #0
 8008102:	dd03      	ble.n	800810c <__multiply+0x90>
 8008104:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008108:	2b00      	cmp	r3, #0
 800810a:	d05b      	beq.n	80081c4 <__multiply+0x148>
 800810c:	6106      	str	r6, [r0, #16]
 800810e:	b005      	add	sp, #20
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	f843 2b04 	str.w	r2, [r3], #4
 8008118:	e7d8      	b.n	80080cc <__multiply+0x50>
 800811a:	f8b3 a000 	ldrh.w	sl, [r3]
 800811e:	f1ba 0f00 	cmp.w	sl, #0
 8008122:	d024      	beq.n	800816e <__multiply+0xf2>
 8008124:	f104 0e14 	add.w	lr, r4, #20
 8008128:	46a9      	mov	r9, r5
 800812a:	f04f 0c00 	mov.w	ip, #0
 800812e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008132:	f8d9 1000 	ldr.w	r1, [r9]
 8008136:	fa1f fb82 	uxth.w	fp, r2
 800813a:	b289      	uxth	r1, r1
 800813c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008140:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008144:	f8d9 2000 	ldr.w	r2, [r9]
 8008148:	4461      	add	r1, ip
 800814a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800814e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008156:	b289      	uxth	r1, r1
 8008158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800815c:	4577      	cmp	r7, lr
 800815e:	f849 1b04 	str.w	r1, [r9], #4
 8008162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008166:	d8e2      	bhi.n	800812e <__multiply+0xb2>
 8008168:	9a01      	ldr	r2, [sp, #4]
 800816a:	f845 c002 	str.w	ip, [r5, r2]
 800816e:	9a03      	ldr	r2, [sp, #12]
 8008170:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008174:	3304      	adds	r3, #4
 8008176:	f1b9 0f00 	cmp.w	r9, #0
 800817a:	d021      	beq.n	80081c0 <__multiply+0x144>
 800817c:	6829      	ldr	r1, [r5, #0]
 800817e:	f104 0c14 	add.w	ip, r4, #20
 8008182:	46ae      	mov	lr, r5
 8008184:	f04f 0a00 	mov.w	sl, #0
 8008188:	f8bc b000 	ldrh.w	fp, [ip]
 800818c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008190:	fb09 220b 	mla	r2, r9, fp, r2
 8008194:	4452      	add	r2, sl
 8008196:	b289      	uxth	r1, r1
 8008198:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800819c:	f84e 1b04 	str.w	r1, [lr], #4
 80081a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80081a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081a8:	f8be 1000 	ldrh.w	r1, [lr]
 80081ac:	fb09 110a 	mla	r1, r9, sl, r1
 80081b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081b4:	4567      	cmp	r7, ip
 80081b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081ba:	d8e5      	bhi.n	8008188 <__multiply+0x10c>
 80081bc:	9a01      	ldr	r2, [sp, #4]
 80081be:	50a9      	str	r1, [r5, r2]
 80081c0:	3504      	adds	r5, #4
 80081c2:	e799      	b.n	80080f8 <__multiply+0x7c>
 80081c4:	3e01      	subs	r6, #1
 80081c6:	e79b      	b.n	8008100 <__multiply+0x84>
 80081c8:	08008d48 	.word	0x08008d48
 80081cc:	08008d59 	.word	0x08008d59

080081d0 <__pow5mult>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4615      	mov	r5, r2
 80081d6:	f012 0203 	ands.w	r2, r2, #3
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	d007      	beq.n	80081f0 <__pow5mult+0x20>
 80081e0:	4c25      	ldr	r4, [pc, #148]	; (8008278 <__pow5mult+0xa8>)
 80081e2:	3a01      	subs	r2, #1
 80081e4:	2300      	movs	r3, #0
 80081e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081ea:	f7ff fe9d 	bl	8007f28 <__multadd>
 80081ee:	4607      	mov	r7, r0
 80081f0:	10ad      	asrs	r5, r5, #2
 80081f2:	d03d      	beq.n	8008270 <__pow5mult+0xa0>
 80081f4:	69f4      	ldr	r4, [r6, #28]
 80081f6:	b97c      	cbnz	r4, 8008218 <__pow5mult+0x48>
 80081f8:	2010      	movs	r0, #16
 80081fa:	f7ff fd7f 	bl	8007cfc <malloc>
 80081fe:	4602      	mov	r2, r0
 8008200:	61f0      	str	r0, [r6, #28]
 8008202:	b928      	cbnz	r0, 8008210 <__pow5mult+0x40>
 8008204:	4b1d      	ldr	r3, [pc, #116]	; (800827c <__pow5mult+0xac>)
 8008206:	481e      	ldr	r0, [pc, #120]	; (8008280 <__pow5mult+0xb0>)
 8008208:	f240 11b3 	movw	r1, #435	; 0x1b3
 800820c:	f000 fc3a 	bl	8008a84 <__assert_func>
 8008210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008214:	6004      	str	r4, [r0, #0]
 8008216:	60c4      	str	r4, [r0, #12]
 8008218:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800821c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008220:	b94c      	cbnz	r4, 8008236 <__pow5mult+0x66>
 8008222:	f240 2171 	movw	r1, #625	; 0x271
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ff12 	bl	8008050 <__i2b>
 800822c:	2300      	movs	r3, #0
 800822e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008232:	4604      	mov	r4, r0
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	07eb      	lsls	r3, r5, #31
 800823c:	d50a      	bpl.n	8008254 <__pow5mult+0x84>
 800823e:	4639      	mov	r1, r7
 8008240:	4622      	mov	r2, r4
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ff1a 	bl	800807c <__multiply>
 8008248:	4639      	mov	r1, r7
 800824a:	4680      	mov	r8, r0
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fe49 	bl	8007ee4 <_Bfree>
 8008252:	4647      	mov	r7, r8
 8008254:	106d      	asrs	r5, r5, #1
 8008256:	d00b      	beq.n	8008270 <__pow5mult+0xa0>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	b938      	cbnz	r0, 800826c <__pow5mult+0x9c>
 800825c:	4622      	mov	r2, r4
 800825e:	4621      	mov	r1, r4
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff ff0b 	bl	800807c <__multiply>
 8008266:	6020      	str	r0, [r4, #0]
 8008268:	f8c0 9000 	str.w	r9, [r0]
 800826c:	4604      	mov	r4, r0
 800826e:	e7e4      	b.n	800823a <__pow5mult+0x6a>
 8008270:	4638      	mov	r0, r7
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	bf00      	nop
 8008278:	08008ea8 	.word	0x08008ea8
 800827c:	08008cd9 	.word	0x08008cd9
 8008280:	08008d59 	.word	0x08008d59

08008284 <__lshift>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	6849      	ldr	r1, [r1, #4]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	4607      	mov	r7, r0
 8008296:	4691      	mov	r9, r2
 8008298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800829c:	f108 0601 	add.w	r6, r8, #1
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	db0b      	blt.n	80082bc <__lshift+0x38>
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff fddd 	bl	8007e64 <_Balloc>
 80082aa:	4605      	mov	r5, r0
 80082ac:	b948      	cbnz	r0, 80082c2 <__lshift+0x3e>
 80082ae:	4602      	mov	r2, r0
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <__lshift+0xd0>)
 80082b2:	4829      	ldr	r0, [pc, #164]	; (8008358 <__lshift+0xd4>)
 80082b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082b8:	f000 fbe4 	bl	8008a84 <__assert_func>
 80082bc:	3101      	adds	r1, #1
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	e7ee      	b.n	80082a0 <__lshift+0x1c>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f100 0114 	add.w	r1, r0, #20
 80082c8:	f100 0210 	add.w	r2, r0, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	4553      	cmp	r3, sl
 80082d0:	db33      	blt.n	800833a <__lshift+0xb6>
 80082d2:	6920      	ldr	r0, [r4, #16]
 80082d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	f019 091f 	ands.w	r9, r9, #31
 80082e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082e8:	d02b      	beq.n	8008342 <__lshift+0xbe>
 80082ea:	f1c9 0e20 	rsb	lr, r9, #32
 80082ee:	468a      	mov	sl, r1
 80082f0:	2200      	movs	r2, #0
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	fa00 f009 	lsl.w	r0, r0, r9
 80082f8:	4310      	orrs	r0, r2
 80082fa:	f84a 0b04 	str.w	r0, [sl], #4
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	459c      	cmp	ip, r3
 8008304:	fa22 f20e 	lsr.w	r2, r2, lr
 8008308:	d8f3      	bhi.n	80082f2 <__lshift+0x6e>
 800830a:	ebac 0304 	sub.w	r3, ip, r4
 800830e:	3b15      	subs	r3, #21
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	3304      	adds	r3, #4
 8008316:	f104 0015 	add.w	r0, r4, #21
 800831a:	4584      	cmp	ip, r0
 800831c:	bf38      	it	cc
 800831e:	2304      	movcc	r3, #4
 8008320:	50ca      	str	r2, [r1, r3]
 8008322:	b10a      	cbz	r2, 8008328 <__lshift+0xa4>
 8008324:	f108 0602 	add.w	r6, r8, #2
 8008328:	3e01      	subs	r6, #1
 800832a:	4638      	mov	r0, r7
 800832c:	612e      	str	r6, [r5, #16]
 800832e:	4621      	mov	r1, r4
 8008330:	f7ff fdd8 	bl	8007ee4 <_Bfree>
 8008334:	4628      	mov	r0, r5
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	f842 0f04 	str.w	r0, [r2, #4]!
 800833e:	3301      	adds	r3, #1
 8008340:	e7c5      	b.n	80082ce <__lshift+0x4a>
 8008342:	3904      	subs	r1, #4
 8008344:	f853 2b04 	ldr.w	r2, [r3], #4
 8008348:	f841 2f04 	str.w	r2, [r1, #4]!
 800834c:	459c      	cmp	ip, r3
 800834e:	d8f9      	bhi.n	8008344 <__lshift+0xc0>
 8008350:	e7ea      	b.n	8008328 <__lshift+0xa4>
 8008352:	bf00      	nop
 8008354:	08008d48 	.word	0x08008d48
 8008358:	08008d59 	.word	0x08008d59

0800835c <__mcmp>:
 800835c:	b530      	push	{r4, r5, lr}
 800835e:	6902      	ldr	r2, [r0, #16]
 8008360:	690c      	ldr	r4, [r1, #16]
 8008362:	1b12      	subs	r2, r2, r4
 8008364:	d10e      	bne.n	8008384 <__mcmp+0x28>
 8008366:	f100 0314 	add.w	r3, r0, #20
 800836a:	3114      	adds	r1, #20
 800836c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800837c:	42a5      	cmp	r5, r4
 800837e:	d003      	beq.n	8008388 <__mcmp+0x2c>
 8008380:	d305      	bcc.n	800838e <__mcmp+0x32>
 8008382:	2201      	movs	r2, #1
 8008384:	4610      	mov	r0, r2
 8008386:	bd30      	pop	{r4, r5, pc}
 8008388:	4283      	cmp	r3, r0
 800838a:	d3f3      	bcc.n	8008374 <__mcmp+0x18>
 800838c:	e7fa      	b.n	8008384 <__mcmp+0x28>
 800838e:	f04f 32ff 	mov.w	r2, #4294967295
 8008392:	e7f7      	b.n	8008384 <__mcmp+0x28>

08008394 <__mdiff>:
 8008394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460c      	mov	r4, r1
 800839a:	4606      	mov	r6, r0
 800839c:	4611      	mov	r1, r2
 800839e:	4620      	mov	r0, r4
 80083a0:	4690      	mov	r8, r2
 80083a2:	f7ff ffdb 	bl	800835c <__mcmp>
 80083a6:	1e05      	subs	r5, r0, #0
 80083a8:	d110      	bne.n	80083cc <__mdiff+0x38>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff fd59 	bl	8007e64 <_Balloc>
 80083b2:	b930      	cbnz	r0, 80083c2 <__mdiff+0x2e>
 80083b4:	4b3a      	ldr	r3, [pc, #232]	; (80084a0 <__mdiff+0x10c>)
 80083b6:	4602      	mov	r2, r0
 80083b8:	f240 2137 	movw	r1, #567	; 0x237
 80083bc:	4839      	ldr	r0, [pc, #228]	; (80084a4 <__mdiff+0x110>)
 80083be:	f000 fb61 	bl	8008a84 <__assert_func>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	bfa4      	itt	ge
 80083ce:	4643      	movge	r3, r8
 80083d0:	46a0      	movge	r8, r4
 80083d2:	4630      	mov	r0, r6
 80083d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083d8:	bfa6      	itte	ge
 80083da:	461c      	movge	r4, r3
 80083dc:	2500      	movge	r5, #0
 80083de:	2501      	movlt	r5, #1
 80083e0:	f7ff fd40 	bl	8007e64 <_Balloc>
 80083e4:	b920      	cbnz	r0, 80083f0 <__mdiff+0x5c>
 80083e6:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <__mdiff+0x10c>)
 80083e8:	4602      	mov	r2, r0
 80083ea:	f240 2145 	movw	r1, #581	; 0x245
 80083ee:	e7e5      	b.n	80083bc <__mdiff+0x28>
 80083f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083f4:	6926      	ldr	r6, [r4, #16]
 80083f6:	60c5      	str	r5, [r0, #12]
 80083f8:	f104 0914 	add.w	r9, r4, #20
 80083fc:	f108 0514 	add.w	r5, r8, #20
 8008400:	f100 0e14 	add.w	lr, r0, #20
 8008404:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800840c:	f108 0210 	add.w	r2, r8, #16
 8008410:	46f2      	mov	sl, lr
 8008412:	2100      	movs	r1, #0
 8008414:	f859 3b04 	ldr.w	r3, [r9], #4
 8008418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800841c:	fa11 f88b 	uxtah	r8, r1, fp
 8008420:	b299      	uxth	r1, r3
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	eba8 0801 	sub.w	r8, r8, r1
 8008428:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800842c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008430:	fa1f f888 	uxth.w	r8, r8
 8008434:	1419      	asrs	r1, r3, #16
 8008436:	454e      	cmp	r6, r9
 8008438:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800843c:	f84a 3b04 	str.w	r3, [sl], #4
 8008440:	d8e8      	bhi.n	8008414 <__mdiff+0x80>
 8008442:	1b33      	subs	r3, r6, r4
 8008444:	3b15      	subs	r3, #21
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	3304      	adds	r3, #4
 800844c:	3415      	adds	r4, #21
 800844e:	42a6      	cmp	r6, r4
 8008450:	bf38      	it	cc
 8008452:	2304      	movcc	r3, #4
 8008454:	441d      	add	r5, r3
 8008456:	4473      	add	r3, lr
 8008458:	469e      	mov	lr, r3
 800845a:	462e      	mov	r6, r5
 800845c:	4566      	cmp	r6, ip
 800845e:	d30e      	bcc.n	800847e <__mdiff+0xea>
 8008460:	f10c 0203 	add.w	r2, ip, #3
 8008464:	1b52      	subs	r2, r2, r5
 8008466:	f022 0203 	bic.w	r2, r2, #3
 800846a:	3d03      	subs	r5, #3
 800846c:	45ac      	cmp	ip, r5
 800846e:	bf38      	it	cc
 8008470:	2200      	movcc	r2, #0
 8008472:	4413      	add	r3, r2
 8008474:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008478:	b17a      	cbz	r2, 800849a <__mdiff+0x106>
 800847a:	6107      	str	r7, [r0, #16]
 800847c:	e7a4      	b.n	80083c8 <__mdiff+0x34>
 800847e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008482:	fa11 f288 	uxtah	r2, r1, r8
 8008486:	1414      	asrs	r4, r2, #16
 8008488:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800848c:	b292      	uxth	r2, r2
 800848e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008492:	f84e 2b04 	str.w	r2, [lr], #4
 8008496:	1421      	asrs	r1, r4, #16
 8008498:	e7e0      	b.n	800845c <__mdiff+0xc8>
 800849a:	3f01      	subs	r7, #1
 800849c:	e7ea      	b.n	8008474 <__mdiff+0xe0>
 800849e:	bf00      	nop
 80084a0:	08008d48 	.word	0x08008d48
 80084a4:	08008d59 	.word	0x08008d59

080084a8 <__d2b>:
 80084a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	460f      	mov	r7, r1
 80084ae:	2101      	movs	r1, #1
 80084b0:	ec59 8b10 	vmov	r8, r9, d0
 80084b4:	4616      	mov	r6, r2
 80084b6:	f7ff fcd5 	bl	8007e64 <_Balloc>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b930      	cbnz	r0, 80084cc <__d2b+0x24>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b24      	ldr	r3, [pc, #144]	; (8008554 <__d2b+0xac>)
 80084c2:	4825      	ldr	r0, [pc, #148]	; (8008558 <__d2b+0xb0>)
 80084c4:	f240 310f 	movw	r1, #783	; 0x30f
 80084c8:	f000 fadc 	bl	8008a84 <__assert_func>
 80084cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d4:	bb2d      	cbnz	r5, 8008522 <__d2b+0x7a>
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	f1b8 0300 	subs.w	r3, r8, #0
 80084dc:	d026      	beq.n	800852c <__d2b+0x84>
 80084de:	4668      	mov	r0, sp
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	f7ff fd87 	bl	8007ff4 <__lo0bits>
 80084e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ea:	b1e8      	cbz	r0, 8008528 <__d2b+0x80>
 80084ec:	f1c0 0320 	rsb	r3, r0, #32
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	430b      	orrs	r3, r1
 80084f6:	40c2      	lsrs	r2, r0
 80084f8:	6163      	str	r3, [r4, #20]
 80084fa:	9201      	str	r2, [sp, #4]
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	61a3      	str	r3, [r4, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	bf14      	ite	ne
 8008504:	2202      	movne	r2, #2
 8008506:	2201      	moveq	r2, #1
 8008508:	6122      	str	r2, [r4, #16]
 800850a:	b1bd      	cbz	r5, 800853c <__d2b+0x94>
 800850c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008510:	4405      	add	r5, r0
 8008512:	603d      	str	r5, [r7, #0]
 8008514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008518:	6030      	str	r0, [r6, #0]
 800851a:	4620      	mov	r0, r4
 800851c:	b003      	add	sp, #12
 800851e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008526:	e7d6      	b.n	80084d6 <__d2b+0x2e>
 8008528:	6161      	str	r1, [r4, #20]
 800852a:	e7e7      	b.n	80084fc <__d2b+0x54>
 800852c:	a801      	add	r0, sp, #4
 800852e:	f7ff fd61 	bl	8007ff4 <__lo0bits>
 8008532:	9b01      	ldr	r3, [sp, #4]
 8008534:	6163      	str	r3, [r4, #20]
 8008536:	3020      	adds	r0, #32
 8008538:	2201      	movs	r2, #1
 800853a:	e7e5      	b.n	8008508 <__d2b+0x60>
 800853c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008544:	6038      	str	r0, [r7, #0]
 8008546:	6918      	ldr	r0, [r3, #16]
 8008548:	f7ff fd34 	bl	8007fb4 <__hi0bits>
 800854c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008550:	e7e2      	b.n	8008518 <__d2b+0x70>
 8008552:	bf00      	nop
 8008554:	08008d48 	.word	0x08008d48
 8008558:	08008d59 	.word	0x08008d59

0800855c <__sfputc_r>:
 800855c:	6893      	ldr	r3, [r2, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	b410      	push	{r4}
 8008564:	6093      	str	r3, [r2, #8]
 8008566:	da08      	bge.n	800857a <__sfputc_r+0x1e>
 8008568:	6994      	ldr	r4, [r2, #24]
 800856a:	42a3      	cmp	r3, r4
 800856c:	db01      	blt.n	8008572 <__sfputc_r+0x16>
 800856e:	290a      	cmp	r1, #10
 8008570:	d103      	bne.n	800857a <__sfputc_r+0x1e>
 8008572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008576:	f7fe bbe4 	b.w	8006d42 <__swbuf_r>
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	1c58      	adds	r0, r3, #1
 800857e:	6010      	str	r0, [r2, #0]
 8008580:	7019      	strb	r1, [r3, #0]
 8008582:	4608      	mov	r0, r1
 8008584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008588:	4770      	bx	lr

0800858a <__sfputs_r>:
 800858a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858c:	4606      	mov	r6, r0
 800858e:	460f      	mov	r7, r1
 8008590:	4614      	mov	r4, r2
 8008592:	18d5      	adds	r5, r2, r3
 8008594:	42ac      	cmp	r4, r5
 8008596:	d101      	bne.n	800859c <__sfputs_r+0x12>
 8008598:	2000      	movs	r0, #0
 800859a:	e007      	b.n	80085ac <__sfputs_r+0x22>
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	463a      	mov	r2, r7
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ffda 	bl	800855c <__sfputc_r>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d1f3      	bne.n	8008594 <__sfputs_r+0xa>
 80085ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085b0 <_vfiprintf_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	460d      	mov	r5, r1
 80085b6:	b09d      	sub	sp, #116	; 0x74
 80085b8:	4614      	mov	r4, r2
 80085ba:	4698      	mov	r8, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	b118      	cbz	r0, 80085c8 <_vfiprintf_r+0x18>
 80085c0:	6a03      	ldr	r3, [r0, #32]
 80085c2:	b90b      	cbnz	r3, 80085c8 <_vfiprintf_r+0x18>
 80085c4:	f7fe fad6 	bl	8006b74 <__sinit>
 80085c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ca:	07d9      	lsls	r1, r3, #31
 80085cc:	d405      	bmi.n	80085da <_vfiprintf_r+0x2a>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	059a      	lsls	r2, r3, #22
 80085d2:	d402      	bmi.n	80085da <_vfiprintf_r+0x2a>
 80085d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085d6:	f7fe fcc6 	bl	8006f66 <__retarget_lock_acquire_recursive>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	071b      	lsls	r3, r3, #28
 80085de:	d501      	bpl.n	80085e4 <_vfiprintf_r+0x34>
 80085e0:	692b      	ldr	r3, [r5, #16]
 80085e2:	b99b      	cbnz	r3, 800860c <_vfiprintf_r+0x5c>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7fe fbe8 	bl	8006dbc <__swsetup_r>
 80085ec:	b170      	cbz	r0, 800860c <_vfiprintf_r+0x5c>
 80085ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f0:	07dc      	lsls	r4, r3, #31
 80085f2:	d504      	bpl.n	80085fe <_vfiprintf_r+0x4e>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b01d      	add	sp, #116	; 0x74
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	0598      	lsls	r0, r3, #22
 8008602:	d4f7      	bmi.n	80085f4 <_vfiprintf_r+0x44>
 8008604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008606:	f7fe fcaf 	bl	8006f68 <__retarget_lock_release_recursive>
 800860a:	e7f3      	b.n	80085f4 <_vfiprintf_r+0x44>
 800860c:	2300      	movs	r3, #0
 800860e:	9309      	str	r3, [sp, #36]	; 0x24
 8008610:	2320      	movs	r3, #32
 8008612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008616:	f8cd 800c 	str.w	r8, [sp, #12]
 800861a:	2330      	movs	r3, #48	; 0x30
 800861c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80087d0 <_vfiprintf_r+0x220>
 8008620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008624:	f04f 0901 	mov.w	r9, #1
 8008628:	4623      	mov	r3, r4
 800862a:	469a      	mov	sl, r3
 800862c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008630:	b10a      	cbz	r2, 8008636 <_vfiprintf_r+0x86>
 8008632:	2a25      	cmp	r2, #37	; 0x25
 8008634:	d1f9      	bne.n	800862a <_vfiprintf_r+0x7a>
 8008636:	ebba 0b04 	subs.w	fp, sl, r4
 800863a:	d00b      	beq.n	8008654 <_vfiprintf_r+0xa4>
 800863c:	465b      	mov	r3, fp
 800863e:	4622      	mov	r2, r4
 8008640:	4629      	mov	r1, r5
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ffa1 	bl	800858a <__sfputs_r>
 8008648:	3001      	adds	r0, #1
 800864a:	f000 80a9 	beq.w	80087a0 <_vfiprintf_r+0x1f0>
 800864e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008650:	445a      	add	r2, fp
 8008652:	9209      	str	r2, [sp, #36]	; 0x24
 8008654:	f89a 3000 	ldrb.w	r3, [sl]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80a1 	beq.w	80087a0 <_vfiprintf_r+0x1f0>
 800865e:	2300      	movs	r3, #0
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008668:	f10a 0a01 	add.w	sl, sl, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008674:	931a      	str	r3, [sp, #104]	; 0x68
 8008676:	4654      	mov	r4, sl
 8008678:	2205      	movs	r2, #5
 800867a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867e:	4854      	ldr	r0, [pc, #336]	; (80087d0 <_vfiprintf_r+0x220>)
 8008680:	f7f7 fda6 	bl	80001d0 <memchr>
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	b9d8      	cbnz	r0, 80086c0 <_vfiprintf_r+0x110>
 8008688:	06d1      	lsls	r1, r2, #27
 800868a:	bf44      	itt	mi
 800868c:	2320      	movmi	r3, #32
 800868e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008692:	0713      	lsls	r3, r2, #28
 8008694:	bf44      	itt	mi
 8008696:	232b      	movmi	r3, #43	; 0x2b
 8008698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869c:	f89a 3000 	ldrb.w	r3, [sl]
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	d015      	beq.n	80086d0 <_vfiprintf_r+0x120>
 80086a4:	9a07      	ldr	r2, [sp, #28]
 80086a6:	4654      	mov	r4, sl
 80086a8:	2000      	movs	r0, #0
 80086aa:	f04f 0c0a 	mov.w	ip, #10
 80086ae:	4621      	mov	r1, r4
 80086b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b4:	3b30      	subs	r3, #48	; 0x30
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d94d      	bls.n	8008756 <_vfiprintf_r+0x1a6>
 80086ba:	b1b0      	cbz	r0, 80086ea <_vfiprintf_r+0x13a>
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	e014      	b.n	80086ea <_vfiprintf_r+0x13a>
 80086c0:	eba0 0308 	sub.w	r3, r0, r8
 80086c4:	fa09 f303 	lsl.w	r3, r9, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	46a2      	mov	sl, r4
 80086ce:	e7d2      	b.n	8008676 <_vfiprintf_r+0xc6>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	1d19      	adds	r1, r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	9103      	str	r1, [sp, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfbb      	ittet	lt
 80086dc:	425b      	neglt	r3, r3
 80086de:	f042 0202 	orrlt.w	r2, r2, #2
 80086e2:	9307      	strge	r3, [sp, #28]
 80086e4:	9307      	strlt	r3, [sp, #28]
 80086e6:	bfb8      	it	lt
 80086e8:	9204      	strlt	r2, [sp, #16]
 80086ea:	7823      	ldrb	r3, [r4, #0]
 80086ec:	2b2e      	cmp	r3, #46	; 0x2e
 80086ee:	d10c      	bne.n	800870a <_vfiprintf_r+0x15a>
 80086f0:	7863      	ldrb	r3, [r4, #1]
 80086f2:	2b2a      	cmp	r3, #42	; 0x2a
 80086f4:	d134      	bne.n	8008760 <_vfiprintf_r+0x1b0>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	f04f 33ff 	movlt.w	r3, #4294967295
 8008706:	3402      	adds	r4, #2
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087e0 <_vfiprintf_r+0x230>
 800870e:	7821      	ldrb	r1, [r4, #0]
 8008710:	2203      	movs	r2, #3
 8008712:	4650      	mov	r0, sl
 8008714:	f7f7 fd5c 	bl	80001d0 <memchr>
 8008718:	b138      	cbz	r0, 800872a <_vfiprintf_r+0x17a>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	eba0 000a 	sub.w	r0, r0, sl
 8008720:	2240      	movs	r2, #64	; 0x40
 8008722:	4082      	lsls	r2, r0
 8008724:	4313      	orrs	r3, r2
 8008726:	3401      	adds	r4, #1
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	4829      	ldr	r0, [pc, #164]	; (80087d4 <_vfiprintf_r+0x224>)
 8008730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008734:	2206      	movs	r2, #6
 8008736:	f7f7 fd4b 	bl	80001d0 <memchr>
 800873a:	2800      	cmp	r0, #0
 800873c:	d03f      	beq.n	80087be <_vfiprintf_r+0x20e>
 800873e:	4b26      	ldr	r3, [pc, #152]	; (80087d8 <_vfiprintf_r+0x228>)
 8008740:	bb1b      	cbnz	r3, 800878a <_vfiprintf_r+0x1da>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	3307      	adds	r3, #7
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	3308      	adds	r3, #8
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	443b      	add	r3, r7
 8008752:	9309      	str	r3, [sp, #36]	; 0x24
 8008754:	e768      	b.n	8008628 <_vfiprintf_r+0x78>
 8008756:	fb0c 3202 	mla	r2, ip, r2, r3
 800875a:	460c      	mov	r4, r1
 800875c:	2001      	movs	r0, #1
 800875e:	e7a6      	b.n	80086ae <_vfiprintf_r+0xfe>
 8008760:	2300      	movs	r3, #0
 8008762:	3401      	adds	r4, #1
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	4619      	mov	r1, r3
 8008768:	f04f 0c0a 	mov.w	ip, #10
 800876c:	4620      	mov	r0, r4
 800876e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008772:	3a30      	subs	r2, #48	; 0x30
 8008774:	2a09      	cmp	r2, #9
 8008776:	d903      	bls.n	8008780 <_vfiprintf_r+0x1d0>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0c6      	beq.n	800870a <_vfiprintf_r+0x15a>
 800877c:	9105      	str	r1, [sp, #20]
 800877e:	e7c4      	b.n	800870a <_vfiprintf_r+0x15a>
 8008780:	fb0c 2101 	mla	r1, ip, r1, r2
 8008784:	4604      	mov	r4, r0
 8008786:	2301      	movs	r3, #1
 8008788:	e7f0      	b.n	800876c <_vfiprintf_r+0x1bc>
 800878a:	ab03      	add	r3, sp, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	462a      	mov	r2, r5
 8008790:	4b12      	ldr	r3, [pc, #72]	; (80087dc <_vfiprintf_r+0x22c>)
 8008792:	a904      	add	r1, sp, #16
 8008794:	4630      	mov	r0, r6
 8008796:	f7fd fd9b 	bl	80062d0 <_printf_float>
 800879a:	4607      	mov	r7, r0
 800879c:	1c78      	adds	r0, r7, #1
 800879e:	d1d6      	bne.n	800874e <_vfiprintf_r+0x19e>
 80087a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x202>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x202>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f7fe fbdb 	bl	8006f68 <__retarget_lock_release_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	065b      	lsls	r3, r3, #25
 80087b6:	f53f af1d 	bmi.w	80085f4 <_vfiprintf_r+0x44>
 80087ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087bc:	e71c      	b.n	80085f8 <_vfiprintf_r+0x48>
 80087be:	ab03      	add	r3, sp, #12
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	462a      	mov	r2, r5
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <_vfiprintf_r+0x22c>)
 80087c6:	a904      	add	r1, sp, #16
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7fe f825 	bl	8006818 <_printf_i>
 80087ce:	e7e4      	b.n	800879a <_vfiprintf_r+0x1ea>
 80087d0:	08008eb4 	.word	0x08008eb4
 80087d4:	08008ebe 	.word	0x08008ebe
 80087d8:	080062d1 	.word	0x080062d1
 80087dc:	0800858b 	.word	0x0800858b
 80087e0:	08008eba 	.word	0x08008eba

080087e4 <__sflush_r>:
 80087e4:	898a      	ldrh	r2, [r1, #12]
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	0710      	lsls	r0, r2, #28
 80087ee:	460c      	mov	r4, r1
 80087f0:	d458      	bmi.n	80088a4 <__sflush_r+0xc0>
 80087f2:	684b      	ldr	r3, [r1, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc05      	bgt.n	8008804 <__sflush_r+0x20>
 80087f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dc02      	bgt.n	8008804 <__sflush_r+0x20>
 80087fe:	2000      	movs	r0, #0
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008806:	2e00      	cmp	r6, #0
 8008808:	d0f9      	beq.n	80087fe <__sflush_r+0x1a>
 800880a:	2300      	movs	r3, #0
 800880c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008810:	682f      	ldr	r7, [r5, #0]
 8008812:	6a21      	ldr	r1, [r4, #32]
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	d032      	beq.n	800887e <__sflush_r+0x9a>
 8008818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	075a      	lsls	r2, r3, #29
 800881e:	d505      	bpl.n	800882c <__sflush_r+0x48>
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	1ac0      	subs	r0, r0, r3
 8008824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008826:	b10b      	cbz	r3, 800882c <__sflush_r+0x48>
 8008828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800882a:	1ac0      	subs	r0, r0, r3
 800882c:	2300      	movs	r3, #0
 800882e:	4602      	mov	r2, r0
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	d106      	bne.n	800884c <__sflush_r+0x68>
 800883e:	6829      	ldr	r1, [r5, #0]
 8008840:	291d      	cmp	r1, #29
 8008842:	d82b      	bhi.n	800889c <__sflush_r+0xb8>
 8008844:	4a29      	ldr	r2, [pc, #164]	; (80088ec <__sflush_r+0x108>)
 8008846:	410a      	asrs	r2, r1
 8008848:	07d6      	lsls	r6, r2, #31
 800884a:	d427      	bmi.n	800889c <__sflush_r+0xb8>
 800884c:	2200      	movs	r2, #0
 800884e:	6062      	str	r2, [r4, #4]
 8008850:	04d9      	lsls	r1, r3, #19
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	d504      	bpl.n	8008862 <__sflush_r+0x7e>
 8008858:	1c42      	adds	r2, r0, #1
 800885a:	d101      	bne.n	8008860 <__sflush_r+0x7c>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b903      	cbnz	r3, 8008862 <__sflush_r+0x7e>
 8008860:	6560      	str	r0, [r4, #84]	; 0x54
 8008862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008864:	602f      	str	r7, [r5, #0]
 8008866:	2900      	cmp	r1, #0
 8008868:	d0c9      	beq.n	80087fe <__sflush_r+0x1a>
 800886a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__sflush_r+0x94>
 8008872:	4628      	mov	r0, r5
 8008874:	f7ff f9f6 	bl	8007c64 <_free_r>
 8008878:	2000      	movs	r0, #0
 800887a:	6360      	str	r0, [r4, #52]	; 0x34
 800887c:	e7c0      	b.n	8008800 <__sflush_r+0x1c>
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	1c41      	adds	r1, r0, #1
 8008886:	d1c8      	bne.n	800881a <__sflush_r+0x36>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c5      	beq.n	800881a <__sflush_r+0x36>
 800888e:	2b1d      	cmp	r3, #29
 8008890:	d001      	beq.n	8008896 <__sflush_r+0xb2>
 8008892:	2b16      	cmp	r3, #22
 8008894:	d101      	bne.n	800889a <__sflush_r+0xb6>
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	e7b1      	b.n	80087fe <__sflush_r+0x1a>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	e7ad      	b.n	8008800 <__sflush_r+0x1c>
 80088a4:	690f      	ldr	r7, [r1, #16]
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	d0a9      	beq.n	80087fe <__sflush_r+0x1a>
 80088aa:	0793      	lsls	r3, r2, #30
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	600f      	str	r7, [r1, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2300      	movne	r3, #0
 80088b8:	eba6 0807 	sub.w	r8, r6, r7
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	dd9c      	ble.n	80087fe <__sflush_r+0x1a>
 80088c4:	6a21      	ldr	r1, [r4, #32]
 80088c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088c8:	4643      	mov	r3, r8
 80088ca:	463a      	mov	r2, r7
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dc06      	bgt.n	80088e2 <__sflush_r+0xfe>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e78e      	b.n	8008800 <__sflush_r+0x1c>
 80088e2:	4407      	add	r7, r0
 80088e4:	eba8 0800 	sub.w	r8, r8, r0
 80088e8:	e7e9      	b.n	80088be <__sflush_r+0xda>
 80088ea:	bf00      	nop
 80088ec:	dfbffffe 	.word	0xdfbffffe

080088f0 <_fflush_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b913      	cbnz	r3, 8008900 <_fflush_r+0x10>
 80088fa:	2500      	movs	r5, #0
 80088fc:	4628      	mov	r0, r5
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	b118      	cbz	r0, 800890a <_fflush_r+0x1a>
 8008902:	6a03      	ldr	r3, [r0, #32]
 8008904:	b90b      	cbnz	r3, 800890a <_fflush_r+0x1a>
 8008906:	f7fe f935 	bl	8006b74 <__sinit>
 800890a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f3      	beq.n	80088fa <_fflush_r+0xa>
 8008912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008914:	07d0      	lsls	r0, r2, #31
 8008916:	d404      	bmi.n	8008922 <_fflush_r+0x32>
 8008918:	0599      	lsls	r1, r3, #22
 800891a:	d402      	bmi.n	8008922 <_fflush_r+0x32>
 800891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891e:	f7fe fb22 	bl	8006f66 <__retarget_lock_acquire_recursive>
 8008922:	4628      	mov	r0, r5
 8008924:	4621      	mov	r1, r4
 8008926:	f7ff ff5d 	bl	80087e4 <__sflush_r>
 800892a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800892c:	07da      	lsls	r2, r3, #31
 800892e:	4605      	mov	r5, r0
 8008930:	d4e4      	bmi.n	80088fc <_fflush_r+0xc>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	059b      	lsls	r3, r3, #22
 8008936:	d4e1      	bmi.n	80088fc <_fflush_r+0xc>
 8008938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893a:	f7fe fb15 	bl	8006f68 <__retarget_lock_release_recursive>
 800893e:	e7dd      	b.n	80088fc <_fflush_r+0xc>

08008940 <__swhatbuf_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	460c      	mov	r4, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	2900      	cmp	r1, #0
 800894a:	b096      	sub	sp, #88	; 0x58
 800894c:	4615      	mov	r5, r2
 800894e:	461e      	mov	r6, r3
 8008950:	da0d      	bge.n	800896e <__swhatbuf_r+0x2e>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008958:	f04f 0100 	mov.w	r1, #0
 800895c:	bf0c      	ite	eq
 800895e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008962:	2340      	movne	r3, #64	; 0x40
 8008964:	2000      	movs	r0, #0
 8008966:	6031      	str	r1, [r6, #0]
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	b016      	add	sp, #88	; 0x58
 800896c:	bd70      	pop	{r4, r5, r6, pc}
 800896e:	466a      	mov	r2, sp
 8008970:	f000 f848 	bl	8008a04 <_fstat_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	dbec      	blt.n	8008952 <__swhatbuf_r+0x12>
 8008978:	9901      	ldr	r1, [sp, #4]
 800897a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800897e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008982:	4259      	negs	r1, r3
 8008984:	4159      	adcs	r1, r3
 8008986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898a:	e7eb      	b.n	8008964 <__swhatbuf_r+0x24>

0800898c <__smakebuf_r>:
 800898c:	898b      	ldrh	r3, [r1, #12]
 800898e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008990:	079d      	lsls	r5, r3, #30
 8008992:	4606      	mov	r6, r0
 8008994:	460c      	mov	r4, r1
 8008996:	d507      	bpl.n	80089a8 <__smakebuf_r+0x1c>
 8008998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	2301      	movs	r3, #1
 80089a2:	6163      	str	r3, [r4, #20]
 80089a4:	b002      	add	sp, #8
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	ab01      	add	r3, sp, #4
 80089aa:	466a      	mov	r2, sp
 80089ac:	f7ff ffc8 	bl	8008940 <__swhatbuf_r>
 80089b0:	9900      	ldr	r1, [sp, #0]
 80089b2:	4605      	mov	r5, r0
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff f9c9 	bl	8007d4c <_malloc_r>
 80089ba:	b948      	cbnz	r0, 80089d0 <__smakebuf_r+0x44>
 80089bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c0:	059a      	lsls	r2, r3, #22
 80089c2:	d4ef      	bmi.n	80089a4 <__smakebuf_r+0x18>
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	f043 0302 	orr.w	r3, r3, #2
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e7e3      	b.n	8008998 <__smakebuf_r+0xc>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	9b00      	ldr	r3, [sp, #0]
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	6120      	str	r0, [r4, #16]
 80089e2:	b15b      	cbz	r3, 80089fc <__smakebuf_r+0x70>
 80089e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f81d 	bl	8008a28 <_isatty_r>
 80089ee:	b128      	cbz	r0, 80089fc <__smakebuf_r+0x70>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	431d      	orrs	r5, r3
 8008a00:	81a5      	strh	r5, [r4, #12]
 8008a02:	e7cf      	b.n	80089a4 <__smakebuf_r+0x18>

08008a04 <_fstat_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_fstat_r+0x20>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7f8 ff00 	bl	8001816 <_fstat>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d102      	bne.n	8008a20 <_fstat_r+0x1c>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b103      	cbz	r3, 8008a20 <_fstat_r+0x1c>
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	20000568 	.word	0x20000568

08008a28 <_isatty_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d06      	ldr	r5, [pc, #24]	; (8008a44 <_isatty_r+0x1c>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7f8 feff 	bl	8001836 <_isatty>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_isatty_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_isatty_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20000568 	.word	0x20000568

08008a48 <_sbrk_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	; (8008a64 <_sbrk_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f8 ff08 	bl	8001868 <_sbrk>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_sbrk_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_sbrk_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	20000568 	.word	0x20000568

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <__assert_func>:
 8008a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a86:	4614      	mov	r4, r2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <__assert_func+0x2c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	68d8      	ldr	r0, [r3, #12]
 8008a92:	b14c      	cbz	r4, 8008aa8 <__assert_func+0x24>
 8008a94:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <__assert_func+0x30>)
 8008a96:	9100      	str	r1, [sp, #0]
 8008a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a9c:	4906      	ldr	r1, [pc, #24]	; (8008ab8 <__assert_func+0x34>)
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	f000 f844 	bl	8008b2c <fiprintf>
 8008aa4:	f000 f854 	bl	8008b50 <abort>
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <__assert_func+0x38>)
 8008aaa:	461c      	mov	r4, r3
 8008aac:	e7f3      	b.n	8008a96 <__assert_func+0x12>
 8008aae:	bf00      	nop
 8008ab0:	2000007c 	.word	0x2000007c
 8008ab4:	08008ecf 	.word	0x08008ecf
 8008ab8:	08008edc 	.word	0x08008edc
 8008abc:	08008f0a 	.word	0x08008f0a

08008ac0 <_calloc_r>:
 8008ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ac2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ac6:	b94c      	cbnz	r4, 8008adc <_calloc_r+0x1c>
 8008ac8:	4611      	mov	r1, r2
 8008aca:	9201      	str	r2, [sp, #4]
 8008acc:	f7ff f93e 	bl	8007d4c <_malloc_r>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	b930      	cbnz	r0, 8008ae4 <_calloc_r+0x24>
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	b003      	add	sp, #12
 8008ada:	bd30      	pop	{r4, r5, pc}
 8008adc:	220c      	movs	r2, #12
 8008ade:	6002      	str	r2, [r0, #0]
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	e7f8      	b.n	8008ad6 <_calloc_r+0x16>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7fe f9c1 	bl	8006e6c <memset>
 8008aea:	e7f4      	b.n	8008ad6 <_calloc_r+0x16>

08008aec <__ascii_mbtowc>:
 8008aec:	b082      	sub	sp, #8
 8008aee:	b901      	cbnz	r1, 8008af2 <__ascii_mbtowc+0x6>
 8008af0:	a901      	add	r1, sp, #4
 8008af2:	b142      	cbz	r2, 8008b06 <__ascii_mbtowc+0x1a>
 8008af4:	b14b      	cbz	r3, 8008b0a <__ascii_mbtowc+0x1e>
 8008af6:	7813      	ldrb	r3, [r2, #0]
 8008af8:	600b      	str	r3, [r1, #0]
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	1e10      	subs	r0, r2, #0
 8008afe:	bf18      	it	ne
 8008b00:	2001      	movne	r0, #1
 8008b02:	b002      	add	sp, #8
 8008b04:	4770      	bx	lr
 8008b06:	4610      	mov	r0, r2
 8008b08:	e7fb      	b.n	8008b02 <__ascii_mbtowc+0x16>
 8008b0a:	f06f 0001 	mvn.w	r0, #1
 8008b0e:	e7f8      	b.n	8008b02 <__ascii_mbtowc+0x16>

08008b10 <__ascii_wctomb>:
 8008b10:	b149      	cbz	r1, 8008b26 <__ascii_wctomb+0x16>
 8008b12:	2aff      	cmp	r2, #255	; 0xff
 8008b14:	bf85      	ittet	hi
 8008b16:	238a      	movhi	r3, #138	; 0x8a
 8008b18:	6003      	strhi	r3, [r0, #0]
 8008b1a:	700a      	strbls	r2, [r1, #0]
 8008b1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b20:	bf98      	it	ls
 8008b22:	2001      	movls	r0, #1
 8008b24:	4770      	bx	lr
 8008b26:	4608      	mov	r0, r1
 8008b28:	4770      	bx	lr
	...

08008b2c <fiprintf>:
 8008b2c:	b40e      	push	{r1, r2, r3}
 8008b2e:	b503      	push	{r0, r1, lr}
 8008b30:	4601      	mov	r1, r0
 8008b32:	ab03      	add	r3, sp, #12
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <fiprintf+0x20>)
 8008b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3a:	6800      	ldr	r0, [r0, #0]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	f7ff fd37 	bl	80085b0 <_vfiprintf_r>
 8008b42:	b002      	add	sp, #8
 8008b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b48:	b003      	add	sp, #12
 8008b4a:	4770      	bx	lr
 8008b4c:	2000007c 	.word	0x2000007c

08008b50 <abort>:
 8008b50:	b508      	push	{r3, lr}
 8008b52:	2006      	movs	r0, #6
 8008b54:	f000 f82c 	bl	8008bb0 <raise>
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f7f8 fe0d 	bl	8001778 <_exit>

08008b5e <_raise_r>:
 8008b5e:	291f      	cmp	r1, #31
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4604      	mov	r4, r0
 8008b64:	460d      	mov	r5, r1
 8008b66:	d904      	bls.n	8008b72 <_raise_r+0x14>
 8008b68:	2316      	movs	r3, #22
 8008b6a:	6003      	str	r3, [r0, #0]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b74:	b112      	cbz	r2, 8008b7c <_raise_r+0x1e>
 8008b76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b7a:	b94b      	cbnz	r3, 8008b90 <_raise_r+0x32>
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f831 	bl	8008be4 <_getpid_r>
 8008b82:	462a      	mov	r2, r5
 8008b84:	4601      	mov	r1, r0
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8c:	f000 b818 	b.w	8008bc0 <_kill_r>
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d00a      	beq.n	8008baa <_raise_r+0x4c>
 8008b94:	1c59      	adds	r1, r3, #1
 8008b96:	d103      	bne.n	8008ba0 <_raise_r+0x42>
 8008b98:	2316      	movs	r3, #22
 8008b9a:	6003      	str	r3, [r0, #0]
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	e7e7      	b.n	8008b70 <_raise_r+0x12>
 8008ba0:	2400      	movs	r4, #0
 8008ba2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	4798      	blx	r3
 8008baa:	2000      	movs	r0, #0
 8008bac:	e7e0      	b.n	8008b70 <_raise_r+0x12>
	...

08008bb0 <raise>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <raise+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f7ff bfd2 	b.w	8008b5e <_raise_r>
 8008bba:	bf00      	nop
 8008bbc:	2000007c 	.word	0x2000007c

08008bc0 <_kill_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d07      	ldr	r5, [pc, #28]	; (8008be0 <_kill_r+0x20>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	f7f8 fdc3 	bl	8001758 <_kill>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d102      	bne.n	8008bdc <_kill_r+0x1c>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b103      	cbz	r3, 8008bdc <_kill_r+0x1c>
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	20000568 	.word	0x20000568

08008be4 <_getpid_r>:
 8008be4:	f7f8 bdb0 	b.w	8001748 <_getpid>

08008be8 <_init>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr

08008bf4 <_fini>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr
