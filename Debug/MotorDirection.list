
MotorDirection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08007c38  08007c38  00017c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800800c  0800800c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800800c  0800800c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800800c  0800800c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000002c4  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f516  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002661  00000000  00000000  0002f775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a99  00000000  00000000  00032b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002198c  00000000  00000000  00033629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012910  00000000  00000000  00054fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c51c4  00000000  00000000  000678c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000480c  00000000  00000000  0012ca8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00131298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c1c 	.word	0x08007c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08007c1c 	.word	0x08007c1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <GETVAL>:

// some extra variables working as temporary storage
int input = 0;int integration_sum = 0;

// To Get Current Count
int GETVAL(void){
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	 return SysTick->VAL;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <GETVAL+0x14>)
 8000c42:	689b      	ldr	r3, [r3, #8]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_IncTick>:
// To account for Multiple Cycles of Timer
// for more than the period of the timer
void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	i++;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_IncTick+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	6013      	str	r3, [r2, #0]
	cpt_time++;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x28>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x28>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000208 	.word	0x20000208
 8000c7c:	20000214 	.word	0x20000214

08000c80 <Timer_start_func>:


// Timer Start Function
// when called the timer starts counting
void Timer_start_func(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	  SysTick->LOAD  = 64000 - 1;                                  /* set reload register */
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <Timer_start_func+0x28>)
 8000c86:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c8a:	605a      	str	r2, [r3, #4]
	  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c92:	f7ff ffa9 	bl	8000be8 <__NVIC_SetPriority>
	  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <Timer_start_func+0x28>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <Timer_start_func+0x28>)
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	601a      	str	r2, [r3, #0]
	                   SysTick_CTRL_TICKINT_Msk   |
	                   SysTick_CTRL_ENABLE_Msk;
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <Timer_end_func>:

// Timer Count End Function
// when called the timer stops counting
void Timer_end_func(void){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	 SysTick->CTRL  = 0;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <Timer_end_func+0x1c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
	 i=0;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <Timer_end_func+0x20>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010
 8000ccc:	20000208 	.word	0x20000208

08000cd0 <pid_calculation>:

void pid_calculation(int r_speed, GPIO_TypeDef * GPIO_PORT, uint16_t GPIO_PIN)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	80fb      	strh	r3, [r7, #6]
		ref_speed = r_speed;
 8000cde:	4a5a      	ldr	r2, [pc, #360]	; (8000e48 <pid_calculation+0x178>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6013      	str	r3, [r2, #0]
	  // reads the current state of PA1
	      	// default function used
	      	if ( HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f001 fa2d 	bl	8002148 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f040 80a5 	bne.w	8000e40 <pid_calculation+0x170>
	      		while(HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){}
 8000cf6:	bf00      	nop
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	68b8      	ldr	r0, [r7, #8]
 8000cfe:	f001 fa23 	bl	8002148 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f7      	beq.n	8000cf8 <pid_calculation+0x28>

	      		if (res==0){
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <pid_calculation+0x17c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d105      	bne.n	8000d1c <pid_calculation+0x4c>
	      			// res here is a flag to see whether to start counter or to stop it
	      			Timer_start_func();
 8000d10:	f7ff ffb6 	bl	8000c80 <Timer_start_func>
	      			res=1;
 8000d14:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <pid_calculation+0x17c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
	      			//*******************************************///
	      			res=0;

	      		}
	      	}
}
 8000d1a:	e091      	b.n	8000e40 <pid_calculation+0x170>
	      		} else if (res==1){
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <pid_calculation+0x17c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	f040 808d 	bne.w	8000e40 <pid_calculation+0x170>
	      			iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000d26:	f7ff ff89 	bl	8000c3c <GETVAL>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <pid_calculation+0x180>)
 8000d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d32:	1312      	asrs	r2, r2, #12
 8000d34:	17db      	asrs	r3, r3, #31
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <pid_calculation+0x184>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a45      	ldr	r2, [pc, #276]	; (8000e58 <pid_calculation+0x188>)
 8000d42:	6013      	str	r3, [r2, #0]
	      			speed = 3000/iteration_time;
 8000d44:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <pid_calculation+0x188>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d50:	4a42      	ldr	r2, [pc, #264]	; (8000e5c <pid_calculation+0x18c>)
 8000d52:	6013      	str	r3, [r2, #0]
	      			Timer_end_func();
 8000d54:	f7ff ffaa 	bl	8000cac <Timer_end_func>
	      			if (speed < 3000) {
 8000d58:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <pid_calculation+0x18c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d60:	4293      	cmp	r3, r2
 8000d62:	dc03      	bgt.n	8000d6c <pid_calculation+0x9c>
	      				input = speed;
 8000d64:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <pid_calculation+0x18c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a3d      	ldr	r2, [pc, #244]	; (8000e60 <pid_calculation+0x190>)
 8000d6a:	6013      	str	r3, [r2, #0]
	      			current_error = ref_speed - input;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <pid_calculation+0x178>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <pid_calculation+0x190>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <pid_calculation+0x194>)
 8000d80:	edc3 7a00 	vstr	s15, [r3]
	      			integration_sum += (current_error * iteration_time);
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <pid_calculation+0x198>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <pid_calculation+0x188>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <pid_calculation+0x194>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dae:	ee17 2a90 	vmov	r2, s15
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <pid_calculation+0x198>)
 8000db4:	601a      	str	r2, [r3, #0]
	      			duty = KP * current_error + KI * integration_sum + KD * 1000 * (current_error -previous_error)/iteration_time;
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <pid_calculation+0x19c>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <pid_calculation+0x194>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <pid_calculation+0x1a0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <pid_calculation+0x198>)
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <pid_calculation+0x1a4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <pid_calculation+0x194>)
 8000df4:	ed93 6a00 	vldr	s12, [r3]
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <pid_calculation+0x1a8>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e02:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <pid_calculation+0x188>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e12:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <pid_calculation+0x1ac>)
 8000e1c:	edc3 7a00 	vstr	s15, [r3]
	      			TIM1->CCR1=duty;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <pid_calculation+0x1ac>)
 8000e22:	edd3 7a00 	vldr	s15, [r3]
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <pid_calculation+0x1b0>)
 8000e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e2c:	ee17 2a90 	vmov	r2, s15
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
	      			previous_error = current_error;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <pid_calculation+0x194>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <pid_calculation+0x1a8>)
 8000e38:	6013      	str	r3, [r2, #0]
	      			res=0;
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <pid_calculation+0x17c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000218 	.word	0x20000218
 8000e4c:	20000210 	.word	0x20000210
 8000e50:	10624dd3 	.word	0x10624dd3
 8000e54:	20000208 	.word	0x20000208
 8000e58:	20000220 	.word	0x20000220
 8000e5c:	2000020c 	.word	0x2000020c
 8000e60:	2000022c 	.word	0x2000022c
 8000e64:	20000228 	.word	0x20000228
 8000e68:	20000230 	.word	0x20000230
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000224 	.word	0x20000224
 8000e7c:	2000021c 	.word	0x2000021c
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x134>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	21cc      	movs	r1, #204	; 0xcc
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000f18:	f001 f92e 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f001 f928 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SPEED_SENSORM1_Pin|SPEED_SENSORM2_Pin;
 8000f28:	f242 0330 	movw	r3, #8240	; 0x2030
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481f      	ldr	r0, [pc, #124]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000f40:	f000 ff90 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin;
 8000f44:	23cc      	movs	r3, #204	; 0xcc
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4818      	ldr	r0, [pc, #96]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000f5c:	f000 ff82 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f60:	2320      	movs	r3, #32
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f000 ff73 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR5_Pin|IR1_Pin|IR2_Pin|IR3_Pin;
 8000f7e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <MX_GPIO_Init+0x138>)
 8000f94:	f000 ff66 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR4_Pin;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000fac:	f000 ff5a 	bl	8001e64 <HAL_GPIO_Init>

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00

08000fc4 <motor_control>:
	int actives = 0;



	void motor_control (double pos_right, double pos_left)
	{
 8000fc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fd0:	ed87 1b00 	vstr	d1, [r7]
		if (pos_left < 0 )
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe0:	f7ff fd7c 	bl	8000adc <__aeabi_dcmplt>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d017      	beq.n	800101a <motor_control+0x56>
		{
			left_motor_control(-(ARR*pos_left), 0);
 8000fea:	2301      	movs	r3, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa99 	bl	8000524 <__aeabi_i2d>
 8000ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff6:	f7ff faff 	bl	80005f8 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4690      	mov	r8, r2
 8001000:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001004:	4640      	mov	r0, r8
 8001006:	4649      	mov	r1, r9
 8001008:	f7ff fdce 	bl	8000ba8 <__aeabi_d2uiz>
 800100c:	4603      	mov	r3, r0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fab2 	bl	800157c <left_motor_control>
 8001018:	e013      	b.n	8001042 <motor_control+0x7e>
		}
		else
		{
			left_motor_control(ARR*pos_left, 1);
 800101a:	2301      	movs	r3, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa81 	bl	8000524 <__aeabi_i2d>
 8001022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001026:	f7ff fae7 	bl	80005f8 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fdb9 	bl	8000ba8 <__aeabi_d2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fa9d 	bl	800157c <left_motor_control>
		}
		if (pos_right < 0 )
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800104e:	f7ff fd45 	bl	8000adc <__aeabi_dcmplt>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <motor_control+0xc4>
		{
			right_motor_control(-(ARR*pos_right), 0);
 8001058:	2301      	movs	r3, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa62 	bl	8000524 <__aeabi_i2d>
 8001060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001064:	f7ff fac8 	bl	80005f8 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4614      	mov	r4, r2
 800106e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fd97 	bl	8000ba8 <__aeabi_d2uiz>
 800107a:	4603      	mov	r3, r0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f000 faa7 	bl	80015d4 <right_motor_control>
		}
		else
		{
			right_motor_control(ARR*pos_right, 1);
		}
	}
 8001086:	e013      	b.n	80010b0 <motor_control+0xec>
			right_motor_control(ARR*pos_right, 1);
 8001088:	2301      	movs	r3, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa4a 	bl	8000524 <__aeabi_i2d>
 8001090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd82 	bl	8000ba8 <__aeabi_d2uiz>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fa92 	bl	80015d4 <right_motor_control>
	}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080010bc <sensors5_read>:
				motor_control(70, -53);
		}
	}

	int sensors5_read ()
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

		sensor_read = 0x00000;
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <sensors5_read+0x130>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		int pos = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
	  int active = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]

		if (HAL_GPIO_ReadPin(IR1_GPIO_Port, IR1_Pin)) {
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4846      	ldr	r0, [pc, #280]	; (80011f0 <sensors5_read+0x134>)
 80010d6:	f001 f837 	bl	8002148 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <sensors5_read+0x44>
			sensor_read |= 0x00000001;
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <sensors5_read+0x130>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	4a40      	ldr	r2, [pc, #256]	; (80011ec <sensors5_read+0x130>)
 80010ea:	6013      	str	r3, [r2, #0]
			pos += 1000;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010f2:	607b      	str	r3, [r7, #4]
	    active++;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	603b      	str	r3, [r7, #0]
			last_end = 1;
 80010fa:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <sensors5_read+0x138>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(IR2_GPIO_Port, IR2_Pin)) {
 8001100:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001104:	483a      	ldr	r0, [pc, #232]	; (80011f0 <sensors5_read+0x134>)
 8001106:	f001 f81f 	bl	8002148 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00c      	beq.n	800112a <sensors5_read+0x6e>
			sensor_read |= 0x00000010;
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <sensors5_read+0x130>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	4a34      	ldr	r2, [pc, #208]	; (80011ec <sensors5_read+0x130>)
 800111a:	6013      	str	r3, [r2, #0]
			pos += 2000;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001122:	607b      	str	r3, [r7, #4]
	    active++;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	603b      	str	r3, [r7, #0]
	  }
		if (HAL_GPIO_ReadPin(IR3_GPIO_Port, IR3_Pin)) {
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	4830      	ldr	r0, [pc, #192]	; (80011f0 <sensors5_read+0x134>)
 8001130:	f001 f80a 	bl	8002148 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <sensors5_read+0x98>
			sensor_read |= 0x00000100;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <sensors5_read+0x130>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <sensors5_read+0x130>)
 8001144:	6013      	str	r3, [r2, #0]
			pos += 3000;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800114c:	607b      	str	r3, [r7, #4]
	    active++;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
	  }
		if (HAL_GPIO_ReadPin(IR4_GPIO_Port, IR4_Pin)) {
 8001154:	2104      	movs	r1, #4
 8001156:	4828      	ldr	r0, [pc, #160]	; (80011f8 <sensors5_read+0x13c>)
 8001158:	f000 fff6 	bl	8002148 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <sensors5_read+0xc0>
			sensor_read |= 0x00001000;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <sensors5_read+0x130>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <sensors5_read+0x130>)
 800116c:	6013      	str	r3, [r2, #0]
			pos += 4000;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001174:	607b      	str	r3, [r7, #4]
	    active++;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
	  }
		if (HAL_GPIO_ReadPin(IR5_GPIO_Port, IR5_Pin)) {
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	481b      	ldr	r0, [pc, #108]	; (80011f0 <sensors5_read+0x134>)
 8001182:	f000 ffe1 	bl	8002148 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d010      	beq.n	80011ae <sensors5_read+0xf2>
			sensor_read |= 0x00010000;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <sensors5_read+0x130>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <sensors5_read+0x130>)
 8001196:	6013      	str	r3, [r2, #0]
			pos += 5000;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800119e:	3308      	adds	r3, #8
 80011a0:	607b      	str	r3, [r7, #4]
	    active++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	603b      	str	r3, [r7, #0]
	    last_end = 0;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <sensors5_read+0x138>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
	  }


	  actives = active;
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <sensors5_read+0x140>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6013      	str	r3, [r2, #0]
		position = pos/active;
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <sensors5_read+0x144>)
 80011be:	6013      	str	r3, [r2, #0]

		if (actives == 0)
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <sensors5_read+0x140>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <sensors5_read+0x118>
			last_idle++;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <sensors5_read+0x148>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <sensors5_read+0x148>)
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e002      	b.n	80011da <sensors5_read+0x11e>
		else
			last_idle = 0;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <sensors5_read+0x148>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

		return pos/active;
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	fb92 f3f3 	sdiv	r3, r2, r3
	}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000234 	.word	0x20000234
 80011f0:	48000800 	.word	0x48000800
 80011f4:	2000027c 	.word	0x2000027c
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	20000284 	.word	0x20000284
 8001200:	20000238 	.word	0x20000238
 8001204:	20000280 	.word	0x20000280

08001208 <forward_brake>:

	void forward_brake(int pos_right, int pos_left)
	{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
		if (actives == 0)
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <forward_brake+0x3c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00f      	beq.n	800123a <forward_brake+0x32>
			;
			//sharp_turn();
		else
		  motor_control(pos_right, pos_left);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff f982 	bl	8000524 <__aeabi_i2d>
 8001220:	4604      	mov	r4, r0
 8001222:	460d      	mov	r5, r1
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f97d 	bl	8000524 <__aeabi_i2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b11 	vmov	d1, r2, r3
 8001232:	ec45 4b10 	vmov	d0, r4, r5
 8001236:	f7ff fec5 	bl	8000fc4 <motor_control>
	}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	20000284 	.word	0x20000284

08001248 <past_errors>:

	void past_errors (int error)
	{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	  for (int i = 9; i > 0; i--)
 8001250:	2309      	movs	r3, #9
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e00b      	b.n	800126e <past_errors+0x26>
	      errors[i] = errors[i-1];
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3b01      	subs	r3, #1
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <past_errors+0x40>)
 800125c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001260:	4909      	ldr	r1, [pc, #36]	; (8001288 <past_errors+0x40>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = 9; i > 0; i--)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3b01      	subs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dcf0      	bgt.n	8001256 <past_errors+0xe>
	  errors[0] = error;
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <past_errors+0x40>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
	}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000254 	.word	0x20000254

0800128c <errors_sum>:

	int errors_sum (int index, int abs)
	{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	  int sum = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < index; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e021      	b.n	80012e4 <errors_sum+0x58>
	  {
	    if (abs == 1 & errors[i] < 0)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4913      	ldr	r1, [pc, #76]	; (80012fc <errors_sum+0x70>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b4:	0fdb      	lsrs	r3, r3, #31
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <errors_sum+0x44>
	      sum += -errors[i];
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <errors_sum+0x70>)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	e006      	b.n	80012de <errors_sum+0x52>
	    else
	      sum += errors[i];
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <errors_sum+0x70>)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < index; i++)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbd9      	blt.n	80012a0 <errors_sum+0x14>
	  }
	  return sum;
 80012ec:	68fb      	ldr	r3, [r7, #12]
	}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000254 	.word	0x20000254

08001300 <PID_control>:

	void PID_control() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
		uint16_t position = sensors5_read();
 8001306:	f7ff fed9 	bl	80010bc <sensors5_read>
 800130a:	4603      	mov	r3, r0
 800130c:	81fb      	strh	r3, [r7, #14]
	  int error = 3000 - position;
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001314:	3308      	adds	r3, #8
 8001316:	60bb      	str	r3, [r7, #8]
		past_errors(error);
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	f7ff ff95 	bl	8001248 <past_errors>

	  P = error;
 800131e:	4a4b      	ldr	r2, [pc, #300]	; (800144c <PID_control+0x14c>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	6013      	str	r3, [r2, #0]
	  I = errors_sum(5, 0);
 8001324:	2100      	movs	r1, #0
 8001326:	2005      	movs	r0, #5
 8001328:	f7ff ffb0 	bl	800128c <errors_sum>
 800132c:	4603      	mov	r3, r0
 800132e:	4a48      	ldr	r2, [pc, #288]	; (8001450 <PID_control+0x150>)
 8001330:	6013      	str	r3, [r2, #0]
	  D = error - lastError;
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <PID_control+0x154>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <PID_control+0x158>)
 800133c:	6013      	str	r3, [r2, #0]
	  R = errors_sum(5, 1);
 800133e:	2101      	movs	r1, #1
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff ffa3 	bl	800128c <errors_sum>
 8001346:	4603      	mov	r3, r0
 8001348:	4a44      	ldr	r2, [pc, #272]	; (800145c <PID_control+0x15c>)
 800134a:	6013      	str	r3, [r2, #0]
	  lastError = error;
 800134c:	4a41      	ldr	r2, [pc, #260]	; (8001454 <PID_control+0x154>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	6013      	str	r3, [r2, #0]

	  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <PID_control+0x14c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135e:	4b40      	ldr	r3, [pc, #256]	; (8001460 <PID_control+0x160>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <PID_control+0x150>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <PID_control+0x164>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <PID_control+0x158>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <PID_control+0x168>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	607b      	str	r3, [r7, #4]

	  int motorspeedl = basespeedl + motorspeed - R*Kr;
 80013a6:	238e      	movs	r3, #142	; 0x8e
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <PID_control+0x15c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <PID_control+0x16c>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 3a90 	vmov	r3, s15
 80013d8:	617b      	str	r3, [r7, #20]
	  int motorspeedr = basespeedr - motorspeed - R*Kr;
 80013da:	238e      	movs	r3, #142	; 0x8e
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <PID_control+0x15c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <PID_control+0x16c>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	613b      	str	r3, [r7, #16]

	  if (motorspeedl > maxspeedl)
 800140e:	2396      	movs	r3, #150	; 0x96
 8001410:	461a      	mov	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4293      	cmp	r3, r2
 8001416:	dd01      	ble.n	800141c <PID_control+0x11c>
	    motorspeedl = maxspeedl;
 8001418:	2396      	movs	r3, #150	; 0x96
 800141a:	617b      	str	r3, [r7, #20]
	  if (motorspeedr > maxspeedr)
 800141c:	2396      	movs	r3, #150	; 0x96
 800141e:	461a      	mov	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4293      	cmp	r3, r2
 8001424:	dd01      	ble.n	800142a <PID_control+0x12a>
	    motorspeedr = maxspeedr;
 8001426:	2396      	movs	r3, #150	; 0x96
 8001428:	613b      	str	r3, [r7, #16]

	  printf("motorspeedR=%d\r\n",motorspeedr);
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <PID_control+0x170>)
 800142e:	f004 fc4d 	bl	8005ccc <iprintf>
	  printf("motorspeedL=%d\r\n",motorspeedl);
 8001432:	6979      	ldr	r1, [r7, #20]
 8001434:	480f      	ldr	r0, [pc, #60]	; (8001474 <PID_control+0x174>)
 8001436:	f004 fc49 	bl	8005ccc <iprintf>
	  forward_brake(motorspeedr, motorspeedl);
 800143a:	6979      	ldr	r1, [r7, #20]
 800143c:	6938      	ldr	r0, [r7, #16]
 800143e:	f7ff fee3 	bl	8001208 <forward_brake>
	}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000240 	.word	0x20000240
 8001450:	20000244 	.word	0x20000244
 8001454:	20000250 	.word	0x20000250
 8001458:	20000248 	.word	0x20000248
 800145c:	2000024c 	.word	0x2000024c
 8001460:	2000000c 	.word	0x2000000c
 8001464:	20000010 	.word	0x20000010
 8001468:	20000014 	.word	0x20000014
 800146c:	2000023c 	.word	0x2000023c
 8001470:	08007c38 	.word	0x08007c38
 8001474:	08007c4c 	.word	0x08007c4c

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fbba 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f809 	bl	8001496 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fcfe 	bl	8000e84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001488:	f000 fb18 	bl	8001abc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800148c:	f000 f9f4 	bl	8001878 <MX_TIM1_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 PID_control();
 8001490:	f7ff ff36 	bl	8001300 <PID_control>
  {
 8001494:	e7fc      	b.n	8001490 <main+0x18>

08001496 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b096      	sub	sp, #88	; 0x58
 800149a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a0:	2228      	movs	r2, #40	; 0x28
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fc66 	bl	8005d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	2302      	movs	r3, #2
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014dc:	2300      	movs	r3, #0
 80014de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fe5c 	bl	80021a8 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x64>
  {
    Error_Handler();
 80014f6:	f000 f83b 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2102      	movs	r1, #2
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fe84 	bl	8003224 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001522:	f000 f825 	bl	8001570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4618      	mov	r0, r3
 8001534:	f002 f8ac 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800153e:	f000 f817 	bl	8001570 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3758      	adds	r7, #88	; 0x58
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001554:	1d39      	adds	r1, r7, #4
 8001556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155a:	2201      	movs	r2, #1
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <__io_putchar+0x20>)
 800155e:	f003 fab7 	bl	8004ad0 <HAL_UART_Transmit>

  return ch;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002d8 	.word	0x200002d8

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <left_motor_control>:
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}

void left_motor_control(uint8_t speed, uint8_t sens)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim1);
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <left_motor_control+0x50>)
 800158e:	f002 fa0d 	bl	80039ac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001592:	2100      	movs	r1, #0
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <left_motor_control+0x50>)
 8001596:	f002 fabf 	bl	8003b18 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(SENS1_M1_GPIO_Port, SENS1_M1_Pin, sens);
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	461a      	mov	r2, r3
 800159e:	2104      	movs	r1, #4
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <left_motor_control+0x54>)
 80015a2:	f000 fde9 	bl	8002178 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENS2_M1_GPIO_Port, SENS2_M1_Pin, (sens^1));
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	2108      	movs	r1, #8
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <left_motor_control+0x54>)
 80015b4:	f000 fde0 	bl	8002178 <HAL_GPIO_WritePin>

	pid_calculation(speed, SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2210      	movs	r2, #16
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <left_motor_control+0x54>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb86 	bl	8000cd0 <pid_calculation>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000028c 	.word	0x2000028c
 80015d0:	48000800 	.word	0x48000800

080015d4 <right_motor_control>:

void right_motor_control(uint8_t speed, uint8_t sens)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim1);
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <right_motor_control+0x50>)
 80015e6:	f002 f9e1 	bl	80039ac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015ea:	2104      	movs	r1, #4
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <right_motor_control+0x50>)
 80015ee:	f002 fa93 	bl	8003b18 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(SENS1_M2_GPIO_Port, SENS1_M2_Pin, sens);
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	461a      	mov	r2, r3
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <right_motor_control+0x54>)
 80015fa:	f000 fdbd 	bl	8002178 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENS2_M2_GPIO_Port, SENS2_M2_Pin, (sens^1));
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	f083 0301 	eor.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <right_motor_control+0x54>)
 800160c:	f000 fdb4 	bl	8002178 <HAL_GPIO_WritePin>

	pid_calculation(speed, SPEED_SENSORM2_GPIO_Port, SPEED_SENSORM2_Pin);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2220      	movs	r2, #32
 8001614:	4904      	ldr	r1, [pc, #16]	; (8001628 <right_motor_control+0x54>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb5a 	bl	8000cd0 <pid_calculation>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000028c 	.word	0x2000028c
 8001628:	48000800 	.word	0x48000800

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x44>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x44>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x44>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x44>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x44>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x44>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001662:	2007      	movs	r0, #7
 8001664:	f000 fbca 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f7ff fac8 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_kill>:

int _kill(int pid, int sig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016e2:	f004 fb9b 	bl	8005e1c <__errno>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2216      	movs	r2, #22
 80016ea:	601a      	str	r2, [r3, #0]
  return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_exit>:

void _exit (int status)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffe7 	bl	80016d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800170a:	e7fe      	b.n	800170a <_exit+0x12>

0800170c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e00a      	b.n	8001734 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800171e:	f3af 8000 	nop.w
 8001722:	4601      	mov	r1, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf0      	blt.n	800171e <_read+0x12>
  }

  return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e009      	b.n	800176c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fef3 	bl	800154c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf1      	blt.n	8001758 <_write+0x12>
  }
  return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_close>:

int _close(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a6:	605a      	str	r2, [r3, #4]
  return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f004 fb00 	bl	8005e1c <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20003000 	.word	0x20003000
 8001848:	00000400 	.word	0x00000400
 800184c:	20000288 	.word	0x20000288
 8001850:	200004b0 	.word	0x200004b0

08001854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09a      	sub	sp, #104	; 0x68
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	615a      	str	r2, [r3, #20]
 80018aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	222c      	movs	r2, #44	; 0x2c
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 fa5f 	bl	8005d76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b8:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018ba:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <MX_TIM1_Init+0x190>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018c0:	f240 227f 	movw	r2, #639	; 0x27f
 80018c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80018d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e6:	4847      	ldr	r0, [pc, #284]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80018e8:	f002 f808 	bl	80038fc <HAL_TIM_Base_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80018f2:	f7ff fe3d 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001900:	4619      	mov	r1, r3
 8001902:	4840      	ldr	r0, [pc, #256]	; (8001a04 <MX_TIM1_Init+0x18c>)
 8001904:	f002 fb08 	bl	8003f18 <HAL_TIM_ConfigClockSource>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800190e:	f7ff fe2f 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001912:	483c      	ldr	r0, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x18c>)
 8001914:	f002 f89e 	bl	8003a54 <HAL_TIM_PWM_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800191e:	f7ff fe27 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800192e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001932:	4619      	mov	r1, r3
 8001934:	4833      	ldr	r0, [pc, #204]	; (8001a04 <MX_TIM1_Init+0x18c>)
 8001936:	f002 ff97 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001940:	f7ff fe16 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	; 0x60
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1999;
 8001948:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4826      	ldr	r0, [pc, #152]	; (8001a04 <MX_TIM1_Init+0x18c>)
 800196c:	f002 f9c0 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001976:	f7ff fdfb 	bl	8001570 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_TIM1_Init+0x18c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM1_Init+0x18c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198e:	2204      	movs	r2, #4
 8001990:	4619      	mov	r1, r3
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <MX_TIM1_Init+0x18c>)
 8001994:	f002 f9ac 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800199e:	f7ff fde7 	bl	8001570 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80019e8:	f002 ffac 	bl	8004944 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 80019f2:	f7ff fdbd 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM1_Init+0x18c>)
 80019f8:	f000 f828 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3768      	adds	r7, #104	; 0x68
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000028c 	.word	0x2000028c
 8001a08:	40012c00 	.word	0x40012c00

08001a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_TIM_Base_MspInit+0x38>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10b      	bne.n	8001a36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_TIM_Base_MspInit+0x3c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_TIM_Base_MspInit+0x3c>)
 8001a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_TIM_MspPostInit+0x64>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a78:	6153      	str	r3, [r2, #20]
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_TIM_MspPostInit+0x68>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 8001a86:	2303      	movs	r3, #3
 8001a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa2:	f000 f9df 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48000800 	.word	0x48000800

08001abc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <MX_USART2_UART_Init+0x5c>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_USART2_UART_Init+0x58>)
 8001b00:	f002 ff98 	bl	8004a34 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b0a:	f7ff fd31 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002d8 	.word	0x200002d8
 8001b18:	40004400 	.word	0x40004400

08001b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x7c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d128      	bne.n	8001b90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6153      	str	r3, [r2, #20]
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f000 f96a 	bl	8001e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba4:	f7ff fe56 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f004 f92b 	bl	8005e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd2:	f7ff fc51 	bl	8001478 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bd8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001be4:	08008014 	.word	0x08008014
  ldr r2, =_sbss
 8001be8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001bec:	200004b0 	.word	0x200004b0

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f8f9 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd0c 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f903 	bl	8001e4a <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f8d9 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000018 	.word	0x20000018
 8001c78:	20000020 	.word	0x20000020
 8001c7c:	2000001c 	.word	0x2000001c

08001c80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000360 	.word	0x20000360

08001c98 <__NVIC_SetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_SetPriority>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff47 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff5c 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffb0 	bl	8001db8 <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e14e      	b.n	8002112 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8140 	beq.w	800210c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d005      	beq.n	8001ea4 <HAL_GPIO_Init+0x40>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eda:	2201      	movs	r2, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0201 	and.w	r2, r3, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d017      	beq.n	8001f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d123      	bne.n	8001f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	6939      	ldr	r1, [r7, #16]
 8001f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 809a 	beq.w	800210c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd8:	4b55      	ldr	r3, [pc, #340]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a54      	ldr	r2, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff0:	4a50      	ldr	r2, [pc, #320]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_Init+0x1e0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_GPIO_Init+0x2d4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_Init+0x1dc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a45      	ldr	r2, [pc, #276]	; (800213c <HAL_GPIO_Init+0x2d8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0x1d8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a44      	ldr	r2, [pc, #272]	; (8002140 <HAL_GPIO_Init+0x2dc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_Init+0x1d4>
 8002034:	2303      	movs	r3, #3
 8002036:	e006      	b.n	8002046 <HAL_GPIO_Init+0x1e2>
 8002038:	2305      	movs	r3, #5
 800203a:	e004      	b.n	8002046 <HAL_GPIO_Init+0x1e2>
 800203c:	2302      	movs	r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x1e2>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_GPIO_Init+0x1e2>
 8002044:	2300      	movs	r3, #0
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	4093      	lsls	r3, r2
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002056:	4937      	ldr	r1, [pc, #220]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002088:	4a2e      	ldr	r2, [pc, #184]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020b2:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_GPIO_Init+0x2e0>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	f47f aea9 	bne.w	8001e74 <HAL_GPIO_Init+0x10>
  }
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000
 8002134:	40010000 	.word	0x40010000
 8002138:	48000400 	.word	0x48000400
 800213c:	48000800 	.word	0x48000800
 8002140:	48000c00 	.word	0x48000c00
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e001      	b.n	800216a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002194:	e002      	b.n	800219c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f001 b823 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 817d 	beq.w	80024de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021e4:	4bbc      	ldr	r3, [pc, #752]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4bb9      	ldr	r3, [pc, #740]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d15c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x10e>
 80021fc:	4bb6      	ldr	r3, [pc, #728]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d155      	bne.n	80022b6 <HAL_RCC_OscConfig+0x10e>
 800220a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x94>
 8002236:	4ba8      	ldr	r3, [pc, #672]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e015      	b.n	8002268 <HAL_RCC_OscConfig+0xc0>
 800223c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002240:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002254:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002258:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002264:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800226c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002270:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800227c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 811f 	beq.w	80024dc <HAL_RCC_OscConfig+0x334>
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 8116 	bne.w	80024dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f000 bfaf 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12e>
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a82      	ldr	r2, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e036      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x158>
 80022e6:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7b      	ldr	r2, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a78      	ldr	r2, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e021      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x184>
 8002312:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6d      	ldr	r2, [pc, #436]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a69      	ldr	r2, [pc, #420]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f023 020f 	bic.w	r2, r3, #15
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	495f      	ldr	r1, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800235a:	4313      	orrs	r3, r2
 800235c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d059      	beq.n	8002422 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fc87 	bl	8001c80 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fc82 	bl	8001c80 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d902      	bls.n	800238e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f000 bf43 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800238e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002392:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x218>
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	e015      	b.n	80023ec <HAL_RCC_OscConfig+0x244>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002400:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ab      	beq.n	8002378 <HAL_RCC_OscConfig+0x1d0>
 8002420:	e05d      	b.n	80024de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fc2d 	bl	8001c80 <HAL_GetTick>
 8002426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff fc28 	bl	8001c80 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d902      	bls.n	8002442 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	f000 bee9 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002446:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002456:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_RCC_OscConfig+0x2cc>
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x2f8>
 8002474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002478:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002490:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024ac:	fa92 f2a2 	rbit	r2, r2
 80024b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ab      	bne.n	800242c <HAL_RCC_OscConfig+0x284>
 80024d4:	e003      	b.n	80024de <HAL_RCC_OscConfig+0x336>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 817d 	beq.w	80027ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024f4:	4ba6      	ldr	r3, [pc, #664]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002500:	4ba3      	ldr	r3, [pc, #652]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d172      	bne.n	80025f2 <HAL_RCC_OscConfig+0x44a>
 800250c:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d16c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x44a>
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800252a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_RCC_OscConfig+0x3a0>
 8002542:	4b93      	ldr	r3, [pc, #588]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	e013      	b.n	8002570 <HAL_RCC_OscConfig+0x3c8>
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002560:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800256c:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2202      	movs	r2, #2
 8002572:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002576:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002582:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x410>
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f000 be2e 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b75      	ldr	r3, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	21f8      	movs	r1, #248	; 0xf8
 80025ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025d6:	fa91 f1a1 	rbit	r1, r1
 80025da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025e2:	fab1 f181 	clz	r1, r1
 80025e6:	b2c9      	uxtb	r1, r1
 80025e8:	408b      	lsls	r3, r1
 80025ea:	4969      	ldr	r1, [pc, #420]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	e0fd      	b.n	80027ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8088 	beq.w	8002714 <HAL_RCC_OscConfig+0x56c>
 8002604:	2301      	movs	r3, #1
 8002606:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002616:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2301      	movs	r3, #1
 800262e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fb26 	bl	8001c80 <HAL_GetTick>
 8002634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fb21 	bl	8001c80 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	f000 bde2 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002662:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d8>
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x500>
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002698:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0af      	beq.n	800263a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	21f8      	movs	r1, #248	; 0xf8
 80026f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026f8:	fa91 f1a1 	rbit	r1, r1
 80026fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002700:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002704:	fab1 f181 	clz	r1, r1
 8002708:	b2c9      	uxtb	r1, r1
 800270a:	408b      	lsls	r3, r1
 800270c:	4920      	ldr	r1, [pc, #128]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
 8002712:	e06c      	b.n	80027ee <HAL_RCC_OscConfig+0x646>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002726:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fa9e 	bl	8001c80 <HAL_GetTick>
 8002744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fa99 	bl	8001c80 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	f000 bd5a 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d104      	bne.n	8002794 <HAL_RCC_OscConfig+0x5ec>
 800278a:	4b01      	ldr	r3, [pc, #4]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x614>
 8002790:	40021000 	.word	0x40021000
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027b8:	4bc8      	ldr	r3, [pc, #800]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2202      	movs	r2, #2
 80027be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027d2:	fab2 f282 	clz	r2, r2
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f042 0220 	orr.w	r2, r2, #32
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f002 021f 	and.w	r2, r2, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ad      	bne.n	800274a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8110 	beq.w	8002a24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d079      	beq.n	8002908 <HAL_RCC_OscConfig+0x760>
 8002814:	2301      	movs	r3, #1
 8002816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4bab      	ldr	r3, [pc, #684]	; (8002ae0 <HAL_RCC_OscConfig+0x938>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2301      	movs	r3, #1
 800283c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fa1f 	bl	8001c80 <HAL_GetTick>
 8002842:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff fa1a 	bl	8001c80 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d902      	bls.n	800285e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	f000 bcdb 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002878:	2202      	movs	r2, #2
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028c4:	2102      	movs	r1, #2
 80028c6:	6019      	str	r1, [r3, #0]
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f1a3 	rbit	r1, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028de:	6019      	str	r1, [r3, #0]
  return result;
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2101      	movs	r1, #1
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0a0      	beq.n	8002848 <HAL_RCC_OscConfig+0x6a0>
 8002906:	e08d      	b.n	8002a24 <HAL_RCC_OscConfig+0x87c>
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800292a:	601a      	str	r2, [r3, #0]
  return result;
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002934:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_OscConfig+0x938>)
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	461a      	mov	r2, r3
 8002946:	2300      	movs	r3, #0
 8002948:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff f999 	bl	8001c80 <HAL_GetTick>
 800294e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff f994 	bl	8001c80 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f000 bc55 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029ba:	2202      	movs	r2, #2
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80029d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029e2:	2102      	movs	r1, #2
 80029e4:	6019      	str	r1, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f1a3 	rbit	r1, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029fc:	6019      	str	r1, [r3, #0]
  return result;
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d197      	bne.n	8002954 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 81a1 	beq.w	8002d7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff f8f5 	bl	8001c80 <HAL_GetTick>
 8002a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7ff f8f0 	bl	8001c80 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e3b1      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ef      	beq.n	8002a9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x940>
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a02      	ldr	r2, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e03c      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	10908120 	.word	0x10908120
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x96a>
 8002af8:	4bc1      	ldr	r3, [pc, #772]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4ac0      	ldr	r2, [pc, #768]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4bbe      	ldr	r3, [pc, #760]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4abd      	ldr	r2, [pc, #756]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e020      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x994>
 8002b22:	4bb7      	ldr	r3, [pc, #732]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4ab6      	ldr	r2, [pc, #728]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4bb4      	ldr	r3, [pc, #720]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4ab3      	ldr	r2, [pc, #716]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002b3c:	4bb0      	ldr	r3, [pc, #704]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4aaf      	ldr	r2, [pc, #700]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4bad      	ldr	r3, [pc, #692]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4aac      	ldr	r2, [pc, #688]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8081 	beq.w	8002c68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7ff f88b 	bl	8001c80 <HAL_GetTick>
 8002b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7ff f886 	bl	8001c80 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e345      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bce:	601a      	str	r2, [r3, #0]
  return result;
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xa4c>
 8002bee:	4b84      	ldr	r3, [pc, #528]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	e013      	b.n	8002c1c <HAL_RCC_OscConfig+0xa74>
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c24:	2102      	movs	r1, #2
 8002c26:	6011      	str	r1, [r2, #0]
 8002c28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fa92 f1a2 	rbit	r1, r2
 8002c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c3e:	6011      	str	r1, [r2, #0]
  return result;
 8002c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d084      	beq.n	8002b70 <HAL_RCC_OscConfig+0x9c8>
 8002c66:	e07f      	b.n	8002d68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7ff f80a 	bl	8001c80 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7ff f805 	bl	8001c80 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2c4      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cd0:	601a      	str	r2, [r3, #0]
  return result;
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xb4e>
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	e013      	b.n	8002d1e <HAL_RCC_OscConfig+0xb76>
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cfe:	2202      	movs	r2, #2
 8002d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d26:	2102      	movs	r1, #2
 8002d28:	6011      	str	r1, [r2, #0]
 8002d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fa92 f1a2 	rbit	r1, r2
 8002d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d40:	6011      	str	r1, [r2, #0]
  return result;
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d184      	bne.n	8002c72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8242 	beq.w	8003212 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	f000 8213 	beq.w	80031c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	f040 8162 	bne.w	8003072 <HAL_RCC_OscConfig+0xeca>
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ddc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe ff44 	bl	8001c80 <HAL_GetTick>
 8002df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCC_OscConfig+0xc70>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe ff3c 	bl	8001c80 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1fd      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e3c:	601a      	str	r2, [r3, #0]
  return result;
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0xcba>
 8002e5c:	4bb0      	ldr	r3, [pc, #704]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e027      	b.n	8002eb2 <HAL_RCC_OscConfig+0xd0a>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002eba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ebe:	6011      	str	r1, [r2, #0]
 8002ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	fa92 f1a2 	rbit	r1, r2
 8002ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ed6:	6011      	str	r1, [r2, #0]
  return result;
 8002ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002edc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d182      	bne.n	8002e04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	497f      	ldr	r1, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f4a:	601a      	str	r2, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fe88 	bl	8001c80 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fe83 	bl	8001c80 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e144      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fae:	601a      	str	r2, [r3, #0]
  return result;
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe2c>
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e027      	b.n	8003024 <HAL_RCC_OscConfig+0xe7c>
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003028:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800302c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003036:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	fa92 f1a2 	rbit	r1, r2
 8003040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003044:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003048:	6011      	str	r1, [r2, #0]
  return result;
 800304a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d082      	beq.n	8002f76 <HAL_RCC_OscConfig+0xdce>
 8003070:	e0cf      	b.n	8003212 <HAL_RCC_OscConfig+0x106a>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800307a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe fde2 	bl	8001c80 <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fddd 	bl	8001c80 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e09e      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003104:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <HAL_RCC_OscConfig+0xf7c>
 800311a:	4b01      	ldr	r3, [pc, #4]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e029      	b.n	8003174 <HAL_RCC_OscConfig+0xfcc>
 8003120:	40021000 	.word	0x40021000
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800312c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x1078>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800317c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003186:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	fa92 f1a2 	rbit	r1, r2
 8003190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003194:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003198:	6011      	str	r1, [r2, #0]
  return result;
 800319a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d180      	bne.n	80030c2 <HAL_RCC_OscConfig+0xf1a>
 80031c0:	e027      	b.n	8003212 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01e      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_OscConfig+0x1078>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d10b      	bne.n	800320e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800320a:	429a      	cmp	r2, r3
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b09e      	sub	sp, #120	; 0x78
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e162      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b90      	ldr	r3, [pc, #576]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b8d      	ldr	r3, [pc, #564]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	498b      	ldr	r1, [pc, #556]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e14a      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	497f      	ldr	r1, [pc, #508]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80dc 	beq.w	8003450 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d13c      	bne.n	800331a <HAL_RCC_ClockConfig+0xf6>
 80032a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_ClockConfig+0xa6>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	e00f      	b.n	80032ea <HAL_RCC_ClockConfig+0xc6>
 80032ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	667b      	str	r3, [r7, #100]	; 0x64
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	663b      	str	r3, [r7, #96]	; 0x60
 80032de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f2:	fa92 f2a2 	rbit	r2, r2
 80032f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032fa:	fab2 f282 	clz	r2, r2
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f042 0220 	orr.w	r2, r2, #32
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f002 021f 	and.w	r2, r2, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d17b      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0f3      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d13c      	bne.n	800339c <HAL_RCC_ClockConfig+0x178>
 8003322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_ClockConfig+0x128>
 8003346:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e00f      	b.n	800336c <HAL_RCC_ClockConfig+0x148>
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	643b      	str	r3, [r7, #64]	; 0x40
 8003360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003370:	63ba      	str	r2, [r7, #56]	; 0x38
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800337a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13a      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b2      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
 800339c:	2302      	movs	r3, #2
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a0>
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00d      	b.n	80033e0 <HAL_RCC_ClockConfig+0x1bc>
 80033c4:	2302      	movs	r3, #2
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	2302      	movs	r3, #2
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	61ba      	str	r2, [r7, #24]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	fa92 f2a2 	rbit	r2, r2
 80033ea:	617a      	str	r2, [r7, #20]
  return result;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e079      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fe fc2e 	bl	8001c80 <HAL_GetTick>
 8003424:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fe fc2a 	bl	8001c80 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e061      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d214      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4906      	ldr	r1, [pc, #24]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e040      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	491a      	ldr	r1, [pc, #104]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034c6:	f000 f829 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d4:	22f0      	movs	r2, #240	; 0xf0
 80034d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	fa92 f2a2 	rbit	r2, r2
 80034de:	60fa      	str	r2, [r7, #12]
  return result;
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	fab2 f282 	clz	r2, r2
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	40d3      	lsrs	r3, r2
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x2ec>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	fa21 f303 	lsr.w	r3, r1, r3
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_RCC_ClockConfig+0x2f0>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_RCC_ClockConfig+0x2f4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fb90 	bl	8001c20 <HAL_InitTick>
  
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3778      	adds	r7, #120	; 0x78
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	08007c60 	.word	0x08007c60
 8003514:	20000018 	.word	0x20000018
 8003518:	2000001c 	.word	0x2000001c

0800351c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b08b      	sub	sp, #44	; 0x2c
 8003520:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003536:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x30>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x36>
 800354a:	e03c      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800354e:	623b      	str	r3, [r7, #32]
      break;
 8003550:	e03c      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003558:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800355c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	607a      	str	r2, [r7, #4]
  return result;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	40d3      	lsrs	r3, r2
 8003570:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	220f      	movs	r2, #15
 8003580:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	fa92 f2a2 	rbit	r2, r2
 8003588:	60fa      	str	r2, [r7, #12]
  return result;
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	40d3      	lsrs	r3, r2
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035a4:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	e004      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	623b      	str	r3, [r7, #32]
      break;
 80035c4:	e002      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c8:	623b      	str	r3, [r7, #32]
      break;
 80035ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	372c      	adds	r7, #44	; 0x2c
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	007a1200 	.word	0x007a1200
 80035e4:	08007c78 	.word	0x08007c78
 80035e8:	08007c88 	.word	0x08007c88
 80035ec:	003d0900 	.word	0x003d0900

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000018 	.word	0x20000018

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800360e:	f7ff ffef 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800361c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003620:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	603a      	str	r2, [r7, #0]
  return result;
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	40d3      	lsrs	r3, r2
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	08007c70 	.word	0x08007c70

0800364c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003652:	f7ff ffcd 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003660:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	603a      	str	r2, [r7, #0]
  return result;
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	40d3      	lsrs	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_RCC_GetPCLK2Freq+0x40>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08007c70 	.word	0x08007c70

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b092      	sub	sp, #72	; 0x48
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80cd 	beq.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b4:	4b8e      	ldr	r3, [pc, #568]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10e      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a8a      	ldr	r2, [pc, #552]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
 80036cc:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d118      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b82      	ldr	r3, [pc, #520]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a81      	ldr	r2, [pc, #516]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fac3 	bl	8001c80 <HAL_GetTick>
 80036fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	e008      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fe fabf 	bl	8001c80 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	; 0x64
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0ea      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b78      	ldr	r3, [pc, #480]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371c:	4b74      	ldr	r3, [pc, #464]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d07d      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003736:	429a      	cmp	r2, r3
 8003738:	d076      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	461a      	mov	r2, r3
 8003764:	2301      	movs	r3, #1
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800378c:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d045      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe fa70 	bl	8001c80 <HAL_GetTick>
 80037a0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe fa6c 	bl	8001c80 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e095      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80037ba:	2302      	movs	r3, #2
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
 80037c6:	2302      	movs	r3, #2
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	61fb      	str	r3, [r7, #28]
  return result;
 80037d2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d102      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	e007      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80037ee:	2302      	movs	r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2202      	movs	r2, #2
 8003800:	613a      	str	r2, [r7, #16]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	fa92 f2a2 	rbit	r2, r2
 8003808:	60fa      	str	r2, [r7, #12]
  return result;
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	fab2 f282 	clz	r2, r2
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f002 021f 	and.w	r2, r2, #31
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f202 	lsl.w	r2, r1, r2
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0bd      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	492e      	ldr	r1, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003836:	4313      	orrs	r3, r2
 8003838:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800383a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	4313      	orrs	r3, r2
 800386a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f023 0210 	bic.w	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	491a      	ldr	r1, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	4913      	ldr	r1, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	490b      	ldr	r1, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3748      	adds	r7, #72	; 0x48
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	10908100 	.word	0x10908100

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e049      	b.n	80039a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe f872 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fbb6 	bl	80040ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e038      	b.n	8003a36 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_TIM_Base_Start+0x98>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start+0x48>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start+0x48>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_TIM_Base_Start+0x9c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start+0x48>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_TIM_Base_Start+0xa0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d115      	bne.n	8003a20 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_TIM_Base_Start+0xa4>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d015      	beq.n	8003a32 <HAL_TIM_Base_Start+0x86>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d011      	beq.n	8003a32 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	e008      	b.n	8003a32 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	00010007 	.word	0x00010007

08003a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e049      	b.n	8003afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f841 	bl	8003b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f000 fb0a 	bl	80040ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x24>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e03c      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x9e>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d109      	bne.n	8003b56 <HAL_TIM_PWM_Start+0x3e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e02f      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x9e>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x58>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e022      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x9e>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d109      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x72>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e015      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x9e>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start+0x8c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x9e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e088      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0xb6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	e023      	b.n	8003c16 <HAL_TIM_PWM_Start+0xfe>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0xc6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	e01b      	b.n	8003c16 <HAL_TIM_PWM_Start+0xfe>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	e013      	b.n	8003c16 <HAL_TIM_PWM_Start+0xfe>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0xe6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfc:	e00b      	b.n	8003c16 <HAL_TIM_PWM_Start+0xfe>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0xf6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_PWM_Start+0xfe>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fdfc 	bl	800481c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <HAL_TIM_PWM_Start+0x1c0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_TIM_PWM_Start+0x134>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <HAL_TIM_PWM_Start+0x1c4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIM_PWM_Start+0x134>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <HAL_TIM_PWM_Start+0x1c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIM_PWM_Start+0x134>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_TIM_PWM_Start+0x1cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_PWM_Start+0x138>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_TIM_PWM_Start+0x13a>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_TIM_PWM_Start+0x1c0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x176>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d009      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x176>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_TIM_PWM_Start+0x1d0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x176>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <HAL_TIM_PWM_Start+0x1c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d115      	bne.n	8003cba <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_TIM_PWM_Start+0x1d4>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d015      	beq.n	8003ccc <HAL_TIM_PWM_Start+0x1b4>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d011      	beq.n	8003ccc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	e008      	b.n	8003ccc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e000      	b.n	8003cce <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	00010007 	.word	0x00010007

08003cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0ff      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b14      	cmp	r3, #20
 8003d1a:	f200 80f0 	bhi.w	8003efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003eff 	.word	0x08003eff
 8003d2c:	08003eff 	.word	0x08003eff
 8003d30:	08003eff 	.word	0x08003eff
 8003d34:	08003db9 	.word	0x08003db9
 8003d38:	08003eff 	.word	0x08003eff
 8003d3c:	08003eff 	.word	0x08003eff
 8003d40:	08003eff 	.word	0x08003eff
 8003d44:	08003dfb 	.word	0x08003dfb
 8003d48:	08003eff 	.word	0x08003eff
 8003d4c:	08003eff 	.word	0x08003eff
 8003d50:	08003eff 	.word	0x08003eff
 8003d54:	08003e3b 	.word	0x08003e3b
 8003d58:	08003eff 	.word	0x08003eff
 8003d5c:	08003eff 	.word	0x08003eff
 8003d60:	08003eff 	.word	0x08003eff
 8003d64:	08003e7d 	.word	0x08003e7d
 8003d68:	08003eff 	.word	0x08003eff
 8003d6c:	08003eff 	.word	0x08003eff
 8003d70:	08003eff 	.word	0x08003eff
 8003d74:	08003ebd 	.word	0x08003ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fa0c 	bl	800419c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6999      	ldr	r1, [r3, #24]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	619a      	str	r2, [r3, #24]
      break;
 8003db6:	e0a5      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fa72 	bl	80042a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6999      	ldr	r1, [r3, #24]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	619a      	str	r2, [r3, #24]
      break;
 8003df8:	e084      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fad1 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0208 	orr.w	r2, r2, #8
 8003e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0204 	bic.w	r2, r2, #4
 8003e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69d9      	ldr	r1, [r3, #28]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	61da      	str	r2, [r3, #28]
      break;
 8003e38:	e064      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fb2f 	bl	80044a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	021a      	lsls	r2, r3, #8
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	61da      	str	r2, [r3, #28]
      break;
 8003e7a:	e043      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fb72 	bl	800456c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0208 	orr.w	r2, r2, #8
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eba:	e023      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fbb0 	bl	8004628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003efc:	e002      	b.n	8003f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
      break;
 8003f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop

08003f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIM_ConfigClockSource+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e0b6      	b.n	80040a2 <HAL_TIM_ConfigClockSource+0x18a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f70:	d03e      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xd8>
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	f200 8087 	bhi.w	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	f000 8086 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x176>
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d87f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f88:	2b70      	cmp	r3, #112	; 0x70
 8003f8a:	d01a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0xaa>
 8003f8c:	2b70      	cmp	r3, #112	; 0x70
 8003f8e:	d87b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f90:	2b60      	cmp	r3, #96	; 0x60
 8003f92:	d050      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x11e>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d877      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f98:	2b50      	cmp	r3, #80	; 0x50
 8003f9a:	d03c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xfe>
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d873      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d058      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x13e>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d86f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	2b30      	cmp	r3, #48	; 0x30
 8003faa:	d064      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d86b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d060      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d867      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05c      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d05a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fc0:	e062      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	f000 fc03 	bl	80047dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	609a      	str	r2, [r3, #8]
      break;
 8003fee:	e04f      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	f000 fbec 	bl	80047dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e03c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	461a      	mov	r2, r3
 8004024:	f000 fb60 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2150      	movs	r1, #80	; 0x50
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fbb9 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8004034:	e02c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004042:	461a      	mov	r2, r3
 8004044:	f000 fb7f 	bl	8004746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2160      	movs	r1, #96	; 0x60
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fba9 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8004054:	e01c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	461a      	mov	r2, r3
 8004064:	f000 fb40 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fb99 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8004074:	e00c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f000 fb90 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8004086:	e003      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e000      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800408e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a32      	ldr	r2, [pc, #200]	; (8004188 <TIM_Base_SetConfig+0xdc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0x28>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0x28>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2f      	ldr	r2, [pc, #188]	; (800418c <TIM_Base_SetConfig+0xe0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <TIM_Base_SetConfig+0xdc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <TIM_Base_SetConfig+0x6a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d00f      	beq.n	8004116 <TIM_Base_SetConfig+0x6a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <TIM_Base_SetConfig+0xe0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0x6a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <TIM_Base_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x6a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <TIM_Base_SetConfig+0xe8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x6a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_Base_SetConfig+0xec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <TIM_Base_SetConfig+0xdc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0xc0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <TIM_Base_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0xc0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <TIM_Base_SetConfig+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0xc0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <TIM_Base_SetConfig+0xec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40014000 	.word	0x40014000
 8004194:	40014400 	.word	0x40014400
 8004198:	40014800 	.word	0x40014800

0800419c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 0302 	bic.w	r3, r3, #2
 80041e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <TIM_OC1_SetConfig+0xfc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_OC1_SetConfig+0x78>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <TIM_OC1_SetConfig+0x100>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_OC1_SetConfig+0x78>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_OC1_SetConfig+0x104>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC1_SetConfig+0x78>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_OC1_SetConfig+0x108>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10c      	bne.n	800422e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0308 	bic.w	r3, r3, #8
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <TIM_OC1_SetConfig+0xfc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_OC1_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <TIM_OC1_SetConfig+0x100>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_OC1_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <TIM_OC1_SetConfig+0x104>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC1_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <TIM_OC1_SetConfig+0x108>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0320 	bic.w	r3, r3, #32
 80042f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <TIM_OC2_SetConfig+0xf0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10d      	bne.n	8004328 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <TIM_OC2_SetConfig+0xf0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_OC2_SetConfig+0xa0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <TIM_OC2_SetConfig+0xf4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_OC2_SetConfig+0xa0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <TIM_OC2_SetConfig+0xf8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC2_SetConfig+0xa0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_OC2_SetConfig+0xfc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d113      	bne.n	8004370 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004356:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <TIM_OC3_SetConfig+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10d      	bne.n	8004426 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004424:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <TIM_OC3_SetConfig+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_OC3_SetConfig+0x9e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a19      	ldr	r2, [pc, #100]	; (8004498 <TIM_OC3_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_OC3_SetConfig+0x9e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <TIM_OC3_SetConfig+0xf4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_OC3_SetConfig+0x9e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <TIM_OC3_SetConfig+0xf8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d113      	bne.n	800446e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800444c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a16      	ldr	r2, [pc, #88]	; (800455c <TIM_OC4_SetConfig+0xb8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_OC4_SetConfig+0x7c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <TIM_OC4_SetConfig+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_OC4_SetConfig+0x7c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a14      	ldr	r2, [pc, #80]	; (8004564 <TIM_OC4_SetConfig+0xc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_OC4_SetConfig+0x7c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a13      	ldr	r2, [pc, #76]	; (8004568 <TIM_OC4_SetConfig+0xc4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d109      	bne.n	8004534 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <TIM_OC5_SetConfig+0xac>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_OC5_SetConfig+0x72>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC5_SetConfig+0xb0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_OC5_SetConfig+0x72>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <TIM_OC5_SetConfig+0xb4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC5_SetConfig+0x72>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a12      	ldr	r2, [pc, #72]	; (8004624 <TIM_OC5_SetConfig+0xb8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d109      	bne.n	80045f2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800466e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	051b      	lsls	r3, r3, #20
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <TIM_OC6_SetConfig+0xb0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC6_SetConfig+0x74>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <TIM_OC6_SetConfig+0xb4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC6_SetConfig+0x74>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <TIM_OC6_SetConfig+0xb8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC6_SetConfig+0x74>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <TIM_OC6_SetConfig+0xbc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d109      	bne.n	80046b0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	029b      	lsls	r3, r3, #10
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 030a 	bic.w	r3, r3, #10
 8004724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004746:	b480      	push	{r7}
 8004748:	b087      	sub	sp, #28
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f043 0307 	orr.w	r3, r3, #7
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	431a      	orrs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2201      	movs	r2, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	43db      	mvns	r3, r3
 800483e:	401a      	ands	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e054      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a11      	ldr	r2, [pc, #68]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40014000 	.word	0x40014000

08004944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800495c:	2302      	movs	r3, #2
 800495e:	e060      	b.n	8004a22 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d115      	bne.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	051b      	lsls	r3, r3, #20
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40012c00 	.word	0x40012c00

08004a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e040      	b.n	8004ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd f860 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b6 	bl	8004be4 <UART_SetConfig>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e022      	b.n	8004ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9e0 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa67 	bl	8004f94 <UART_CheckIdleState>
 8004ac6:	4603      	mov	r3, r0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d178      	bne.n	8004bda <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_Transmit+0x24>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e071      	b.n	8004bdc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2221      	movs	r2, #33	; 0x21
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b06:	f7fd f8bb 	bl	8001c80 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d108      	bne.n	8004b38 <HAL_UART_Transmit+0x68>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e003      	b.n	8004b40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b40:	e030      	b.n	8004ba4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fac9 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e03c      	b.n	8004bdc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b74:	b292      	uxth	r2, r2
 8004b76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e008      	b.n	8004b92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1c8      	bne.n	8004b42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2140      	movs	r1, #64	; 0x40
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fa92 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e005      	b.n	8004bdc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8a      	ldr	r3, [pc, #552]	; (8004e38 <UART_SetConfig+0x254>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a78      	ldr	r2, [pc, #480]	; (8004e3c <UART_SetConfig+0x258>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d120      	bne.n	8004ca2 <UART_SetConfig+0xbe>
 8004c60:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <UART_SetConfig+0x25c>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d817      	bhi.n	8004c9c <UART_SetConfig+0xb8>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x90>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004c91 	.word	0x08004c91
 8004c7c:	08004c97 	.word	0x08004c97
 8004c80:	08004c8b 	.word	0x08004c8b
 8004c84:	2300      	movs	r3, #0
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e01d      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e01a      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c90:	2304      	movs	r3, #4
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e017      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c96:	2308      	movs	r3, #8
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e014      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e011      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <UART_SetConfig+0x260>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <UART_SetConfig+0xce>
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e009      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a64      	ldr	r2, [pc, #400]	; (8004e48 <UART_SetConfig+0x264>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <UART_SetConfig+0xde>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e001      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cce:	d15a      	bne.n	8004d86 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004cd0:	7ffb      	ldrb	r3, [r7, #31]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d827      	bhi.n	8004d26 <UART_SetConfig+0x142>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0xf8>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d27 	.word	0x08004d27
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe fc82 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e013      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fca0 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <UART_SetConfig+0x268>)
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e00c      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe fc01 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8004d1a:	61b8      	str	r0, [r7, #24]
        break;
 8004d1c:	e008      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	61bb      	str	r3, [r7, #24]
        break;
 8004d24:	e004      	b.n	8004d30 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d074      	beq.n	8004e20 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	005a      	lsls	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d916      	bls.n	8004d80 <UART_SetConfig+0x19c>
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d212      	bcs.n	8004d80 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f023 030f 	bic.w	r3, r3, #15
 8004d62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	89fa      	ldrh	r2, [r7, #14]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	e04f      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	77bb      	strb	r3, [r7, #30]
 8004d84:	e04c      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d828      	bhi.n	8004dde <UART_SetConfig+0x1fa>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x1b0>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fe fc26 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e013      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fe fc44 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 8004dc4:	61b8      	str	r0, [r7, #24]
        break;
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <UART_SetConfig+0x268>)
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e00c      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fe fba5 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8004dd2:	61b8      	str	r0, [r7, #24]
        break;
 8004dd4:	e008      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	77bb      	strb	r3, [r7, #30]
        break;
 8004de6:	bf00      	nop
    }

    if (pclk != 0U)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085a      	lsrs	r2, r3, #1
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d909      	bls.n	8004e1c <UART_SetConfig+0x238>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d205      	bcs.n	8004e1c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e001      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	efff69f3 	.word	0xefff69f3
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40004800 	.word	0x40004800
 8004e4c:	007a1200 	.word	0x007a1200

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b098      	sub	sp, #96	; 0x60
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa4:	f7fc fe6c 	bl	8001c80 <HAL_GetTick>
 8004fa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d12e      	bne.n	8005016 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f88c 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e062      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d149      	bne.n	80050b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f856 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03c      	beq.n	80050b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	623b      	str	r3, [r7, #32]
   return(result);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
 800505e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e011      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3758      	adds	r7, #88	; 0x58
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e049      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d045      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fc fdbf 	bl	8001c80 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e048      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d031      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b08      	cmp	r3, #8
 8005132:	d110      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f838 	bl	80051b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2208      	movs	r2, #8
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e029      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005164:	d111      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800516e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f81e 	bl	80051b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e00f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d0a6      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b095      	sub	sp, #84	; 0x54
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
 80051da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	64bb      	str	r3, [r7, #72]	; 0x48
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	2b01      	cmp	r3, #1
 8005226:	d118      	bne.n	800525a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	60bb      	str	r3, [r7, #8]
   return(result);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f023 0310 	bic.w	r3, r3, #16
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	613b      	str	r3, [r7, #16]
   return(result);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e6      	bne.n	8005228 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800526e:	bf00      	nop
 8005270:	3754      	adds	r7, #84	; 0x54
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <__cvt>:
 800527a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800527e:	ec55 4b10 	vmov	r4, r5, d0
 8005282:	2d00      	cmp	r5, #0
 8005284:	460e      	mov	r6, r1
 8005286:	4619      	mov	r1, r3
 8005288:	462b      	mov	r3, r5
 800528a:	bfbb      	ittet	lt
 800528c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005290:	461d      	movlt	r5, r3
 8005292:	2300      	movge	r3, #0
 8005294:	232d      	movlt	r3, #45	; 0x2d
 8005296:	700b      	strb	r3, [r1, #0]
 8005298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800529a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800529e:	4691      	mov	r9, r2
 80052a0:	f023 0820 	bic.w	r8, r3, #32
 80052a4:	bfbc      	itt	lt
 80052a6:	4622      	movlt	r2, r4
 80052a8:	4614      	movlt	r4, r2
 80052aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ae:	d005      	beq.n	80052bc <__cvt+0x42>
 80052b0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052b4:	d100      	bne.n	80052b8 <__cvt+0x3e>
 80052b6:	3601      	adds	r6, #1
 80052b8:	2102      	movs	r1, #2
 80052ba:	e000      	b.n	80052be <__cvt+0x44>
 80052bc:	2103      	movs	r1, #3
 80052be:	ab03      	add	r3, sp, #12
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	ab02      	add	r3, sp, #8
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	ec45 4b10 	vmov	d0, r4, r5
 80052ca:	4653      	mov	r3, sl
 80052cc:	4632      	mov	r2, r6
 80052ce:	f000 fe5b 	bl	8005f88 <_dtoa_r>
 80052d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d6:	4607      	mov	r7, r0
 80052d8:	d102      	bne.n	80052e0 <__cvt+0x66>
 80052da:	f019 0f01 	tst.w	r9, #1
 80052de:	d022      	beq.n	8005326 <__cvt+0xac>
 80052e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e4:	eb07 0906 	add.w	r9, r7, r6
 80052e8:	d110      	bne.n	800530c <__cvt+0x92>
 80052ea:	783b      	ldrb	r3, [r7, #0]
 80052ec:	2b30      	cmp	r3, #48	; 0x30
 80052ee:	d10a      	bne.n	8005306 <__cvt+0x8c>
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7fb fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80052fc:	b918      	cbnz	r0, 8005306 <__cvt+0x8c>
 80052fe:	f1c6 0601 	rsb	r6, r6, #1
 8005302:	f8ca 6000 	str.w	r6, [sl]
 8005306:	f8da 3000 	ldr.w	r3, [sl]
 800530a:	4499      	add	r9, r3
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005318:	b108      	cbz	r0, 800531e <__cvt+0xa4>
 800531a:	f8cd 900c 	str.w	r9, [sp, #12]
 800531e:	2230      	movs	r2, #48	; 0x30
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	454b      	cmp	r3, r9
 8005324:	d307      	bcc.n	8005336 <__cvt+0xbc>
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532a:	1bdb      	subs	r3, r3, r7
 800532c:	4638      	mov	r0, r7
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	b004      	add	sp, #16
 8005332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	9103      	str	r1, [sp, #12]
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e7f0      	b.n	8005320 <__cvt+0xa6>

0800533e <__exponent>:
 800533e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005340:	4603      	mov	r3, r0
 8005342:	2900      	cmp	r1, #0
 8005344:	bfb8      	it	lt
 8005346:	4249      	neglt	r1, r1
 8005348:	f803 2b02 	strb.w	r2, [r3], #2
 800534c:	bfb4      	ite	lt
 800534e:	222d      	movlt	r2, #45	; 0x2d
 8005350:	222b      	movge	r2, #43	; 0x2b
 8005352:	2909      	cmp	r1, #9
 8005354:	7042      	strb	r2, [r0, #1]
 8005356:	dd2a      	ble.n	80053ae <__exponent+0x70>
 8005358:	f10d 0207 	add.w	r2, sp, #7
 800535c:	4617      	mov	r7, r2
 800535e:	260a      	movs	r6, #10
 8005360:	4694      	mov	ip, r2
 8005362:	fb91 f5f6 	sdiv	r5, r1, r6
 8005366:	fb06 1415 	mls	r4, r6, r5, r1
 800536a:	3430      	adds	r4, #48	; 0x30
 800536c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005370:	460c      	mov	r4, r1
 8005372:	2c63      	cmp	r4, #99	; 0x63
 8005374:	f102 32ff 	add.w	r2, r2, #4294967295
 8005378:	4629      	mov	r1, r5
 800537a:	dcf1      	bgt.n	8005360 <__exponent+0x22>
 800537c:	3130      	adds	r1, #48	; 0x30
 800537e:	f1ac 0402 	sub.w	r4, ip, #2
 8005382:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005386:	1c41      	adds	r1, r0, #1
 8005388:	4622      	mov	r2, r4
 800538a:	42ba      	cmp	r2, r7
 800538c:	d30a      	bcc.n	80053a4 <__exponent+0x66>
 800538e:	f10d 0209 	add.w	r2, sp, #9
 8005392:	eba2 020c 	sub.w	r2, r2, ip
 8005396:	42bc      	cmp	r4, r7
 8005398:	bf88      	it	hi
 800539a:	2200      	movhi	r2, #0
 800539c:	4413      	add	r3, r2
 800539e:	1a18      	subs	r0, r3, r0
 80053a0:	b003      	add	sp, #12
 80053a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053a8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053ac:	e7ed      	b.n	800538a <__exponent+0x4c>
 80053ae:	2330      	movs	r3, #48	; 0x30
 80053b0:	3130      	adds	r1, #48	; 0x30
 80053b2:	7083      	strb	r3, [r0, #2]
 80053b4:	70c1      	strb	r1, [r0, #3]
 80053b6:	1d03      	adds	r3, r0, #4
 80053b8:	e7f1      	b.n	800539e <__exponent+0x60>
	...

080053bc <_printf_float>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	ed2d 8b02 	vpush	{d8}
 80053c4:	b08d      	sub	sp, #52	; 0x34
 80053c6:	460c      	mov	r4, r1
 80053c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053cc:	4616      	mov	r6, r2
 80053ce:	461f      	mov	r7, r3
 80053d0:	4605      	mov	r5, r0
 80053d2:	f000 fcd9 	bl	8005d88 <_localeconv_r>
 80053d6:	f8d0 a000 	ldr.w	sl, [r0]
 80053da:	4650      	mov	r0, sl
 80053dc:	f7fa ff48 	bl	8000270 <strlen>
 80053e0:	2300      	movs	r3, #0
 80053e2:	930a      	str	r3, [sp, #40]	; 0x28
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	9305      	str	r3, [sp, #20]
 80053e8:	f8d8 3000 	ldr.w	r3, [r8]
 80053ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053f0:	3307      	adds	r3, #7
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	f8c8 2000 	str.w	r2, [r8]
 80053fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005406:	9307      	str	r3, [sp, #28]
 8005408:	f8cd 8018 	str.w	r8, [sp, #24]
 800540c:	ee08 0a10 	vmov	s16, r0
 8005410:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005418:	4b9e      	ldr	r3, [pc, #632]	; (8005694 <_printf_float+0x2d8>)
 800541a:	f04f 32ff 	mov.w	r2, #4294967295
 800541e:	f7fb fb85 	bl	8000b2c <__aeabi_dcmpun>
 8005422:	bb88      	cbnz	r0, 8005488 <_printf_float+0xcc>
 8005424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005428:	4b9a      	ldr	r3, [pc, #616]	; (8005694 <_printf_float+0x2d8>)
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	f7fb fb5f 	bl	8000af0 <__aeabi_dcmple>
 8005432:	bb48      	cbnz	r0, 8005488 <_printf_float+0xcc>
 8005434:	2200      	movs	r2, #0
 8005436:	2300      	movs	r3, #0
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fb4e 	bl	8000adc <__aeabi_dcmplt>
 8005440:	b110      	cbz	r0, 8005448 <_printf_float+0x8c>
 8005442:	232d      	movs	r3, #45	; 0x2d
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	4a93      	ldr	r2, [pc, #588]	; (8005698 <_printf_float+0x2dc>)
 800544a:	4b94      	ldr	r3, [pc, #592]	; (800569c <_printf_float+0x2e0>)
 800544c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005450:	bf94      	ite	ls
 8005452:	4690      	movls	r8, r2
 8005454:	4698      	movhi	r8, r3
 8005456:	2303      	movs	r3, #3
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	9b05      	ldr	r3, [sp, #20]
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	9700      	str	r7, [sp, #0]
 8005468:	4633      	mov	r3, r6
 800546a:	aa0b      	add	r2, sp, #44	; 0x2c
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f9da 	bl	8005828 <_printf_common>
 8005474:	3001      	adds	r0, #1
 8005476:	f040 8090 	bne.w	800559a <_printf_float+0x1de>
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	b00d      	add	sp, #52	; 0x34
 8005480:	ecbd 8b02 	vpop	{d8}
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb4c 	bl	8000b2c <__aeabi_dcmpun>
 8005494:	b140      	cbz	r0, 80054a8 <_printf_float+0xec>
 8005496:	464b      	mov	r3, r9
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbc      	itt	lt
 800549c:	232d      	movlt	r3, #45	; 0x2d
 800549e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054a2:	4a7f      	ldr	r2, [pc, #508]	; (80056a0 <_printf_float+0x2e4>)
 80054a4:	4b7f      	ldr	r3, [pc, #508]	; (80056a4 <_printf_float+0x2e8>)
 80054a6:	e7d1      	b.n	800544c <_printf_float+0x90>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	d13f      	bne.n	8005534 <_printf_float+0x178>
 80054b4:	2306      	movs	r3, #6
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	9b05      	ldr	r3, [sp, #20]
 80054ba:	6861      	ldr	r1, [r4, #4]
 80054bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054c0:	2300      	movs	r3, #0
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	ab0a      	add	r3, sp, #40	; 0x28
 80054c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054ca:	ab09      	add	r3, sp, #36	; 0x24
 80054cc:	ec49 8b10 	vmov	d0, r8, r9
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054d8:	4628      	mov	r0, r5
 80054da:	f7ff fece 	bl	800527a <__cvt>
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054e2:	2b47      	cmp	r3, #71	; 0x47
 80054e4:	4680      	mov	r8, r0
 80054e6:	d108      	bne.n	80054fa <_printf_float+0x13e>
 80054e8:	1cc8      	adds	r0, r1, #3
 80054ea:	db02      	blt.n	80054f2 <_printf_float+0x136>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	4299      	cmp	r1, r3
 80054f0:	dd41      	ble.n	8005576 <_printf_float+0x1ba>
 80054f2:	f1ab 0302 	sub.w	r3, fp, #2
 80054f6:	fa5f fb83 	uxtb.w	fp, r3
 80054fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054fe:	d820      	bhi.n	8005542 <_printf_float+0x186>
 8005500:	3901      	subs	r1, #1
 8005502:	465a      	mov	r2, fp
 8005504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005508:	9109      	str	r1, [sp, #36]	; 0x24
 800550a:	f7ff ff18 	bl	800533e <__exponent>
 800550e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005510:	1813      	adds	r3, r2, r0
 8005512:	2a01      	cmp	r2, #1
 8005514:	4681      	mov	r9, r0
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	dc02      	bgt.n	8005520 <_printf_float+0x164>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	07d2      	lsls	r2, r2, #31
 800551e:	d501      	bpl.n	8005524 <_printf_float+0x168>
 8005520:	3301      	adds	r3, #1
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005528:	2b00      	cmp	r3, #0
 800552a:	d09c      	beq.n	8005466 <_printf_float+0xaa>
 800552c:	232d      	movs	r3, #45	; 0x2d
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005532:	e798      	b.n	8005466 <_printf_float+0xaa>
 8005534:	9a06      	ldr	r2, [sp, #24]
 8005536:	2a47      	cmp	r2, #71	; 0x47
 8005538:	d1be      	bne.n	80054b8 <_printf_float+0xfc>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1bc      	bne.n	80054b8 <_printf_float+0xfc>
 800553e:	2301      	movs	r3, #1
 8005540:	e7b9      	b.n	80054b6 <_printf_float+0xfa>
 8005542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005546:	d118      	bne.n	800557a <_printf_float+0x1be>
 8005548:	2900      	cmp	r1, #0
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	dd0b      	ble.n	8005566 <_printf_float+0x1aa>
 800554e:	6121      	str	r1, [r4, #16]
 8005550:	b913      	cbnz	r3, 8005558 <_printf_float+0x19c>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	07d0      	lsls	r0, r2, #31
 8005556:	d502      	bpl.n	800555e <_printf_float+0x1a2>
 8005558:	3301      	adds	r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	e7de      	b.n	8005524 <_printf_float+0x168>
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x1b2>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	07d2      	lsls	r2, r2, #31
 800556c:	d501      	bpl.n	8005572 <_printf_float+0x1b6>
 800556e:	3302      	adds	r3, #2
 8005570:	e7f4      	b.n	800555c <_printf_float+0x1a0>
 8005572:	2301      	movs	r3, #1
 8005574:	e7f2      	b.n	800555c <_printf_float+0x1a0>
 8005576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557c:	4299      	cmp	r1, r3
 800557e:	db05      	blt.n	800558c <_printf_float+0x1d0>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6121      	str	r1, [r4, #16]
 8005584:	07d8      	lsls	r0, r3, #31
 8005586:	d5ea      	bpl.n	800555e <_printf_float+0x1a2>
 8005588:	1c4b      	adds	r3, r1, #1
 800558a:	e7e7      	b.n	800555c <_printf_float+0x1a0>
 800558c:	2900      	cmp	r1, #0
 800558e:	bfd4      	ite	le
 8005590:	f1c1 0202 	rsble	r2, r1, #2
 8005594:	2201      	movgt	r2, #1
 8005596:	4413      	add	r3, r2
 8005598:	e7e0      	b.n	800555c <_printf_float+0x1a0>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	055a      	lsls	r2, r3, #21
 800559e:	d407      	bmi.n	80055b0 <_printf_float+0x1f4>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	4642      	mov	r2, r8
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d12c      	bne.n	8005608 <_printf_float+0x24c>
 80055ae:	e764      	b.n	800547a <_printf_float+0xbe>
 80055b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055b4:	f240 80e0 	bls.w	8005778 <_printf_float+0x3bc>
 80055b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	f7fb fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d034      	beq.n	8005632 <_printf_float+0x276>
 80055c8:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <_printf_float+0x2ec>)
 80055ca:	2301      	movs	r3, #1
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af51 	beq.w	800547a <_printf_float+0xbe>
 80055d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	db02      	blt.n	80055e6 <_printf_float+0x22a>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07d8      	lsls	r0, r3, #31
 80055e4:	d510      	bpl.n	8005608 <_printf_float+0x24c>
 80055e6:	ee18 3a10 	vmov	r3, s16
 80055ea:	4652      	mov	r2, sl
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af41 	beq.w	800547a <_printf_float+0xbe>
 80055f8:	f04f 0800 	mov.w	r8, #0
 80055fc:	f104 091a 	add.w	r9, r4, #26
 8005600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	4543      	cmp	r3, r8
 8005606:	dc09      	bgt.n	800561c <_printf_float+0x260>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	079b      	lsls	r3, r3, #30
 800560c:	f100 8107 	bmi.w	800581e <_printf_float+0x462>
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005614:	4298      	cmp	r0, r3
 8005616:	bfb8      	it	lt
 8005618:	4618      	movlt	r0, r3
 800561a:	e730      	b.n	800547e <_printf_float+0xc2>
 800561c:	2301      	movs	r3, #1
 800561e:	464a      	mov	r2, r9
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af27 	beq.w	800547a <_printf_float+0xbe>
 800562c:	f108 0801 	add.w	r8, r8, #1
 8005630:	e7e6      	b.n	8005600 <_printf_float+0x244>
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc39      	bgt.n	80056ac <_printf_float+0x2f0>
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <_printf_float+0x2ec>)
 800563a:	2301      	movs	r3, #1
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af19 	beq.w	800547a <_printf_float+0xbe>
 8005648:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800564c:	4313      	orrs	r3, r2
 800564e:	d102      	bne.n	8005656 <_printf_float+0x29a>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	07d9      	lsls	r1, r3, #31
 8005654:	d5d8      	bpl.n	8005608 <_printf_float+0x24c>
 8005656:	ee18 3a10 	vmov	r3, s16
 800565a:	4652      	mov	r2, sl
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af09 	beq.w	800547a <_printf_float+0xbe>
 8005668:	f04f 0900 	mov.w	r9, #0
 800566c:	f104 0a1a 	add.w	sl, r4, #26
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	425b      	negs	r3, r3
 8005674:	454b      	cmp	r3, r9
 8005676:	dc01      	bgt.n	800567c <_printf_float+0x2c0>
 8005678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567a:	e792      	b.n	80055a2 <_printf_float+0x1e6>
 800567c:	2301      	movs	r3, #1
 800567e:	4652      	mov	r2, sl
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f aef7 	beq.w	800547a <_printf_float+0xbe>
 800568c:	f109 0901 	add.w	r9, r9, #1
 8005690:	e7ee      	b.n	8005670 <_printf_float+0x2b4>
 8005692:	bf00      	nop
 8005694:	7fefffff 	.word	0x7fefffff
 8005698:	08007c98 	.word	0x08007c98
 800569c:	08007c9c 	.word	0x08007c9c
 80056a0:	08007ca0 	.word	0x08007ca0
 80056a4:	08007ca4 	.word	0x08007ca4
 80056a8:	08007ca8 	.word	0x08007ca8
 80056ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bfa8      	it	ge
 80056b4:	461a      	movge	r2, r3
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	4691      	mov	r9, r2
 80056ba:	dc37      	bgt.n	800572c <_printf_float+0x370>
 80056bc:	f04f 0b00 	mov.w	fp, #0
 80056c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c4:	f104 021a 	add.w	r2, r4, #26
 80056c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	eba3 0309 	sub.w	r3, r3, r9
 80056d0:	455b      	cmp	r3, fp
 80056d2:	dc33      	bgt.n	800573c <_printf_float+0x380>
 80056d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d8:	429a      	cmp	r2, r3
 80056da:	db3b      	blt.n	8005754 <_printf_float+0x398>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d438      	bmi.n	8005754 <_printf_float+0x398>
 80056e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056e6:	eba2 0903 	sub.w	r9, r2, r3
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	4591      	cmp	r9, r2
 80056f0:	bfa8      	it	ge
 80056f2:	4691      	movge	r9, r2
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	dc35      	bgt.n	8005766 <_printf_float+0x3aa>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005702:	f104 0a1a 	add.w	sl, r4, #26
 8005706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	eba3 0309 	sub.w	r3, r3, r9
 8005710:	4543      	cmp	r3, r8
 8005712:	f77f af79 	ble.w	8005608 <_printf_float+0x24c>
 8005716:	2301      	movs	r3, #1
 8005718:	4652      	mov	r2, sl
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f aeaa 	beq.w	800547a <_printf_float+0xbe>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	e7ec      	b.n	8005706 <_printf_float+0x34a>
 800572c:	4613      	mov	r3, r2
 800572e:	4631      	mov	r1, r6
 8005730:	4642      	mov	r2, r8
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	d1c0      	bne.n	80056bc <_printf_float+0x300>
 800573a:	e69e      	b.n	800547a <_printf_float+0xbe>
 800573c:	2301      	movs	r3, #1
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	9205      	str	r2, [sp, #20]
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae97 	beq.w	800547a <_printf_float+0xbe>
 800574c:	9a05      	ldr	r2, [sp, #20]
 800574e:	f10b 0b01 	add.w	fp, fp, #1
 8005752:	e7b9      	b.n	80056c8 <_printf_float+0x30c>
 8005754:	ee18 3a10 	vmov	r3, s16
 8005758:	4652      	mov	r2, sl
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d1be      	bne.n	80056e2 <_printf_float+0x326>
 8005764:	e689      	b.n	800547a <_printf_float+0xbe>
 8005766:	9a05      	ldr	r2, [sp, #20]
 8005768:	464b      	mov	r3, r9
 800576a:	4442      	add	r2, r8
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c1      	bne.n	80056fa <_printf_float+0x33e>
 8005776:	e680      	b.n	800547a <_printf_float+0xbe>
 8005778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800577a:	2a01      	cmp	r2, #1
 800577c:	dc01      	bgt.n	8005782 <_printf_float+0x3c6>
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d53a      	bpl.n	80057f8 <_printf_float+0x43c>
 8005782:	2301      	movs	r3, #1
 8005784:	4642      	mov	r2, r8
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae74 	beq.w	800547a <_printf_float+0xbe>
 8005792:	ee18 3a10 	vmov	r3, s16
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f ae6b 	beq.w	800547a <_printf_float+0xbe>
 80057a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057a8:	2200      	movs	r2, #0
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057b0:	f7fb f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80057b4:	b9d8      	cbnz	r0, 80057ee <_printf_float+0x432>
 80057b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ba:	f108 0201 	add.w	r2, r8, #1
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d10e      	bne.n	80057e6 <_printf_float+0x42a>
 80057c8:	e657      	b.n	800547a <_printf_float+0xbe>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4652      	mov	r2, sl
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae50 	beq.w	800547a <_printf_float+0xbe>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4543      	cmp	r3, r8
 80057e4:	dcf1      	bgt.n	80057ca <_printf_float+0x40e>
 80057e6:	464b      	mov	r3, r9
 80057e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057ec:	e6da      	b.n	80055a4 <_printf_float+0x1e8>
 80057ee:	f04f 0800 	mov.w	r8, #0
 80057f2:	f104 0a1a 	add.w	sl, r4, #26
 80057f6:	e7f2      	b.n	80057de <_printf_float+0x422>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4642      	mov	r2, r8
 80057fc:	e7df      	b.n	80057be <_printf_float+0x402>
 80057fe:	2301      	movs	r3, #1
 8005800:	464a      	mov	r2, r9
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	f43f ae36 	beq.w	800547a <_printf_float+0xbe>
 800580e:	f108 0801 	add.w	r8, r8, #1
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	4543      	cmp	r3, r8
 800581a:	dcf0      	bgt.n	80057fe <_printf_float+0x442>
 800581c:	e6f8      	b.n	8005610 <_printf_float+0x254>
 800581e:	f04f 0800 	mov.w	r8, #0
 8005822:	f104 0919 	add.w	r9, r4, #25
 8005826:	e7f4      	b.n	8005812 <_printf_float+0x456>

08005828 <_printf_common>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	4616      	mov	r6, r2
 800582e:	4699      	mov	r9, r3
 8005830:	688a      	ldr	r2, [r1, #8]
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005838:	4293      	cmp	r3, r2
 800583a:	bfb8      	it	lt
 800583c:	4613      	movlt	r3, r2
 800583e:	6033      	str	r3, [r6, #0]
 8005840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005844:	4607      	mov	r7, r0
 8005846:	460c      	mov	r4, r1
 8005848:	b10a      	cbz	r2, 800584e <_printf_common+0x26>
 800584a:	3301      	adds	r3, #1
 800584c:	6033      	str	r3, [r6, #0]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0699      	lsls	r1, r3, #26
 8005852:	bf42      	ittt	mi
 8005854:	6833      	ldrmi	r3, [r6, #0]
 8005856:	3302      	addmi	r3, #2
 8005858:	6033      	strmi	r3, [r6, #0]
 800585a:	6825      	ldr	r5, [r4, #0]
 800585c:	f015 0506 	ands.w	r5, r5, #6
 8005860:	d106      	bne.n	8005870 <_printf_common+0x48>
 8005862:	f104 0a19 	add.w	sl, r4, #25
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	6832      	ldr	r2, [r6, #0]
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	42ab      	cmp	r3, r5
 800586e:	dc26      	bgt.n	80058be <_printf_common+0x96>
 8005870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005874:	1e13      	subs	r3, r2, #0
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	bf18      	it	ne
 800587a:	2301      	movne	r3, #1
 800587c:	0692      	lsls	r2, r2, #26
 800587e:	d42b      	bmi.n	80058d8 <_printf_common+0xb0>
 8005880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d01e      	beq.n	80058cc <_printf_common+0xa4>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	f003 0306 	and.w	r3, r3, #6
 8005896:	2b04      	cmp	r3, #4
 8005898:	bf02      	ittt	eq
 800589a:	68e5      	ldreq	r5, [r4, #12]
 800589c:	6833      	ldreq	r3, [r6, #0]
 800589e:	1aed      	subeq	r5, r5, r3
 80058a0:	68a3      	ldr	r3, [r4, #8]
 80058a2:	bf0c      	ite	eq
 80058a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a8:	2500      	movne	r5, #0
 80058aa:	4293      	cmp	r3, r2
 80058ac:	bfc4      	itt	gt
 80058ae:	1a9b      	subgt	r3, r3, r2
 80058b0:	18ed      	addgt	r5, r5, r3
 80058b2:	2600      	movs	r6, #0
 80058b4:	341a      	adds	r4, #26
 80058b6:	42b5      	cmp	r5, r6
 80058b8:	d11a      	bne.n	80058f0 <_printf_common+0xc8>
 80058ba:	2000      	movs	r0, #0
 80058bc:	e008      	b.n	80058d0 <_printf_common+0xa8>
 80058be:	2301      	movs	r3, #1
 80058c0:	4652      	mov	r2, sl
 80058c2:	4649      	mov	r1, r9
 80058c4:	4638      	mov	r0, r7
 80058c6:	47c0      	blx	r8
 80058c8:	3001      	adds	r0, #1
 80058ca:	d103      	bne.n	80058d4 <_printf_common+0xac>
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d4:	3501      	adds	r5, #1
 80058d6:	e7c6      	b.n	8005866 <_printf_common+0x3e>
 80058d8:	18e1      	adds	r1, r4, r3
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	2030      	movs	r0, #48	; 0x30
 80058de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e2:	4422      	add	r2, r4
 80058e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ec:	3302      	adds	r3, #2
 80058ee:	e7c7      	b.n	8005880 <_printf_common+0x58>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4622      	mov	r2, r4
 80058f4:	4649      	mov	r1, r9
 80058f6:	4638      	mov	r0, r7
 80058f8:	47c0      	blx	r8
 80058fa:	3001      	adds	r0, #1
 80058fc:	d0e6      	beq.n	80058cc <_printf_common+0xa4>
 80058fe:	3601      	adds	r6, #1
 8005900:	e7d9      	b.n	80058b6 <_printf_common+0x8e>
	...

08005904 <_printf_i>:
 8005904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	7e0f      	ldrb	r7, [r1, #24]
 800590a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800590c:	2f78      	cmp	r7, #120	; 0x78
 800590e:	4691      	mov	r9, r2
 8005910:	4680      	mov	r8, r0
 8005912:	460c      	mov	r4, r1
 8005914:	469a      	mov	sl, r3
 8005916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800591a:	d807      	bhi.n	800592c <_printf_i+0x28>
 800591c:	2f62      	cmp	r7, #98	; 0x62
 800591e:	d80a      	bhi.n	8005936 <_printf_i+0x32>
 8005920:	2f00      	cmp	r7, #0
 8005922:	f000 80d4 	beq.w	8005ace <_printf_i+0x1ca>
 8005926:	2f58      	cmp	r7, #88	; 0x58
 8005928:	f000 80c0 	beq.w	8005aac <_printf_i+0x1a8>
 800592c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005934:	e03a      	b.n	80059ac <_printf_i+0xa8>
 8005936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800593a:	2b15      	cmp	r3, #21
 800593c:	d8f6      	bhi.n	800592c <_printf_i+0x28>
 800593e:	a101      	add	r1, pc, #4	; (adr r1, 8005944 <_printf_i+0x40>)
 8005940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005944:	0800599d 	.word	0x0800599d
 8005948:	080059b1 	.word	0x080059b1
 800594c:	0800592d 	.word	0x0800592d
 8005950:	0800592d 	.word	0x0800592d
 8005954:	0800592d 	.word	0x0800592d
 8005958:	0800592d 	.word	0x0800592d
 800595c:	080059b1 	.word	0x080059b1
 8005960:	0800592d 	.word	0x0800592d
 8005964:	0800592d 	.word	0x0800592d
 8005968:	0800592d 	.word	0x0800592d
 800596c:	0800592d 	.word	0x0800592d
 8005970:	08005ab5 	.word	0x08005ab5
 8005974:	080059dd 	.word	0x080059dd
 8005978:	08005a6f 	.word	0x08005a6f
 800597c:	0800592d 	.word	0x0800592d
 8005980:	0800592d 	.word	0x0800592d
 8005984:	08005ad7 	.word	0x08005ad7
 8005988:	0800592d 	.word	0x0800592d
 800598c:	080059dd 	.word	0x080059dd
 8005990:	0800592d 	.word	0x0800592d
 8005994:	0800592d 	.word	0x0800592d
 8005998:	08005a77 	.word	0x08005a77
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	1d1a      	adds	r2, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	602a      	str	r2, [r5, #0]
 80059a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ac:	2301      	movs	r3, #1
 80059ae:	e09f      	b.n	8005af0 <_printf_i+0x1ec>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	0607      	lsls	r7, r0, #24
 80059b6:	f103 0104 	add.w	r1, r3, #4
 80059ba:	6029      	str	r1, [r5, #0]
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0xbe>
 80059be:	681e      	ldr	r6, [r3, #0]
 80059c0:	e003      	b.n	80059ca <_printf_i+0xc6>
 80059c2:	0646      	lsls	r6, r0, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0xba>
 80059c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	da03      	bge.n	80059d6 <_printf_i+0xd2>
 80059ce:	232d      	movs	r3, #45	; 0x2d
 80059d0:	4276      	negs	r6, r6
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d6:	485a      	ldr	r0, [pc, #360]	; (8005b40 <_printf_i+0x23c>)
 80059d8:	230a      	movs	r3, #10
 80059da:	e012      	b.n	8005a02 <_printf_i+0xfe>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	6029      	str	r1, [r5, #0]
 80059e4:	0605      	lsls	r5, r0, #24
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0xe8>
 80059e8:	681e      	ldr	r6, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <_printf_i+0xee>
 80059ec:	0641      	lsls	r1, r0, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0xe4>
 80059f0:	881e      	ldrh	r6, [r3, #0]
 80059f2:	4853      	ldr	r0, [pc, #332]	; (8005b40 <_printf_i+0x23c>)
 80059f4:	2f6f      	cmp	r7, #111	; 0x6f
 80059f6:	bf0c      	ite	eq
 80059f8:	2308      	moveq	r3, #8
 80059fa:	230a      	movne	r3, #10
 80059fc:	2100      	movs	r1, #0
 80059fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a02:	6865      	ldr	r5, [r4, #4]
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	bfa2      	ittt	ge
 8005a0a:	6821      	ldrge	r1, [r4, #0]
 8005a0c:	f021 0104 	bicge.w	r1, r1, #4
 8005a10:	6021      	strge	r1, [r4, #0]
 8005a12:	b90e      	cbnz	r6, 8005a18 <_printf_i+0x114>
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	d04b      	beq.n	8005ab0 <_printf_i+0x1ac>
 8005a18:	4615      	mov	r5, r2
 8005a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a22:	5dc7      	ldrb	r7, [r0, r7]
 8005a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a28:	4637      	mov	r7, r6
 8005a2a:	42bb      	cmp	r3, r7
 8005a2c:	460e      	mov	r6, r1
 8005a2e:	d9f4      	bls.n	8005a1a <_printf_i+0x116>
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10b      	bne.n	8005a4c <_printf_i+0x148>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07de      	lsls	r6, r3, #31
 8005a38:	d508      	bpl.n	8005a4c <_printf_i+0x148>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	6861      	ldr	r1, [r4, #4]
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	bfde      	ittt	le
 8005a42:	2330      	movle	r3, #48	; 0x30
 8005a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a4c:	1b52      	subs	r2, r2, r5
 8005a4e:	6122      	str	r2, [r4, #16]
 8005a50:	f8cd a000 	str.w	sl, [sp]
 8005a54:	464b      	mov	r3, r9
 8005a56:	aa03      	add	r2, sp, #12
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	f7ff fee4 	bl	8005828 <_printf_common>
 8005a60:	3001      	adds	r0, #1
 8005a62:	d14a      	bne.n	8005afa <_printf_i+0x1f6>
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	b004      	add	sp, #16
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f043 0320 	orr.w	r3, r3, #32
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	4833      	ldr	r0, [pc, #204]	; (8005b44 <_printf_i+0x240>)
 8005a78:	2778      	movs	r7, #120	; 0x78
 8005a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	061f      	lsls	r7, r3, #24
 8005a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a88:	d402      	bmi.n	8005a90 <_printf_i+0x18c>
 8005a8a:	065f      	lsls	r7, r3, #25
 8005a8c:	bf48      	it	mi
 8005a8e:	b2b6      	uxthmi	r6, r6
 8005a90:	07df      	lsls	r7, r3, #31
 8005a92:	bf48      	it	mi
 8005a94:	f043 0320 	orrmi.w	r3, r3, #32
 8005a98:	6029      	str	r1, [r5, #0]
 8005a9a:	bf48      	it	mi
 8005a9c:	6023      	strmi	r3, [r4, #0]
 8005a9e:	b91e      	cbnz	r6, 8005aa8 <_printf_i+0x1a4>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f023 0320 	bic.w	r3, r3, #32
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	e7a7      	b.n	80059fc <_printf_i+0xf8>
 8005aac:	4824      	ldr	r0, [pc, #144]	; (8005b40 <_printf_i+0x23c>)
 8005aae:	e7e4      	b.n	8005a7a <_printf_i+0x176>
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	e7bd      	b.n	8005a30 <_printf_i+0x12c>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	6826      	ldr	r6, [r4, #0]
 8005ab8:	6961      	ldr	r1, [r4, #20]
 8005aba:	1d18      	adds	r0, r3, #4
 8005abc:	6028      	str	r0, [r5, #0]
 8005abe:	0635      	lsls	r5, r6, #24
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_i+0x1c4>
 8005ac4:	6019      	str	r1, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <_printf_i+0x1ca>
 8005ac8:	0670      	lsls	r0, r6, #25
 8005aca:	d5fb      	bpl.n	8005ac4 <_printf_i+0x1c0>
 8005acc:	8019      	strh	r1, [r3, #0]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	4615      	mov	r5, r2
 8005ad4:	e7bc      	b.n	8005a50 <_printf_i+0x14c>
 8005ad6:	682b      	ldr	r3, [r5, #0]
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	602a      	str	r2, [r5, #0]
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	6862      	ldr	r2, [r4, #4]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7fa fb74 	bl	80001d0 <memchr>
 8005ae8:	b108      	cbz	r0, 8005aee <_printf_i+0x1ea>
 8005aea:	1b40      	subs	r0, r0, r5
 8005aec:	6060      	str	r0, [r4, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	2300      	movs	r3, #0
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	e7aa      	b.n	8005a50 <_printf_i+0x14c>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d0ad      	beq.n	8005a64 <_printf_i+0x160>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	079b      	lsls	r3, r3, #30
 8005b0c:	d413      	bmi.n	8005b36 <_printf_i+0x232>
 8005b0e:	68e0      	ldr	r0, [r4, #12]
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	4298      	cmp	r0, r3
 8005b14:	bfb8      	it	lt
 8005b16:	4618      	movlt	r0, r3
 8005b18:	e7a6      	b.n	8005a68 <_printf_i+0x164>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	47d0      	blx	sl
 8005b24:	3001      	adds	r0, #1
 8005b26:	d09d      	beq.n	8005a64 <_printf_i+0x160>
 8005b28:	3501      	adds	r5, #1
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dcf2      	bgt.n	8005b1a <_printf_i+0x216>
 8005b34:	e7eb      	b.n	8005b0e <_printf_i+0x20a>
 8005b36:	2500      	movs	r5, #0
 8005b38:	f104 0619 	add.w	r6, r4, #25
 8005b3c:	e7f5      	b.n	8005b2a <_printf_i+0x226>
 8005b3e:	bf00      	nop
 8005b40:	08007caa 	.word	0x08007caa
 8005b44:	08007cbb 	.word	0x08007cbb

08005b48 <std>:
 8005b48:	2300      	movs	r3, #0
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b56:	6083      	str	r3, [r0, #8]
 8005b58:	8181      	strh	r1, [r0, #12]
 8005b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b5c:	81c2      	strh	r2, [r0, #14]
 8005b5e:	6183      	str	r3, [r0, #24]
 8005b60:	4619      	mov	r1, r3
 8005b62:	2208      	movs	r2, #8
 8005b64:	305c      	adds	r0, #92	; 0x5c
 8005b66:	f000 f906 	bl	8005d76 <memset>
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <std+0x58>)
 8005b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <std+0x5c>)
 8005b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <std+0x60>)
 8005b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x64>)
 8005b78:	6323      	str	r3, [r4, #48]	; 0x30
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x68>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d006      	beq.n	8005b90 <std+0x48>
 8005b82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b86:	4294      	cmp	r4, r2
 8005b88:	d002      	beq.n	8005b90 <std+0x48>
 8005b8a:	33d0      	adds	r3, #208	; 0xd0
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d105      	bne.n	8005b9c <std+0x54>
 8005b90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b98:	f000 b96a 	b.w	8005e70 <__retarget_lock_init_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005cf1 	.word	0x08005cf1
 8005ba4:	08005d13 	.word	0x08005d13
 8005ba8:	08005d4b 	.word	0x08005d4b
 8005bac:	08005d6f 	.word	0x08005d6f
 8005bb0:	20000364 	.word	0x20000364

08005bb4 <stdio_exit_handler>:
 8005bb4:	4a02      	ldr	r2, [pc, #8]	; (8005bc0 <stdio_exit_handler+0xc>)
 8005bb6:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <stdio_exit_handler+0x10>)
 8005bb8:	4803      	ldr	r0, [pc, #12]	; (8005bc8 <stdio_exit_handler+0x14>)
 8005bba:	f000 b869 	b.w	8005c90 <_fwalk_sglue>
 8005bbe:	bf00      	nop
 8005bc0:	20000024 	.word	0x20000024
 8005bc4:	080077f9 	.word	0x080077f9
 8005bc8:	20000030 	.word	0x20000030

08005bcc <cleanup_stdio>:
 8005bcc:	6841      	ldr	r1, [r0, #4]
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <cleanup_stdio+0x34>)
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d001      	beq.n	8005bdc <cleanup_stdio+0x10>
 8005bd8:	f001 fe0e 	bl	80077f8 <_fflush_r>
 8005bdc:	68a1      	ldr	r1, [r4, #8]
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <cleanup_stdio+0x38>)
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <cleanup_stdio+0x1e>
 8005be4:	4620      	mov	r0, r4
 8005be6:	f001 fe07 	bl	80077f8 <_fflush_r>
 8005bea:	68e1      	ldr	r1, [r4, #12]
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <cleanup_stdio+0x3c>)
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d004      	beq.n	8005bfc <cleanup_stdio+0x30>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f001 bdfe 	b.w	80077f8 <_fflush_r>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000364 	.word	0x20000364
 8005c04:	200003cc 	.word	0x200003cc
 8005c08:	20000434 	.word	0x20000434

08005c0c <global_stdio_init.part.0>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <global_stdio_init.part.0+0x30>)
 8005c10:	4c0b      	ldr	r4, [pc, #44]	; (8005c40 <global_stdio_init.part.0+0x34>)
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <global_stdio_init.part.0+0x38>)
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4620      	mov	r0, r4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	f7ff ff94 	bl	8005b48 <std>
 8005c20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c24:	2201      	movs	r2, #1
 8005c26:	2109      	movs	r1, #9
 8005c28:	f7ff ff8e 	bl	8005b48 <std>
 8005c2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c30:	2202      	movs	r2, #2
 8005c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c36:	2112      	movs	r1, #18
 8005c38:	f7ff bf86 	b.w	8005b48 <std>
 8005c3c:	2000049c 	.word	0x2000049c
 8005c40:	20000364 	.word	0x20000364
 8005c44:	08005bb5 	.word	0x08005bb5

08005c48 <__sfp_lock_acquire>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__sfp_lock_acquire+0x8>)
 8005c4a:	f000 b912 	b.w	8005e72 <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	200004a5 	.word	0x200004a5

08005c54 <__sfp_lock_release>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__sfp_lock_release+0x8>)
 8005c56:	f000 b90d 	b.w	8005e74 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	200004a5 	.word	0x200004a5

08005c60 <__sinit>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	f7ff fff0 	bl	8005c48 <__sfp_lock_acquire>
 8005c68:	6a23      	ldr	r3, [r4, #32]
 8005c6a:	b11b      	cbz	r3, 8005c74 <__sinit+0x14>
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c70:	f7ff bff0 	b.w	8005c54 <__sfp_lock_release>
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__sinit+0x28>)
 8005c76:	6223      	str	r3, [r4, #32]
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <__sinit+0x2c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f5      	bne.n	8005c6c <__sinit+0xc>
 8005c80:	f7ff ffc4 	bl	8005c0c <global_stdio_init.part.0>
 8005c84:	e7f2      	b.n	8005c6c <__sinit+0xc>
 8005c86:	bf00      	nop
 8005c88:	08005bcd 	.word	0x08005bcd
 8005c8c:	2000049c 	.word	0x2000049c

08005c90 <_fwalk_sglue>:
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4607      	mov	r7, r0
 8005c96:	4688      	mov	r8, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca4:	d505      	bpl.n	8005cb2 <_fwalk_sglue+0x22>
 8005ca6:	6824      	ldr	r4, [r4, #0]
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d1f7      	bne.n	8005c9c <_fwalk_sglue+0xc>
 8005cac:	4630      	mov	r0, r6
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d907      	bls.n	8005cc8 <_fwalk_sglue+0x38>
 8005cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	d003      	beq.n	8005cc8 <_fwalk_sglue+0x38>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	4306      	orrs	r6, r0
 8005cc8:	3568      	adds	r5, #104	; 0x68
 8005cca:	e7e9      	b.n	8005ca0 <_fwalk_sglue+0x10>

08005ccc <iprintf>:
 8005ccc:	b40f      	push	{r0, r1, r2, r3}
 8005cce:	b507      	push	{r0, r1, r2, lr}
 8005cd0:	4906      	ldr	r1, [pc, #24]	; (8005cec <iprintf+0x20>)
 8005cd2:	ab04      	add	r3, sp, #16
 8005cd4:	6808      	ldr	r0, [r1, #0]
 8005cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cda:	6881      	ldr	r1, [r0, #8]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f001 fbeb 	bl	80074b8 <_vfiprintf_r>
 8005ce2:	b003      	add	sp, #12
 8005ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce8:	b004      	add	sp, #16
 8005cea:	4770      	bx	lr
 8005cec:	2000007c 	.word	0x2000007c

08005cf0 <__sread>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	f000 f86c 	bl	8005dd4 <_read_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	bfab      	itete	ge
 8005d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d02:	89a3      	ldrhlt	r3, [r4, #12]
 8005d04:	181b      	addge	r3, r3, r0
 8005d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d0a:	bfac      	ite	ge
 8005d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d0e:	81a3      	strhlt	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__swrite>:
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	461f      	mov	r7, r3
 8005d18:	898b      	ldrh	r3, [r1, #12]
 8005d1a:	05db      	lsls	r3, r3, #23
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4616      	mov	r6, r2
 8005d22:	d505      	bpl.n	8005d30 <__swrite+0x1e>
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f000 f840 	bl	8005db0 <_lseek_r>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	463b      	mov	r3, r7
 8005d40:	4628      	mov	r0, r5
 8005d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	f000 b857 	b.w	8005df8 <_write_r>

08005d4a <__sseek>:
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d52:	f000 f82d 	bl	8005db0 <_lseek_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	bf15      	itete	ne
 8005d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d66:	81a3      	strheq	r3, [r4, #12]
 8005d68:	bf18      	it	ne
 8005d6a:	81a3      	strhne	r3, [r4, #12]
 8005d6c:	bd10      	pop	{r4, pc}

08005d6e <__sclose>:
 8005d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d72:	f000 b80d 	b.w	8005d90 <_close_r>

08005d76 <memset>:
 8005d76:	4402      	add	r2, r0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d100      	bne.n	8005d80 <memset+0xa>
 8005d7e:	4770      	bx	lr
 8005d80:	f803 1b01 	strb.w	r1, [r3], #1
 8005d84:	e7f9      	b.n	8005d7a <memset+0x4>
	...

08005d88 <_localeconv_r>:
 8005d88:	4800      	ldr	r0, [pc, #0]	; (8005d8c <_localeconv_r+0x4>)
 8005d8a:	4770      	bx	lr
 8005d8c:	20000170 	.word	0x20000170

08005d90 <_close_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_close_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fb fcef 	bl	800177e <_close>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_close_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_close_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	200004a0 	.word	0x200004a0

08005db0 <_lseek_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_lseek_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fb fd04 	bl	80017cc <_lseek>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_lseek_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_lseek_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	200004a0 	.word	0x200004a0

08005dd4 <_read_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_read_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb fc92 	bl	800170c <_read>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_read_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_read_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200004a0 	.word	0x200004a0

08005df8 <_write_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	; (8005e18 <_write_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb fc9d 	bl	8001746 <_write>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_write_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_write_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200004a0 	.word	0x200004a0

08005e1c <__errno>:
 8005e1c:	4b01      	ldr	r3, [pc, #4]	; (8005e24 <__errno+0x8>)
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000007c 	.word	0x2000007c

08005e28 <__libc_init_array>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	4d0d      	ldr	r5, [pc, #52]	; (8005e60 <__libc_init_array+0x38>)
 8005e2c:	4c0d      	ldr	r4, [pc, #52]	; (8005e64 <__libc_init_array+0x3c>)
 8005e2e:	1b64      	subs	r4, r4, r5
 8005e30:	10a4      	asrs	r4, r4, #2
 8005e32:	2600      	movs	r6, #0
 8005e34:	42a6      	cmp	r6, r4
 8005e36:	d109      	bne.n	8005e4c <__libc_init_array+0x24>
 8005e38:	4d0b      	ldr	r5, [pc, #44]	; (8005e68 <__libc_init_array+0x40>)
 8005e3a:	4c0c      	ldr	r4, [pc, #48]	; (8005e6c <__libc_init_array+0x44>)
 8005e3c:	f001 feee 	bl	8007c1c <_init>
 8005e40:	1b64      	subs	r4, r4, r5
 8005e42:	10a4      	asrs	r4, r4, #2
 8005e44:	2600      	movs	r6, #0
 8005e46:	42a6      	cmp	r6, r4
 8005e48:	d105      	bne.n	8005e56 <__libc_init_array+0x2e>
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e50:	4798      	blx	r3
 8005e52:	3601      	adds	r6, #1
 8005e54:	e7ee      	b.n	8005e34 <__libc_init_array+0xc>
 8005e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5a:	4798      	blx	r3
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	e7f2      	b.n	8005e46 <__libc_init_array+0x1e>
 8005e60:	0800800c 	.word	0x0800800c
 8005e64:	0800800c 	.word	0x0800800c
 8005e68:	0800800c 	.word	0x0800800c
 8005e6c:	08008010 	.word	0x08008010

08005e70 <__retarget_lock_init_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_acquire_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__retarget_lock_release_recursive>:
 8005e74:	4770      	bx	lr

08005e76 <quorem>:
 8005e76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6903      	ldr	r3, [r0, #16]
 8005e7c:	690c      	ldr	r4, [r1, #16]
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	4607      	mov	r7, r0
 8005e82:	db7e      	blt.n	8005f82 <quorem+0x10c>
 8005e84:	3c01      	subs	r4, #1
 8005e86:	f101 0814 	add.w	r8, r1, #20
 8005e8a:	f100 0514 	add.w	r5, r0, #20
 8005e8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ea4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ea8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eac:	d331      	bcc.n	8005f12 <quorem+0x9c>
 8005eae:	f04f 0e00 	mov.w	lr, #0
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	46ac      	mov	ip, r5
 8005eb6:	46f2      	mov	sl, lr
 8005eb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ebc:	b293      	uxth	r3, r2
 8005ebe:	fb06 e303 	mla	r3, r6, r3, lr
 8005ec2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ec6:	0c1a      	lsrs	r2, r3, #16
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ebaa 0303 	sub.w	r3, sl, r3
 8005ece:	f8dc a000 	ldr.w	sl, [ip]
 8005ed2:	fa13 f38a 	uxtah	r3, r3, sl
 8005ed6:	fb06 220e 	mla	r2, r6, lr, r2
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	9b00      	ldr	r3, [sp, #0]
 8005ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eec:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ef0:	4581      	cmp	r9, r0
 8005ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ef6:	f84c 3b04 	str.w	r3, [ip], #4
 8005efa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005efe:	d2db      	bcs.n	8005eb8 <quorem+0x42>
 8005f00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f04:	b92b      	cbnz	r3, 8005f12 <quorem+0x9c>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	429d      	cmp	r5, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	d32c      	bcc.n	8005f6a <quorem+0xf4>
 8005f10:	613c      	str	r4, [r7, #16]
 8005f12:	4638      	mov	r0, r7
 8005f14:	f001 f9a6 	bl	8007264 <__mcmp>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	db22      	blt.n	8005f62 <quorem+0xec>
 8005f1c:	3601      	adds	r6, #1
 8005f1e:	4629      	mov	r1, r5
 8005f20:	2000      	movs	r0, #0
 8005f22:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f26:	f8d1 c000 	ldr.w	ip, [r1]
 8005f2a:	b293      	uxth	r3, r2
 8005f2c:	1ac3      	subs	r3, r0, r3
 8005f2e:	0c12      	lsrs	r2, r2, #16
 8005f30:	fa13 f38c 	uxtah	r3, r3, ip
 8005f34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f42:	45c1      	cmp	r9, r8
 8005f44:	f841 3b04 	str.w	r3, [r1], #4
 8005f48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f4c:	d2e9      	bcs.n	8005f22 <quorem+0xac>
 8005f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f56:	b922      	cbnz	r2, 8005f62 <quorem+0xec>
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	d30a      	bcc.n	8005f76 <quorem+0x100>
 8005f60:	613c      	str	r4, [r7, #16]
 8005f62:	4630      	mov	r0, r6
 8005f64:	b003      	add	sp, #12
 8005f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d1ce      	bne.n	8005f10 <quorem+0x9a>
 8005f72:	3c01      	subs	r4, #1
 8005f74:	e7c9      	b.n	8005f0a <quorem+0x94>
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d1f0      	bne.n	8005f60 <quorem+0xea>
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	e7eb      	b.n	8005f5a <quorem+0xe4>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e7ee      	b.n	8005f64 <quorem+0xee>
	...

08005f88 <_dtoa_r>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	ed2d 8b04 	vpush	{d8-d9}
 8005f90:	69c5      	ldr	r5, [r0, #28]
 8005f92:	b093      	sub	sp, #76	; 0x4c
 8005f94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f98:	ec57 6b10 	vmov	r6, r7, d0
 8005f9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fa0:	9107      	str	r1, [sp, #28]
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fa6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fa8:	b975      	cbnz	r5, 8005fc8 <_dtoa_r+0x40>
 8005faa:	2010      	movs	r0, #16
 8005fac:	f000 fe2a 	bl	8006c04 <malloc>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	61e0      	str	r0, [r4, #28]
 8005fb4:	b920      	cbnz	r0, 8005fc0 <_dtoa_r+0x38>
 8005fb6:	4bae      	ldr	r3, [pc, #696]	; (8006270 <_dtoa_r+0x2e8>)
 8005fb8:	21ef      	movs	r1, #239	; 0xef
 8005fba:	48ae      	ldr	r0, [pc, #696]	; (8006274 <_dtoa_r+0x2ec>)
 8005fbc:	f001 fcf8 	bl	80079b0 <__assert_func>
 8005fc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fc4:	6005      	str	r5, [r0, #0]
 8005fc6:	60c5      	str	r5, [r0, #12]
 8005fc8:	69e3      	ldr	r3, [r4, #28]
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	b151      	cbz	r1, 8005fe4 <_dtoa_r+0x5c>
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	604a      	str	r2, [r1, #4]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4093      	lsls	r3, r2
 8005fd6:	608b      	str	r3, [r1, #8]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 ff07 	bl	8006dec <_Bfree>
 8005fde:	69e3      	ldr	r3, [r4, #28]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	1e3b      	subs	r3, r7, #0
 8005fe6:	bfbb      	ittet	lt
 8005fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	9303      	strlt	r3, [sp, #12]
 8005fee:	2300      	movge	r3, #0
 8005ff0:	2201      	movlt	r2, #1
 8005ff2:	bfac      	ite	ge
 8005ff4:	f8c8 3000 	strge.w	r3, [r8]
 8005ff8:	f8c8 2000 	strlt.w	r2, [r8]
 8005ffc:	4b9e      	ldr	r3, [pc, #632]	; (8006278 <_dtoa_r+0x2f0>)
 8005ffe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006002:	ea33 0308 	bics.w	r3, r3, r8
 8006006:	d11b      	bne.n	8006040 <_dtoa_r+0xb8>
 8006008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800600a:	f242 730f 	movw	r3, #9999	; 0x270f
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006014:	4333      	orrs	r3, r6
 8006016:	f000 8593 	beq.w	8006b40 <_dtoa_r+0xbb8>
 800601a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800601c:	b963      	cbnz	r3, 8006038 <_dtoa_r+0xb0>
 800601e:	4b97      	ldr	r3, [pc, #604]	; (800627c <_dtoa_r+0x2f4>)
 8006020:	e027      	b.n	8006072 <_dtoa_r+0xea>
 8006022:	4b97      	ldr	r3, [pc, #604]	; (8006280 <_dtoa_r+0x2f8>)
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	9800      	ldr	r0, [sp, #0]
 800602e:	b013      	add	sp, #76	; 0x4c
 8006030:	ecbd 8b04 	vpop	{d8-d9}
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	4b90      	ldr	r3, [pc, #576]	; (800627c <_dtoa_r+0x2f4>)
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	3303      	adds	r3, #3
 800603e:	e7f3      	b.n	8006028 <_dtoa_r+0xa0>
 8006040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	ec51 0b17 	vmov	r0, r1, d7
 800604a:	eeb0 8a47 	vmov.f32	s16, s14
 800604e:	eef0 8a67 	vmov.f32	s17, s15
 8006052:	2300      	movs	r3, #0
 8006054:	f7fa fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006058:	4681      	mov	r9, r0
 800605a:	b160      	cbz	r0, 8006076 <_dtoa_r+0xee>
 800605c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800605e:	2301      	movs	r3, #1
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8568 	beq.w	8006b3a <_dtoa_r+0xbb2>
 800606a:	4b86      	ldr	r3, [pc, #536]	; (8006284 <_dtoa_r+0x2fc>)
 800606c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	e7da      	b.n	800602c <_dtoa_r+0xa4>
 8006076:	aa10      	add	r2, sp, #64	; 0x40
 8006078:	a911      	add	r1, sp, #68	; 0x44
 800607a:	4620      	mov	r0, r4
 800607c:	eeb0 0a48 	vmov.f32	s0, s16
 8006080:	eef0 0a68 	vmov.f32	s1, s17
 8006084:	f001 f994 	bl	80073b0 <__d2b>
 8006088:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800608c:	4682      	mov	sl, r0
 800608e:	2d00      	cmp	r5, #0
 8006090:	d07f      	beq.n	8006192 <_dtoa_r+0x20a>
 8006092:	ee18 3a90 	vmov	r3, s17
 8006096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800609a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800609e:	ec51 0b18 	vmov	r0, r1, d8
 80060a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060ae:	4619      	mov	r1, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	4b75      	ldr	r3, [pc, #468]	; (8006288 <_dtoa_r+0x300>)
 80060b4:	f7fa f8e8 	bl	8000288 <__aeabi_dsub>
 80060b8:	a367      	add	r3, pc, #412	; (adr r3, 8006258 <_dtoa_r+0x2d0>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	a367      	add	r3, pc, #412	; (adr r3, 8006260 <_dtoa_r+0x2d8>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4606      	mov	r6, r0
 80060ce:	4628      	mov	r0, r5
 80060d0:	460f      	mov	r7, r1
 80060d2:	f7fa fa27 	bl	8000524 <__aeabi_i2d>
 80060d6:	a364      	add	r3, pc, #400	; (adr r3, 8006268 <_dtoa_r+0x2e0>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f8d0 	bl	800028c <__adddf3>
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	f7fa fd32 	bl	8000b58 <__aeabi_d2iz>
 80060f4:	2200      	movs	r2, #0
 80060f6:	4683      	mov	fp, r0
 80060f8:	2300      	movs	r3, #0
 80060fa:	4630      	mov	r0, r6
 80060fc:	4639      	mov	r1, r7
 80060fe:	f7fa fced 	bl	8000adc <__aeabi_dcmplt>
 8006102:	b148      	cbz	r0, 8006118 <_dtoa_r+0x190>
 8006104:	4658      	mov	r0, fp
 8006106:	f7fa fa0d 	bl	8000524 <__aeabi_i2d>
 800610a:	4632      	mov	r2, r6
 800610c:	463b      	mov	r3, r7
 800610e:	f7fa fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006112:	b908      	cbnz	r0, 8006118 <_dtoa_r+0x190>
 8006114:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006118:	f1bb 0f16 	cmp.w	fp, #22
 800611c:	d857      	bhi.n	80061ce <_dtoa_r+0x246>
 800611e:	4b5b      	ldr	r3, [pc, #364]	; (800628c <_dtoa_r+0x304>)
 8006120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	ec51 0b18 	vmov	r0, r1, d8
 800612c:	f7fa fcd6 	bl	8000adc <__aeabi_dcmplt>
 8006130:	2800      	cmp	r0, #0
 8006132:	d04e      	beq.n	80061d2 <_dtoa_r+0x24a>
 8006134:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006138:	2300      	movs	r3, #0
 800613a:	930c      	str	r3, [sp, #48]	; 0x30
 800613c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800613e:	1b5b      	subs	r3, r3, r5
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	bf45      	ittet	mi
 8006144:	f1c3 0301 	rsbmi	r3, r3, #1
 8006148:	9305      	strmi	r3, [sp, #20]
 800614a:	2300      	movpl	r3, #0
 800614c:	2300      	movmi	r3, #0
 800614e:	9206      	str	r2, [sp, #24]
 8006150:	bf54      	ite	pl
 8006152:	9305      	strpl	r3, [sp, #20]
 8006154:	9306      	strmi	r3, [sp, #24]
 8006156:	f1bb 0f00 	cmp.w	fp, #0
 800615a:	db3c      	blt.n	80061d6 <_dtoa_r+0x24e>
 800615c:	9b06      	ldr	r3, [sp, #24]
 800615e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006162:	445b      	add	r3, fp
 8006164:	9306      	str	r3, [sp, #24]
 8006166:	2300      	movs	r3, #0
 8006168:	9308      	str	r3, [sp, #32]
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	2b09      	cmp	r3, #9
 800616e:	d868      	bhi.n	8006242 <_dtoa_r+0x2ba>
 8006170:	2b05      	cmp	r3, #5
 8006172:	bfc4      	itt	gt
 8006174:	3b04      	subgt	r3, #4
 8006176:	9307      	strgt	r3, [sp, #28]
 8006178:	9b07      	ldr	r3, [sp, #28]
 800617a:	f1a3 0302 	sub.w	r3, r3, #2
 800617e:	bfcc      	ite	gt
 8006180:	2500      	movgt	r5, #0
 8006182:	2501      	movle	r5, #1
 8006184:	2b03      	cmp	r3, #3
 8006186:	f200 8085 	bhi.w	8006294 <_dtoa_r+0x30c>
 800618a:	e8df f003 	tbb	[pc, r3]
 800618e:	3b2e      	.short	0x3b2e
 8006190:	5839      	.short	0x5839
 8006192:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006196:	441d      	add	r5, r3
 8006198:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800619c:	2b20      	cmp	r3, #32
 800619e:	bfc1      	itttt	gt
 80061a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061b0:	bfd6      	itet	le
 80061b2:	f1c3 0320 	rsble	r3, r3, #32
 80061b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061ba:	fa06 f003 	lslle.w	r0, r6, r3
 80061be:	f7fa f9a1 	bl	8000504 <__aeabi_ui2d>
 80061c2:	2201      	movs	r2, #1
 80061c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061c8:	3d01      	subs	r5, #1
 80061ca:	920e      	str	r2, [sp, #56]	; 0x38
 80061cc:	e76f      	b.n	80060ae <_dtoa_r+0x126>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e7b3      	b.n	800613a <_dtoa_r+0x1b2>
 80061d2:	900c      	str	r0, [sp, #48]	; 0x30
 80061d4:	e7b2      	b.n	800613c <_dtoa_r+0x1b4>
 80061d6:	9b05      	ldr	r3, [sp, #20]
 80061d8:	eba3 030b 	sub.w	r3, r3, fp
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	f1cb 0300 	rsb	r3, fp, #0
 80061e2:	9308      	str	r3, [sp, #32]
 80061e4:	2300      	movs	r3, #0
 80061e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e8:	e7bf      	b.n	800616a <_dtoa_r+0x1e2>
 80061ea:	2300      	movs	r3, #0
 80061ec:	9309      	str	r3, [sp, #36]	; 0x24
 80061ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dc52      	bgt.n	800629a <_dtoa_r+0x312>
 80061f4:	2301      	movs	r3, #1
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	461a      	mov	r2, r3
 80061fc:	920a      	str	r2, [sp, #40]	; 0x28
 80061fe:	e00b      	b.n	8006218 <_dtoa_r+0x290>
 8006200:	2301      	movs	r3, #1
 8006202:	e7f3      	b.n	80061ec <_dtoa_r+0x264>
 8006204:	2300      	movs	r3, #0
 8006206:	9309      	str	r3, [sp, #36]	; 0x24
 8006208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620a:	445b      	add	r3, fp
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	bfb8      	it	lt
 8006216:	2301      	movlt	r3, #1
 8006218:	69e0      	ldr	r0, [r4, #28]
 800621a:	2100      	movs	r1, #0
 800621c:	2204      	movs	r2, #4
 800621e:	f102 0614 	add.w	r6, r2, #20
 8006222:	429e      	cmp	r6, r3
 8006224:	d93d      	bls.n	80062a2 <_dtoa_r+0x31a>
 8006226:	6041      	str	r1, [r0, #4]
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fd9f 	bl	8006d6c <_Balloc>
 800622e:	9000      	str	r0, [sp, #0]
 8006230:	2800      	cmp	r0, #0
 8006232:	d139      	bne.n	80062a8 <_dtoa_r+0x320>
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <_dtoa_r+0x308>)
 8006236:	4602      	mov	r2, r0
 8006238:	f240 11af 	movw	r1, #431	; 0x1af
 800623c:	e6bd      	b.n	8005fba <_dtoa_r+0x32>
 800623e:	2301      	movs	r3, #1
 8006240:	e7e1      	b.n	8006206 <_dtoa_r+0x27e>
 8006242:	2501      	movs	r5, #1
 8006244:	2300      	movs	r3, #0
 8006246:	9307      	str	r3, [sp, #28]
 8006248:	9509      	str	r5, [sp, #36]	; 0x24
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	9304      	str	r3, [sp, #16]
 8006252:	2200      	movs	r2, #0
 8006254:	2312      	movs	r3, #18
 8006256:	e7d1      	b.n	80061fc <_dtoa_r+0x274>
 8006258:	636f4361 	.word	0x636f4361
 800625c:	3fd287a7 	.word	0x3fd287a7
 8006260:	8b60c8b3 	.word	0x8b60c8b3
 8006264:	3fc68a28 	.word	0x3fc68a28
 8006268:	509f79fb 	.word	0x509f79fb
 800626c:	3fd34413 	.word	0x3fd34413
 8006270:	08007cd9 	.word	0x08007cd9
 8006274:	08007cf0 	.word	0x08007cf0
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	08007cd5 	.word	0x08007cd5
 8006280:	08007ccc 	.word	0x08007ccc
 8006284:	08007ca9 	.word	0x08007ca9
 8006288:	3ff80000 	.word	0x3ff80000
 800628c:	08007de0 	.word	0x08007de0
 8006290:	08007d48 	.word	0x08007d48
 8006294:	2301      	movs	r3, #1
 8006296:	9309      	str	r3, [sp, #36]	; 0x24
 8006298:	e7d7      	b.n	800624a <_dtoa_r+0x2c2>
 800629a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	e7ba      	b.n	8006218 <_dtoa_r+0x290>
 80062a2:	3101      	adds	r1, #1
 80062a4:	0052      	lsls	r2, r2, #1
 80062a6:	e7ba      	b.n	800621e <_dtoa_r+0x296>
 80062a8:	69e3      	ldr	r3, [r4, #28]
 80062aa:	9a00      	ldr	r2, [sp, #0]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	2b0e      	cmp	r3, #14
 80062b2:	f200 80a8 	bhi.w	8006406 <_dtoa_r+0x47e>
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	f000 80a5 	beq.w	8006406 <_dtoa_r+0x47e>
 80062bc:	f1bb 0f00 	cmp.w	fp, #0
 80062c0:	dd38      	ble.n	8006334 <_dtoa_r+0x3ac>
 80062c2:	4bc0      	ldr	r3, [pc, #768]	; (80065c4 <_dtoa_r+0x63c>)
 80062c4:	f00b 020f 	and.w	r2, fp, #15
 80062c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062d8:	d019      	beq.n	800630e <_dtoa_r+0x386>
 80062da:	4bbb      	ldr	r3, [pc, #748]	; (80065c8 <_dtoa_r+0x640>)
 80062dc:	ec51 0b18 	vmov	r0, r1, d8
 80062e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062e4:	f7fa fab2 	bl	800084c <__aeabi_ddiv>
 80062e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ec:	f008 080f 	and.w	r8, r8, #15
 80062f0:	2503      	movs	r5, #3
 80062f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065c8 <_dtoa_r+0x640>
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	d10a      	bne.n	8006312 <_dtoa_r+0x38a>
 80062fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006300:	4632      	mov	r2, r6
 8006302:	463b      	mov	r3, r7
 8006304:	f7fa faa2 	bl	800084c <__aeabi_ddiv>
 8006308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800630c:	e02b      	b.n	8006366 <_dtoa_r+0x3de>
 800630e:	2502      	movs	r5, #2
 8006310:	e7ef      	b.n	80062f2 <_dtoa_r+0x36a>
 8006312:	f018 0f01 	tst.w	r8, #1
 8006316:	d008      	beq.n	800632a <_dtoa_r+0x3a2>
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006320:	f7fa f96a 	bl	80005f8 <__aeabi_dmul>
 8006324:	3501      	adds	r5, #1
 8006326:	4606      	mov	r6, r0
 8006328:	460f      	mov	r7, r1
 800632a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800632e:	f109 0908 	add.w	r9, r9, #8
 8006332:	e7e0      	b.n	80062f6 <_dtoa_r+0x36e>
 8006334:	f000 809f 	beq.w	8006476 <_dtoa_r+0x4ee>
 8006338:	f1cb 0600 	rsb	r6, fp, #0
 800633c:	4ba1      	ldr	r3, [pc, #644]	; (80065c4 <_dtoa_r+0x63c>)
 800633e:	4fa2      	ldr	r7, [pc, #648]	; (80065c8 <_dtoa_r+0x640>)
 8006340:	f006 020f 	and.w	r2, r6, #15
 8006344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	ec51 0b18 	vmov	r0, r1, d8
 8006350:	f7fa f952 	bl	80005f8 <__aeabi_dmul>
 8006354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006358:	1136      	asrs	r6, r6, #4
 800635a:	2300      	movs	r3, #0
 800635c:	2502      	movs	r5, #2
 800635e:	2e00      	cmp	r6, #0
 8006360:	d17e      	bne.n	8006460 <_dtoa_r+0x4d8>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d0      	bne.n	8006308 <_dtoa_r+0x380>
 8006366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006368:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8084 	beq.w	800647a <_dtoa_r+0x4f2>
 8006372:	4b96      	ldr	r3, [pc, #600]	; (80065cc <_dtoa_r+0x644>)
 8006374:	2200      	movs	r2, #0
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7fa fbaf 	bl	8000adc <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d07b      	beq.n	800647a <_dtoa_r+0x4f2>
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d078      	beq.n	800647a <_dtoa_r+0x4f2>
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	dd39      	ble.n	8006402 <_dtoa_r+0x47a>
 800638e:	4b90      	ldr	r3, [pc, #576]	; (80065d0 <_dtoa_r+0x648>)
 8006390:	2200      	movs	r2, #0
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800639e:	9e01      	ldr	r6, [sp, #4]
 80063a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063a4:	3501      	adds	r5, #1
 80063a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7fa f8ba 	bl	8000524 <__aeabi_i2d>
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4b86      	ldr	r3, [pc, #536]	; (80065d4 <_dtoa_r+0x64c>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	f7f9 ff66 	bl	800028c <__adddf3>
 80063c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	d158      	bne.n	8006480 <_dtoa_r+0x4f8>
 80063ce:	4b82      	ldr	r3, [pc, #520]	; (80065d8 <_dtoa_r+0x650>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7f9 ff57 	bl	8000288 <__aeabi_dsub>
 80063da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063de:	4680      	mov	r8, r0
 80063e0:	4689      	mov	r9, r1
 80063e2:	f7fa fb99 	bl	8000b18 <__aeabi_dcmpgt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f040 8296 	bne.w	8006918 <_dtoa_r+0x990>
 80063ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063f0:	4640      	mov	r0, r8
 80063f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063f6:	4649      	mov	r1, r9
 80063f8:	f7fa fb70 	bl	8000adc <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 8289 	bne.w	8006914 <_dtoa_r+0x98c>
 8006402:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006408:	2b00      	cmp	r3, #0
 800640a:	f2c0 814e 	blt.w	80066aa <_dtoa_r+0x722>
 800640e:	f1bb 0f0e 	cmp.w	fp, #14
 8006412:	f300 814a 	bgt.w	80066aa <_dtoa_r+0x722>
 8006416:	4b6b      	ldr	r3, [pc, #428]	; (80065c4 <_dtoa_r+0x63c>)
 8006418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800641c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	f280 80dc 	bge.w	80065e0 <_dtoa_r+0x658>
 8006428:	9b04      	ldr	r3, [sp, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f300 80d8 	bgt.w	80065e0 <_dtoa_r+0x658>
 8006430:	f040 826f 	bne.w	8006912 <_dtoa_r+0x98a>
 8006434:	4b68      	ldr	r3, [pc, #416]	; (80065d8 <_dtoa_r+0x650>)
 8006436:	2200      	movs	r2, #0
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa f8dc 	bl	80005f8 <__aeabi_dmul>
 8006440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006444:	f7fa fb5e 	bl	8000b04 <__aeabi_dcmpge>
 8006448:	9e04      	ldr	r6, [sp, #16]
 800644a:	4637      	mov	r7, r6
 800644c:	2800      	cmp	r0, #0
 800644e:	f040 8245 	bne.w	80068dc <_dtoa_r+0x954>
 8006452:	9d00      	ldr	r5, [sp, #0]
 8006454:	2331      	movs	r3, #49	; 0x31
 8006456:	f805 3b01 	strb.w	r3, [r5], #1
 800645a:	f10b 0b01 	add.w	fp, fp, #1
 800645e:	e241      	b.n	80068e4 <_dtoa_r+0x95c>
 8006460:	07f2      	lsls	r2, r6, #31
 8006462:	d505      	bpl.n	8006470 <_dtoa_r+0x4e8>
 8006464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	3501      	adds	r5, #1
 800646e:	2301      	movs	r3, #1
 8006470:	1076      	asrs	r6, r6, #1
 8006472:	3708      	adds	r7, #8
 8006474:	e773      	b.n	800635e <_dtoa_r+0x3d6>
 8006476:	2502      	movs	r5, #2
 8006478:	e775      	b.n	8006366 <_dtoa_r+0x3de>
 800647a:	9e04      	ldr	r6, [sp, #16]
 800647c:	465f      	mov	r7, fp
 800647e:	e792      	b.n	80063a6 <_dtoa_r+0x41e>
 8006480:	9900      	ldr	r1, [sp, #0]
 8006482:	4b50      	ldr	r3, [pc, #320]	; (80065c4 <_dtoa_r+0x63c>)
 8006484:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006488:	4431      	add	r1, r6
 800648a:	9102      	str	r1, [sp, #8]
 800648c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800648e:	eeb0 9a47 	vmov.f32	s18, s14
 8006492:	eef0 9a67 	vmov.f32	s19, s15
 8006496:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800649a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800649e:	2900      	cmp	r1, #0
 80064a0:	d044      	beq.n	800652c <_dtoa_r+0x5a4>
 80064a2:	494e      	ldr	r1, [pc, #312]	; (80065dc <_dtoa_r+0x654>)
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7fa f9d1 	bl	800084c <__aeabi_ddiv>
 80064aa:	ec53 2b19 	vmov	r2, r3, d9
 80064ae:	f7f9 feeb 	bl	8000288 <__aeabi_dsub>
 80064b2:	9d00      	ldr	r5, [sp, #0]
 80064b4:	ec41 0b19 	vmov	d9, r0, r1
 80064b8:	4649      	mov	r1, r9
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7fa fb4c 	bl	8000b58 <__aeabi_d2iz>
 80064c0:	4606      	mov	r6, r0
 80064c2:	f7fa f82f 	bl	8000524 <__aeabi_i2d>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	3630      	adds	r6, #48	; 0x30
 80064d4:	f805 6b01 	strb.w	r6, [r5], #1
 80064d8:	ec53 2b19 	vmov	r2, r3, d9
 80064dc:	4680      	mov	r8, r0
 80064de:	4689      	mov	r9, r1
 80064e0:	f7fa fafc 	bl	8000adc <__aeabi_dcmplt>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d164      	bne.n	80065b2 <_dtoa_r+0x62a>
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	4937      	ldr	r1, [pc, #220]	; (80065cc <_dtoa_r+0x644>)
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7f9 feca 	bl	8000288 <__aeabi_dsub>
 80064f4:	ec53 2b19 	vmov	r2, r3, d9
 80064f8:	f7fa faf0 	bl	8000adc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f040 80b6 	bne.w	800666e <_dtoa_r+0x6e6>
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	429d      	cmp	r5, r3
 8006506:	f43f af7c 	beq.w	8006402 <_dtoa_r+0x47a>
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <_dtoa_r+0x648>)
 800650c:	ec51 0b19 	vmov	r0, r1, d9
 8006510:	2200      	movs	r2, #0
 8006512:	f7fa f871 	bl	80005f8 <__aeabi_dmul>
 8006516:	4b2e      	ldr	r3, [pc, #184]	; (80065d0 <_dtoa_r+0x648>)
 8006518:	ec41 0b19 	vmov	d9, r0, r1
 800651c:	2200      	movs	r2, #0
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f7fa f869 	bl	80005f8 <__aeabi_dmul>
 8006526:	4680      	mov	r8, r0
 8006528:	4689      	mov	r9, r1
 800652a:	e7c5      	b.n	80064b8 <_dtoa_r+0x530>
 800652c:	ec51 0b17 	vmov	r0, r1, d7
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	9d00      	ldr	r5, [sp, #0]
 8006538:	930f      	str	r3, [sp, #60]	; 0x3c
 800653a:	ec41 0b19 	vmov	d9, r0, r1
 800653e:	4649      	mov	r1, r9
 8006540:	4640      	mov	r0, r8
 8006542:	f7fa fb09 	bl	8000b58 <__aeabi_d2iz>
 8006546:	4606      	mov	r6, r0
 8006548:	f7f9 ffec 	bl	8000524 <__aeabi_i2d>
 800654c:	3630      	adds	r6, #48	; 0x30
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fe97 	bl	8000288 <__aeabi_dsub>
 800655a:	f805 6b01 	strb.w	r6, [r5], #1
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	429d      	cmp	r5, r3
 8006562:	4680      	mov	r8, r0
 8006564:	4689      	mov	r9, r1
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	d124      	bne.n	80065b6 <_dtoa_r+0x62e>
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <_dtoa_r+0x654>)
 800656e:	ec51 0b19 	vmov	r0, r1, d9
 8006572:	f7f9 fe8b 	bl	800028c <__adddf3>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa facb 	bl	8000b18 <__aeabi_dcmpgt>
 8006582:	2800      	cmp	r0, #0
 8006584:	d173      	bne.n	800666e <_dtoa_r+0x6e6>
 8006586:	ec53 2b19 	vmov	r2, r3, d9
 800658a:	4914      	ldr	r1, [pc, #80]	; (80065dc <_dtoa_r+0x654>)
 800658c:	2000      	movs	r0, #0
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dsub>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa fa9f 	bl	8000adc <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f43f af2f 	beq.w	8006402 <_dtoa_r+0x47a>
 80065a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065a6:	1e6b      	subs	r3, r5, #1
 80065a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ae:	2b30      	cmp	r3, #48	; 0x30
 80065b0:	d0f8      	beq.n	80065a4 <_dtoa_r+0x61c>
 80065b2:	46bb      	mov	fp, r7
 80065b4:	e04a      	b.n	800664c <_dtoa_r+0x6c4>
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <_dtoa_r+0x648>)
 80065b8:	f7fa f81e 	bl	80005f8 <__aeabi_dmul>
 80065bc:	4680      	mov	r8, r0
 80065be:	4689      	mov	r9, r1
 80065c0:	e7bd      	b.n	800653e <_dtoa_r+0x5b6>
 80065c2:	bf00      	nop
 80065c4:	08007de0 	.word	0x08007de0
 80065c8:	08007db8 	.word	0x08007db8
 80065cc:	3ff00000 	.word	0x3ff00000
 80065d0:	40240000 	.word	0x40240000
 80065d4:	401c0000 	.word	0x401c0000
 80065d8:	40140000 	.word	0x40140000
 80065dc:	3fe00000 	.word	0x3fe00000
 80065e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065e4:	9d00      	ldr	r5, [sp, #0]
 80065e6:	4642      	mov	r2, r8
 80065e8:	464b      	mov	r3, r9
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa f92d 	bl	800084c <__aeabi_ddiv>
 80065f2:	f7fa fab1 	bl	8000b58 <__aeabi_d2iz>
 80065f6:	9001      	str	r0, [sp, #4]
 80065f8:	f7f9 ff94 	bl	8000524 <__aeabi_i2d>
 80065fc:	4642      	mov	r2, r8
 80065fe:	464b      	mov	r3, r9
 8006600:	f7f9 fffa 	bl	80005f8 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7f9 fe3c 	bl	8000288 <__aeabi_dsub>
 8006610:	9e01      	ldr	r6, [sp, #4]
 8006612:	9f04      	ldr	r7, [sp, #16]
 8006614:	3630      	adds	r6, #48	; 0x30
 8006616:	f805 6b01 	strb.w	r6, [r5], #1
 800661a:	9e00      	ldr	r6, [sp, #0]
 800661c:	1bae      	subs	r6, r5, r6
 800661e:	42b7      	cmp	r7, r6
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	d134      	bne.n	8006690 <_dtoa_r+0x708>
 8006626:	f7f9 fe31 	bl	800028c <__adddf3>
 800662a:	4642      	mov	r2, r8
 800662c:	464b      	mov	r3, r9
 800662e:	4606      	mov	r6, r0
 8006630:	460f      	mov	r7, r1
 8006632:	f7fa fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8006636:	b9c8      	cbnz	r0, 800666c <_dtoa_r+0x6e4>
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7fa fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006644:	b110      	cbz	r0, 800664c <_dtoa_r+0x6c4>
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	07db      	lsls	r3, r3, #31
 800664a:	d40f      	bmi.n	800666c <_dtoa_r+0x6e4>
 800664c:	4651      	mov	r1, sl
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fbcc 	bl	8006dec <_Bfree>
 8006654:	2300      	movs	r3, #0
 8006656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006658:	702b      	strb	r3, [r5, #0]
 800665a:	f10b 0301 	add.w	r3, fp, #1
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006662:	2b00      	cmp	r3, #0
 8006664:	f43f ace2 	beq.w	800602c <_dtoa_r+0xa4>
 8006668:	601d      	str	r5, [r3, #0]
 800666a:	e4df      	b.n	800602c <_dtoa_r+0xa4>
 800666c:	465f      	mov	r7, fp
 800666e:	462b      	mov	r3, r5
 8006670:	461d      	mov	r5, r3
 8006672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006676:	2a39      	cmp	r2, #57	; 0x39
 8006678:	d106      	bne.n	8006688 <_dtoa_r+0x700>
 800667a:	9a00      	ldr	r2, [sp, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d1f7      	bne.n	8006670 <_dtoa_r+0x6e8>
 8006680:	9900      	ldr	r1, [sp, #0]
 8006682:	2230      	movs	r2, #48	; 0x30
 8006684:	3701      	adds	r7, #1
 8006686:	700a      	strb	r2, [r1, #0]
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	3201      	adds	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e790      	b.n	80065b2 <_dtoa_r+0x62a>
 8006690:	4ba3      	ldr	r3, [pc, #652]	; (8006920 <_dtoa_r+0x998>)
 8006692:	2200      	movs	r2, #0
 8006694:	f7f9 ffb0 	bl	80005f8 <__aeabi_dmul>
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	4606      	mov	r6, r0
 800669e:	460f      	mov	r7, r1
 80066a0:	f7fa fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d09e      	beq.n	80065e6 <_dtoa_r+0x65e>
 80066a8:	e7d0      	b.n	800664c <_dtoa_r+0x6c4>
 80066aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	f000 80ca 	beq.w	8006846 <_dtoa_r+0x8be>
 80066b2:	9a07      	ldr	r2, [sp, #28]
 80066b4:	2a01      	cmp	r2, #1
 80066b6:	f300 80ad 	bgt.w	8006814 <_dtoa_r+0x88c>
 80066ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066bc:	2a00      	cmp	r2, #0
 80066be:	f000 80a5 	beq.w	800680c <_dtoa_r+0x884>
 80066c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066c6:	9e08      	ldr	r6, [sp, #32]
 80066c8:	9d05      	ldr	r5, [sp, #20]
 80066ca:	9a05      	ldr	r2, [sp, #20]
 80066cc:	441a      	add	r2, r3
 80066ce:	9205      	str	r2, [sp, #20]
 80066d0:	9a06      	ldr	r2, [sp, #24]
 80066d2:	2101      	movs	r1, #1
 80066d4:	441a      	add	r2, r3
 80066d6:	4620      	mov	r0, r4
 80066d8:	9206      	str	r2, [sp, #24]
 80066da:	f000 fc3d 	bl	8006f58 <__i2b>
 80066de:	4607      	mov	r7, r0
 80066e0:	b165      	cbz	r5, 80066fc <_dtoa_r+0x774>
 80066e2:	9b06      	ldr	r3, [sp, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd09      	ble.n	80066fc <_dtoa_r+0x774>
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	9a05      	ldr	r2, [sp, #20]
 80066ec:	bfa8      	it	ge
 80066ee:	462b      	movge	r3, r5
 80066f0:	1ad2      	subs	r2, r2, r3
 80066f2:	9205      	str	r2, [sp, #20]
 80066f4:	9a06      	ldr	r2, [sp, #24]
 80066f6:	1aed      	subs	r5, r5, r3
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	9306      	str	r3, [sp, #24]
 80066fc:	9b08      	ldr	r3, [sp, #32]
 80066fe:	b1f3      	cbz	r3, 800673e <_dtoa_r+0x7b6>
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a3 	beq.w	800684e <_dtoa_r+0x8c6>
 8006708:	2e00      	cmp	r6, #0
 800670a:	dd10      	ble.n	800672e <_dtoa_r+0x7a6>
 800670c:	4639      	mov	r1, r7
 800670e:	4632      	mov	r2, r6
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fce1 	bl	80070d8 <__pow5mult>
 8006716:	4652      	mov	r2, sl
 8006718:	4601      	mov	r1, r0
 800671a:	4607      	mov	r7, r0
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fc31 	bl	8006f84 <__multiply>
 8006722:	4651      	mov	r1, sl
 8006724:	4680      	mov	r8, r0
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fb60 	bl	8006dec <_Bfree>
 800672c:	46c2      	mov	sl, r8
 800672e:	9b08      	ldr	r3, [sp, #32]
 8006730:	1b9a      	subs	r2, r3, r6
 8006732:	d004      	beq.n	800673e <_dtoa_r+0x7b6>
 8006734:	4651      	mov	r1, sl
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fcce 	bl	80070d8 <__pow5mult>
 800673c:	4682      	mov	sl, r0
 800673e:	2101      	movs	r1, #1
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fc09 	bl	8006f58 <__i2b>
 8006746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006748:	2b00      	cmp	r3, #0
 800674a:	4606      	mov	r6, r0
 800674c:	f340 8081 	ble.w	8006852 <_dtoa_r+0x8ca>
 8006750:	461a      	mov	r2, r3
 8006752:	4601      	mov	r1, r0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fcbf 	bl	80070d8 <__pow5mult>
 800675a:	9b07      	ldr	r3, [sp, #28]
 800675c:	2b01      	cmp	r3, #1
 800675e:	4606      	mov	r6, r0
 8006760:	dd7a      	ble.n	8006858 <_dtoa_r+0x8d0>
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	6933      	ldr	r3, [r6, #16]
 8006768:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800676c:	6918      	ldr	r0, [r3, #16]
 800676e:	f000 fba5 	bl	8006ebc <__hi0bits>
 8006772:	f1c0 0020 	rsb	r0, r0, #32
 8006776:	9b06      	ldr	r3, [sp, #24]
 8006778:	4418      	add	r0, r3
 800677a:	f010 001f 	ands.w	r0, r0, #31
 800677e:	f000 8094 	beq.w	80068aa <_dtoa_r+0x922>
 8006782:	f1c0 0320 	rsb	r3, r0, #32
 8006786:	2b04      	cmp	r3, #4
 8006788:	f340 8085 	ble.w	8006896 <_dtoa_r+0x90e>
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	f1c0 001c 	rsb	r0, r0, #28
 8006792:	4403      	add	r3, r0
 8006794:	9305      	str	r3, [sp, #20]
 8006796:	9b06      	ldr	r3, [sp, #24]
 8006798:	4403      	add	r3, r0
 800679a:	4405      	add	r5, r0
 800679c:	9306      	str	r3, [sp, #24]
 800679e:	9b05      	ldr	r3, [sp, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd05      	ble.n	80067b0 <_dtoa_r+0x828>
 80067a4:	4651      	mov	r1, sl
 80067a6:	461a      	mov	r2, r3
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fcef 	bl	800718c <__lshift>
 80067ae:	4682      	mov	sl, r0
 80067b0:	9b06      	ldr	r3, [sp, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd05      	ble.n	80067c2 <_dtoa_r+0x83a>
 80067b6:	4631      	mov	r1, r6
 80067b8:	461a      	mov	r2, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fce6 	bl	800718c <__lshift>
 80067c0:	4606      	mov	r6, r0
 80067c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d072      	beq.n	80068ae <_dtoa_r+0x926>
 80067c8:	4631      	mov	r1, r6
 80067ca:	4650      	mov	r0, sl
 80067cc:	f000 fd4a 	bl	8007264 <__mcmp>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	da6c      	bge.n	80068ae <_dtoa_r+0x926>
 80067d4:	2300      	movs	r3, #0
 80067d6:	4651      	mov	r1, sl
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fb28 	bl	8006e30 <__multadd>
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067e6:	4682      	mov	sl, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 81b0 	beq.w	8006b4e <_dtoa_r+0xbc6>
 80067ee:	2300      	movs	r3, #0
 80067f0:	4639      	mov	r1, r7
 80067f2:	220a      	movs	r2, #10
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fb1b 	bl	8006e30 <__multadd>
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	4607      	mov	r7, r0
 8006800:	f300 8096 	bgt.w	8006930 <_dtoa_r+0x9a8>
 8006804:	9b07      	ldr	r3, [sp, #28]
 8006806:	2b02      	cmp	r3, #2
 8006808:	dc59      	bgt.n	80068be <_dtoa_r+0x936>
 800680a:	e091      	b.n	8006930 <_dtoa_r+0x9a8>
 800680c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800680e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006812:	e758      	b.n	80066c6 <_dtoa_r+0x73e>
 8006814:	9b04      	ldr	r3, [sp, #16]
 8006816:	1e5e      	subs	r6, r3, #1
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	42b3      	cmp	r3, r6
 800681c:	bfbf      	itttt	lt
 800681e:	9b08      	ldrlt	r3, [sp, #32]
 8006820:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006822:	9608      	strlt	r6, [sp, #32]
 8006824:	1af3      	sublt	r3, r6, r3
 8006826:	bfb4      	ite	lt
 8006828:	18d2      	addlt	r2, r2, r3
 800682a:	1b9e      	subge	r6, r3, r6
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	bfbc      	itt	lt
 8006830:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006832:	2600      	movlt	r6, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfb7      	itett	lt
 8006838:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800683c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006840:	1a9d      	sublt	r5, r3, r2
 8006842:	2300      	movlt	r3, #0
 8006844:	e741      	b.n	80066ca <_dtoa_r+0x742>
 8006846:	9e08      	ldr	r6, [sp, #32]
 8006848:	9d05      	ldr	r5, [sp, #20]
 800684a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800684c:	e748      	b.n	80066e0 <_dtoa_r+0x758>
 800684e:	9a08      	ldr	r2, [sp, #32]
 8006850:	e770      	b.n	8006734 <_dtoa_r+0x7ac>
 8006852:	9b07      	ldr	r3, [sp, #28]
 8006854:	2b01      	cmp	r3, #1
 8006856:	dc19      	bgt.n	800688c <_dtoa_r+0x904>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	b9bb      	cbnz	r3, 800688c <_dtoa_r+0x904>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006862:	b99b      	cbnz	r3, 800688c <_dtoa_r+0x904>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800686a:	0d1b      	lsrs	r3, r3, #20
 800686c:	051b      	lsls	r3, r3, #20
 800686e:	b183      	cbz	r3, 8006892 <_dtoa_r+0x90a>
 8006870:	9b05      	ldr	r3, [sp, #20]
 8006872:	3301      	adds	r3, #1
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	3301      	adds	r3, #1
 800687a:	9306      	str	r3, [sp, #24]
 800687c:	f04f 0801 	mov.w	r8, #1
 8006880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af6f 	bne.w	8006766 <_dtoa_r+0x7de>
 8006888:	2001      	movs	r0, #1
 800688a:	e774      	b.n	8006776 <_dtoa_r+0x7ee>
 800688c:	f04f 0800 	mov.w	r8, #0
 8006890:	e7f6      	b.n	8006880 <_dtoa_r+0x8f8>
 8006892:	4698      	mov	r8, r3
 8006894:	e7f4      	b.n	8006880 <_dtoa_r+0x8f8>
 8006896:	d082      	beq.n	800679e <_dtoa_r+0x816>
 8006898:	9a05      	ldr	r2, [sp, #20]
 800689a:	331c      	adds	r3, #28
 800689c:	441a      	add	r2, r3
 800689e:	9205      	str	r2, [sp, #20]
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	441a      	add	r2, r3
 80068a4:	441d      	add	r5, r3
 80068a6:	9206      	str	r2, [sp, #24]
 80068a8:	e779      	b.n	800679e <_dtoa_r+0x816>
 80068aa:	4603      	mov	r3, r0
 80068ac:	e7f4      	b.n	8006898 <_dtoa_r+0x910>
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dc37      	bgt.n	8006924 <_dtoa_r+0x99c>
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	dd34      	ble.n	8006924 <_dtoa_r+0x99c>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	b963      	cbnz	r3, 80068dc <_dtoa_r+0x954>
 80068c2:	4631      	mov	r1, r6
 80068c4:	2205      	movs	r2, #5
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 fab2 	bl	8006e30 <__multadd>
 80068cc:	4601      	mov	r1, r0
 80068ce:	4606      	mov	r6, r0
 80068d0:	4650      	mov	r0, sl
 80068d2:	f000 fcc7 	bl	8007264 <__mcmp>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f73f adbb 	bgt.w	8006452 <_dtoa_r+0x4ca>
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	9d00      	ldr	r5, [sp, #0]
 80068e0:	ea6f 0b03 	mvn.w	fp, r3
 80068e4:	f04f 0800 	mov.w	r8, #0
 80068e8:	4631      	mov	r1, r6
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fa7e 	bl	8006dec <_Bfree>
 80068f0:	2f00      	cmp	r7, #0
 80068f2:	f43f aeab 	beq.w	800664c <_dtoa_r+0x6c4>
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	d005      	beq.n	8006908 <_dtoa_r+0x980>
 80068fc:	45b8      	cmp	r8, r7
 80068fe:	d003      	beq.n	8006908 <_dtoa_r+0x980>
 8006900:	4641      	mov	r1, r8
 8006902:	4620      	mov	r0, r4
 8006904:	f000 fa72 	bl	8006dec <_Bfree>
 8006908:	4639      	mov	r1, r7
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fa6e 	bl	8006dec <_Bfree>
 8006910:	e69c      	b.n	800664c <_dtoa_r+0x6c4>
 8006912:	2600      	movs	r6, #0
 8006914:	4637      	mov	r7, r6
 8006916:	e7e1      	b.n	80068dc <_dtoa_r+0x954>
 8006918:	46bb      	mov	fp, r7
 800691a:	4637      	mov	r7, r6
 800691c:	e599      	b.n	8006452 <_dtoa_r+0x4ca>
 800691e:	bf00      	nop
 8006920:	40240000 	.word	0x40240000
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80c8 	beq.w	8006abc <_dtoa_r+0xb34>
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	2d00      	cmp	r5, #0
 8006932:	dd05      	ble.n	8006940 <_dtoa_r+0x9b8>
 8006934:	4639      	mov	r1, r7
 8006936:	462a      	mov	r2, r5
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fc27 	bl	800718c <__lshift>
 800693e:	4607      	mov	r7, r0
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	d05b      	beq.n	80069fe <_dtoa_r+0xa76>
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fa0f 	bl	8006d6c <_Balloc>
 800694e:	4605      	mov	r5, r0
 8006950:	b928      	cbnz	r0, 800695e <_dtoa_r+0x9d6>
 8006952:	4b83      	ldr	r3, [pc, #524]	; (8006b60 <_dtoa_r+0xbd8>)
 8006954:	4602      	mov	r2, r0
 8006956:	f240 21ef 	movw	r1, #751	; 0x2ef
 800695a:	f7ff bb2e 	b.w	8005fba <_dtoa_r+0x32>
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	3202      	adds	r2, #2
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	f107 010c 	add.w	r1, r7, #12
 8006968:	300c      	adds	r0, #12
 800696a:	f001 f813 	bl	8007994 <memcpy>
 800696e:	2201      	movs	r2, #1
 8006970:	4629      	mov	r1, r5
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fc0a 	bl	800718c <__lshift>
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006982:	4413      	add	r3, r2
 8006984:	9308      	str	r3, [sp, #32]
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	46b8      	mov	r8, r7
 800698e:	9306      	str	r3, [sp, #24]
 8006990:	4607      	mov	r7, r0
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	4631      	mov	r1, r6
 8006996:	3b01      	subs	r3, #1
 8006998:	4650      	mov	r0, sl
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f7ff fa6b 	bl	8005e76 <quorem>
 80069a0:	4641      	mov	r1, r8
 80069a2:	9002      	str	r0, [sp, #8]
 80069a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069a8:	4650      	mov	r0, sl
 80069aa:	f000 fc5b 	bl	8007264 <__mcmp>
 80069ae:	463a      	mov	r2, r7
 80069b0:	9005      	str	r0, [sp, #20]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fc71 	bl	800729c <__mdiff>
 80069ba:	68c2      	ldr	r2, [r0, #12]
 80069bc:	4605      	mov	r5, r0
 80069be:	bb02      	cbnz	r2, 8006a02 <_dtoa_r+0xa7a>
 80069c0:	4601      	mov	r1, r0
 80069c2:	4650      	mov	r0, sl
 80069c4:	f000 fc4e 	bl	8007264 <__mcmp>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4629      	mov	r1, r5
 80069cc:	4620      	mov	r0, r4
 80069ce:	9209      	str	r2, [sp, #36]	; 0x24
 80069d0:	f000 fa0c 	bl	8006dec <_Bfree>
 80069d4:	9b07      	ldr	r3, [sp, #28]
 80069d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d8:	9d04      	ldr	r5, [sp, #16]
 80069da:	ea43 0102 	orr.w	r1, r3, r2
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	4319      	orrs	r1, r3
 80069e2:	d110      	bne.n	8006a06 <_dtoa_r+0xa7e>
 80069e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069e8:	d029      	beq.n	8006a3e <_dtoa_r+0xab6>
 80069ea:	9b05      	ldr	r3, [sp, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	dd02      	ble.n	80069f6 <_dtoa_r+0xa6e>
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	f883 9000 	strb.w	r9, [r3]
 80069fc:	e774      	b.n	80068e8 <_dtoa_r+0x960>
 80069fe:	4638      	mov	r0, r7
 8006a00:	e7ba      	b.n	8006978 <_dtoa_r+0x9f0>
 8006a02:	2201      	movs	r2, #1
 8006a04:	e7e1      	b.n	80069ca <_dtoa_r+0xa42>
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db04      	blt.n	8006a16 <_dtoa_r+0xa8e>
 8006a0c:	9907      	ldr	r1, [sp, #28]
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	9906      	ldr	r1, [sp, #24]
 8006a12:	430b      	orrs	r3, r1
 8006a14:	d120      	bne.n	8006a58 <_dtoa_r+0xad0>
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	dded      	ble.n	80069f6 <_dtoa_r+0xa6e>
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fbb4 	bl	800718c <__lshift>
 8006a24:	4631      	mov	r1, r6
 8006a26:	4682      	mov	sl, r0
 8006a28:	f000 fc1c 	bl	8007264 <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	dc03      	bgt.n	8006a38 <_dtoa_r+0xab0>
 8006a30:	d1e1      	bne.n	80069f6 <_dtoa_r+0xa6e>
 8006a32:	f019 0f01 	tst.w	r9, #1
 8006a36:	d0de      	beq.n	80069f6 <_dtoa_r+0xa6e>
 8006a38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a3c:	d1d8      	bne.n	80069f0 <_dtoa_r+0xa68>
 8006a3e:	9a01      	ldr	r2, [sp, #4]
 8006a40:	2339      	movs	r3, #57	; 0x39
 8006a42:	7013      	strb	r3, [r2, #0]
 8006a44:	462b      	mov	r3, r5
 8006a46:	461d      	mov	r5, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a4e:	2a39      	cmp	r2, #57	; 0x39
 8006a50:	d06c      	beq.n	8006b2c <_dtoa_r+0xba4>
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e747      	b.n	80068e8 <_dtoa_r+0x960>
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	dd07      	ble.n	8006a6c <_dtoa_r+0xae4>
 8006a5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a60:	d0ed      	beq.n	8006a3e <_dtoa_r+0xab6>
 8006a62:	9a01      	ldr	r2, [sp, #4]
 8006a64:	f109 0301 	add.w	r3, r9, #1
 8006a68:	7013      	strb	r3, [r2, #0]
 8006a6a:	e73d      	b.n	80068e8 <_dtoa_r+0x960>
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	9a08      	ldr	r2, [sp, #32]
 8006a70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d043      	beq.n	8006b00 <_dtoa_r+0xb78>
 8006a78:	4651      	mov	r1, sl
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f9d6 	bl	8006e30 <__multadd>
 8006a84:	45b8      	cmp	r8, r7
 8006a86:	4682      	mov	sl, r0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	f04f 020a 	mov.w	r2, #10
 8006a90:	4641      	mov	r1, r8
 8006a92:	4620      	mov	r0, r4
 8006a94:	d107      	bne.n	8006aa6 <_dtoa_r+0xb1e>
 8006a96:	f000 f9cb 	bl	8006e30 <__multadd>
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	e775      	b.n	8006992 <_dtoa_r+0xa0a>
 8006aa6:	f000 f9c3 	bl	8006e30 <__multadd>
 8006aaa:	4639      	mov	r1, r7
 8006aac:	4680      	mov	r8, r0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 f9bc 	bl	8006e30 <__multadd>
 8006ab8:	4607      	mov	r7, r0
 8006aba:	e7f0      	b.n	8006a9e <_dtoa_r+0xb16>
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	9d00      	ldr	r5, [sp, #0]
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	f7ff f9d6 	bl	8005e76 <quorem>
 8006aca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	f805 9b01 	strb.w	r9, [r5], #1
 8006ad4:	1aea      	subs	r2, r5, r3
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	dd07      	ble.n	8006aec <_dtoa_r+0xb64>
 8006adc:	4651      	mov	r1, sl
 8006ade:	2300      	movs	r3, #0
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 f9a4 	bl	8006e30 <__multadd>
 8006ae8:	4682      	mov	sl, r0
 8006aea:	e7ea      	b.n	8006ac2 <_dtoa_r+0xb3a>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfc8      	it	gt
 8006af2:	461d      	movgt	r5, r3
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	bfd8      	it	le
 8006af8:	2501      	movle	r5, #1
 8006afa:	441d      	add	r5, r3
 8006afc:	f04f 0800 	mov.w	r8, #0
 8006b00:	4651      	mov	r1, sl
 8006b02:	2201      	movs	r2, #1
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fb41 	bl	800718c <__lshift>
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	f000 fba9 	bl	8007264 <__mcmp>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	dc96      	bgt.n	8006a44 <_dtoa_r+0xabc>
 8006b16:	d102      	bne.n	8006b1e <_dtoa_r+0xb96>
 8006b18:	f019 0f01 	tst.w	r9, #1
 8006b1c:	d192      	bne.n	8006a44 <_dtoa_r+0xabc>
 8006b1e:	462b      	mov	r3, r5
 8006b20:	461d      	mov	r5, r3
 8006b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b26:	2a30      	cmp	r2, #48	; 0x30
 8006b28:	d0fa      	beq.n	8006b20 <_dtoa_r+0xb98>
 8006b2a:	e6dd      	b.n	80068e8 <_dtoa_r+0x960>
 8006b2c:	9a00      	ldr	r2, [sp, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d189      	bne.n	8006a46 <_dtoa_r+0xabe>
 8006b32:	f10b 0b01 	add.w	fp, fp, #1
 8006b36:	2331      	movs	r3, #49	; 0x31
 8006b38:	e796      	b.n	8006a68 <_dtoa_r+0xae0>
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <_dtoa_r+0xbdc>)
 8006b3c:	f7ff ba99 	b.w	8006072 <_dtoa_r+0xea>
 8006b40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f47f aa6d 	bne.w	8006022 <_dtoa_r+0x9a>
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <_dtoa_r+0xbe0>)
 8006b4a:	f7ff ba92 	b.w	8006072 <_dtoa_r+0xea>
 8006b4e:	9b01      	ldr	r3, [sp, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dcb5      	bgt.n	8006ac0 <_dtoa_r+0xb38>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	f73f aeb1 	bgt.w	80068be <_dtoa_r+0x936>
 8006b5c:	e7b0      	b.n	8006ac0 <_dtoa_r+0xb38>
 8006b5e:	bf00      	nop
 8006b60:	08007d48 	.word	0x08007d48
 8006b64:	08007ca8 	.word	0x08007ca8
 8006b68:	08007ccc 	.word	0x08007ccc

08006b6c <_free_r>:
 8006b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d044      	beq.n	8006bfc <_free_r+0x90>
 8006b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b76:	9001      	str	r0, [sp, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b7e:	bfb8      	it	lt
 8006b80:	18e4      	addlt	r4, r4, r3
 8006b82:	f000 f8e7 	bl	8006d54 <__malloc_lock>
 8006b86:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <_free_r+0x94>)
 8006b88:	9801      	ldr	r0, [sp, #4]
 8006b8a:	6813      	ldr	r3, [r2, #0]
 8006b8c:	b933      	cbnz	r3, 8006b9c <_free_r+0x30>
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	6014      	str	r4, [r2, #0]
 8006b92:	b003      	add	sp, #12
 8006b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b98:	f000 b8e2 	b.w	8006d60 <__malloc_unlock>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d908      	bls.n	8006bb2 <_free_r+0x46>
 8006ba0:	6825      	ldr	r5, [r4, #0]
 8006ba2:	1961      	adds	r1, r4, r5
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1949      	addeq	r1, r1, r5
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	e7ed      	b.n	8006b8e <_free_r+0x22>
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b10b      	cbz	r3, 8006bbc <_free_r+0x50>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d9fa      	bls.n	8006bb2 <_free_r+0x46>
 8006bbc:	6811      	ldr	r1, [r2, #0]
 8006bbe:	1855      	adds	r5, r2, r1
 8006bc0:	42a5      	cmp	r5, r4
 8006bc2:	d10b      	bne.n	8006bdc <_free_r+0x70>
 8006bc4:	6824      	ldr	r4, [r4, #0]
 8006bc6:	4421      	add	r1, r4
 8006bc8:	1854      	adds	r4, r2, r1
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	d1e0      	bne.n	8006b92 <_free_r+0x26>
 8006bd0:	681c      	ldr	r4, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	6053      	str	r3, [r2, #4]
 8006bd6:	440c      	add	r4, r1
 8006bd8:	6014      	str	r4, [r2, #0]
 8006bda:	e7da      	b.n	8006b92 <_free_r+0x26>
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x78>
 8006bde:	230c      	movs	r3, #12
 8006be0:	6003      	str	r3, [r0, #0]
 8006be2:	e7d6      	b.n	8006b92 <_free_r+0x26>
 8006be4:	6825      	ldr	r5, [r4, #0]
 8006be6:	1961      	adds	r1, r4, r5
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf04      	itt	eq
 8006bec:	6819      	ldreq	r1, [r3, #0]
 8006bee:	685b      	ldreq	r3, [r3, #4]
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	bf04      	itt	eq
 8006bf4:	1949      	addeq	r1, r1, r5
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	6054      	str	r4, [r2, #4]
 8006bfa:	e7ca      	b.n	8006b92 <_free_r+0x26>
 8006bfc:	b003      	add	sp, #12
 8006bfe:	bd30      	pop	{r4, r5, pc}
 8006c00:	200004a8 	.word	0x200004a8

08006c04 <malloc>:
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <malloc+0xc>)
 8006c06:	4601      	mov	r1, r0
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f000 b823 	b.w	8006c54 <_malloc_r>
 8006c0e:	bf00      	nop
 8006c10:	2000007c 	.word	0x2000007c

08006c14 <sbrk_aligned>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4e0e      	ldr	r6, [pc, #56]	; (8006c50 <sbrk_aligned+0x3c>)
 8006c18:	460c      	mov	r4, r1
 8006c1a:	6831      	ldr	r1, [r6, #0]
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	b911      	cbnz	r1, 8006c26 <sbrk_aligned+0x12>
 8006c20:	f000 fea8 	bl	8007974 <_sbrk_r>
 8006c24:	6030      	str	r0, [r6, #0]
 8006c26:	4621      	mov	r1, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 fea3 	bl	8007974 <_sbrk_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d00a      	beq.n	8006c48 <sbrk_aligned+0x34>
 8006c32:	1cc4      	adds	r4, r0, #3
 8006c34:	f024 0403 	bic.w	r4, r4, #3
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d007      	beq.n	8006c4c <sbrk_aligned+0x38>
 8006c3c:	1a21      	subs	r1, r4, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fe98 	bl	8007974 <_sbrk_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d101      	bne.n	8006c4c <sbrk_aligned+0x38>
 8006c48:	f04f 34ff 	mov.w	r4, #4294967295
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	200004ac 	.word	0x200004ac

08006c54 <_malloc_r>:
 8006c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c58:	1ccd      	adds	r5, r1, #3
 8006c5a:	f025 0503 	bic.w	r5, r5, #3
 8006c5e:	3508      	adds	r5, #8
 8006c60:	2d0c      	cmp	r5, #12
 8006c62:	bf38      	it	cc
 8006c64:	250c      	movcc	r5, #12
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	4607      	mov	r7, r0
 8006c6a:	db01      	blt.n	8006c70 <_malloc_r+0x1c>
 8006c6c:	42a9      	cmp	r1, r5
 8006c6e:	d905      	bls.n	8006c7c <_malloc_r+0x28>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	2600      	movs	r6, #0
 8006c76:	4630      	mov	r0, r6
 8006c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d50 <_malloc_r+0xfc>
 8006c80:	f000 f868 	bl	8006d54 <__malloc_lock>
 8006c84:	f8d8 3000 	ldr.w	r3, [r8]
 8006c88:	461c      	mov	r4, r3
 8006c8a:	bb5c      	cbnz	r4, 8006ce4 <_malloc_r+0x90>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ffc0 	bl	8006c14 <sbrk_aligned>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	4604      	mov	r4, r0
 8006c98:	d155      	bne.n	8006d46 <_malloc_r+0xf2>
 8006c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c9e:	4626      	mov	r6, r4
 8006ca0:	2e00      	cmp	r6, #0
 8006ca2:	d145      	bne.n	8006d30 <_malloc_r+0xdc>
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d048      	beq.n	8006d3a <_malloc_r+0xe6>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	4631      	mov	r1, r6
 8006cac:	4638      	mov	r0, r7
 8006cae:	eb04 0903 	add.w	r9, r4, r3
 8006cb2:	f000 fe5f 	bl	8007974 <_sbrk_r>
 8006cb6:	4581      	cmp	r9, r0
 8006cb8:	d13f      	bne.n	8006d3a <_malloc_r+0xe6>
 8006cba:	6821      	ldr	r1, [r4, #0]
 8006cbc:	1a6d      	subs	r5, r5, r1
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ffa7 	bl	8006c14 <sbrk_aligned>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d037      	beq.n	8006d3a <_malloc_r+0xe6>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	442b      	add	r3, r5
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d038      	beq.n	8006d4a <_malloc_r+0xf6>
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	42a2      	cmp	r2, r4
 8006cdc:	d12b      	bne.n	8006d36 <_malloc_r+0xe2>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	e00f      	b.n	8006d04 <_malloc_r+0xb0>
 8006ce4:	6822      	ldr	r2, [r4, #0]
 8006ce6:	1b52      	subs	r2, r2, r5
 8006ce8:	d41f      	bmi.n	8006d2a <_malloc_r+0xd6>
 8006cea:	2a0b      	cmp	r2, #11
 8006cec:	d917      	bls.n	8006d1e <_malloc_r+0xca>
 8006cee:	1961      	adds	r1, r4, r5
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	6025      	str	r5, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	6059      	strne	r1, [r3, #4]
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	bf08      	it	eq
 8006cfc:	f8c8 1000 	streq.w	r1, [r8]
 8006d00:	5162      	str	r2, [r4, r5]
 8006d02:	604b      	str	r3, [r1, #4]
 8006d04:	4638      	mov	r0, r7
 8006d06:	f104 060b 	add.w	r6, r4, #11
 8006d0a:	f000 f829 	bl	8006d60 <__malloc_unlock>
 8006d0e:	f026 0607 	bic.w	r6, r6, #7
 8006d12:	1d23      	adds	r3, r4, #4
 8006d14:	1af2      	subs	r2, r6, r3
 8006d16:	d0ae      	beq.n	8006c76 <_malloc_r+0x22>
 8006d18:	1b9b      	subs	r3, r3, r6
 8006d1a:	50a3      	str	r3, [r4, r2]
 8006d1c:	e7ab      	b.n	8006c76 <_malloc_r+0x22>
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	6862      	ldr	r2, [r4, #4]
 8006d22:	d1dd      	bne.n	8006ce0 <_malloc_r+0x8c>
 8006d24:	f8c8 2000 	str.w	r2, [r8]
 8006d28:	e7ec      	b.n	8006d04 <_malloc_r+0xb0>
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	6864      	ldr	r4, [r4, #4]
 8006d2e:	e7ac      	b.n	8006c8a <_malloc_r+0x36>
 8006d30:	4634      	mov	r4, r6
 8006d32:	6876      	ldr	r6, [r6, #4]
 8006d34:	e7b4      	b.n	8006ca0 <_malloc_r+0x4c>
 8006d36:	4613      	mov	r3, r2
 8006d38:	e7cc      	b.n	8006cd4 <_malloc_r+0x80>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	603b      	str	r3, [r7, #0]
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f000 f80e 	bl	8006d60 <__malloc_unlock>
 8006d44:	e797      	b.n	8006c76 <_malloc_r+0x22>
 8006d46:	6025      	str	r5, [r4, #0]
 8006d48:	e7dc      	b.n	8006d04 <_malloc_r+0xb0>
 8006d4a:	605b      	str	r3, [r3, #4]
 8006d4c:	deff      	udf	#255	; 0xff
 8006d4e:	bf00      	nop
 8006d50:	200004a8 	.word	0x200004a8

08006d54 <__malloc_lock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_lock+0x8>)
 8006d56:	f7ff b88c 	b.w	8005e72 <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200004a4 	.word	0x200004a4

08006d60 <__malloc_unlock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_unlock+0x8>)
 8006d62:	f7ff b887 	b.w	8005e74 <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	200004a4 	.word	0x200004a4

08006d6c <_Balloc>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	69c6      	ldr	r6, [r0, #28]
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	b976      	cbnz	r6, 8006d94 <_Balloc+0x28>
 8006d76:	2010      	movs	r0, #16
 8006d78:	f7ff ff44 	bl	8006c04 <malloc>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	61e0      	str	r0, [r4, #28]
 8006d80:	b920      	cbnz	r0, 8006d8c <_Balloc+0x20>
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <_Balloc+0x78>)
 8006d84:	4818      	ldr	r0, [pc, #96]	; (8006de8 <_Balloc+0x7c>)
 8006d86:	216b      	movs	r1, #107	; 0x6b
 8006d88:	f000 fe12 	bl	80079b0 <__assert_func>
 8006d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d90:	6006      	str	r6, [r0, #0]
 8006d92:	60c6      	str	r6, [r0, #12]
 8006d94:	69e6      	ldr	r6, [r4, #28]
 8006d96:	68f3      	ldr	r3, [r6, #12]
 8006d98:	b183      	cbz	r3, 8006dbc <_Balloc+0x50>
 8006d9a:	69e3      	ldr	r3, [r4, #28]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006da2:	b9b8      	cbnz	r0, 8006dd4 <_Balloc+0x68>
 8006da4:	2101      	movs	r1, #1
 8006da6:	fa01 f605 	lsl.w	r6, r1, r5
 8006daa:	1d72      	adds	r2, r6, #5
 8006dac:	0092      	lsls	r2, r2, #2
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 fe1c 	bl	80079ec <_calloc_r>
 8006db4:	b160      	cbz	r0, 8006dd0 <_Balloc+0x64>
 8006db6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dba:	e00e      	b.n	8006dda <_Balloc+0x6e>
 8006dbc:	2221      	movs	r2, #33	; 0x21
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fe13 	bl	80079ec <_calloc_r>
 8006dc6:	69e3      	ldr	r3, [r4, #28]
 8006dc8:	60f0      	str	r0, [r6, #12]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e4      	bne.n	8006d9a <_Balloc+0x2e>
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	6802      	ldr	r2, [r0, #0]
 8006dd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006de0:	e7f7      	b.n	8006dd2 <_Balloc+0x66>
 8006de2:	bf00      	nop
 8006de4:	08007cd9 	.word	0x08007cd9
 8006de8:	08007d59 	.word	0x08007d59

08006dec <_Bfree>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	69c6      	ldr	r6, [r0, #28]
 8006df0:	4605      	mov	r5, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	b976      	cbnz	r6, 8006e14 <_Bfree+0x28>
 8006df6:	2010      	movs	r0, #16
 8006df8:	f7ff ff04 	bl	8006c04 <malloc>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	61e8      	str	r0, [r5, #28]
 8006e00:	b920      	cbnz	r0, 8006e0c <_Bfree+0x20>
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <_Bfree+0x3c>)
 8006e04:	4809      	ldr	r0, [pc, #36]	; (8006e2c <_Bfree+0x40>)
 8006e06:	218f      	movs	r1, #143	; 0x8f
 8006e08:	f000 fdd2 	bl	80079b0 <__assert_func>
 8006e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e10:	6006      	str	r6, [r0, #0]
 8006e12:	60c6      	str	r6, [r0, #12]
 8006e14:	b13c      	cbz	r4, 8006e26 <_Bfree+0x3a>
 8006e16:	69eb      	ldr	r3, [r5, #28]
 8006e18:	6862      	ldr	r2, [r4, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e20:	6021      	str	r1, [r4, #0]
 8006e22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	08007cd9 	.word	0x08007cd9
 8006e2c:	08007d59 	.word	0x08007d59

08006e30 <__multadd>:
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	690d      	ldr	r5, [r1, #16]
 8006e36:	4607      	mov	r7, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	461e      	mov	r6, r3
 8006e3c:	f101 0c14 	add.w	ip, r1, #20
 8006e40:	2000      	movs	r0, #0
 8006e42:	f8dc 3000 	ldr.w	r3, [ip]
 8006e46:	b299      	uxth	r1, r3
 8006e48:	fb02 6101 	mla	r1, r2, r1, r6
 8006e4c:	0c1e      	lsrs	r6, r3, #16
 8006e4e:	0c0b      	lsrs	r3, r1, #16
 8006e50:	fb02 3306 	mla	r3, r2, r6, r3
 8006e54:	b289      	uxth	r1, r1
 8006e56:	3001      	adds	r0, #1
 8006e58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e5c:	4285      	cmp	r5, r0
 8006e5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e66:	dcec      	bgt.n	8006e42 <__multadd+0x12>
 8006e68:	b30e      	cbz	r6, 8006eae <__multadd+0x7e>
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dc19      	bgt.n	8006ea4 <__multadd+0x74>
 8006e70:	6861      	ldr	r1, [r4, #4]
 8006e72:	4638      	mov	r0, r7
 8006e74:	3101      	adds	r1, #1
 8006e76:	f7ff ff79 	bl	8006d6c <_Balloc>
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	b928      	cbnz	r0, 8006e8a <__multadd+0x5a>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <__multadd+0x84>)
 8006e82:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <__multadd+0x88>)
 8006e84:	21ba      	movs	r1, #186	; 0xba
 8006e86:	f000 fd93 	bl	80079b0 <__assert_func>
 8006e8a:	6922      	ldr	r2, [r4, #16]
 8006e8c:	3202      	adds	r2, #2
 8006e8e:	f104 010c 	add.w	r1, r4, #12
 8006e92:	0092      	lsls	r2, r2, #2
 8006e94:	300c      	adds	r0, #12
 8006e96:	f000 fd7d 	bl	8007994 <memcpy>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ffa5 	bl	8006dec <_Bfree>
 8006ea2:	4644      	mov	r4, r8
 8006ea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ea8:	3501      	adds	r5, #1
 8006eaa:	615e      	str	r6, [r3, #20]
 8006eac:	6125      	str	r5, [r4, #16]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb4:	08007d48 	.word	0x08007d48
 8006eb8:	08007d59 	.word	0x08007d59

08006ebc <__hi0bits>:
 8006ebc:	0c03      	lsrs	r3, r0, #16
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	b9d3      	cbnz	r3, 8006ef8 <__hi0bits+0x3c>
 8006ec2:	0400      	lsls	r0, r0, #16
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eca:	bf04      	itt	eq
 8006ecc:	0200      	lsleq	r0, r0, #8
 8006ece:	3308      	addeq	r3, #8
 8006ed0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ed4:	bf04      	itt	eq
 8006ed6:	0100      	lsleq	r0, r0, #4
 8006ed8:	3304      	addeq	r3, #4
 8006eda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ede:	bf04      	itt	eq
 8006ee0:	0080      	lsleq	r0, r0, #2
 8006ee2:	3302      	addeq	r3, #2
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	db05      	blt.n	8006ef4 <__hi0bits+0x38>
 8006ee8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006eec:	f103 0301 	add.w	r3, r3, #1
 8006ef0:	bf08      	it	eq
 8006ef2:	2320      	moveq	r3, #32
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	4770      	bx	lr
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e7e4      	b.n	8006ec6 <__hi0bits+0xa>

08006efc <__lo0bits>:
 8006efc:	6803      	ldr	r3, [r0, #0]
 8006efe:	f013 0207 	ands.w	r2, r3, #7
 8006f02:	d00c      	beq.n	8006f1e <__lo0bits+0x22>
 8006f04:	07d9      	lsls	r1, r3, #31
 8006f06:	d422      	bmi.n	8006f4e <__lo0bits+0x52>
 8006f08:	079a      	lsls	r2, r3, #30
 8006f0a:	bf49      	itett	mi
 8006f0c:	085b      	lsrmi	r3, r3, #1
 8006f0e:	089b      	lsrpl	r3, r3, #2
 8006f10:	6003      	strmi	r3, [r0, #0]
 8006f12:	2201      	movmi	r2, #1
 8006f14:	bf5c      	itt	pl
 8006f16:	6003      	strpl	r3, [r0, #0]
 8006f18:	2202      	movpl	r2, #2
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4770      	bx	lr
 8006f1e:	b299      	uxth	r1, r3
 8006f20:	b909      	cbnz	r1, 8006f26 <__lo0bits+0x2a>
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	2210      	movs	r2, #16
 8006f26:	b2d9      	uxtb	r1, r3
 8006f28:	b909      	cbnz	r1, 8006f2e <__lo0bits+0x32>
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	0719      	lsls	r1, r3, #28
 8006f30:	bf04      	itt	eq
 8006f32:	091b      	lsreq	r3, r3, #4
 8006f34:	3204      	addeq	r2, #4
 8006f36:	0799      	lsls	r1, r3, #30
 8006f38:	bf04      	itt	eq
 8006f3a:	089b      	lsreq	r3, r3, #2
 8006f3c:	3202      	addeq	r2, #2
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	d403      	bmi.n	8006f4a <__lo0bits+0x4e>
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	f102 0201 	add.w	r2, r2, #1
 8006f48:	d003      	beq.n	8006f52 <__lo0bits+0x56>
 8006f4a:	6003      	str	r3, [r0, #0]
 8006f4c:	e7e5      	b.n	8006f1a <__lo0bits+0x1e>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e7e3      	b.n	8006f1a <__lo0bits+0x1e>
 8006f52:	2220      	movs	r2, #32
 8006f54:	e7e1      	b.n	8006f1a <__lo0bits+0x1e>
	...

08006f58 <__i2b>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	f7ff ff05 	bl	8006d6c <_Balloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__i2b+0x1a>
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <__i2b+0x24>)
 8006f68:	4805      	ldr	r0, [pc, #20]	; (8006f80 <__i2b+0x28>)
 8006f6a:	f240 1145 	movw	r1, #325	; 0x145
 8006f6e:	f000 fd1f 	bl	80079b0 <__assert_func>
 8006f72:	2301      	movs	r3, #1
 8006f74:	6144      	str	r4, [r0, #20]
 8006f76:	6103      	str	r3, [r0, #16]
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08007d48 	.word	0x08007d48
 8006f80:	08007d59 	.word	0x08007d59

08006f84 <__multiply>:
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	4691      	mov	r9, r2
 8006f8a:	690a      	ldr	r2, [r1, #16]
 8006f8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	bfb8      	it	lt
 8006f94:	460b      	movlt	r3, r1
 8006f96:	460c      	mov	r4, r1
 8006f98:	bfbc      	itt	lt
 8006f9a:	464c      	movlt	r4, r9
 8006f9c:	4699      	movlt	r9, r3
 8006f9e:	6927      	ldr	r7, [r4, #16]
 8006fa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fa4:	68a3      	ldr	r3, [r4, #8]
 8006fa6:	6861      	ldr	r1, [r4, #4]
 8006fa8:	eb07 060a 	add.w	r6, r7, sl
 8006fac:	42b3      	cmp	r3, r6
 8006fae:	b085      	sub	sp, #20
 8006fb0:	bfb8      	it	lt
 8006fb2:	3101      	addlt	r1, #1
 8006fb4:	f7ff feda 	bl	8006d6c <_Balloc>
 8006fb8:	b930      	cbnz	r0, 8006fc8 <__multiply+0x44>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b44      	ldr	r3, [pc, #272]	; (80070d0 <__multiply+0x14c>)
 8006fbe:	4845      	ldr	r0, [pc, #276]	; (80070d4 <__multiply+0x150>)
 8006fc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fc4:	f000 fcf4 	bl	80079b0 <__assert_func>
 8006fc8:	f100 0514 	add.w	r5, r0, #20
 8006fcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	d321      	bcc.n	800701c <__multiply+0x98>
 8006fd8:	f104 0314 	add.w	r3, r4, #20
 8006fdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fe0:	f109 0314 	add.w	r3, r9, #20
 8006fe4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	1b3a      	subs	r2, r7, r4
 8006fec:	3a15      	subs	r2, #21
 8006fee:	f022 0203 	bic.w	r2, r2, #3
 8006ff2:	3204      	adds	r2, #4
 8006ff4:	f104 0115 	add.w	r1, r4, #21
 8006ff8:	428f      	cmp	r7, r1
 8006ffa:	bf38      	it	cc
 8006ffc:	2204      	movcc	r2, #4
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	9a02      	ldr	r2, [sp, #8]
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d80c      	bhi.n	8007022 <__multiply+0x9e>
 8007008:	2e00      	cmp	r6, #0
 800700a:	dd03      	ble.n	8007014 <__multiply+0x90>
 800700c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007010:	2b00      	cmp	r3, #0
 8007012:	d05b      	beq.n	80070cc <__multiply+0x148>
 8007014:	6106      	str	r6, [r0, #16]
 8007016:	b005      	add	sp, #20
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701c:	f843 2b04 	str.w	r2, [r3], #4
 8007020:	e7d8      	b.n	8006fd4 <__multiply+0x50>
 8007022:	f8b3 a000 	ldrh.w	sl, [r3]
 8007026:	f1ba 0f00 	cmp.w	sl, #0
 800702a:	d024      	beq.n	8007076 <__multiply+0xf2>
 800702c:	f104 0e14 	add.w	lr, r4, #20
 8007030:	46a9      	mov	r9, r5
 8007032:	f04f 0c00 	mov.w	ip, #0
 8007036:	f85e 2b04 	ldr.w	r2, [lr], #4
 800703a:	f8d9 1000 	ldr.w	r1, [r9]
 800703e:	fa1f fb82 	uxth.w	fp, r2
 8007042:	b289      	uxth	r1, r1
 8007044:	fb0a 110b 	mla	r1, sl, fp, r1
 8007048:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800704c:	f8d9 2000 	ldr.w	r2, [r9]
 8007050:	4461      	add	r1, ip
 8007052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007056:	fb0a c20b 	mla	r2, sl, fp, ip
 800705a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800705e:	b289      	uxth	r1, r1
 8007060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007064:	4577      	cmp	r7, lr
 8007066:	f849 1b04 	str.w	r1, [r9], #4
 800706a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800706e:	d8e2      	bhi.n	8007036 <__multiply+0xb2>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	f845 c002 	str.w	ip, [r5, r2]
 8007076:	9a03      	ldr	r2, [sp, #12]
 8007078:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800707c:	3304      	adds	r3, #4
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	d021      	beq.n	80070c8 <__multiply+0x144>
 8007084:	6829      	ldr	r1, [r5, #0]
 8007086:	f104 0c14 	add.w	ip, r4, #20
 800708a:	46ae      	mov	lr, r5
 800708c:	f04f 0a00 	mov.w	sl, #0
 8007090:	f8bc b000 	ldrh.w	fp, [ip]
 8007094:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007098:	fb09 220b 	mla	r2, r9, fp, r2
 800709c:	4452      	add	r2, sl
 800709e:	b289      	uxth	r1, r1
 80070a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070a4:	f84e 1b04 	str.w	r1, [lr], #4
 80070a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070b0:	f8be 1000 	ldrh.w	r1, [lr]
 80070b4:	fb09 110a 	mla	r1, r9, sl, r1
 80070b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070bc:	4567      	cmp	r7, ip
 80070be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070c2:	d8e5      	bhi.n	8007090 <__multiply+0x10c>
 80070c4:	9a01      	ldr	r2, [sp, #4]
 80070c6:	50a9      	str	r1, [r5, r2]
 80070c8:	3504      	adds	r5, #4
 80070ca:	e799      	b.n	8007000 <__multiply+0x7c>
 80070cc:	3e01      	subs	r6, #1
 80070ce:	e79b      	b.n	8007008 <__multiply+0x84>
 80070d0:	08007d48 	.word	0x08007d48
 80070d4:	08007d59 	.word	0x08007d59

080070d8 <__pow5mult>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	4615      	mov	r5, r2
 80070de:	f012 0203 	ands.w	r2, r2, #3
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	d007      	beq.n	80070f8 <__pow5mult+0x20>
 80070e8:	4c25      	ldr	r4, [pc, #148]	; (8007180 <__pow5mult+0xa8>)
 80070ea:	3a01      	subs	r2, #1
 80070ec:	2300      	movs	r3, #0
 80070ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070f2:	f7ff fe9d 	bl	8006e30 <__multadd>
 80070f6:	4607      	mov	r7, r0
 80070f8:	10ad      	asrs	r5, r5, #2
 80070fa:	d03d      	beq.n	8007178 <__pow5mult+0xa0>
 80070fc:	69f4      	ldr	r4, [r6, #28]
 80070fe:	b97c      	cbnz	r4, 8007120 <__pow5mult+0x48>
 8007100:	2010      	movs	r0, #16
 8007102:	f7ff fd7f 	bl	8006c04 <malloc>
 8007106:	4602      	mov	r2, r0
 8007108:	61f0      	str	r0, [r6, #28]
 800710a:	b928      	cbnz	r0, 8007118 <__pow5mult+0x40>
 800710c:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <__pow5mult+0xac>)
 800710e:	481e      	ldr	r0, [pc, #120]	; (8007188 <__pow5mult+0xb0>)
 8007110:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007114:	f000 fc4c 	bl	80079b0 <__assert_func>
 8007118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800711c:	6004      	str	r4, [r0, #0]
 800711e:	60c4      	str	r4, [r0, #12]
 8007120:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007128:	b94c      	cbnz	r4, 800713e <__pow5mult+0x66>
 800712a:	f240 2171 	movw	r1, #625	; 0x271
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff ff12 	bl	8006f58 <__i2b>
 8007134:	2300      	movs	r3, #0
 8007136:	f8c8 0008 	str.w	r0, [r8, #8]
 800713a:	4604      	mov	r4, r0
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	07eb      	lsls	r3, r5, #31
 8007144:	d50a      	bpl.n	800715c <__pow5mult+0x84>
 8007146:	4639      	mov	r1, r7
 8007148:	4622      	mov	r2, r4
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ff1a 	bl	8006f84 <__multiply>
 8007150:	4639      	mov	r1, r7
 8007152:	4680      	mov	r8, r0
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff fe49 	bl	8006dec <_Bfree>
 800715a:	4647      	mov	r7, r8
 800715c:	106d      	asrs	r5, r5, #1
 800715e:	d00b      	beq.n	8007178 <__pow5mult+0xa0>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	b938      	cbnz	r0, 8007174 <__pow5mult+0x9c>
 8007164:	4622      	mov	r2, r4
 8007166:	4621      	mov	r1, r4
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff ff0b 	bl	8006f84 <__multiply>
 800716e:	6020      	str	r0, [r4, #0]
 8007170:	f8c0 9000 	str.w	r9, [r0]
 8007174:	4604      	mov	r4, r0
 8007176:	e7e4      	b.n	8007142 <__pow5mult+0x6a>
 8007178:	4638      	mov	r0, r7
 800717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717e:	bf00      	nop
 8007180:	08007ea8 	.word	0x08007ea8
 8007184:	08007cd9 	.word	0x08007cd9
 8007188:	08007d59 	.word	0x08007d59

0800718c <__lshift>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	460c      	mov	r4, r1
 8007192:	6849      	ldr	r1, [r1, #4]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	4607      	mov	r7, r0
 800719e:	4691      	mov	r9, r2
 80071a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071a4:	f108 0601 	add.w	r6, r8, #1
 80071a8:	42b3      	cmp	r3, r6
 80071aa:	db0b      	blt.n	80071c4 <__lshift+0x38>
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7ff fddd 	bl	8006d6c <_Balloc>
 80071b2:	4605      	mov	r5, r0
 80071b4:	b948      	cbnz	r0, 80071ca <__lshift+0x3e>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b28      	ldr	r3, [pc, #160]	; (800725c <__lshift+0xd0>)
 80071ba:	4829      	ldr	r0, [pc, #164]	; (8007260 <__lshift+0xd4>)
 80071bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071c0:	f000 fbf6 	bl	80079b0 <__assert_func>
 80071c4:	3101      	adds	r1, #1
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	e7ee      	b.n	80071a8 <__lshift+0x1c>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f100 0114 	add.w	r1, r0, #20
 80071d0:	f100 0210 	add.w	r2, r0, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	4553      	cmp	r3, sl
 80071d8:	db33      	blt.n	8007242 <__lshift+0xb6>
 80071da:	6920      	ldr	r0, [r4, #16]
 80071dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071e0:	f104 0314 	add.w	r3, r4, #20
 80071e4:	f019 091f 	ands.w	r9, r9, #31
 80071e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071f0:	d02b      	beq.n	800724a <__lshift+0xbe>
 80071f2:	f1c9 0e20 	rsb	lr, r9, #32
 80071f6:	468a      	mov	sl, r1
 80071f8:	2200      	movs	r2, #0
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007200:	4310      	orrs	r0, r2
 8007202:	f84a 0b04 	str.w	r0, [sl], #4
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	459c      	cmp	ip, r3
 800720c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007210:	d8f3      	bhi.n	80071fa <__lshift+0x6e>
 8007212:	ebac 0304 	sub.w	r3, ip, r4
 8007216:	3b15      	subs	r3, #21
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	3304      	adds	r3, #4
 800721e:	f104 0015 	add.w	r0, r4, #21
 8007222:	4584      	cmp	ip, r0
 8007224:	bf38      	it	cc
 8007226:	2304      	movcc	r3, #4
 8007228:	50ca      	str	r2, [r1, r3]
 800722a:	b10a      	cbz	r2, 8007230 <__lshift+0xa4>
 800722c:	f108 0602 	add.w	r6, r8, #2
 8007230:	3e01      	subs	r6, #1
 8007232:	4638      	mov	r0, r7
 8007234:	612e      	str	r6, [r5, #16]
 8007236:	4621      	mov	r1, r4
 8007238:	f7ff fdd8 	bl	8006dec <_Bfree>
 800723c:	4628      	mov	r0, r5
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	f842 0f04 	str.w	r0, [r2, #4]!
 8007246:	3301      	adds	r3, #1
 8007248:	e7c5      	b.n	80071d6 <__lshift+0x4a>
 800724a:	3904      	subs	r1, #4
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	f841 2f04 	str.w	r2, [r1, #4]!
 8007254:	459c      	cmp	ip, r3
 8007256:	d8f9      	bhi.n	800724c <__lshift+0xc0>
 8007258:	e7ea      	b.n	8007230 <__lshift+0xa4>
 800725a:	bf00      	nop
 800725c:	08007d48 	.word	0x08007d48
 8007260:	08007d59 	.word	0x08007d59

08007264 <__mcmp>:
 8007264:	b530      	push	{r4, r5, lr}
 8007266:	6902      	ldr	r2, [r0, #16]
 8007268:	690c      	ldr	r4, [r1, #16]
 800726a:	1b12      	subs	r2, r2, r4
 800726c:	d10e      	bne.n	800728c <__mcmp+0x28>
 800726e:	f100 0314 	add.w	r3, r0, #20
 8007272:	3114      	adds	r1, #20
 8007274:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007278:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800727c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007280:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007284:	42a5      	cmp	r5, r4
 8007286:	d003      	beq.n	8007290 <__mcmp+0x2c>
 8007288:	d305      	bcc.n	8007296 <__mcmp+0x32>
 800728a:	2201      	movs	r2, #1
 800728c:	4610      	mov	r0, r2
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	4283      	cmp	r3, r0
 8007292:	d3f3      	bcc.n	800727c <__mcmp+0x18>
 8007294:	e7fa      	b.n	800728c <__mcmp+0x28>
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	e7f7      	b.n	800728c <__mcmp+0x28>

0800729c <__mdiff>:
 800729c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	460c      	mov	r4, r1
 80072a2:	4606      	mov	r6, r0
 80072a4:	4611      	mov	r1, r2
 80072a6:	4620      	mov	r0, r4
 80072a8:	4690      	mov	r8, r2
 80072aa:	f7ff ffdb 	bl	8007264 <__mcmp>
 80072ae:	1e05      	subs	r5, r0, #0
 80072b0:	d110      	bne.n	80072d4 <__mdiff+0x38>
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff fd59 	bl	8006d6c <_Balloc>
 80072ba:	b930      	cbnz	r0, 80072ca <__mdiff+0x2e>
 80072bc:	4b3a      	ldr	r3, [pc, #232]	; (80073a8 <__mdiff+0x10c>)
 80072be:	4602      	mov	r2, r0
 80072c0:	f240 2137 	movw	r1, #567	; 0x237
 80072c4:	4839      	ldr	r0, [pc, #228]	; (80073ac <__mdiff+0x110>)
 80072c6:	f000 fb73 	bl	80079b0 <__assert_func>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	bfa4      	itt	ge
 80072d6:	4643      	movge	r3, r8
 80072d8:	46a0      	movge	r8, r4
 80072da:	4630      	mov	r0, r6
 80072dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072e0:	bfa6      	itte	ge
 80072e2:	461c      	movge	r4, r3
 80072e4:	2500      	movge	r5, #0
 80072e6:	2501      	movlt	r5, #1
 80072e8:	f7ff fd40 	bl	8006d6c <_Balloc>
 80072ec:	b920      	cbnz	r0, 80072f8 <__mdiff+0x5c>
 80072ee:	4b2e      	ldr	r3, [pc, #184]	; (80073a8 <__mdiff+0x10c>)
 80072f0:	4602      	mov	r2, r0
 80072f2:	f240 2145 	movw	r1, #581	; 0x245
 80072f6:	e7e5      	b.n	80072c4 <__mdiff+0x28>
 80072f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072fc:	6926      	ldr	r6, [r4, #16]
 80072fe:	60c5      	str	r5, [r0, #12]
 8007300:	f104 0914 	add.w	r9, r4, #20
 8007304:	f108 0514 	add.w	r5, r8, #20
 8007308:	f100 0e14 	add.w	lr, r0, #20
 800730c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007310:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007314:	f108 0210 	add.w	r2, r8, #16
 8007318:	46f2      	mov	sl, lr
 800731a:	2100      	movs	r1, #0
 800731c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007320:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007324:	fa11 f88b 	uxtah	r8, r1, fp
 8007328:	b299      	uxth	r1, r3
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	eba8 0801 	sub.w	r8, r8, r1
 8007330:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007334:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007338:	fa1f f888 	uxth.w	r8, r8
 800733c:	1419      	asrs	r1, r3, #16
 800733e:	454e      	cmp	r6, r9
 8007340:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007344:	f84a 3b04 	str.w	r3, [sl], #4
 8007348:	d8e8      	bhi.n	800731c <__mdiff+0x80>
 800734a:	1b33      	subs	r3, r6, r4
 800734c:	3b15      	subs	r3, #21
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	3304      	adds	r3, #4
 8007354:	3415      	adds	r4, #21
 8007356:	42a6      	cmp	r6, r4
 8007358:	bf38      	it	cc
 800735a:	2304      	movcc	r3, #4
 800735c:	441d      	add	r5, r3
 800735e:	4473      	add	r3, lr
 8007360:	469e      	mov	lr, r3
 8007362:	462e      	mov	r6, r5
 8007364:	4566      	cmp	r6, ip
 8007366:	d30e      	bcc.n	8007386 <__mdiff+0xea>
 8007368:	f10c 0203 	add.w	r2, ip, #3
 800736c:	1b52      	subs	r2, r2, r5
 800736e:	f022 0203 	bic.w	r2, r2, #3
 8007372:	3d03      	subs	r5, #3
 8007374:	45ac      	cmp	ip, r5
 8007376:	bf38      	it	cc
 8007378:	2200      	movcc	r2, #0
 800737a:	4413      	add	r3, r2
 800737c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007380:	b17a      	cbz	r2, 80073a2 <__mdiff+0x106>
 8007382:	6107      	str	r7, [r0, #16]
 8007384:	e7a4      	b.n	80072d0 <__mdiff+0x34>
 8007386:	f856 8b04 	ldr.w	r8, [r6], #4
 800738a:	fa11 f288 	uxtah	r2, r1, r8
 800738e:	1414      	asrs	r4, r2, #16
 8007390:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007394:	b292      	uxth	r2, r2
 8007396:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800739a:	f84e 2b04 	str.w	r2, [lr], #4
 800739e:	1421      	asrs	r1, r4, #16
 80073a0:	e7e0      	b.n	8007364 <__mdiff+0xc8>
 80073a2:	3f01      	subs	r7, #1
 80073a4:	e7ea      	b.n	800737c <__mdiff+0xe0>
 80073a6:	bf00      	nop
 80073a8:	08007d48 	.word	0x08007d48
 80073ac:	08007d59 	.word	0x08007d59

080073b0 <__d2b>:
 80073b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	460f      	mov	r7, r1
 80073b6:	2101      	movs	r1, #1
 80073b8:	ec59 8b10 	vmov	r8, r9, d0
 80073bc:	4616      	mov	r6, r2
 80073be:	f7ff fcd5 	bl	8006d6c <_Balloc>
 80073c2:	4604      	mov	r4, r0
 80073c4:	b930      	cbnz	r0, 80073d4 <__d2b+0x24>
 80073c6:	4602      	mov	r2, r0
 80073c8:	4b24      	ldr	r3, [pc, #144]	; (800745c <__d2b+0xac>)
 80073ca:	4825      	ldr	r0, [pc, #148]	; (8007460 <__d2b+0xb0>)
 80073cc:	f240 310f 	movw	r1, #783	; 0x30f
 80073d0:	f000 faee 	bl	80079b0 <__assert_func>
 80073d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073dc:	bb2d      	cbnz	r5, 800742a <__d2b+0x7a>
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	f1b8 0300 	subs.w	r3, r8, #0
 80073e4:	d026      	beq.n	8007434 <__d2b+0x84>
 80073e6:	4668      	mov	r0, sp
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	f7ff fd87 	bl	8006efc <__lo0bits>
 80073ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073f2:	b1e8      	cbz	r0, 8007430 <__d2b+0x80>
 80073f4:	f1c0 0320 	rsb	r3, r0, #32
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	430b      	orrs	r3, r1
 80073fe:	40c2      	lsrs	r2, r0
 8007400:	6163      	str	r3, [r4, #20]
 8007402:	9201      	str	r2, [sp, #4]
 8007404:	9b01      	ldr	r3, [sp, #4]
 8007406:	61a3      	str	r3, [r4, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	bf14      	ite	ne
 800740c:	2202      	movne	r2, #2
 800740e:	2201      	moveq	r2, #1
 8007410:	6122      	str	r2, [r4, #16]
 8007412:	b1bd      	cbz	r5, 8007444 <__d2b+0x94>
 8007414:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007418:	4405      	add	r5, r0
 800741a:	603d      	str	r5, [r7, #0]
 800741c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007420:	6030      	str	r0, [r6, #0]
 8007422:	4620      	mov	r0, r4
 8007424:	b003      	add	sp, #12
 8007426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800742a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800742e:	e7d6      	b.n	80073de <__d2b+0x2e>
 8007430:	6161      	str	r1, [r4, #20]
 8007432:	e7e7      	b.n	8007404 <__d2b+0x54>
 8007434:	a801      	add	r0, sp, #4
 8007436:	f7ff fd61 	bl	8006efc <__lo0bits>
 800743a:	9b01      	ldr	r3, [sp, #4]
 800743c:	6163      	str	r3, [r4, #20]
 800743e:	3020      	adds	r0, #32
 8007440:	2201      	movs	r2, #1
 8007442:	e7e5      	b.n	8007410 <__d2b+0x60>
 8007444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800744c:	6038      	str	r0, [r7, #0]
 800744e:	6918      	ldr	r0, [r3, #16]
 8007450:	f7ff fd34 	bl	8006ebc <__hi0bits>
 8007454:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007458:	e7e2      	b.n	8007420 <__d2b+0x70>
 800745a:	bf00      	nop
 800745c:	08007d48 	.word	0x08007d48
 8007460:	08007d59 	.word	0x08007d59

08007464 <__sfputc_r>:
 8007464:	6893      	ldr	r3, [r2, #8]
 8007466:	3b01      	subs	r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	b410      	push	{r4}
 800746c:	6093      	str	r3, [r2, #8]
 800746e:	da08      	bge.n	8007482 <__sfputc_r+0x1e>
 8007470:	6994      	ldr	r4, [r2, #24]
 8007472:	42a3      	cmp	r3, r4
 8007474:	db01      	blt.n	800747a <__sfputc_r+0x16>
 8007476:	290a      	cmp	r1, #10
 8007478:	d103      	bne.n	8007482 <__sfputc_r+0x1e>
 800747a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800747e:	f000 b9e3 	b.w	8007848 <__swbuf_r>
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	1c58      	adds	r0, r3, #1
 8007486:	6010      	str	r0, [r2, #0]
 8007488:	7019      	strb	r1, [r3, #0]
 800748a:	4608      	mov	r0, r1
 800748c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007490:	4770      	bx	lr

08007492 <__sfputs_r>:
 8007492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007494:	4606      	mov	r6, r0
 8007496:	460f      	mov	r7, r1
 8007498:	4614      	mov	r4, r2
 800749a:	18d5      	adds	r5, r2, r3
 800749c:	42ac      	cmp	r4, r5
 800749e:	d101      	bne.n	80074a4 <__sfputs_r+0x12>
 80074a0:	2000      	movs	r0, #0
 80074a2:	e007      	b.n	80074b4 <__sfputs_r+0x22>
 80074a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a8:	463a      	mov	r2, r7
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ffda 	bl	8007464 <__sfputc_r>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d1f3      	bne.n	800749c <__sfputs_r+0xa>
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074b8 <_vfiprintf_r>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460d      	mov	r5, r1
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	4614      	mov	r4, r2
 80074c2:	4698      	mov	r8, r3
 80074c4:	4606      	mov	r6, r0
 80074c6:	b118      	cbz	r0, 80074d0 <_vfiprintf_r+0x18>
 80074c8:	6a03      	ldr	r3, [r0, #32]
 80074ca:	b90b      	cbnz	r3, 80074d0 <_vfiprintf_r+0x18>
 80074cc:	f7fe fbc8 	bl	8005c60 <__sinit>
 80074d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d2:	07d9      	lsls	r1, r3, #31
 80074d4:	d405      	bmi.n	80074e2 <_vfiprintf_r+0x2a>
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	059a      	lsls	r2, r3, #22
 80074da:	d402      	bmi.n	80074e2 <_vfiprintf_r+0x2a>
 80074dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074de:	f7fe fcc8 	bl	8005e72 <__retarget_lock_acquire_recursive>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	071b      	lsls	r3, r3, #28
 80074e6:	d501      	bpl.n	80074ec <_vfiprintf_r+0x34>
 80074e8:	692b      	ldr	r3, [r5, #16]
 80074ea:	b99b      	cbnz	r3, 8007514 <_vfiprintf_r+0x5c>
 80074ec:	4629      	mov	r1, r5
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 f9e8 	bl	80078c4 <__swsetup_r>
 80074f4:	b170      	cbz	r0, 8007514 <_vfiprintf_r+0x5c>
 80074f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f8:	07dc      	lsls	r4, r3, #31
 80074fa:	d504      	bpl.n	8007506 <_vfiprintf_r+0x4e>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b01d      	add	sp, #116	; 0x74
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	0598      	lsls	r0, r3, #22
 800750a:	d4f7      	bmi.n	80074fc <_vfiprintf_r+0x44>
 800750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800750e:	f7fe fcb1 	bl	8005e74 <__retarget_lock_release_recursive>
 8007512:	e7f3      	b.n	80074fc <_vfiprintf_r+0x44>
 8007514:	2300      	movs	r3, #0
 8007516:	9309      	str	r3, [sp, #36]	; 0x24
 8007518:	2320      	movs	r3, #32
 800751a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800751e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007522:	2330      	movs	r3, #48	; 0x30
 8007524:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076d8 <_vfiprintf_r+0x220>
 8007528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800752c:	f04f 0901 	mov.w	r9, #1
 8007530:	4623      	mov	r3, r4
 8007532:	469a      	mov	sl, r3
 8007534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007538:	b10a      	cbz	r2, 800753e <_vfiprintf_r+0x86>
 800753a:	2a25      	cmp	r2, #37	; 0x25
 800753c:	d1f9      	bne.n	8007532 <_vfiprintf_r+0x7a>
 800753e:	ebba 0b04 	subs.w	fp, sl, r4
 8007542:	d00b      	beq.n	800755c <_vfiprintf_r+0xa4>
 8007544:	465b      	mov	r3, fp
 8007546:	4622      	mov	r2, r4
 8007548:	4629      	mov	r1, r5
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff ffa1 	bl	8007492 <__sfputs_r>
 8007550:	3001      	adds	r0, #1
 8007552:	f000 80a9 	beq.w	80076a8 <_vfiprintf_r+0x1f0>
 8007556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007558:	445a      	add	r2, fp
 800755a:	9209      	str	r2, [sp, #36]	; 0x24
 800755c:	f89a 3000 	ldrb.w	r3, [sl]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80a1 	beq.w	80076a8 <_vfiprintf_r+0x1f0>
 8007566:	2300      	movs	r3, #0
 8007568:	f04f 32ff 	mov.w	r2, #4294967295
 800756c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007570:	f10a 0a01 	add.w	sl, sl, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757c:	931a      	str	r3, [sp, #104]	; 0x68
 800757e:	4654      	mov	r4, sl
 8007580:	2205      	movs	r2, #5
 8007582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007586:	4854      	ldr	r0, [pc, #336]	; (80076d8 <_vfiprintf_r+0x220>)
 8007588:	f7f8 fe22 	bl	80001d0 <memchr>
 800758c:	9a04      	ldr	r2, [sp, #16]
 800758e:	b9d8      	cbnz	r0, 80075c8 <_vfiprintf_r+0x110>
 8007590:	06d1      	lsls	r1, r2, #27
 8007592:	bf44      	itt	mi
 8007594:	2320      	movmi	r3, #32
 8007596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759a:	0713      	lsls	r3, r2, #28
 800759c:	bf44      	itt	mi
 800759e:	232b      	movmi	r3, #43	; 0x2b
 80075a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a4:	f89a 3000 	ldrb.w	r3, [sl]
 80075a8:	2b2a      	cmp	r3, #42	; 0x2a
 80075aa:	d015      	beq.n	80075d8 <_vfiprintf_r+0x120>
 80075ac:	9a07      	ldr	r2, [sp, #28]
 80075ae:	4654      	mov	r4, sl
 80075b0:	2000      	movs	r0, #0
 80075b2:	f04f 0c0a 	mov.w	ip, #10
 80075b6:	4621      	mov	r1, r4
 80075b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075bc:	3b30      	subs	r3, #48	; 0x30
 80075be:	2b09      	cmp	r3, #9
 80075c0:	d94d      	bls.n	800765e <_vfiprintf_r+0x1a6>
 80075c2:	b1b0      	cbz	r0, 80075f2 <_vfiprintf_r+0x13a>
 80075c4:	9207      	str	r2, [sp, #28]
 80075c6:	e014      	b.n	80075f2 <_vfiprintf_r+0x13a>
 80075c8:	eba0 0308 	sub.w	r3, r0, r8
 80075cc:	fa09 f303 	lsl.w	r3, r9, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	46a2      	mov	sl, r4
 80075d6:	e7d2      	b.n	800757e <_vfiprintf_r+0xc6>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	1d19      	adds	r1, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	9103      	str	r1, [sp, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bfbb      	ittet	lt
 80075e4:	425b      	neglt	r3, r3
 80075e6:	f042 0202 	orrlt.w	r2, r2, #2
 80075ea:	9307      	strge	r3, [sp, #28]
 80075ec:	9307      	strlt	r3, [sp, #28]
 80075ee:	bfb8      	it	lt
 80075f0:	9204      	strlt	r2, [sp, #16]
 80075f2:	7823      	ldrb	r3, [r4, #0]
 80075f4:	2b2e      	cmp	r3, #46	; 0x2e
 80075f6:	d10c      	bne.n	8007612 <_vfiprintf_r+0x15a>
 80075f8:	7863      	ldrb	r3, [r4, #1]
 80075fa:	2b2a      	cmp	r3, #42	; 0x2a
 80075fc:	d134      	bne.n	8007668 <_vfiprintf_r+0x1b0>
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	9203      	str	r2, [sp, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfb8      	it	lt
 800760a:	f04f 33ff 	movlt.w	r3, #4294967295
 800760e:	3402      	adds	r4, #2
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076e8 <_vfiprintf_r+0x230>
 8007616:	7821      	ldrb	r1, [r4, #0]
 8007618:	2203      	movs	r2, #3
 800761a:	4650      	mov	r0, sl
 800761c:	f7f8 fdd8 	bl	80001d0 <memchr>
 8007620:	b138      	cbz	r0, 8007632 <_vfiprintf_r+0x17a>
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	eba0 000a 	sub.w	r0, r0, sl
 8007628:	2240      	movs	r2, #64	; 0x40
 800762a:	4082      	lsls	r2, r0
 800762c:	4313      	orrs	r3, r2
 800762e:	3401      	adds	r4, #1
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007636:	4829      	ldr	r0, [pc, #164]	; (80076dc <_vfiprintf_r+0x224>)
 8007638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800763c:	2206      	movs	r2, #6
 800763e:	f7f8 fdc7 	bl	80001d0 <memchr>
 8007642:	2800      	cmp	r0, #0
 8007644:	d03f      	beq.n	80076c6 <_vfiprintf_r+0x20e>
 8007646:	4b26      	ldr	r3, [pc, #152]	; (80076e0 <_vfiprintf_r+0x228>)
 8007648:	bb1b      	cbnz	r3, 8007692 <_vfiprintf_r+0x1da>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	3307      	adds	r3, #7
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	3308      	adds	r3, #8
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	443b      	add	r3, r7
 800765a:	9309      	str	r3, [sp, #36]	; 0x24
 800765c:	e768      	b.n	8007530 <_vfiprintf_r+0x78>
 800765e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007662:	460c      	mov	r4, r1
 8007664:	2001      	movs	r0, #1
 8007666:	e7a6      	b.n	80075b6 <_vfiprintf_r+0xfe>
 8007668:	2300      	movs	r3, #0
 800766a:	3401      	adds	r4, #1
 800766c:	9305      	str	r3, [sp, #20]
 800766e:	4619      	mov	r1, r3
 8007670:	f04f 0c0a 	mov.w	ip, #10
 8007674:	4620      	mov	r0, r4
 8007676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767a:	3a30      	subs	r2, #48	; 0x30
 800767c:	2a09      	cmp	r2, #9
 800767e:	d903      	bls.n	8007688 <_vfiprintf_r+0x1d0>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0c6      	beq.n	8007612 <_vfiprintf_r+0x15a>
 8007684:	9105      	str	r1, [sp, #20]
 8007686:	e7c4      	b.n	8007612 <_vfiprintf_r+0x15a>
 8007688:	fb0c 2101 	mla	r1, ip, r1, r2
 800768c:	4604      	mov	r4, r0
 800768e:	2301      	movs	r3, #1
 8007690:	e7f0      	b.n	8007674 <_vfiprintf_r+0x1bc>
 8007692:	ab03      	add	r3, sp, #12
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	462a      	mov	r2, r5
 8007698:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <_vfiprintf_r+0x22c>)
 800769a:	a904      	add	r1, sp, #16
 800769c:	4630      	mov	r0, r6
 800769e:	f7fd fe8d 	bl	80053bc <_printf_float>
 80076a2:	4607      	mov	r7, r0
 80076a4:	1c78      	adds	r0, r7, #1
 80076a6:	d1d6      	bne.n	8007656 <_vfiprintf_r+0x19e>
 80076a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076aa:	07d9      	lsls	r1, r3, #31
 80076ac:	d405      	bmi.n	80076ba <_vfiprintf_r+0x202>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	059a      	lsls	r2, r3, #22
 80076b2:	d402      	bmi.n	80076ba <_vfiprintf_r+0x202>
 80076b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076b6:	f7fe fbdd 	bl	8005e74 <__retarget_lock_release_recursive>
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	065b      	lsls	r3, r3, #25
 80076be:	f53f af1d 	bmi.w	80074fc <_vfiprintf_r+0x44>
 80076c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c4:	e71c      	b.n	8007500 <_vfiprintf_r+0x48>
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	462a      	mov	r2, r5
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <_vfiprintf_r+0x22c>)
 80076ce:	a904      	add	r1, sp, #16
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7fe f917 	bl	8005904 <_printf_i>
 80076d6:	e7e4      	b.n	80076a2 <_vfiprintf_r+0x1ea>
 80076d8:	08007eb4 	.word	0x08007eb4
 80076dc:	08007ebe 	.word	0x08007ebe
 80076e0:	080053bd 	.word	0x080053bd
 80076e4:	08007493 	.word	0x08007493
 80076e8:	08007eba 	.word	0x08007eba

080076ec <__sflush_r>:
 80076ec:	898a      	ldrh	r2, [r1, #12]
 80076ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	0710      	lsls	r0, r2, #28
 80076f6:	460c      	mov	r4, r1
 80076f8:	d458      	bmi.n	80077ac <__sflush_r+0xc0>
 80076fa:	684b      	ldr	r3, [r1, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dc05      	bgt.n	800770c <__sflush_r+0x20>
 8007700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	dc02      	bgt.n	800770c <__sflush_r+0x20>
 8007706:	2000      	movs	r0, #0
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800770e:	2e00      	cmp	r6, #0
 8007710:	d0f9      	beq.n	8007706 <__sflush_r+0x1a>
 8007712:	2300      	movs	r3, #0
 8007714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007718:	682f      	ldr	r7, [r5, #0]
 800771a:	6a21      	ldr	r1, [r4, #32]
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	d032      	beq.n	8007786 <__sflush_r+0x9a>
 8007720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	075a      	lsls	r2, r3, #29
 8007726:	d505      	bpl.n	8007734 <__sflush_r+0x48>
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	1ac0      	subs	r0, r0, r3
 800772c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800772e:	b10b      	cbz	r3, 8007734 <__sflush_r+0x48>
 8007730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007732:	1ac0      	subs	r0, r0, r3
 8007734:	2300      	movs	r3, #0
 8007736:	4602      	mov	r2, r0
 8007738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800773a:	6a21      	ldr	r1, [r4, #32]
 800773c:	4628      	mov	r0, r5
 800773e:	47b0      	blx	r6
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	d106      	bne.n	8007754 <__sflush_r+0x68>
 8007746:	6829      	ldr	r1, [r5, #0]
 8007748:	291d      	cmp	r1, #29
 800774a:	d82b      	bhi.n	80077a4 <__sflush_r+0xb8>
 800774c:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <__sflush_r+0x108>)
 800774e:	410a      	asrs	r2, r1
 8007750:	07d6      	lsls	r6, r2, #31
 8007752:	d427      	bmi.n	80077a4 <__sflush_r+0xb8>
 8007754:	2200      	movs	r2, #0
 8007756:	6062      	str	r2, [r4, #4]
 8007758:	04d9      	lsls	r1, r3, #19
 800775a:	6922      	ldr	r2, [r4, #16]
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	d504      	bpl.n	800776a <__sflush_r+0x7e>
 8007760:	1c42      	adds	r2, r0, #1
 8007762:	d101      	bne.n	8007768 <__sflush_r+0x7c>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b903      	cbnz	r3, 800776a <__sflush_r+0x7e>
 8007768:	6560      	str	r0, [r4, #84]	; 0x54
 800776a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800776c:	602f      	str	r7, [r5, #0]
 800776e:	2900      	cmp	r1, #0
 8007770:	d0c9      	beq.n	8007706 <__sflush_r+0x1a>
 8007772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007776:	4299      	cmp	r1, r3
 8007778:	d002      	beq.n	8007780 <__sflush_r+0x94>
 800777a:	4628      	mov	r0, r5
 800777c:	f7ff f9f6 	bl	8006b6c <_free_r>
 8007780:	2000      	movs	r0, #0
 8007782:	6360      	str	r0, [r4, #52]	; 0x34
 8007784:	e7c0      	b.n	8007708 <__sflush_r+0x1c>
 8007786:	2301      	movs	r3, #1
 8007788:	4628      	mov	r0, r5
 800778a:	47b0      	blx	r6
 800778c:	1c41      	adds	r1, r0, #1
 800778e:	d1c8      	bne.n	8007722 <__sflush_r+0x36>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0c5      	beq.n	8007722 <__sflush_r+0x36>
 8007796:	2b1d      	cmp	r3, #29
 8007798:	d001      	beq.n	800779e <__sflush_r+0xb2>
 800779a:	2b16      	cmp	r3, #22
 800779c:	d101      	bne.n	80077a2 <__sflush_r+0xb6>
 800779e:	602f      	str	r7, [r5, #0]
 80077a0:	e7b1      	b.n	8007706 <__sflush_r+0x1a>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	e7ad      	b.n	8007708 <__sflush_r+0x1c>
 80077ac:	690f      	ldr	r7, [r1, #16]
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	d0a9      	beq.n	8007706 <__sflush_r+0x1a>
 80077b2:	0793      	lsls	r3, r2, #30
 80077b4:	680e      	ldr	r6, [r1, #0]
 80077b6:	bf08      	it	eq
 80077b8:	694b      	ldreq	r3, [r1, #20]
 80077ba:	600f      	str	r7, [r1, #0]
 80077bc:	bf18      	it	ne
 80077be:	2300      	movne	r3, #0
 80077c0:	eba6 0807 	sub.w	r8, r6, r7
 80077c4:	608b      	str	r3, [r1, #8]
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	dd9c      	ble.n	8007706 <__sflush_r+0x1a>
 80077cc:	6a21      	ldr	r1, [r4, #32]
 80077ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077d0:	4643      	mov	r3, r8
 80077d2:	463a      	mov	r2, r7
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b0      	blx	r6
 80077d8:	2800      	cmp	r0, #0
 80077da:	dc06      	bgt.n	80077ea <__sflush_r+0xfe>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295
 80077e8:	e78e      	b.n	8007708 <__sflush_r+0x1c>
 80077ea:	4407      	add	r7, r0
 80077ec:	eba8 0800 	sub.w	r8, r8, r0
 80077f0:	e7e9      	b.n	80077c6 <__sflush_r+0xda>
 80077f2:	bf00      	nop
 80077f4:	dfbffffe 	.word	0xdfbffffe

080077f8 <_fflush_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	690b      	ldr	r3, [r1, #16]
 80077fc:	4605      	mov	r5, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b913      	cbnz	r3, 8007808 <_fflush_r+0x10>
 8007802:	2500      	movs	r5, #0
 8007804:	4628      	mov	r0, r5
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	b118      	cbz	r0, 8007812 <_fflush_r+0x1a>
 800780a:	6a03      	ldr	r3, [r0, #32]
 800780c:	b90b      	cbnz	r3, 8007812 <_fflush_r+0x1a>
 800780e:	f7fe fa27 	bl	8005c60 <__sinit>
 8007812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f3      	beq.n	8007802 <_fflush_r+0xa>
 800781a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800781c:	07d0      	lsls	r0, r2, #31
 800781e:	d404      	bmi.n	800782a <_fflush_r+0x32>
 8007820:	0599      	lsls	r1, r3, #22
 8007822:	d402      	bmi.n	800782a <_fflush_r+0x32>
 8007824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007826:	f7fe fb24 	bl	8005e72 <__retarget_lock_acquire_recursive>
 800782a:	4628      	mov	r0, r5
 800782c:	4621      	mov	r1, r4
 800782e:	f7ff ff5d 	bl	80076ec <__sflush_r>
 8007832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007834:	07da      	lsls	r2, r3, #31
 8007836:	4605      	mov	r5, r0
 8007838:	d4e4      	bmi.n	8007804 <_fflush_r+0xc>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	059b      	lsls	r3, r3, #22
 800783e:	d4e1      	bmi.n	8007804 <_fflush_r+0xc>
 8007840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007842:	f7fe fb17 	bl	8005e74 <__retarget_lock_release_recursive>
 8007846:	e7dd      	b.n	8007804 <_fflush_r+0xc>

08007848 <__swbuf_r>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	460e      	mov	r6, r1
 800784c:	4614      	mov	r4, r2
 800784e:	4605      	mov	r5, r0
 8007850:	b118      	cbz	r0, 800785a <__swbuf_r+0x12>
 8007852:	6a03      	ldr	r3, [r0, #32]
 8007854:	b90b      	cbnz	r3, 800785a <__swbuf_r+0x12>
 8007856:	f7fe fa03 	bl	8005c60 <__sinit>
 800785a:	69a3      	ldr	r3, [r4, #24]
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	071a      	lsls	r2, r3, #28
 8007862:	d525      	bpl.n	80078b0 <__swbuf_r+0x68>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	b31b      	cbz	r3, 80078b0 <__swbuf_r+0x68>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	6922      	ldr	r2, [r4, #16]
 800786c:	1a98      	subs	r0, r3, r2
 800786e:	6963      	ldr	r3, [r4, #20]
 8007870:	b2f6      	uxtb	r6, r6
 8007872:	4283      	cmp	r3, r0
 8007874:	4637      	mov	r7, r6
 8007876:	dc04      	bgt.n	8007882 <__swbuf_r+0x3a>
 8007878:	4621      	mov	r1, r4
 800787a:	4628      	mov	r0, r5
 800787c:	f7ff ffbc 	bl	80077f8 <_fflush_r>
 8007880:	b9e0      	cbnz	r0, 80078bc <__swbuf_r+0x74>
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	3b01      	subs	r3, #1
 8007886:	60a3      	str	r3, [r4, #8]
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	6022      	str	r2, [r4, #0]
 800788e:	701e      	strb	r6, [r3, #0]
 8007890:	6962      	ldr	r2, [r4, #20]
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	429a      	cmp	r2, r3
 8007896:	d004      	beq.n	80078a2 <__swbuf_r+0x5a>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	07db      	lsls	r3, r3, #31
 800789c:	d506      	bpl.n	80078ac <__swbuf_r+0x64>
 800789e:	2e0a      	cmp	r6, #10
 80078a0:	d104      	bne.n	80078ac <__swbuf_r+0x64>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7ff ffa7 	bl	80077f8 <_fflush_r>
 80078aa:	b938      	cbnz	r0, 80078bc <__swbuf_r+0x74>
 80078ac:	4638      	mov	r0, r7
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b0:	4621      	mov	r1, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f806 	bl	80078c4 <__swsetup_r>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d0d5      	beq.n	8007868 <__swbuf_r+0x20>
 80078bc:	f04f 37ff 	mov.w	r7, #4294967295
 80078c0:	e7f4      	b.n	80078ac <__swbuf_r+0x64>
	...

080078c4 <__swsetup_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <__swsetup_r+0xac>)
 80078c8:	4605      	mov	r5, r0
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	460c      	mov	r4, r1
 80078ce:	b118      	cbz	r0, 80078d8 <__swsetup_r+0x14>
 80078d0:	6a03      	ldr	r3, [r0, #32]
 80078d2:	b90b      	cbnz	r3, 80078d8 <__swsetup_r+0x14>
 80078d4:	f7fe f9c4 	bl	8005c60 <__sinit>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078de:	0718      	lsls	r0, r3, #28
 80078e0:	d422      	bmi.n	8007928 <__swsetup_r+0x64>
 80078e2:	06d9      	lsls	r1, r3, #27
 80078e4:	d407      	bmi.n	80078f6 <__swsetup_r+0x32>
 80078e6:	2309      	movs	r3, #9
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e034      	b.n	8007960 <__swsetup_r+0x9c>
 80078f6:	0758      	lsls	r0, r3, #29
 80078f8:	d512      	bpl.n	8007920 <__swsetup_r+0x5c>
 80078fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078fc:	b141      	cbz	r1, 8007910 <__swsetup_r+0x4c>
 80078fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007902:	4299      	cmp	r1, r3
 8007904:	d002      	beq.n	800790c <__swsetup_r+0x48>
 8007906:	4628      	mov	r0, r5
 8007908:	f7ff f930 	bl	8006b6c <_free_r>
 800790c:	2300      	movs	r3, #0
 800790e:	6363      	str	r3, [r4, #52]	; 0x34
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	2300      	movs	r3, #0
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f043 0308 	orr.w	r3, r3, #8
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	b94b      	cbnz	r3, 8007940 <__swsetup_r+0x7c>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007936:	d003      	beq.n	8007940 <__swsetup_r+0x7c>
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f8c4 	bl	8007ac8 <__smakebuf_r>
 8007940:	89a0      	ldrh	r0, [r4, #12]
 8007942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007946:	f010 0301 	ands.w	r3, r0, #1
 800794a:	d00a      	beq.n	8007962 <__swsetup_r+0x9e>
 800794c:	2300      	movs	r3, #0
 800794e:	60a3      	str	r3, [r4, #8]
 8007950:	6963      	ldr	r3, [r4, #20]
 8007952:	425b      	negs	r3, r3
 8007954:	61a3      	str	r3, [r4, #24]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b943      	cbnz	r3, 800796c <__swsetup_r+0xa8>
 800795a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800795e:	d1c4      	bne.n	80078ea <__swsetup_r+0x26>
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	0781      	lsls	r1, r0, #30
 8007964:	bf58      	it	pl
 8007966:	6963      	ldrpl	r3, [r4, #20]
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	e7f4      	b.n	8007956 <__swsetup_r+0x92>
 800796c:	2000      	movs	r0, #0
 800796e:	e7f7      	b.n	8007960 <__swsetup_r+0x9c>
 8007970:	2000007c 	.word	0x2000007c

08007974 <_sbrk_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	; (8007990 <_sbrk_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7f9 ff32 	bl	80017e8 <_sbrk>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_sbrk_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_sbrk_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	200004a0 	.word	0x200004a0

08007994 <memcpy>:
 8007994:	440a      	add	r2, r1
 8007996:	4291      	cmp	r1, r2
 8007998:	f100 33ff 	add.w	r3, r0, #4294967295
 800799c:	d100      	bne.n	80079a0 <memcpy+0xc>
 800799e:	4770      	bx	lr
 80079a0:	b510      	push	{r4, lr}
 80079a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079aa:	4291      	cmp	r1, r2
 80079ac:	d1f9      	bne.n	80079a2 <memcpy+0xe>
 80079ae:	bd10      	pop	{r4, pc}

080079b0 <__assert_func>:
 80079b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079b2:	4614      	mov	r4, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <__assert_func+0x2c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4605      	mov	r5, r0
 80079bc:	68d8      	ldr	r0, [r3, #12]
 80079be:	b14c      	cbz	r4, 80079d4 <__assert_func+0x24>
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <__assert_func+0x30>)
 80079c2:	9100      	str	r1, [sp, #0]
 80079c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079c8:	4906      	ldr	r1, [pc, #24]	; (80079e4 <__assert_func+0x34>)
 80079ca:	462b      	mov	r3, r5
 80079cc:	f000 f844 	bl	8007a58 <fiprintf>
 80079d0:	f000 f8d8 	bl	8007b84 <abort>
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <__assert_func+0x38>)
 80079d6:	461c      	mov	r4, r3
 80079d8:	e7f3      	b.n	80079c2 <__assert_func+0x12>
 80079da:	bf00      	nop
 80079dc:	2000007c 	.word	0x2000007c
 80079e0:	08007ecf 	.word	0x08007ecf
 80079e4:	08007edc 	.word	0x08007edc
 80079e8:	08007f0a 	.word	0x08007f0a

080079ec <_calloc_r>:
 80079ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ee:	fba1 2402 	umull	r2, r4, r1, r2
 80079f2:	b94c      	cbnz	r4, 8007a08 <_calloc_r+0x1c>
 80079f4:	4611      	mov	r1, r2
 80079f6:	9201      	str	r2, [sp, #4]
 80079f8:	f7ff f92c 	bl	8006c54 <_malloc_r>
 80079fc:	9a01      	ldr	r2, [sp, #4]
 80079fe:	4605      	mov	r5, r0
 8007a00:	b930      	cbnz	r0, 8007a10 <_calloc_r+0x24>
 8007a02:	4628      	mov	r0, r5
 8007a04:	b003      	add	sp, #12
 8007a06:	bd30      	pop	{r4, r5, pc}
 8007a08:	220c      	movs	r2, #12
 8007a0a:	6002      	str	r2, [r0, #0]
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	e7f8      	b.n	8007a02 <_calloc_r+0x16>
 8007a10:	4621      	mov	r1, r4
 8007a12:	f7fe f9b0 	bl	8005d76 <memset>
 8007a16:	e7f4      	b.n	8007a02 <_calloc_r+0x16>

08007a18 <__ascii_mbtowc>:
 8007a18:	b082      	sub	sp, #8
 8007a1a:	b901      	cbnz	r1, 8007a1e <__ascii_mbtowc+0x6>
 8007a1c:	a901      	add	r1, sp, #4
 8007a1e:	b142      	cbz	r2, 8007a32 <__ascii_mbtowc+0x1a>
 8007a20:	b14b      	cbz	r3, 8007a36 <__ascii_mbtowc+0x1e>
 8007a22:	7813      	ldrb	r3, [r2, #0]
 8007a24:	600b      	str	r3, [r1, #0]
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	1e10      	subs	r0, r2, #0
 8007a2a:	bf18      	it	ne
 8007a2c:	2001      	movne	r0, #1
 8007a2e:	b002      	add	sp, #8
 8007a30:	4770      	bx	lr
 8007a32:	4610      	mov	r0, r2
 8007a34:	e7fb      	b.n	8007a2e <__ascii_mbtowc+0x16>
 8007a36:	f06f 0001 	mvn.w	r0, #1
 8007a3a:	e7f8      	b.n	8007a2e <__ascii_mbtowc+0x16>

08007a3c <__ascii_wctomb>:
 8007a3c:	b149      	cbz	r1, 8007a52 <__ascii_wctomb+0x16>
 8007a3e:	2aff      	cmp	r2, #255	; 0xff
 8007a40:	bf85      	ittet	hi
 8007a42:	238a      	movhi	r3, #138	; 0x8a
 8007a44:	6003      	strhi	r3, [r0, #0]
 8007a46:	700a      	strbls	r2, [r1, #0]
 8007a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a4c:	bf98      	it	ls
 8007a4e:	2001      	movls	r0, #1
 8007a50:	4770      	bx	lr
 8007a52:	4608      	mov	r0, r1
 8007a54:	4770      	bx	lr
	...

08007a58 <fiprintf>:
 8007a58:	b40e      	push	{r1, r2, r3}
 8007a5a:	b503      	push	{r0, r1, lr}
 8007a5c:	4601      	mov	r1, r0
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	4805      	ldr	r0, [pc, #20]	; (8007a78 <fiprintf+0x20>)
 8007a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a66:	6800      	ldr	r0, [r0, #0]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	f7ff fd25 	bl	80074b8 <_vfiprintf_r>
 8007a6e:	b002      	add	sp, #8
 8007a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a74:	b003      	add	sp, #12
 8007a76:	4770      	bx	lr
 8007a78:	2000007c 	.word	0x2000007c

08007a7c <__swhatbuf_r>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	460c      	mov	r4, r1
 8007a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a84:	2900      	cmp	r1, #0
 8007a86:	b096      	sub	sp, #88	; 0x58
 8007a88:	4615      	mov	r5, r2
 8007a8a:	461e      	mov	r6, r3
 8007a8c:	da0d      	bge.n	8007aaa <__swhatbuf_r+0x2e>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a94:	f04f 0100 	mov.w	r1, #0
 8007a98:	bf0c      	ite	eq
 8007a9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a9e:	2340      	movne	r3, #64	; 0x40
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	6031      	str	r1, [r6, #0]
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	b016      	add	sp, #88	; 0x58
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	466a      	mov	r2, sp
 8007aac:	f000 f848 	bl	8007b40 <_fstat_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dbec      	blt.n	8007a8e <__swhatbuf_r+0x12>
 8007ab4:	9901      	ldr	r1, [sp, #4]
 8007ab6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007aba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007abe:	4259      	negs	r1, r3
 8007ac0:	4159      	adcs	r1, r3
 8007ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac6:	e7eb      	b.n	8007aa0 <__swhatbuf_r+0x24>

08007ac8 <__smakebuf_r>:
 8007ac8:	898b      	ldrh	r3, [r1, #12]
 8007aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007acc:	079d      	lsls	r5, r3, #30
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	d507      	bpl.n	8007ae4 <__smakebuf_r+0x1c>
 8007ad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	2301      	movs	r3, #1
 8007ade:	6163      	str	r3, [r4, #20]
 8007ae0:	b002      	add	sp, #8
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	ab01      	add	r3, sp, #4
 8007ae6:	466a      	mov	r2, sp
 8007ae8:	f7ff ffc8 	bl	8007a7c <__swhatbuf_r>
 8007aec:	9900      	ldr	r1, [sp, #0]
 8007aee:	4605      	mov	r5, r0
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff f8af 	bl	8006c54 <_malloc_r>
 8007af6:	b948      	cbnz	r0, 8007b0c <__smakebuf_r+0x44>
 8007af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afc:	059a      	lsls	r2, r3, #22
 8007afe:	d4ef      	bmi.n	8007ae0 <__smakebuf_r+0x18>
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	f043 0302 	orr.w	r3, r3, #2
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	e7e3      	b.n	8007ad4 <__smakebuf_r+0xc>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	6020      	str	r0, [r4, #0]
 8007b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	9b00      	ldr	r3, [sp, #0]
 8007b18:	6163      	str	r3, [r4, #20]
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	6120      	str	r0, [r4, #16]
 8007b1e:	b15b      	cbz	r3, 8007b38 <__smakebuf_r+0x70>
 8007b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 f81d 	bl	8007b64 <_isatty_r>
 8007b2a:	b128      	cbz	r0, 8007b38 <__smakebuf_r+0x70>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	431d      	orrs	r5, r3
 8007b3c:	81a5      	strh	r5, [r4, #12]
 8007b3e:	e7cf      	b.n	8007ae0 <__smakebuf_r+0x18>

08007b40 <_fstat_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_fstat_r+0x20>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f7f9 fe22 	bl	8001796 <_fstat>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d102      	bne.n	8007b5c <_fstat_r+0x1c>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	b103      	cbz	r3, 8007b5c <_fstat_r+0x1c>
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	200004a0 	.word	0x200004a0

08007b64 <_isatty_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d06      	ldr	r5, [pc, #24]	; (8007b80 <_isatty_r+0x1c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	f7f9 fe21 	bl	80017b6 <_isatty>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_isatty_r+0x1a>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_isatty_r+0x1a>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200004a0 	.word	0x200004a0

08007b84 <abort>:
 8007b84:	b508      	push	{r3, lr}
 8007b86:	2006      	movs	r0, #6
 8007b88:	f000 f82c 	bl	8007be4 <raise>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	f7f9 fdb3 	bl	80016f8 <_exit>

08007b92 <_raise_r>:
 8007b92:	291f      	cmp	r1, #31
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	460d      	mov	r5, r1
 8007b9a:	d904      	bls.n	8007ba6 <_raise_r+0x14>
 8007b9c:	2316      	movs	r3, #22
 8007b9e:	6003      	str	r3, [r0, #0]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
 8007ba6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ba8:	b112      	cbz	r2, 8007bb0 <_raise_r+0x1e>
 8007baa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bae:	b94b      	cbnz	r3, 8007bc4 <_raise_r+0x32>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f831 	bl	8007c18 <_getpid_r>
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4620      	mov	r0, r4
 8007bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc0:	f000 b818 	b.w	8007bf4 <_kill_r>
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d00a      	beq.n	8007bde <_raise_r+0x4c>
 8007bc8:	1c59      	adds	r1, r3, #1
 8007bca:	d103      	bne.n	8007bd4 <_raise_r+0x42>
 8007bcc:	2316      	movs	r3, #22
 8007bce:	6003      	str	r3, [r0, #0]
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	e7e7      	b.n	8007ba4 <_raise_r+0x12>
 8007bd4:	2400      	movs	r4, #0
 8007bd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4798      	blx	r3
 8007bde:	2000      	movs	r0, #0
 8007be0:	e7e0      	b.n	8007ba4 <_raise_r+0x12>
	...

08007be4 <raise>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <raise+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f7ff bfd2 	b.w	8007b92 <_raise_r>
 8007bee:	bf00      	nop
 8007bf0:	2000007c 	.word	0x2000007c

08007bf4 <_kill_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_kill_r+0x20>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	f7f9 fd69 	bl	80016d8 <_kill>
 8007c06:	1c43      	adds	r3, r0, #1
 8007c08:	d102      	bne.n	8007c10 <_kill_r+0x1c>
 8007c0a:	682b      	ldr	r3, [r5, #0]
 8007c0c:	b103      	cbz	r3, 8007c10 <_kill_r+0x1c>
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
 8007c12:	bf00      	nop
 8007c14:	200004a0 	.word	0x200004a0

08007c18 <_getpid_r>:
 8007c18:	f7f9 bd56 	b.w	80016c8 <_getpid>

08007c1c <_init>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr

08007c28 <_fini>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr
