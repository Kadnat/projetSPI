
MotorDirection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007a90  08007a90  00017a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007e54  08007e54  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e54  08007e54  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000002c8  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b8  200004b8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f144  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002477  00000000  00000000  0002f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d70  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a65  00000000  00000000  00032590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217b9  00000000  00000000  00032ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001215c  00000000  00000000  000547ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c510e  00000000  00000000  0006690a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046f8  00000000  00000000  0012ba18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00130110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a74 	.word	0x08007a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08007a74 	.word	0x08007a74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <GETVAL>:

// some extra variables working as temporary storage
int input = 0;int integration_sum = 0;

// To Get Current Count
int GETVAL(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	 return SysTick->VAL;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <GETVAL+0x14>)
 8000c02:	689b      	ldr	r3, [r3, #8]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_IncTick>:
// To account for Multiple Cycles of Timer
// for more than the period of the timer
void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	i++;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_IncTick+0x24>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	6013      	str	r3, [r2, #0]
	cpt_time++;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x28>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x28>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000020c 	.word	0x2000020c
 8000c3c:	2000021c 	.word	0x2000021c

08000c40 <Timer_start_func>:


// Timer Start Function
// when called the timer starts counting
void Timer_start_func(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  SysTick->LOAD  = 64000 - 1;                                  /* set reload register */
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <Timer_start_func+0x28>)
 8000c46:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c4a:	605a      	str	r2, [r3, #4]
	  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c52:	f7ff ffa9 	bl	8000ba8 <__NVIC_SetPriority>
	  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <Timer_start_func+0x28>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <Timer_start_func+0x28>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	601a      	str	r2, [r3, #0]
	                   SysTick_CTRL_TICKINT_Msk   |
	                   SysTick_CTRL_ENABLE_Msk;
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <Timer_end_func>:

// Timer Count End Function
// when called the timer stops counting
void Timer_end_func(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	 SysTick->CTRL  = 0;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <Timer_end_func+0x1c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	 i=0;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <Timer_end_func+0x20>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010
 8000c8c:	2000020c 	.word	0x2000020c

08000c90 <pid_calculation>:

void pid_calculation(int r_speed, GPIO_TypeDef * GPIO_PORT, uint16_t GPIO_PIN)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	80fb      	strh	r3, [r7, #6]
		ref_speed = r_speed;
 8000c9e:	4a79      	ldr	r2, [pc, #484]	; (8000e84 <pid_calculation+0x1f4>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6013      	str	r3, [r2, #0]

	  // reads the current state of PA1
	      	// default function used


	      		if(GPIO_PIN==SPEED_SENSORM1_Pin)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	2b10      	cmp	r3, #16
 8000ca8:	f040 80c0 	bne.w	8000e2c <pid_calculation+0x19c>
	      		{

	      			if(is_firstL)
 8000cac:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <pid_calculation+0x1f8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <pid_calculation+0x32>
	      				{
	      				TIM1->CCR1=first_dutyL;
 8000cb4:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <pid_calculation+0x1fc>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <pid_calculation+0x200>)
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
	      				is_firstL=0;
 8000cbc:	4b72      	ldr	r3, [pc, #456]	; (8000e88 <pid_calculation+0x1f8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
	      				}

	    	      	if ( HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	68b8      	ldr	r0, [r7, #8]
 8000cc8:	f001 f96a 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8198 	bne.w	8001004 <pid_calculation+0x374>
	    	      		while(HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){}
 8000cd4:	bf00      	nop
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68b8      	ldr	r0, [r7, #8]
 8000cdc:	f001 f960 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f7      	beq.n	8000cd6 <pid_calculation+0x46>

	      			if (res==0){
 8000ce6:	4b6b      	ldr	r3, [pc, #428]	; (8000e94 <pid_calculation+0x204>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <pid_calculation+0x6a>
						// res here is a flag to see whether to start counter or to stop it
						Timer_start_func();
 8000cee:	f7ff ffa7 	bl	8000c40 <Timer_start_func>
						res=1;
 8000cf2:	4b68      	ldr	r3, [pc, #416]	; (8000e94 <pid_calculation+0x204>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
						//*******************************************///
						res=0;
					}
					}
				}
	      	}
 8000cf8:	e184      	b.n	8001004 <pid_calculation+0x374>
					} else if (res==1){
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <pid_calculation+0x204>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f040 8180 	bne.w	8001004 <pid_calculation+0x374>
						iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000d04:	f7ff ff7a 	bl	8000bfc <GETVAL>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a63      	ldr	r2, [pc, #396]	; (8000e98 <pid_calculation+0x208>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1312      	asrs	r2, r2, #12
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1a9b      	subs	r3, r3, r2
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <pid_calculation+0x20c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a60      	ldr	r2, [pc, #384]	; (8000ea0 <pid_calculation+0x210>)
 8000d20:	6013      	str	r3, [r2, #0]
						speedL = 3000/iteration_time;
 8000d22:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <pid_calculation+0x210>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ea4 <pid_calculation+0x214>)
 8000d30:	6013      	str	r3, [r2, #0]
						Timer_end_func();
 8000d32:	f7ff ff9b 	bl	8000c6c <Timer_end_func>
						if (speedL < 3000) {
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <pid_calculation+0x214>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	dc03      	bgt.n	8000d4a <pid_calculation+0xba>
							input = speedL;
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <pid_calculation+0x214>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a58      	ldr	r2, [pc, #352]	; (8000ea8 <pid_calculation+0x218>)
 8000d48:	6013      	str	r3, [r2, #0]
						current_errorL = ref_speed - input;
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <pid_calculation+0x1f4>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <pid_calculation+0x218>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5c:	4b53      	ldr	r3, [pc, #332]	; (8000eac <pid_calculation+0x21c>)
 8000d5e:	edc3 7a00 	vstr	s15, [r3]
						integration_sum += (current_errorL * iteration_time);
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <pid_calculation+0x220>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <pid_calculation+0x210>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <pid_calculation+0x21c>)
 8000d7c:	edd3 7a00 	vldr	s15, [r3]
 8000d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8c:	ee17 2a90 	vmov	r2, s15
 8000d90:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <pid_calculation+0x220>)
 8000d92:	601a      	str	r2, [r3, #0]
						duty = KP * current_errorL + KI * integration_sum + KD * 1000 * (current_errorL -previous_errorL)/iteration_time;
 8000d94:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <pid_calculation+0x224>)
 8000d96:	ed93 7a00 	vldr	s14, [r3]
 8000d9a:	4b44      	ldr	r3, [pc, #272]	; (8000eac <pid_calculation+0x21c>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da4:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <pid_calculation+0x228>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <pid_calculation+0x220>)
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dbc:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <pid_calculation+0x22c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <pid_calculation+0x21c>)
 8000dd2:	ed93 6a00 	vldr	s12, [r3]
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <pid_calculation+0x230>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000de0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <pid_calculation+0x210>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	ee07 3a90 	vmov	s15, r3
 8000dec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <pid_calculation+0x234>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]
						printf("speedL=%d\r\n",speedL);
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <pid_calculation+0x214>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <pid_calculation+0x238>)
 8000e06:	f004 fe8d 	bl	8005b24 <iprintf>
						TIM1->CCR1=duty;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <pid_calculation+0x234>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <pid_calculation+0x200>)
 8000e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e16:	ee17 2a90 	vmov	r2, s15
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
						previous_errorL = current_errorL;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <pid_calculation+0x21c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <pid_calculation+0x230>)
 8000e22:	6013      	str	r3, [r2, #0]
						res=0;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <pid_calculation+0x204>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
	      	}
 8000e2a:	e0eb      	b.n	8001004 <pid_calculation+0x374>
				else if(GPIO_PIN==SPEED_SENSORM2_Pin)
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	2b20      	cmp	r3, #32
 8000e30:	f040 80e8 	bne.w	8001004 <pid_calculation+0x374>
					if(is_firstR)
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <pid_calculation+0x23c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <pid_calculation+0x1ba>
						TIM1->CCR2=first_dutyR;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <pid_calculation+0x240>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <pid_calculation+0x200>)
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
						is_firstR=0;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <pid_calculation+0x23c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
	    	      	if ( HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f001 f8a6 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 80d4 	bne.w	8001004 <pid_calculation+0x374>
	    	      		while(HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN) == 0){}
 8000e5c:	bf00      	nop
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f001 f89c 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f7      	beq.n	8000e5e <pid_calculation+0x1ce>
					if (res==0){
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <pid_calculation+0x204>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d12e      	bne.n	8000ed4 <pid_calculation+0x244>
						Timer_start_func();
 8000e76:	f7ff fee3 	bl	8000c40 <Timer_start_func>
						res=1;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <pid_calculation+0x204>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
	      	}
 8000e80:	e0c0      	b.n	8001004 <pid_calculation+0x374>
 8000e82:	bf00      	nop
 8000e84:	20000220 	.word	0x20000220
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	40012c00 	.word	0x40012c00
 8000e94:	20000214 	.word	0x20000214
 8000e98:	10624dd3 	.word	0x10624dd3
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	20000228 	.word	0x20000228
 8000ea4:	20000210 	.word	0x20000210
 8000ea8:	2000023c 	.word	0x2000023c
 8000eac:	20000230 	.word	0x20000230
 8000eb0:	20000240 	.word	0x20000240
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	20000014 	.word	0x20000014
 8000ebc:	20000018 	.word	0x20000018
 8000ec0:	2000022c 	.word	0x2000022c
 8000ec4:	20000224 	.word	0x20000224
 8000ec8:	08007a90 	.word	0x08007a90
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000004 	.word	0x20000004
					} else if (res==1){
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <pid_calculation+0x37c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	f040 8093 	bne.w	8001004 <pid_calculation+0x374>
						iteration_time = (1 - GETVAL()/64000) + i; //DOWN Counter 168000 to 0 Thats why we subtract
 8000ede:	f7ff fe8d 	bl	8000bfc <GETVAL>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a4a      	ldr	r2, [pc, #296]	; (8001010 <pid_calculation+0x380>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1312      	asrs	r2, r2, #12
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <pid_calculation+0x384>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a47      	ldr	r2, [pc, #284]	; (8001018 <pid_calculation+0x388>)
 8000efa:	6013      	str	r3, [r2, #0]
						speedR = 3000/iteration_time;
 8000efc:	4b46      	ldr	r3, [pc, #280]	; (8001018 <pid_calculation+0x388>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f08:	4a44      	ldr	r2, [pc, #272]	; (800101c <pid_calculation+0x38c>)
 8000f0a:	6013      	str	r3, [r2, #0]
						Timer_end_func();
 8000f0c:	f7ff feae 	bl	8000c6c <Timer_end_func>
						if (speedR < 3000) {
 8000f10:	4b42      	ldr	r3, [pc, #264]	; (800101c <pid_calculation+0x38c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	dc03      	bgt.n	8000f24 <pid_calculation+0x294>
							input = speedR;
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <pid_calculation+0x38c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <pid_calculation+0x390>)
 8000f22:	6013      	str	r3, [r2, #0]
						current_errorR = ref_speed - input;
 8000f24:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <pid_calculation+0x394>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <pid_calculation+0x390>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <pid_calculation+0x398>)
 8000f38:	edc3 7a00 	vstr	s15, [r3]
						integration_sum += (current_errorR * iteration_time);
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <pid_calculation+0x39c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <pid_calculation+0x388>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <pid_calculation+0x398>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f66:	ee17 2a90 	vmov	r2, s15
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <pid_calculation+0x39c>)
 8000f6c:	601a      	str	r2, [r3, #0]
						duty = KP * current_errorR + KI * integration_sum + KD * 1000 * (current_errorR -previous_errorR)/iteration_time;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <pid_calculation+0x3a0>)
 8000f70:	ed93 7a00 	vldr	s14, [r3]
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <pid_calculation+0x398>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <pid_calculation+0x3a4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <pid_calculation+0x39c>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <pid_calculation+0x3a8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <pid_calculation+0x398>)
 8000fac:	ed93 6a00 	vldr	s12, [r3]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <pid_calculation+0x3ac>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fba:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <pid_calculation+0x388>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <pid_calculation+0x3b0>)
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
						printf("speedR=%d\r\n",speedR);
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <pid_calculation+0x38c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <pid_calculation+0x3b4>)
 8000fe0:	f004 fda0 	bl	8005b24 <iprintf>
						TIM1->CCR2=duty;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <pid_calculation+0x3b0>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <pid_calculation+0x3b8>)
 8000fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff0:	ee17 2a90 	vmov	r2, s15
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
						previous_errorR = current_errorR;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <pid_calculation+0x398>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <pid_calculation+0x3ac>)
 8000ffc:	6013      	str	r3, [r2, #0]
						res=0;
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <pid_calculation+0x37c>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
	      	}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000214 	.word	0x20000214
 8001010:	10624dd3 	.word	0x10624dd3
 8001014:	2000020c 	.word	0x2000020c
 8001018:	20000228 	.word	0x20000228
 800101c:	20000218 	.word	0x20000218
 8001020:	2000023c 	.word	0x2000023c
 8001024:	20000220 	.word	0x20000220
 8001028:	20000238 	.word	0x20000238
 800102c:	20000240 	.word	0x20000240
 8001030:	20000010 	.word	0x20000010
 8001034:	20000014 	.word	0x20000014
 8001038:	20000018 	.word	0x20000018
 800103c:	20000234 	.word	0x20000234
 8001040:	20000224 	.word	0x20000224
 8001044:	08007a9c 	.word	0x08007a9c
 8001048:	40012c00 	.word	0x40012c00

0800104c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <MX_GPIO_Init+0x134>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a46      	ldr	r2, [pc, #280]	; (8001180 <MX_GPIO_Init+0x134>)
 8001068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <MX_GPIO_Init+0x134>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <MX_GPIO_Init+0x134>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a40      	ldr	r2, [pc, #256]	; (8001180 <MX_GPIO_Init+0x134>)
 8001080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <MX_GPIO_Init+0x134>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <MX_GPIO_Init+0x134>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a3a      	ldr	r2, [pc, #232]	; (8001180 <MX_GPIO_Init+0x134>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_GPIO_Init+0x134>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_GPIO_Init+0x134>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a34      	ldr	r2, [pc, #208]	; (8001180 <MX_GPIO_Init+0x134>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <MX_GPIO_Init+0x134>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_GPIO_Init+0x134>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <MX_GPIO_Init+0x134>)
 80010c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_GPIO_Init+0x134>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21cc      	movs	r1, #204	; 0xcc
 80010de:	4829      	ldr	r0, [pc, #164]	; (8001184 <MX_GPIO_Init+0x138>)
 80010e0:	f000 ff76 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 ff70 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SPEED_SENSORM1_Pin|SPEED_SENSORM2_Pin;
 80010f0:	f242 0330 	movw	r3, #8240	; 0x2030
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <MX_GPIO_Init+0x138>)
 8001108:	f000 fdd8 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SENS1_M1_Pin|SENS2_M1_Pin|SENS1_M2_Pin|SENS2_M2_Pin;
 800110c:	23cc      	movs	r3, #204	; 0xcc
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <MX_GPIO_Init+0x138>)
 8001124:	f000 fdca 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001128:	2320      	movs	r3, #32
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fdbb 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR5_Pin|IR1_Pin|IR2_Pin|IR3_Pin;
 8001146:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <MX_GPIO_Init+0x138>)
 800115c:	f000 fdae 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR4_Pin;
 8001160:	2304      	movs	r3, #4
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR4_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_GPIO_Init+0x13c>)
 8001174:	f000 fda2 	bl	8001cbc <HAL_GPIO_Init>

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	48000800 	.word	0x48000800
 8001188:	48000c00 	.word	0x48000c00

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fc5c 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f80d 	bl	80011b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f7ff ff58 	bl	800104c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119c:	f000 fbba 	bl	8001914 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011a0:	f000 f9dc 	bl	800155c <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a4:	f000 faa4 	bl	80016f0 <MX_TIM3_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	forward(130, 130);
 80011a8:	2182      	movs	r1, #130	; 0x82
 80011aa:	2082      	movs	r0, #130	; 0x82
 80011ac:	f000 f874 	bl	8001298 <forward>
  {
 80011b0:	e7fa      	b.n	80011a8 <main+0x1c>

080011b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b096      	sub	sp, #88	; 0x58
 80011b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011bc:	2228      	movs	r2, #40	; 0x28
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fd04 	bl	8005bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2310      	movs	r3, #16
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011fc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fefa 	bl	8002000 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001212:	f000 f83b 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2102      	movs	r1, #2
 8001232:	4618      	mov	r0, r3
 8001234:	f001 ff22 	bl	800307c <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800123e:	f000 f825 	bl	800128c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4618      	mov	r0, r3
 8001250:	f002 f94a 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xac>
  {
    Error_Handler();
 800125a:	f000 f817 	bl	800128c <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	; 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001276:	2201      	movs	r2, #1
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <__io_putchar+0x20>)
 800127a:	f003 fb55 	bl	8004928 <HAL_UART_Transmit>

  return ch;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002e0 	.word	0x200002e0

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <forward>:
#include "tim.h"



void forward(uint8_t speedL, uint8_t speedR)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	  /* TIM1 counter enable */


	  HAL_TIM_Base_Start(&htim1);
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <forward+0x70>)
 80012aa:	f002 faab 	bl	8003804 <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012ae:	2100      	movs	r1, #0
 80012b0:	4815      	ldr	r0, [pc, #84]	; (8001308 <forward+0x70>)
 80012b2:	f002 fb5d 	bl	8003970 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012b6:	2104      	movs	r1, #4
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <forward+0x70>)
 80012ba:	f002 fb59 	bl	8003970 <HAL_TIM_PWM_Start>

	  HAL_GPIO_WritePin(SENS1_M1_GPIO_Port, SENS1_M1_Pin, 1);
 80012be:	2201      	movs	r2, #1
 80012c0:	2104      	movs	r1, #4
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <forward+0x74>)
 80012c4:	f000 fe84 	bl	8001fd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SENS2_M1_GPIO_Port, SENS2_M1_Pin, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <forward+0x74>)
 80012ce:	f000 fe7f 	bl	8001fd0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(SENS1_M2_GPIO_Port, SENS1_M2_Pin, 1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <forward+0x74>)
 80012d8:	f000 fe7a 	bl	8001fd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SENS2_M2_GPIO_Port, SENS2_M2_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <forward+0x74>)
 80012e2:	f000 fe75 	bl	8001fd0 <HAL_GPIO_WritePin>


		  pid_calculation(speedL, SPEED_SENSORM1_GPIO_Port, SPEED_SENSORM1_Pin);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2210      	movs	r2, #16
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <forward+0x74>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fccf 	bl	8000c90 <pid_calculation>
		  pid_calculation(speedR, SPEED_SENSORM2_GPIO_Port, SPEED_SENSORM2_Pin);
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	2220      	movs	r2, #32
 80012f6:	4905      	ldr	r1, [pc, #20]	; (800130c <forward+0x74>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fcc9 	bl	8000c90 <pid_calculation>

	  //HAL_TIM_Base_Stop(&htim1);
	  //HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	  //HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000248 	.word	0x20000248
 800130c:	48000800 	.word	0x48000800

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_MspInit+0x44>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_MspInit+0x44>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_MspInit+0x44>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x44>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x44>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x44>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001346:	2007      	movs	r0, #7
 8001348:	f000 fc84 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f7ff fc36 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_kill>:

int _kill(int pid, int sig)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c6:	f004 fc55 	bl	8005c74 <__errno>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2216      	movs	r2, #22
 80013ce:	601a      	str	r2, [r3, #0]
  return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe7 	bl	80013bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ee:	e7fe      	b.n	80013ee <_exit+0x12>

080013f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001402:	f3af 8000 	nop.w
 8001406:	4601      	mov	r1, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <_read+0x12>
  }

  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e009      	b.n	8001450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff0f 	bl	8001268 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf1      	blt.n	800143c <_write+0x12>
  }
  return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_close>:

int _close(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	605a      	str	r2, [r3, #4]
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_isatty>:

int _isatty(int file)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f004 fbba 	bl	8005c74 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20003000 	.word	0x20003000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000244 	.word	0x20000244
 8001534:	200004b8 	.word	0x200004b8

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09a      	sub	sp, #104	; 0x68
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	222c      	movs	r2, #44	; 0x2c
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fb19 	bl	8005bce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800159c:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <MX_TIM1_Init+0x18c>)
 800159e:	4a53      	ldr	r2, [pc, #332]	; (80016ec <MX_TIM1_Init+0x190>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80015a2:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015a4:	f240 227f 	movw	r2, #639	; 0x27f
 80015a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015b2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ca:	4847      	ldr	r0, [pc, #284]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015cc:	f002 f8c2 	bl	8003754 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015d6:	f7ff fe59 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e4:	4619      	mov	r1, r3
 80015e6:	4840      	ldr	r0, [pc, #256]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015e8:	f002 fbc2 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80015f2:	f7ff fe4b 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f6:	483c      	ldr	r0, [pc, #240]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80015f8:	f002 f958 	bl	80038ac <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001602:	f7ff fe43 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001616:	4619      	mov	r1, r3
 8001618:	4833      	ldr	r0, [pc, #204]	; (80016e8 <MX_TIM1_Init+0x18c>)
 800161a:	f003 f851 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001624:	f7ff fe32 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <MX_TIM1_Init+0x18c>)
 800164e:	f002 fa7b 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001658:	f7ff fe18 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_TIM1_Init+0x18c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_TIM1_Init+0x18c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001670:	2204      	movs	r2, #4
 8001672:	4619      	mov	r1, r3
 8001674:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_TIM1_Init+0x18c>)
 8001676:	f002 fa67 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001680:	f7ff fe04 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM1_Init+0x18c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM1_Init+0x18c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001692:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80016ca:	f003 f867 	bl	800479c <HAL_TIMEx_ConfigBreakDeadTime>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80016d4:	f7ff fdda 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM1_Init+0x18c>)
 80016da:	f000 f8bd 	bl	8001858 <HAL_TIM_MspPostInit>

}
 80016de:	bf00      	nop
 80016e0:	3768      	adds	r7, #104	; 0x68
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000248 	.word	0x20000248
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001724:	4a31      	ldr	r2, [pc, #196]	; (80017ec <MX_TIM3_Init+0xfc>)
 8001726:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <MX_TIM3_Init+0xf8>)
 800172a:	f240 227f 	movw	r2, #639	; 0x27f
 800172e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001738:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800173c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800174a:	4827      	ldr	r0, [pc, #156]	; (80017e8 <MX_TIM3_Init+0xf8>)
 800174c:	f002 f802 	bl	8003754 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001756:	f7ff fd99 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001764:	4619      	mov	r1, r3
 8001766:	4820      	ldr	r0, [pc, #128]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001768:	f002 fb02 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001772:	f7ff fd8b 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001778:	f002 f898 	bl	80038ac <HAL_TIM_PWM_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001782:	f7ff fd83 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_TIM3_Init+0xf8>)
 8001796:	f002 ff93 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80017a0:	f7ff fd74 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a4:	2360      	movs	r3, #96	; 0x60
 80017a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	220c      	movs	r2, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <MX_TIM3_Init+0xf8>)
 80017bc:	f002 f9c4 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80017c6:	f7ff fd61 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_TIM3_Init+0xf8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <MX_TIM3_Init+0xf8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d8:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM3_Init+0xf8>)
 80017dc:	f000 f83c 	bl	8001858 <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3738      	adds	r7, #56	; 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000294 	.word	0x20000294
 80017ec:	40000400 	.word	0x40000400

080017f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_Base_MspInit+0x5c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10c      	bne.n	800181c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 8001808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800181a:	e010      	b.n	800183e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <HAL_TIM_Base_MspInit+0x64>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_TIM_Base_MspInit+0x60>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40000400 	.word	0x40000400

08001858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_TIM_MspPostInit+0xa8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11c      	bne.n	80018b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 8001880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 8001892:	2303      	movs	r3, #3
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018a2:	2302      	movs	r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4816      	ldr	r0, [pc, #88]	; (8001908 <HAL_TIM_MspPostInit+0xb0>)
 80018ae:	f000 fa05 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b2:	e020      	b.n	80018f6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11b      	bne.n	80018f6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_TIM_MspPostInit+0xac>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_M3_Pin;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e6:	2302      	movs	r3, #2
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M3_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <HAL_TIM_MspPostInit+0xb8>)
 80018f2:	f000 f9e3 	bl	8001cbc <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40021000 	.word	0x40021000
 8001908:	48000800 	.word	0x48000800
 800190c:	40000400 	.word	0x40000400
 8001910:	48000400 	.word	0x48000400

08001914 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_USART2_UART_Init+0x58>)
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <MX_USART2_UART_Init+0x5c>)
 800191c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_USART2_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_USART2_UART_Init+0x58>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_USART2_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART2_UART_Init+0x58>)
 8001958:	f002 ff98 	bl	800488c <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001962:	f7ff fc93 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200002e0 	.word	0x200002e0
 8001970:	40004400 	.word	0x40004400

08001974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d128      	bne.n	80019e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x80>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_UART_MspInit+0x80>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	6153      	str	r3, [r2, #20]
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c6:	230c      	movs	r3, #12
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f000 f96a 	bl	8001cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40021000 	.word	0x40021000

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fc:	f7ff fd9c 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f004 f92b 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7ff fbaf 	bl	800118c <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a30:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a3c:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 8001a40:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a44:	200004b8 	.word	0x200004b8

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x28>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f8f9 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fc52 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f903 	bl	8001ca2 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f8d9 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000001c 	.word	0x2000001c
 8001ad0:	20000024 	.word	0x20000024
 8001ad4:	20000020 	.word	0x20000020

08001ad8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;  
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000368 	.word	0x20000368

08001af0 <__NVIC_SetPriorityGrouping>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_SetPriority>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff47 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff5c 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffb0 	bl	8001c10 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e14e      	b.n	8001f6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8140 	beq.w	8001f64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x40>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0203 	and.w	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 809a 	beq.w	8001f64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b52      	ldr	r3, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e48:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1e0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <HAL_GPIO_Init+0x2d4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a45      	ldr	r2, [pc, #276]	; (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1d8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a44      	ldr	r2, [pc, #272]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1d4>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e90:	2305      	movs	r3, #5
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eae:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f0a:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f aea9 	bne.w	8001ccc <HAL_GPIO_Init+0x10>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002006:	af00      	add	r7, sp, #0
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f001 b823 	b.w	800306c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 817d 	beq.w	8002336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800203c:	4bbc      	ldr	r3, [pc, #752]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	d00c      	beq.n	8002062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002048:	4bb9      	ldr	r3, [pc, #740]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b08      	cmp	r3, #8
 8002052:	d15c      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002054:	4bb6      	ldr	r3, [pc, #728]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d155      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x94>
 800208e:	4ba8      	ldr	r3, [pc, #672]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 8002094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020bc:	4b9c      	ldr	r3, [pc, #624]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f042 0220 	orr.w	r2, r2, #32
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 811f 	beq.w	8002334 <HAL_RCC_OscConfig+0x334>
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8116 	bne.w	8002334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bfaf 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x12e>
 8002120:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x158>
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a78      	ldr	r2, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e021      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x184>
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a70      	ldr	r2, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6d      	ldr	r2, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a66      	ldr	r2, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f023 020f 	bic.w	r2, r3, #15
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	495f      	ldr	r1, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d059      	beq.n	800227a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fc87 	bl	8001ad8 <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fc82 	bl	8001ad8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bf43 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x218>
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0x244>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800224c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ab      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1d0>
 8002278:	e05d      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fc2d 	bl	8001ad8 <HAL_GetTick>
 800227e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff fc28 	bl	8001ad8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d902      	bls.n	800229a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	f000 bee9 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x2cc>
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f8>
 80022cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800230c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ab      	bne.n	8002284 <HAL_RCC_OscConfig+0x284>
 800232c:	e003      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 817d 	beq.w	8002646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800234c:	4ba6      	ldr	r3, [pc, #664]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002358:	4ba3      	ldr	r3, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d172      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002364:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d16c      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3a0>
 800239a:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d002      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 be2e 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	21f8      	movs	r1, #248	; 0xf8
 8002426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800242e:	fa91 f1a1 	rbit	r1, r1
 8002432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800243a:	fab1 f181 	clz	r1, r1
 800243e:	b2c9      	uxtb	r1, r1
 8002440:	408b      	lsls	r3, r1
 8002442:	4969      	ldr	r1, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	e0fd      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8088 	beq.w	800256c <HAL_RCC_OscConfig+0x56c>
 800245c:	2301      	movs	r3, #1
 800245e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800246e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2301      	movs	r3, #1
 8002486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fb26 	bl	8001ad8 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff fb21 	bl	8001ad8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	f000 bde2 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d8>
 80024d2:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e013      	b.n	8002500 <HAL_RCC_OscConfig+0x500>
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2202      	movs	r2, #2
 8002502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f002 021f 	and.w	r2, r2, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0af      	beq.n	8002492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	21f8      	movs	r1, #248	; 0xf8
 8002548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002550:	fa91 f1a1 	rbit	r1, r1
 8002554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800255c:	fab1 f181 	clz	r1, r1
 8002560:	b2c9      	uxtb	r1, r1
 8002562:	408b      	lsls	r3, r1
 8002564:	4920      	ldr	r1, [pc, #128]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
 800256a:	e06c      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
 800256c:	2301      	movs	r3, #1
 800256e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800257e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800258c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	461a      	mov	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff fa9e 	bl	8001ad8 <HAL_GetTick>
 800259c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff fa99 	bl	8001ad8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	f000 bd5a 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d104      	bne.n	80025ec <HAL_RCC_OscConfig+0x5ec>
 80025e2:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e015      	b.n	8002614 <HAL_RCC_OscConfig+0x614>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002610:	4bc8      	ldr	r3, [pc, #800]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2202      	movs	r2, #2
 8002616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800261a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ad      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8110 	beq.w	800287c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d079      	beq.n	8002760 <HAL_RCC_OscConfig+0x760>
 800266c:	2301      	movs	r3, #1
 800266e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800267e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4bab      	ldr	r3, [pc, #684]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fa1f 	bl	8001ad8 <HAL_GetTick>
 800269a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa1a 	bl	8001ad8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d902      	bls.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f000 bcdb 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800271c:	2102      	movs	r1, #2
 800271e:	6019      	str	r1, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f1a3 	rbit	r1, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002736:	6019      	str	r1, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0a0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x6a0>
 800275e:	e08d      	b.n	800287c <HAL_RCC_OscConfig+0x87c>
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002782:	601a      	str	r2, [r3, #0]
  return result;
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800278c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7ff f999 	bl	8001ad8 <HAL_GetTick>
 80027a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7ff f994 	bl	8001ad8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	f000 bc55 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800282c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800283a:	2102      	movs	r1, #2
 800283c:	6019      	str	r1, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f1a3 	rbit	r1, r3
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002854:	6019      	str	r1, [r3, #0]
  return result;
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d197      	bne.n	80027ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 81a1 	beq.w	8002bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	61d3      	str	r3, [r2, #28]
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff f8f5 	bl	8001ad8 <HAL_GetTick>
 80028ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	e009      	b.n	8002908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7ff f8f0 	bl	8001ad8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e3b1      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x940>
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a02      	ldr	r2, [pc, #8]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e03c      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	10908120 	.word	0x10908120
 800293c:	40007000 	.word	0x40007000
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x96a>
 8002950:	4bc1      	ldr	r3, [pc, #772]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4ac0      	ldr	r2, [pc, #768]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4bbe      	ldr	r3, [pc, #760]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4abd      	ldr	r2, [pc, #756]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e020      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x994>
 800297a:	4bb7      	ldr	r3, [pc, #732]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4ab6      	ldr	r2, [pc, #728]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4bb4      	ldr	r3, [pc, #720]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4ab3      	ldr	r2, [pc, #716]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002994:	4bb0      	ldr	r3, [pc, #704]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4aaf      	ldr	r2, [pc, #700]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4bad      	ldr	r3, [pc, #692]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4aac      	ldr	r2, [pc, #688]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8081 	beq.w	8002ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff f88b 	bl	8001ad8 <HAL_GetTick>
 80029c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7ff f886 	bl	8001ad8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e345      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0xa4c>
 8002a46:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0xa74>
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a54:	2202      	movs	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6011      	str	r1, [r2, #0]
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fa92 f1a2 	rbit	r1, r2
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a96:	6011      	str	r1, [r2, #0]
  return result;
 8002a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d084      	beq.n	80029c8 <HAL_RCC_OscConfig+0x9c8>
 8002abe:	e07f      	b.n	8002bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7ff f80a 	bl	8001ad8 <HAL_GetTick>
 8002ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff f805 	bl	8001ad8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e2c4      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f2a3 	rbit	r2, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b28:	601a      	str	r2, [r3, #0]
  return result;
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0xb4e>
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0xb76>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d184      	bne.n	8002aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8242 	beq.w	800306a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	f000 8213 	beq.w	800301a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	f040 8162 	bne.w	8002eca <HAL_RCC_OscConfig+0xeca>
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ff44 	bl	8001ad8 <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0xc70>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe ff3c 	bl	8001ad8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1fd      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c94:	601a      	str	r2, [r3, #0]
  return result;
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0xcba>
 8002cb4:	4bb0      	ldr	r3, [pc, #704]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e027      	b.n	8002d0a <HAL_RCC_OscConfig+0xd0a>
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b9c      	ldr	r3, [pc, #624]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d16:	6011      	str	r1, [r2, #0]
 8002d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fa92 f1a2 	rbit	r1, r2
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d2e:	6011      	str	r1, [r2, #0]
  return result;
 8002d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d182      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	497f      	ldr	r1, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002da2:	601a      	str	r2, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fe88 	bl	8001ad8 <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	e009      	b.n	8002de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe fe83 	bl	8001ad8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e144      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e06:	601a      	str	r2, [r3, #0]
  return result;
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe2c>
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_OscConfig+0xe7c>
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fa92 f1a2 	rbit	r1, r2
 8002e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ea0:	6011      	str	r1, [r2, #0]
  return result;
 8002ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d082      	beq.n	8002dce <HAL_RCC_OscConfig+0xdce>
 8002ec8:	e0cf      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eee:	601a      	str	r2, [r3, #0]
  return result;
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fde2 	bl	8001ad8 <HAL_GetTick>
 8002f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	e009      	b.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe fddd 	bl	8001ad8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e09e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d104      	bne.n	8002f7c <HAL_RCC_OscConfig+0xf7c>
 8002f72:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0xfcc>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d180      	bne.n	8002f1a <HAL_RCC_OscConfig+0xf1a>
 8003018:	e027      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800303a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	429a      	cmp	r2, r3
 800304c:	d10b      	bne.n	8003066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800304e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09e      	sub	sp, #120	; 0x78
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e162      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	498b      	ldr	r1, [pc, #556]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e14a      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	497f      	ldr	r1, [pc, #508]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80dc 	beq.w	80032a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d13c      	bne.n	8003172 <HAL_RCC_ClockConfig+0xf6>
 80030f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_ClockConfig+0xa6>
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e00f      	b.n	8003142 <HAL_RCC_ClockConfig+0xc6>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
 8003130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003146:	65ba      	str	r2, [r7, #88]	; 0x58
 8003148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d17b      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0f3      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d13c      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x178>
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x128>
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_ClockConfig+0x148>
 80031a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13a      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b2      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80031f4:	2302      	movs	r3, #2
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_ClockConfig+0x1a0>
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e00d      	b.n	8003238 <HAL_RCC_ClockConfig+0x1bc>
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2202      	movs	r2, #2
 800323a:	61ba      	str	r2, [r7, #24]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	617a      	str	r2, [r7, #20]
  return result;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e079      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe fc2e 	bl	8001ad8 <HAL_GetTick>
 800327c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe fc2a 	bl	8001ad8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e061      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d214      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4906      	ldr	r1, [pc, #24]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	491a      	ldr	r1, [pc, #104]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331e:	f000 f829 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	22f0      	movs	r2, #240	; 0xf0
 800332e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	40d3      	lsrs	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x2ec>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	fa21 f303 	lsr.w	r3, r1, r3
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x2f0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCC_ClockConfig+0x2f4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fb90 	bl	8001a78 <HAL_InitTick>
  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3778      	adds	r7, #120	; 0x78
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	08007aa8 	.word	0x08007aa8
 800336c:	2000001c 	.word	0x2000001c
 8003370:	20000020 	.word	0x20000020

08003374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x30>
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x36>
 80033a2:	e03c      	b.n	800341e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a6:	623b      	str	r3, [r7, #32]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	607a      	str	r2, [r7, #4]
  return result;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	40d3      	lsrs	r3, r2
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	220f      	movs	r2, #15
 80033d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	60fa      	str	r2, [r7, #12]
  return result;
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e004      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	623b      	str	r3, [r7, #32]
      break;
 800341c:	e002      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003420:	623b      	str	r3, [r7, #32]
      break;
 8003422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003424:	6a3b      	ldr	r3, [r7, #32]
}
 8003426:	4618      	mov	r0, r3
 8003428:	372c      	adds	r7, #44	; 0x2c
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	08007ac0 	.word	0x08007ac0
 8003440:	08007ad0 	.word	0x08007ad0
 8003444:	003d0900 	.word	0x003d0900

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_GetHCLKFreq+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000001c 	.word	0x2000001c

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003466:	f7ff ffef 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 800346a:	4601      	mov	r1, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	603a      	str	r2, [r7, #0]
  return result;
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	08007ab8 	.word	0x08007ab8

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034aa:	f7ff ffcd 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	603a      	str	r2, [r7, #0]
  return result;
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	40d3      	lsrs	r3, r2
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08007ab8 	.word	0x08007ab8

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b092      	sub	sp, #72	; 0x48
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80cd 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350c:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a81      	ldr	r2, [pc, #516]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe fac3 	bl	8001ad8 <HAL_GetTick>
 8003552:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fabf 	bl	8001ad8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0ea      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b78      	ldr	r3, [pc, #480]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003574:	4b74      	ldr	r3, [pc, #464]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d07d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	429a      	cmp	r2, r3
 8003590:	d076      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003592:	4b6d      	ldr	r3, [pc, #436]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	2301      	movs	r3, #1
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	2300      	movs	r3, #0
 80035e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d045      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fa70 	bl	8001ad8 <HAL_GetTick>
 80035f8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe fa6c 	bl	8001ad8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e095      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003612:	2302      	movs	r3, #2
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	61fb      	str	r3, [r7, #28]
  return result;
 800362a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d102      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	e007      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003646:	2302      	movs	r3, #2
 8003648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2202      	movs	r2, #2
 8003658:	613a      	str	r2, [r7, #16]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	60fa      	str	r2, [r7, #12]
  return result;
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f002 021f 	and.w	r2, r2, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0bd      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	492e      	ldr	r1, [pc, #184]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	4313      	orrs	r3, r2
 8003690:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f023 0210 	bic.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	491a      	ldr	r1, [pc, #104]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	4913      	ldr	r1, [pc, #76]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	490b      	ldr	r1, [pc, #44]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3748      	adds	r7, #72	; 0x48
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	10908100 	.word	0x10908100

08003754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e049      	b.n	80037fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe f838 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 fbb6 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e038      	b.n	800388e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <HAL_TIM_Base_Start+0x98>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_TIM_Base_Start+0x48>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003836:	d009      	beq.n	800384c <HAL_TIM_Base_Start+0x48>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_TIM_Base_Start+0x9c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIM_Base_Start+0x48>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_TIM_Base_Start+0xa0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d115      	bne.n	8003878 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_TIM_Base_Start+0xa4>)
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d015      	beq.n	800388a <HAL_TIM_Base_Start+0x86>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d011      	beq.n	800388a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	e008      	b.n	800388a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e000      	b.n	800388c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	00010007 	.word	0x00010007

080038ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e049      	b.n	8003952 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f841 	bl	800395a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f000 fb0a 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start+0x24>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e03c      	b.n	8003a0e <HAL_TIM_PWM_Start+0x9e>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start+0x3e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e02f      	b.n	8003a0e <HAL_TIM_PWM_Start+0x9e>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start+0x58>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e022      	b.n	8003a0e <HAL_TIM_PWM_Start+0x9e>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d109      	bne.n	80039e2 <HAL_TIM_PWM_Start+0x72>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e015      	b.n	8003a0e <HAL_TIM_PWM_Start+0x9e>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d109      	bne.n	80039fc <HAL_TIM_PWM_Start+0x8c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e008      	b.n	8003a0e <HAL_TIM_PWM_Start+0x9e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e088      	b.n	8003b28 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_PWM_Start+0xb6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a24:	e023      	b.n	8003a6e <HAL_TIM_PWM_Start+0xfe>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_PWM_Start+0xc6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	e01b      	b.n	8003a6e <HAL_TIM_PWM_Start+0xfe>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_PWM_Start+0xd6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	e013      	b.n	8003a6e <HAL_TIM_PWM_Start+0xfe>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_PWM_Start+0xe6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a54:	e00b      	b.n	8003a6e <HAL_TIM_PWM_Start+0xfe>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_PWM_Start+0xf6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a64:	e003      	b.n	8003a6e <HAL_TIM_PWM_Start+0xfe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fdfc 	bl	8004674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_TIM_PWM_Start+0x1c0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00e      	beq.n	8003aa4 <HAL_TIM_PWM_Start+0x134>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_TIM_PWM_Start+0x1c4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIM_PWM_Start+0x134>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <HAL_TIM_PWM_Start+0x1c8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIM_PWM_Start+0x134>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_TIM_PWM_Start+0x1cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIM_PWM_Start+0x138>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_TIM_PWM_Start+0x13a>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_PWM_Start+0x1c0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x176>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x176>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_TIM_PWM_Start+0x1d0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x176>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <HAL_TIM_PWM_Start+0x1c4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d115      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_TIM_PWM_Start+0x1d4>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d015      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x1b4>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d011      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b10:	e008      	b.n	8003b24 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e000      	b.n	8003b26 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	40000400 	.word	0x40000400
 8003b44:	00010007 	.word	0x00010007

08003b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0ff      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b14      	cmp	r3, #20
 8003b72:	f200 80f0 	bhi.w	8003d56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bd1 	.word	0x08003bd1
 8003b80:	08003d57 	.word	0x08003d57
 8003b84:	08003d57 	.word	0x08003d57
 8003b88:	08003d57 	.word	0x08003d57
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003d57 	.word	0x08003d57
 8003b94:	08003d57 	.word	0x08003d57
 8003b98:	08003d57 	.word	0x08003d57
 8003b9c:	08003c53 	.word	0x08003c53
 8003ba0:	08003d57 	.word	0x08003d57
 8003ba4:	08003d57 	.word	0x08003d57
 8003ba8:	08003d57 	.word	0x08003d57
 8003bac:	08003c93 	.word	0x08003c93
 8003bb0:	08003d57 	.word	0x08003d57
 8003bb4:	08003d57 	.word	0x08003d57
 8003bb8:	08003d57 	.word	0x08003d57
 8003bbc:	08003cd5 	.word	0x08003cd5
 8003bc0:	08003d57 	.word	0x08003d57
 8003bc4:	08003d57 	.word	0x08003d57
 8003bc8:	08003d57 	.word	0x08003d57
 8003bcc:	08003d15 	.word	0x08003d15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa0c 	bl	8003ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	619a      	str	r2, [r3, #24]
      break;
 8003c0e:	e0a5      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fa72 	bl	8004100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
      break;
 8003c50:	e084      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fad1 	bl	8004200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0208 	orr.w	r2, r2, #8
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0204 	bic.w	r2, r2, #4
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
      break;
 8003c90:	e064      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fb2f 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	61da      	str	r2, [r3, #28]
      break;
 8003cd2:	e043      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fb72 	bl	80043c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d12:	e023      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fbb0 	bl	8004480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d54:	e002      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0b6      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x18a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd8>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x176>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xaa>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11e>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfe>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13e>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	f000 fc03 	bl	8004634 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	f000 fbec 	bl	8004634 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fb60 	bl	8004540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	; 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fbb9 	bl	80045fe <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fb7f 	bl	800459e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	; 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fba9 	bl	80045fe <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fb40 	bl	8004540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb99 	bl	80045fe <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fb90 	bl	80045fe <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a32      	ldr	r2, [pc, #200]	; (8003fe0 <TIM_Base_SetConfig+0xdc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0x28>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0x28>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <TIM_Base_SetConfig+0xe0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <TIM_Base_SetConfig+0xdc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <TIM_Base_SetConfig+0x6a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d00f      	beq.n	8003f6e <TIM_Base_SetConfig+0x6a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <TIM_Base_SetConfig+0xe0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_Base_SetConfig+0x6a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <TIM_Base_SetConfig+0xe4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_Base_SetConfig+0x6a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a22      	ldr	r2, [pc, #136]	; (8003fec <TIM_Base_SetConfig+0xe8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0x6a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <TIM_Base_SetConfig+0xec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d108      	bne.n	8003f80 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <TIM_Base_SetConfig+0xdc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0xc0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <TIM_Base_SetConfig+0xe4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0xc0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <TIM_Base_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0xc0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0c      	ldr	r2, [pc, #48]	; (8003ff0 <TIM_Base_SetConfig+0xec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800

08003ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0302 	bic.w	r3, r3, #2
 8004040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <TIM_OC1_SetConfig+0xfc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_OC1_SetConfig+0x78>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <TIM_OC1_SetConfig+0x100>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_OC1_SetConfig+0x78>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <TIM_OC1_SetConfig+0x104>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x78>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_OC1_SetConfig+0x108>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <TIM_OC1_SetConfig+0xfc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_OC1_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <TIM_OC1_SetConfig+0x100>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_OC1_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <TIM_OC1_SetConfig+0x104>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC1_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <TIM_OC1_SetConfig+0x108>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800

08004100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0210 	bic.w	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0320 	bic.w	r3, r3, #32
 800414e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <TIM_OC2_SetConfig+0xf0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <TIM_OC2_SetConfig+0xf0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <TIM_OC2_SetConfig+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <TIM_OC2_SetConfig+0xf4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <TIM_OC2_SetConfig+0xa0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <TIM_OC2_SetConfig+0xf8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0xa0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <TIM_OC2_SetConfig+0xfc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d113      	bne.n	80041c8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a23      	ldr	r2, [pc, #140]	; (80042ec <TIM_OC3_SetConfig+0xec>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10d      	bne.n	800427e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <TIM_OC3_SetConfig+0xec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_OC3_SetConfig+0x9e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <TIM_OC3_SetConfig+0xf0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_OC3_SetConfig+0x9e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <TIM_OC3_SetConfig+0xf4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_OC3_SetConfig+0x9e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <TIM_OC3_SetConfig+0xf8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d113      	bne.n	80042c6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	621a      	str	r2, [r3, #32]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800434a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <TIM_OC4_SetConfig+0xb8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC4_SetConfig+0x7c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <TIM_OC4_SetConfig+0xbc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC4_SetConfig+0x7c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <TIM_OC4_SetConfig+0xc0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC4_SetConfig+0x7c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <TIM_OC4_SetConfig+0xc4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d109      	bne.n	800438c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800

080043c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <TIM_OC5_SetConfig+0xac>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_OC5_SetConfig+0x72>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <TIM_OC5_SetConfig+0xb0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_OC5_SetConfig+0x72>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a13      	ldr	r2, [pc, #76]	; (8004478 <TIM_OC5_SetConfig+0xb4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC5_SetConfig+0x72>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a12      	ldr	r2, [pc, #72]	; (800447c <TIM_OC5_SetConfig+0xb8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d109      	bne.n	800444a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	051b      	lsls	r3, r3, #20
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <TIM_OC6_SetConfig+0xb0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00b      	beq.n	80044f4 <TIM_OC6_SetConfig+0x74>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <TIM_OC6_SetConfig+0xb4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_OC6_SetConfig+0x74>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a14      	ldr	r2, [pc, #80]	; (8004538 <TIM_OC6_SetConfig+0xb8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_OC6_SetConfig+0x74>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <TIM_OC6_SetConfig+0xbc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d109      	bne.n	8004508 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400
 800453c:	40014800 	.word	0x40014800

08004540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f023 030a 	bic.w	r3, r3, #10
 800457c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0210 	bic.w	r2, r3, #16
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	f043 0307 	orr.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	021a      	lsls	r2, r3, #8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	431a      	orrs	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2201      	movs	r2, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a1a      	ldr	r2, [r3, #32]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	431a      	orrs	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e054      	b.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004708:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a17      	ldr	r2, [pc, #92]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d009      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a11      	ldr	r2, [pc, #68]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10c      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40014000 	.word	0x40014000

0800479c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e060      	b.n	800487a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d115      	bne.n	8004868 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	051b      	lsls	r3, r3, #20
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00

0800488c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e040      	b.n	8004920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd f860 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8b6 	bl	8004a3c <UART_SetConfig>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e022      	b.n	8004920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9e0 	bl	8004ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa67 	bl	8004dec <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493c:	2b20      	cmp	r3, #32
 800493e:	d178      	bne.n	8004a32 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Transmit+0x24>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e071      	b.n	8004a34 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2221      	movs	r2, #33	; 0x21
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495e:	f7fd f8bb 	bl	8001ad8 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497c:	d108      	bne.n	8004990 <HAL_UART_Transmit+0x68>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e003      	b.n	8004998 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004998:	e030      	b.n	80049fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fac9 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e03c      	b.n	8004a34 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	b292      	uxth	r2, r2
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3302      	adds	r3, #2
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e008      	b.n	80049ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b292      	uxth	r2, r2
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3301      	adds	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1c8      	bne.n	800499a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fa92 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e005      	b.n	8004a34 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b8a      	ldr	r3, [pc, #552]	; (8004c90 <UART_SetConfig+0x254>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a78      	ldr	r2, [pc, #480]	; (8004c94 <UART_SetConfig+0x258>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d120      	bne.n	8004afa <UART_SetConfig+0xbe>
 8004ab8:	4b77      	ldr	r3, [pc, #476]	; (8004c98 <UART_SetConfig+0x25c>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d817      	bhi.n	8004af4 <UART_SetConfig+0xb8>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x90>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004aef 	.word	0x08004aef
 8004ad8:	08004ae3 	.word	0x08004ae3
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e01d      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e01a      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e017      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004aee:	2308      	movs	r3, #8
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e014      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e011      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a67      	ldr	r2, [pc, #412]	; (8004c9c <UART_SetConfig+0x260>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d102      	bne.n	8004b0a <UART_SetConfig+0xce>
 8004b04:	2300      	movs	r3, #0
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e009      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <UART_SetConfig+0x264>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d102      	bne.n	8004b1a <UART_SetConfig+0xde>
 8004b14:	2300      	movs	r3, #0
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e001      	b.n	8004b1e <UART_SetConfig+0xe2>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b26:	d15a      	bne.n	8004bde <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b28:	7ffb      	ldrb	r3, [r7, #31]
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d827      	bhi.n	8004b7e <UART_SetConfig+0x142>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0xf8>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fc82 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e013      	b.n	8004b88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fe fca0 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61b8      	str	r0, [r7, #24]
        break;
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b4e      	ldr	r3, [pc, #312]	; (8004ca4 <UART_SetConfig+0x268>)
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e00c      	b.n	8004b88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fe fc01 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004b72:	61b8      	str	r0, [r7, #24]
        break;
 8004b74:	e008      	b.n	8004b88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	61bb      	str	r3, [r7, #24]
        break;
 8004b7c:	e004      	b.n	8004b88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77bb      	strb	r3, [r7, #30]
        break;
 8004b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d074      	beq.n	8004c78 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d916      	bls.n	8004bd8 <UART_SetConfig+0x19c>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d212      	bcs.n	8004bd8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f023 030f 	bic.w	r3, r3, #15
 8004bba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	89fa      	ldrh	r2, [r7, #14]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e04f      	b.n	8004c78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77bb      	strb	r3, [r7, #30]
 8004bdc:	e04c      	b.n	8004c78 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d828      	bhi.n	8004c36 <UART_SetConfig+0x1fa>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0x1b0>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7fe fc26 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8004c14:	61b8      	str	r0, [r7, #24]
        break;
 8004c16:	e013      	b.n	8004c40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fe fc44 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e00f      	b.n	8004c40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <UART_SetConfig+0x268>)
 8004c22:	61bb      	str	r3, [r7, #24]
        break;
 8004c24:	e00c      	b.n	8004c40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7fe fba5 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004c2a:	61b8      	str	r0, [r7, #24]
        break;
 8004c2c:	e008      	b.n	8004c40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e004      	b.n	8004c40 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085a      	lsrs	r2, r3, #1
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d909      	bls.n	8004c74 <UART_SetConfig+0x238>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d205      	bcs.n	8004c74 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	e001      	b.n	8004c78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	efff69f3 	.word	0xefff69f3
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40004400 	.word	0x40004400
 8004ca0:	40004800 	.word	0x40004800
 8004ca4:	007a1200 	.word	0x007a1200

08004ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da6:	d10a      	bne.n	8004dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b098      	sub	sp, #96	; 0x60
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dfc:	f7fc fe6c 	bl	8001ad8 <HAL_GetTick>
 8004e00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d12e      	bne.n	8004e6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f88c 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d021      	beq.n	8004e6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e062      	b.n	8004f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d149      	bne.n	8004f10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f856 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03c      	beq.n	8004f10 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e011      	b.n	8004f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3758      	adds	r7, #88	; 0x58
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	e049      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d045      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fc fdbf 	bl	8001ad8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e048      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d031      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d110      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2208      	movs	r2, #8
 8004f92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f838 	bl	800500a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e029      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	d111      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f81e 	bl	800500a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e00f      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d0a6      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800500a:	b480      	push	{r7}
 800500c:	b095      	sub	sp, #84	; 0x54
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	643b      	str	r3, [r7, #64]	; 0x40
 8005032:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e6      	bne.n	8005012 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	61fb      	str	r3, [r7, #28]
   return(result);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	2b01      	cmp	r3, #1
 800507e:	d118      	bne.n	80050b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	60bb      	str	r3, [r7, #8]
   return(result);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0310 	bic.w	r3, r3, #16
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e6      	bne.n	8005080 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050c6:	bf00      	nop
 80050c8:	3754      	adds	r7, #84	; 0x54
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <__cvt>:
 80050d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d6:	ec55 4b10 	vmov	r4, r5, d0
 80050da:	2d00      	cmp	r5, #0
 80050dc:	460e      	mov	r6, r1
 80050de:	4619      	mov	r1, r3
 80050e0:	462b      	mov	r3, r5
 80050e2:	bfbb      	ittet	lt
 80050e4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050e8:	461d      	movlt	r5, r3
 80050ea:	2300      	movge	r3, #0
 80050ec:	232d      	movlt	r3, #45	; 0x2d
 80050ee:	700b      	strb	r3, [r1, #0]
 80050f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050f6:	4691      	mov	r9, r2
 80050f8:	f023 0820 	bic.w	r8, r3, #32
 80050fc:	bfbc      	itt	lt
 80050fe:	4622      	movlt	r2, r4
 8005100:	4614      	movlt	r4, r2
 8005102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005106:	d005      	beq.n	8005114 <__cvt+0x42>
 8005108:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800510c:	d100      	bne.n	8005110 <__cvt+0x3e>
 800510e:	3601      	adds	r6, #1
 8005110:	2102      	movs	r1, #2
 8005112:	e000      	b.n	8005116 <__cvt+0x44>
 8005114:	2103      	movs	r1, #3
 8005116:	ab03      	add	r3, sp, #12
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	ab02      	add	r3, sp, #8
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	ec45 4b10 	vmov	d0, r4, r5
 8005122:	4653      	mov	r3, sl
 8005124:	4632      	mov	r2, r6
 8005126:	f000 fe5b 	bl	8005de0 <_dtoa_r>
 800512a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800512e:	4607      	mov	r7, r0
 8005130:	d102      	bne.n	8005138 <__cvt+0x66>
 8005132:	f019 0f01 	tst.w	r9, #1
 8005136:	d022      	beq.n	800517e <__cvt+0xac>
 8005138:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800513c:	eb07 0906 	add.w	r9, r7, r6
 8005140:	d110      	bne.n	8005164 <__cvt+0x92>
 8005142:	783b      	ldrb	r3, [r7, #0]
 8005144:	2b30      	cmp	r3, #48	; 0x30
 8005146:	d10a      	bne.n	800515e <__cvt+0x8c>
 8005148:	2200      	movs	r2, #0
 800514a:	2300      	movs	r3, #0
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005154:	b918      	cbnz	r0, 800515e <__cvt+0x8c>
 8005156:	f1c6 0601 	rsb	r6, r6, #1
 800515a:	f8ca 6000 	str.w	r6, [sl]
 800515e:	f8da 3000 	ldr.w	r3, [sl]
 8005162:	4499      	add	r9, r3
 8005164:	2200      	movs	r2, #0
 8005166:	2300      	movs	r3, #0
 8005168:	4620      	mov	r0, r4
 800516a:	4629      	mov	r1, r5
 800516c:	f7fb fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005170:	b108      	cbz	r0, 8005176 <__cvt+0xa4>
 8005172:	f8cd 900c 	str.w	r9, [sp, #12]
 8005176:	2230      	movs	r2, #48	; 0x30
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	454b      	cmp	r3, r9
 800517c:	d307      	bcc.n	800518e <__cvt+0xbc>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005182:	1bdb      	subs	r3, r3, r7
 8005184:	4638      	mov	r0, r7
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	b004      	add	sp, #16
 800518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	9103      	str	r1, [sp, #12]
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e7f0      	b.n	8005178 <__cvt+0xa6>

08005196 <__exponent>:
 8005196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005198:	4603      	mov	r3, r0
 800519a:	2900      	cmp	r1, #0
 800519c:	bfb8      	it	lt
 800519e:	4249      	neglt	r1, r1
 80051a0:	f803 2b02 	strb.w	r2, [r3], #2
 80051a4:	bfb4      	ite	lt
 80051a6:	222d      	movlt	r2, #45	; 0x2d
 80051a8:	222b      	movge	r2, #43	; 0x2b
 80051aa:	2909      	cmp	r1, #9
 80051ac:	7042      	strb	r2, [r0, #1]
 80051ae:	dd2a      	ble.n	8005206 <__exponent+0x70>
 80051b0:	f10d 0207 	add.w	r2, sp, #7
 80051b4:	4617      	mov	r7, r2
 80051b6:	260a      	movs	r6, #10
 80051b8:	4694      	mov	ip, r2
 80051ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80051be:	fb06 1415 	mls	r4, r6, r5, r1
 80051c2:	3430      	adds	r4, #48	; 0x30
 80051c4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80051c8:	460c      	mov	r4, r1
 80051ca:	2c63      	cmp	r4, #99	; 0x63
 80051cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80051d0:	4629      	mov	r1, r5
 80051d2:	dcf1      	bgt.n	80051b8 <__exponent+0x22>
 80051d4:	3130      	adds	r1, #48	; 0x30
 80051d6:	f1ac 0402 	sub.w	r4, ip, #2
 80051da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051de:	1c41      	adds	r1, r0, #1
 80051e0:	4622      	mov	r2, r4
 80051e2:	42ba      	cmp	r2, r7
 80051e4:	d30a      	bcc.n	80051fc <__exponent+0x66>
 80051e6:	f10d 0209 	add.w	r2, sp, #9
 80051ea:	eba2 020c 	sub.w	r2, r2, ip
 80051ee:	42bc      	cmp	r4, r7
 80051f0:	bf88      	it	hi
 80051f2:	2200      	movhi	r2, #0
 80051f4:	4413      	add	r3, r2
 80051f6:	1a18      	subs	r0, r3, r0
 80051f8:	b003      	add	sp, #12
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005200:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005204:	e7ed      	b.n	80051e2 <__exponent+0x4c>
 8005206:	2330      	movs	r3, #48	; 0x30
 8005208:	3130      	adds	r1, #48	; 0x30
 800520a:	7083      	strb	r3, [r0, #2]
 800520c:	70c1      	strb	r1, [r0, #3]
 800520e:	1d03      	adds	r3, r0, #4
 8005210:	e7f1      	b.n	80051f6 <__exponent+0x60>
	...

08005214 <_printf_float>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	ed2d 8b02 	vpush	{d8}
 800521c:	b08d      	sub	sp, #52	; 0x34
 800521e:	460c      	mov	r4, r1
 8005220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005224:	4616      	mov	r6, r2
 8005226:	461f      	mov	r7, r3
 8005228:	4605      	mov	r5, r0
 800522a:	f000 fcd9 	bl	8005be0 <_localeconv_r>
 800522e:	f8d0 a000 	ldr.w	sl, [r0]
 8005232:	4650      	mov	r0, sl
 8005234:	f7fb f81c 	bl	8000270 <strlen>
 8005238:	2300      	movs	r3, #0
 800523a:	930a      	str	r3, [sp, #40]	; 0x28
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	9305      	str	r3, [sp, #20]
 8005240:	f8d8 3000 	ldr.w	r3, [r8]
 8005244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005248:	3307      	adds	r3, #7
 800524a:	f023 0307 	bic.w	r3, r3, #7
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	f8c8 2000 	str.w	r2, [r8]
 8005256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800525a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800525e:	9307      	str	r3, [sp, #28]
 8005260:	f8cd 8018 	str.w	r8, [sp, #24]
 8005264:	ee08 0a10 	vmov	s16, r0
 8005268:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800526c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005270:	4b9e      	ldr	r3, [pc, #632]	; (80054ec <_printf_float+0x2d8>)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	f7fb fc59 	bl	8000b2c <__aeabi_dcmpun>
 800527a:	bb88      	cbnz	r0, 80052e0 <_printf_float+0xcc>
 800527c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005280:	4b9a      	ldr	r3, [pc, #616]	; (80054ec <_printf_float+0x2d8>)
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	f7fb fc33 	bl	8000af0 <__aeabi_dcmple>
 800528a:	bb48      	cbnz	r0, 80052e0 <_printf_float+0xcc>
 800528c:	2200      	movs	r2, #0
 800528e:	2300      	movs	r3, #0
 8005290:	4640      	mov	r0, r8
 8005292:	4649      	mov	r1, r9
 8005294:	f7fb fc22 	bl	8000adc <__aeabi_dcmplt>
 8005298:	b110      	cbz	r0, 80052a0 <_printf_float+0x8c>
 800529a:	232d      	movs	r3, #45	; 0x2d
 800529c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a0:	4a93      	ldr	r2, [pc, #588]	; (80054f0 <_printf_float+0x2dc>)
 80052a2:	4b94      	ldr	r3, [pc, #592]	; (80054f4 <_printf_float+0x2e0>)
 80052a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052a8:	bf94      	ite	ls
 80052aa:	4690      	movls	r8, r2
 80052ac:	4698      	movhi	r8, r3
 80052ae:	2303      	movs	r3, #3
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	9b05      	ldr	r3, [sp, #20]
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	9700      	str	r7, [sp, #0]
 80052c0:	4633      	mov	r3, r6
 80052c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f9da 	bl	8005680 <_printf_common>
 80052cc:	3001      	adds	r0, #1
 80052ce:	f040 8090 	bne.w	80053f2 <_printf_float+0x1de>
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	b00d      	add	sp, #52	; 0x34
 80052d8:	ecbd 8b02 	vpop	{d8}
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	4649      	mov	r1, r9
 80052e8:	f7fb fc20 	bl	8000b2c <__aeabi_dcmpun>
 80052ec:	b140      	cbz	r0, 8005300 <_printf_float+0xec>
 80052ee:	464b      	mov	r3, r9
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bfbc      	itt	lt
 80052f4:	232d      	movlt	r3, #45	; 0x2d
 80052f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052fa:	4a7f      	ldr	r2, [pc, #508]	; (80054f8 <_printf_float+0x2e4>)
 80052fc:	4b7f      	ldr	r3, [pc, #508]	; (80054fc <_printf_float+0x2e8>)
 80052fe:	e7d1      	b.n	80052a4 <_printf_float+0x90>
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005306:	9206      	str	r2, [sp, #24]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	d13f      	bne.n	800538c <_printf_float+0x178>
 800530c:	2306      	movs	r3, #6
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	9b05      	ldr	r3, [sp, #20]
 8005312:	6861      	ldr	r1, [r4, #4]
 8005314:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005318:	2300      	movs	r3, #0
 800531a:	9303      	str	r3, [sp, #12]
 800531c:	ab0a      	add	r3, sp, #40	; 0x28
 800531e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005322:	ab09      	add	r3, sp, #36	; 0x24
 8005324:	ec49 8b10 	vmov	d0, r8, r9
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005330:	4628      	mov	r0, r5
 8005332:	f7ff fece 	bl	80050d2 <__cvt>
 8005336:	9b06      	ldr	r3, [sp, #24]
 8005338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800533a:	2b47      	cmp	r3, #71	; 0x47
 800533c:	4680      	mov	r8, r0
 800533e:	d108      	bne.n	8005352 <_printf_float+0x13e>
 8005340:	1cc8      	adds	r0, r1, #3
 8005342:	db02      	blt.n	800534a <_printf_float+0x136>
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	4299      	cmp	r1, r3
 8005348:	dd41      	ble.n	80053ce <_printf_float+0x1ba>
 800534a:	f1ab 0302 	sub.w	r3, fp, #2
 800534e:	fa5f fb83 	uxtb.w	fp, r3
 8005352:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005356:	d820      	bhi.n	800539a <_printf_float+0x186>
 8005358:	3901      	subs	r1, #1
 800535a:	465a      	mov	r2, fp
 800535c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005360:	9109      	str	r1, [sp, #36]	; 0x24
 8005362:	f7ff ff18 	bl	8005196 <__exponent>
 8005366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005368:	1813      	adds	r3, r2, r0
 800536a:	2a01      	cmp	r2, #1
 800536c:	4681      	mov	r9, r0
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	dc02      	bgt.n	8005378 <_printf_float+0x164>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	07d2      	lsls	r2, r2, #31
 8005376:	d501      	bpl.n	800537c <_printf_float+0x168>
 8005378:	3301      	adds	r3, #1
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005380:	2b00      	cmp	r3, #0
 8005382:	d09c      	beq.n	80052be <_printf_float+0xaa>
 8005384:	232d      	movs	r3, #45	; 0x2d
 8005386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538a:	e798      	b.n	80052be <_printf_float+0xaa>
 800538c:	9a06      	ldr	r2, [sp, #24]
 800538e:	2a47      	cmp	r2, #71	; 0x47
 8005390:	d1be      	bne.n	8005310 <_printf_float+0xfc>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1bc      	bne.n	8005310 <_printf_float+0xfc>
 8005396:	2301      	movs	r3, #1
 8005398:	e7b9      	b.n	800530e <_printf_float+0xfa>
 800539a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800539e:	d118      	bne.n	80053d2 <_printf_float+0x1be>
 80053a0:	2900      	cmp	r1, #0
 80053a2:	6863      	ldr	r3, [r4, #4]
 80053a4:	dd0b      	ble.n	80053be <_printf_float+0x1aa>
 80053a6:	6121      	str	r1, [r4, #16]
 80053a8:	b913      	cbnz	r3, 80053b0 <_printf_float+0x19c>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	07d0      	lsls	r0, r2, #31
 80053ae:	d502      	bpl.n	80053b6 <_printf_float+0x1a2>
 80053b0:	3301      	adds	r3, #1
 80053b2:	440b      	add	r3, r1
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	e7de      	b.n	800537c <_printf_float+0x168>
 80053be:	b913      	cbnz	r3, 80053c6 <_printf_float+0x1b2>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	07d2      	lsls	r2, r2, #31
 80053c4:	d501      	bpl.n	80053ca <_printf_float+0x1b6>
 80053c6:	3302      	adds	r3, #2
 80053c8:	e7f4      	b.n	80053b4 <_printf_float+0x1a0>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e7f2      	b.n	80053b4 <_printf_float+0x1a0>
 80053ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	4299      	cmp	r1, r3
 80053d6:	db05      	blt.n	80053e4 <_printf_float+0x1d0>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	6121      	str	r1, [r4, #16]
 80053dc:	07d8      	lsls	r0, r3, #31
 80053de:	d5ea      	bpl.n	80053b6 <_printf_float+0x1a2>
 80053e0:	1c4b      	adds	r3, r1, #1
 80053e2:	e7e7      	b.n	80053b4 <_printf_float+0x1a0>
 80053e4:	2900      	cmp	r1, #0
 80053e6:	bfd4      	ite	le
 80053e8:	f1c1 0202 	rsble	r2, r1, #2
 80053ec:	2201      	movgt	r2, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	e7e0      	b.n	80053b4 <_printf_float+0x1a0>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	055a      	lsls	r2, r3, #21
 80053f6:	d407      	bmi.n	8005408 <_printf_float+0x1f4>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	4642      	mov	r2, r8
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	d12c      	bne.n	8005460 <_printf_float+0x24c>
 8005406:	e764      	b.n	80052d2 <_printf_float+0xbe>
 8005408:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800540c:	f240 80e0 	bls.w	80055d0 <_printf_float+0x3bc>
 8005410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	f7fb fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800541c:	2800      	cmp	r0, #0
 800541e:	d034      	beq.n	800548a <_printf_float+0x276>
 8005420:	4a37      	ldr	r2, [pc, #220]	; (8005500 <_printf_float+0x2ec>)
 8005422:	2301      	movs	r3, #1
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	f43f af51 	beq.w	80052d2 <_printf_float+0xbe>
 8005430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005434:	429a      	cmp	r2, r3
 8005436:	db02      	blt.n	800543e <_printf_float+0x22a>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07d8      	lsls	r0, r3, #31
 800543c:	d510      	bpl.n	8005460 <_printf_float+0x24c>
 800543e:	ee18 3a10 	vmov	r3, s16
 8005442:	4652      	mov	r2, sl
 8005444:	4631      	mov	r1, r6
 8005446:	4628      	mov	r0, r5
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	f43f af41 	beq.w	80052d2 <_printf_float+0xbe>
 8005450:	f04f 0800 	mov.w	r8, #0
 8005454:	f104 091a 	add.w	r9, r4, #26
 8005458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	4543      	cmp	r3, r8
 800545e:	dc09      	bgt.n	8005474 <_printf_float+0x260>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	079b      	lsls	r3, r3, #30
 8005464:	f100 8107 	bmi.w	8005676 <_printf_float+0x462>
 8005468:	68e0      	ldr	r0, [r4, #12]
 800546a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546c:	4298      	cmp	r0, r3
 800546e:	bfb8      	it	lt
 8005470:	4618      	movlt	r0, r3
 8005472:	e730      	b.n	80052d6 <_printf_float+0xc2>
 8005474:	2301      	movs	r3, #1
 8005476:	464a      	mov	r2, r9
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af27 	beq.w	80052d2 <_printf_float+0xbe>
 8005484:	f108 0801 	add.w	r8, r8, #1
 8005488:	e7e6      	b.n	8005458 <_printf_float+0x244>
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	dc39      	bgt.n	8005504 <_printf_float+0x2f0>
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <_printf_float+0x2ec>)
 8005492:	2301      	movs	r3, #1
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	f43f af19 	beq.w	80052d2 <_printf_float+0xbe>
 80054a0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d102      	bne.n	80054ae <_printf_float+0x29a>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07d9      	lsls	r1, r3, #31
 80054ac:	d5d8      	bpl.n	8005460 <_printf_float+0x24c>
 80054ae:	ee18 3a10 	vmov	r3, s16
 80054b2:	4652      	mov	r2, sl
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	f43f af09 	beq.w	80052d2 <_printf_float+0xbe>
 80054c0:	f04f 0900 	mov.w	r9, #0
 80054c4:	f104 0a1a 	add.w	sl, r4, #26
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	425b      	negs	r3, r3
 80054cc:	454b      	cmp	r3, r9
 80054ce:	dc01      	bgt.n	80054d4 <_printf_float+0x2c0>
 80054d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d2:	e792      	b.n	80053fa <_printf_float+0x1e6>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4652      	mov	r2, sl
 80054d8:	4631      	mov	r1, r6
 80054da:	4628      	mov	r0, r5
 80054dc:	47b8      	blx	r7
 80054de:	3001      	adds	r0, #1
 80054e0:	f43f aef7 	beq.w	80052d2 <_printf_float+0xbe>
 80054e4:	f109 0901 	add.w	r9, r9, #1
 80054e8:	e7ee      	b.n	80054c8 <_printf_float+0x2b4>
 80054ea:	bf00      	nop
 80054ec:	7fefffff 	.word	0x7fefffff
 80054f0:	08007ae0 	.word	0x08007ae0
 80054f4:	08007ae4 	.word	0x08007ae4
 80054f8:	08007ae8 	.word	0x08007ae8
 80054fc:	08007aec 	.word	0x08007aec
 8005500:	08007af0 	.word	0x08007af0
 8005504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005508:	429a      	cmp	r2, r3
 800550a:	bfa8      	it	ge
 800550c:	461a      	movge	r2, r3
 800550e:	2a00      	cmp	r2, #0
 8005510:	4691      	mov	r9, r2
 8005512:	dc37      	bgt.n	8005584 <_printf_float+0x370>
 8005514:	f04f 0b00 	mov.w	fp, #0
 8005518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800551c:	f104 021a 	add.w	r2, r4, #26
 8005520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	eba3 0309 	sub.w	r3, r3, r9
 8005528:	455b      	cmp	r3, fp
 800552a:	dc33      	bgt.n	8005594 <_printf_float+0x380>
 800552c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005530:	429a      	cmp	r2, r3
 8005532:	db3b      	blt.n	80055ac <_printf_float+0x398>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	07da      	lsls	r2, r3, #31
 8005538:	d438      	bmi.n	80055ac <_printf_float+0x398>
 800553a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800553e:	eba2 0903 	sub.w	r9, r2, r3
 8005542:	9b05      	ldr	r3, [sp, #20]
 8005544:	1ad2      	subs	r2, r2, r3
 8005546:	4591      	cmp	r9, r2
 8005548:	bfa8      	it	ge
 800554a:	4691      	movge	r9, r2
 800554c:	f1b9 0f00 	cmp.w	r9, #0
 8005550:	dc35      	bgt.n	80055be <_printf_float+0x3aa>
 8005552:	f04f 0800 	mov.w	r8, #0
 8005556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800555a:	f104 0a1a 	add.w	sl, r4, #26
 800555e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	eba3 0309 	sub.w	r3, r3, r9
 8005568:	4543      	cmp	r3, r8
 800556a:	f77f af79 	ble.w	8005460 <_printf_float+0x24c>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f aeaa 	beq.w	80052d2 <_printf_float+0xbe>
 800557e:	f108 0801 	add.w	r8, r8, #1
 8005582:	e7ec      	b.n	800555e <_printf_float+0x34a>
 8005584:	4613      	mov	r3, r2
 8005586:	4631      	mov	r1, r6
 8005588:	4642      	mov	r2, r8
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	d1c0      	bne.n	8005514 <_printf_float+0x300>
 8005592:	e69e      	b.n	80052d2 <_printf_float+0xbe>
 8005594:	2301      	movs	r3, #1
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	9205      	str	r2, [sp, #20]
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	f43f ae97 	beq.w	80052d2 <_printf_float+0xbe>
 80055a4:	9a05      	ldr	r2, [sp, #20]
 80055a6:	f10b 0b01 	add.w	fp, fp, #1
 80055aa:	e7b9      	b.n	8005520 <_printf_float+0x30c>
 80055ac:	ee18 3a10 	vmov	r3, s16
 80055b0:	4652      	mov	r2, sl
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	d1be      	bne.n	800553a <_printf_float+0x326>
 80055bc:	e689      	b.n	80052d2 <_printf_float+0xbe>
 80055be:	9a05      	ldr	r2, [sp, #20]
 80055c0:	464b      	mov	r3, r9
 80055c2:	4442      	add	r2, r8
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	d1c1      	bne.n	8005552 <_printf_float+0x33e>
 80055ce:	e680      	b.n	80052d2 <_printf_float+0xbe>
 80055d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055d2:	2a01      	cmp	r2, #1
 80055d4:	dc01      	bgt.n	80055da <_printf_float+0x3c6>
 80055d6:	07db      	lsls	r3, r3, #31
 80055d8:	d53a      	bpl.n	8005650 <_printf_float+0x43c>
 80055da:	2301      	movs	r3, #1
 80055dc:	4642      	mov	r2, r8
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f ae74 	beq.w	80052d2 <_printf_float+0xbe>
 80055ea:	ee18 3a10 	vmov	r3, s16
 80055ee:	4652      	mov	r2, sl
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f ae6b 	beq.w	80052d2 <_printf_float+0xbe>
 80055fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005608:	f7fb fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800560c:	b9d8      	cbnz	r0, 8005646 <_printf_float+0x432>
 800560e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005612:	f108 0201 	add.w	r2, r8, #1
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	d10e      	bne.n	800563e <_printf_float+0x42a>
 8005620:	e657      	b.n	80052d2 <_printf_float+0xbe>
 8005622:	2301      	movs	r3, #1
 8005624:	4652      	mov	r2, sl
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f ae50 	beq.w	80052d2 <_printf_float+0xbe>
 8005632:	f108 0801 	add.w	r8, r8, #1
 8005636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005638:	3b01      	subs	r3, #1
 800563a:	4543      	cmp	r3, r8
 800563c:	dcf1      	bgt.n	8005622 <_printf_float+0x40e>
 800563e:	464b      	mov	r3, r9
 8005640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005644:	e6da      	b.n	80053fc <_printf_float+0x1e8>
 8005646:	f04f 0800 	mov.w	r8, #0
 800564a:	f104 0a1a 	add.w	sl, r4, #26
 800564e:	e7f2      	b.n	8005636 <_printf_float+0x422>
 8005650:	2301      	movs	r3, #1
 8005652:	4642      	mov	r2, r8
 8005654:	e7df      	b.n	8005616 <_printf_float+0x402>
 8005656:	2301      	movs	r3, #1
 8005658:	464a      	mov	r2, r9
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f ae36 	beq.w	80052d2 <_printf_float+0xbe>
 8005666:	f108 0801 	add.w	r8, r8, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	4543      	cmp	r3, r8
 8005672:	dcf0      	bgt.n	8005656 <_printf_float+0x442>
 8005674:	e6f8      	b.n	8005468 <_printf_float+0x254>
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	f104 0919 	add.w	r9, r4, #25
 800567e:	e7f4      	b.n	800566a <_printf_float+0x456>

08005680 <_printf_common>:
 8005680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	4616      	mov	r6, r2
 8005686:	4699      	mov	r9, r3
 8005688:	688a      	ldr	r2, [r1, #8]
 800568a:	690b      	ldr	r3, [r1, #16]
 800568c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005690:	4293      	cmp	r3, r2
 8005692:	bfb8      	it	lt
 8005694:	4613      	movlt	r3, r2
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800569c:	4607      	mov	r7, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	b10a      	cbz	r2, 80056a6 <_printf_common+0x26>
 80056a2:	3301      	adds	r3, #1
 80056a4:	6033      	str	r3, [r6, #0]
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	0699      	lsls	r1, r3, #26
 80056aa:	bf42      	ittt	mi
 80056ac:	6833      	ldrmi	r3, [r6, #0]
 80056ae:	3302      	addmi	r3, #2
 80056b0:	6033      	strmi	r3, [r6, #0]
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	f015 0506 	ands.w	r5, r5, #6
 80056b8:	d106      	bne.n	80056c8 <_printf_common+0x48>
 80056ba:	f104 0a19 	add.w	sl, r4, #25
 80056be:	68e3      	ldr	r3, [r4, #12]
 80056c0:	6832      	ldr	r2, [r6, #0]
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	dc26      	bgt.n	8005716 <_printf_common+0x96>
 80056c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056cc:	1e13      	subs	r3, r2, #0
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	bf18      	it	ne
 80056d2:	2301      	movne	r3, #1
 80056d4:	0692      	lsls	r2, r2, #26
 80056d6:	d42b      	bmi.n	8005730 <_printf_common+0xb0>
 80056d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056dc:	4649      	mov	r1, r9
 80056de:	4638      	mov	r0, r7
 80056e0:	47c0      	blx	r8
 80056e2:	3001      	adds	r0, #1
 80056e4:	d01e      	beq.n	8005724 <_printf_common+0xa4>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	f003 0306 	and.w	r3, r3, #6
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	bf02      	ittt	eq
 80056f2:	68e5      	ldreq	r5, [r4, #12]
 80056f4:	6833      	ldreq	r3, [r6, #0]
 80056f6:	1aed      	subeq	r5, r5, r3
 80056f8:	68a3      	ldr	r3, [r4, #8]
 80056fa:	bf0c      	ite	eq
 80056fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005700:	2500      	movne	r5, #0
 8005702:	4293      	cmp	r3, r2
 8005704:	bfc4      	itt	gt
 8005706:	1a9b      	subgt	r3, r3, r2
 8005708:	18ed      	addgt	r5, r5, r3
 800570a:	2600      	movs	r6, #0
 800570c:	341a      	adds	r4, #26
 800570e:	42b5      	cmp	r5, r6
 8005710:	d11a      	bne.n	8005748 <_printf_common+0xc8>
 8005712:	2000      	movs	r0, #0
 8005714:	e008      	b.n	8005728 <_printf_common+0xa8>
 8005716:	2301      	movs	r3, #1
 8005718:	4652      	mov	r2, sl
 800571a:	4649      	mov	r1, r9
 800571c:	4638      	mov	r0, r7
 800571e:	47c0      	blx	r8
 8005720:	3001      	adds	r0, #1
 8005722:	d103      	bne.n	800572c <_printf_common+0xac>
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572c:	3501      	adds	r5, #1
 800572e:	e7c6      	b.n	80056be <_printf_common+0x3e>
 8005730:	18e1      	adds	r1, r4, r3
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	2030      	movs	r0, #48	; 0x30
 8005736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800573a:	4422      	add	r2, r4
 800573c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005744:	3302      	adds	r3, #2
 8005746:	e7c7      	b.n	80056d8 <_printf_common+0x58>
 8005748:	2301      	movs	r3, #1
 800574a:	4622      	mov	r2, r4
 800574c:	4649      	mov	r1, r9
 800574e:	4638      	mov	r0, r7
 8005750:	47c0      	blx	r8
 8005752:	3001      	adds	r0, #1
 8005754:	d0e6      	beq.n	8005724 <_printf_common+0xa4>
 8005756:	3601      	adds	r6, #1
 8005758:	e7d9      	b.n	800570e <_printf_common+0x8e>
	...

0800575c <_printf_i>:
 800575c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	7e0f      	ldrb	r7, [r1, #24]
 8005762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005764:	2f78      	cmp	r7, #120	; 0x78
 8005766:	4691      	mov	r9, r2
 8005768:	4680      	mov	r8, r0
 800576a:	460c      	mov	r4, r1
 800576c:	469a      	mov	sl, r3
 800576e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005772:	d807      	bhi.n	8005784 <_printf_i+0x28>
 8005774:	2f62      	cmp	r7, #98	; 0x62
 8005776:	d80a      	bhi.n	800578e <_printf_i+0x32>
 8005778:	2f00      	cmp	r7, #0
 800577a:	f000 80d4 	beq.w	8005926 <_printf_i+0x1ca>
 800577e:	2f58      	cmp	r7, #88	; 0x58
 8005780:	f000 80c0 	beq.w	8005904 <_printf_i+0x1a8>
 8005784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800578c:	e03a      	b.n	8005804 <_printf_i+0xa8>
 800578e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005792:	2b15      	cmp	r3, #21
 8005794:	d8f6      	bhi.n	8005784 <_printf_i+0x28>
 8005796:	a101      	add	r1, pc, #4	; (adr r1, 800579c <_printf_i+0x40>)
 8005798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	08005809 	.word	0x08005809
 80057a4:	08005785 	.word	0x08005785
 80057a8:	08005785 	.word	0x08005785
 80057ac:	08005785 	.word	0x08005785
 80057b0:	08005785 	.word	0x08005785
 80057b4:	08005809 	.word	0x08005809
 80057b8:	08005785 	.word	0x08005785
 80057bc:	08005785 	.word	0x08005785
 80057c0:	08005785 	.word	0x08005785
 80057c4:	08005785 	.word	0x08005785
 80057c8:	0800590d 	.word	0x0800590d
 80057cc:	08005835 	.word	0x08005835
 80057d0:	080058c7 	.word	0x080058c7
 80057d4:	08005785 	.word	0x08005785
 80057d8:	08005785 	.word	0x08005785
 80057dc:	0800592f 	.word	0x0800592f
 80057e0:	08005785 	.word	0x08005785
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005785 	.word	0x08005785
 80057ec:	08005785 	.word	0x08005785
 80057f0:	080058cf 	.word	0x080058cf
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	1d1a      	adds	r2, r3, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005804:	2301      	movs	r3, #1
 8005806:	e09f      	b.n	8005948 <_printf_i+0x1ec>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	0607      	lsls	r7, r0, #24
 800580e:	f103 0104 	add.w	r1, r3, #4
 8005812:	6029      	str	r1, [r5, #0]
 8005814:	d501      	bpl.n	800581a <_printf_i+0xbe>
 8005816:	681e      	ldr	r6, [r3, #0]
 8005818:	e003      	b.n	8005822 <_printf_i+0xc6>
 800581a:	0646      	lsls	r6, r0, #25
 800581c:	d5fb      	bpl.n	8005816 <_printf_i+0xba>
 800581e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005822:	2e00      	cmp	r6, #0
 8005824:	da03      	bge.n	800582e <_printf_i+0xd2>
 8005826:	232d      	movs	r3, #45	; 0x2d
 8005828:	4276      	negs	r6, r6
 800582a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582e:	485a      	ldr	r0, [pc, #360]	; (8005998 <_printf_i+0x23c>)
 8005830:	230a      	movs	r3, #10
 8005832:	e012      	b.n	800585a <_printf_i+0xfe>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1d19      	adds	r1, r3, #4
 800583a:	6029      	str	r1, [r5, #0]
 800583c:	0605      	lsls	r5, r0, #24
 800583e:	d501      	bpl.n	8005844 <_printf_i+0xe8>
 8005840:	681e      	ldr	r6, [r3, #0]
 8005842:	e002      	b.n	800584a <_printf_i+0xee>
 8005844:	0641      	lsls	r1, r0, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0xe4>
 8005848:	881e      	ldrh	r6, [r3, #0]
 800584a:	4853      	ldr	r0, [pc, #332]	; (8005998 <_printf_i+0x23c>)
 800584c:	2f6f      	cmp	r7, #111	; 0x6f
 800584e:	bf0c      	ite	eq
 8005850:	2308      	moveq	r3, #8
 8005852:	230a      	movne	r3, #10
 8005854:	2100      	movs	r1, #0
 8005856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800585a:	6865      	ldr	r5, [r4, #4]
 800585c:	60a5      	str	r5, [r4, #8]
 800585e:	2d00      	cmp	r5, #0
 8005860:	bfa2      	ittt	ge
 8005862:	6821      	ldrge	r1, [r4, #0]
 8005864:	f021 0104 	bicge.w	r1, r1, #4
 8005868:	6021      	strge	r1, [r4, #0]
 800586a:	b90e      	cbnz	r6, 8005870 <_printf_i+0x114>
 800586c:	2d00      	cmp	r5, #0
 800586e:	d04b      	beq.n	8005908 <_printf_i+0x1ac>
 8005870:	4615      	mov	r5, r2
 8005872:	fbb6 f1f3 	udiv	r1, r6, r3
 8005876:	fb03 6711 	mls	r7, r3, r1, r6
 800587a:	5dc7      	ldrb	r7, [r0, r7]
 800587c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005880:	4637      	mov	r7, r6
 8005882:	42bb      	cmp	r3, r7
 8005884:	460e      	mov	r6, r1
 8005886:	d9f4      	bls.n	8005872 <_printf_i+0x116>
 8005888:	2b08      	cmp	r3, #8
 800588a:	d10b      	bne.n	80058a4 <_printf_i+0x148>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	07de      	lsls	r6, r3, #31
 8005890:	d508      	bpl.n	80058a4 <_printf_i+0x148>
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	6861      	ldr	r1, [r4, #4]
 8005896:	4299      	cmp	r1, r3
 8005898:	bfde      	ittt	le
 800589a:	2330      	movle	r3, #48	; 0x30
 800589c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058a4:	1b52      	subs	r2, r2, r5
 80058a6:	6122      	str	r2, [r4, #16]
 80058a8:	f8cd a000 	str.w	sl, [sp]
 80058ac:	464b      	mov	r3, r9
 80058ae:	aa03      	add	r2, sp, #12
 80058b0:	4621      	mov	r1, r4
 80058b2:	4640      	mov	r0, r8
 80058b4:	f7ff fee4 	bl	8005680 <_printf_common>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d14a      	bne.n	8005952 <_printf_i+0x1f6>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	b004      	add	sp, #16
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f043 0320 	orr.w	r3, r3, #32
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	4833      	ldr	r0, [pc, #204]	; (800599c <_printf_i+0x240>)
 80058d0:	2778      	movs	r7, #120	; 0x78
 80058d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	6829      	ldr	r1, [r5, #0]
 80058da:	061f      	lsls	r7, r3, #24
 80058dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e0:	d402      	bmi.n	80058e8 <_printf_i+0x18c>
 80058e2:	065f      	lsls	r7, r3, #25
 80058e4:	bf48      	it	mi
 80058e6:	b2b6      	uxthmi	r6, r6
 80058e8:	07df      	lsls	r7, r3, #31
 80058ea:	bf48      	it	mi
 80058ec:	f043 0320 	orrmi.w	r3, r3, #32
 80058f0:	6029      	str	r1, [r5, #0]
 80058f2:	bf48      	it	mi
 80058f4:	6023      	strmi	r3, [r4, #0]
 80058f6:	b91e      	cbnz	r6, 8005900 <_printf_i+0x1a4>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	f023 0320 	bic.w	r3, r3, #32
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	2310      	movs	r3, #16
 8005902:	e7a7      	b.n	8005854 <_printf_i+0xf8>
 8005904:	4824      	ldr	r0, [pc, #144]	; (8005998 <_printf_i+0x23c>)
 8005906:	e7e4      	b.n	80058d2 <_printf_i+0x176>
 8005908:	4615      	mov	r5, r2
 800590a:	e7bd      	b.n	8005888 <_printf_i+0x12c>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	6826      	ldr	r6, [r4, #0]
 8005910:	6961      	ldr	r1, [r4, #20]
 8005912:	1d18      	adds	r0, r3, #4
 8005914:	6028      	str	r0, [r5, #0]
 8005916:	0635      	lsls	r5, r6, #24
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	d501      	bpl.n	8005920 <_printf_i+0x1c4>
 800591c:	6019      	str	r1, [r3, #0]
 800591e:	e002      	b.n	8005926 <_printf_i+0x1ca>
 8005920:	0670      	lsls	r0, r6, #25
 8005922:	d5fb      	bpl.n	800591c <_printf_i+0x1c0>
 8005924:	8019      	strh	r1, [r3, #0]
 8005926:	2300      	movs	r3, #0
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	4615      	mov	r5, r2
 800592c:	e7bc      	b.n	80058a8 <_printf_i+0x14c>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	1d1a      	adds	r2, r3, #4
 8005932:	602a      	str	r2, [r5, #0]
 8005934:	681d      	ldr	r5, [r3, #0]
 8005936:	6862      	ldr	r2, [r4, #4]
 8005938:	2100      	movs	r1, #0
 800593a:	4628      	mov	r0, r5
 800593c:	f7fa fc48 	bl	80001d0 <memchr>
 8005940:	b108      	cbz	r0, 8005946 <_printf_i+0x1ea>
 8005942:	1b40      	subs	r0, r0, r5
 8005944:	6060      	str	r0, [r4, #4]
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	2300      	movs	r3, #0
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	e7aa      	b.n	80058a8 <_printf_i+0x14c>
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	462a      	mov	r2, r5
 8005956:	4649      	mov	r1, r9
 8005958:	4640      	mov	r0, r8
 800595a:	47d0      	blx	sl
 800595c:	3001      	adds	r0, #1
 800595e:	d0ad      	beq.n	80058bc <_printf_i+0x160>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	079b      	lsls	r3, r3, #30
 8005964:	d413      	bmi.n	800598e <_printf_i+0x232>
 8005966:	68e0      	ldr	r0, [r4, #12]
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	4298      	cmp	r0, r3
 800596c:	bfb8      	it	lt
 800596e:	4618      	movlt	r0, r3
 8005970:	e7a6      	b.n	80058c0 <_printf_i+0x164>
 8005972:	2301      	movs	r3, #1
 8005974:	4632      	mov	r2, r6
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d09d      	beq.n	80058bc <_printf_i+0x160>
 8005980:	3501      	adds	r5, #1
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	9903      	ldr	r1, [sp, #12]
 8005986:	1a5b      	subs	r3, r3, r1
 8005988:	42ab      	cmp	r3, r5
 800598a:	dcf2      	bgt.n	8005972 <_printf_i+0x216>
 800598c:	e7eb      	b.n	8005966 <_printf_i+0x20a>
 800598e:	2500      	movs	r5, #0
 8005990:	f104 0619 	add.w	r6, r4, #25
 8005994:	e7f5      	b.n	8005982 <_printf_i+0x226>
 8005996:	bf00      	nop
 8005998:	08007af2 	.word	0x08007af2
 800599c:	08007b03 	.word	0x08007b03

080059a0 <std>:
 80059a0:	2300      	movs	r3, #0
 80059a2:	b510      	push	{r4, lr}
 80059a4:	4604      	mov	r4, r0
 80059a6:	e9c0 3300 	strd	r3, r3, [r0]
 80059aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ae:	6083      	str	r3, [r0, #8]
 80059b0:	8181      	strh	r1, [r0, #12]
 80059b2:	6643      	str	r3, [r0, #100]	; 0x64
 80059b4:	81c2      	strh	r2, [r0, #14]
 80059b6:	6183      	str	r3, [r0, #24]
 80059b8:	4619      	mov	r1, r3
 80059ba:	2208      	movs	r2, #8
 80059bc:	305c      	adds	r0, #92	; 0x5c
 80059be:	f000 f906 	bl	8005bce <memset>
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <std+0x58>)
 80059c4:	6263      	str	r3, [r4, #36]	; 0x24
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <std+0x5c>)
 80059c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <std+0x60>)
 80059cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <std+0x64>)
 80059d0:	6323      	str	r3, [r4, #48]	; 0x30
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <std+0x68>)
 80059d4:	6224      	str	r4, [r4, #32]
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d006      	beq.n	80059e8 <std+0x48>
 80059da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059de:	4294      	cmp	r4, r2
 80059e0:	d002      	beq.n	80059e8 <std+0x48>
 80059e2:	33d0      	adds	r3, #208	; 0xd0
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d105      	bne.n	80059f4 <std+0x54>
 80059e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f0:	f000 b96a 	b.w	8005cc8 <__retarget_lock_init_recursive>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop
 80059f8:	08005b49 	.word	0x08005b49
 80059fc:	08005b6b 	.word	0x08005b6b
 8005a00:	08005ba3 	.word	0x08005ba3
 8005a04:	08005bc7 	.word	0x08005bc7
 8005a08:	2000036c 	.word	0x2000036c

08005a0c <stdio_exit_handler>:
 8005a0c:	4a02      	ldr	r2, [pc, #8]	; (8005a18 <stdio_exit_handler+0xc>)
 8005a0e:	4903      	ldr	r1, [pc, #12]	; (8005a1c <stdio_exit_handler+0x10>)
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <stdio_exit_handler+0x14>)
 8005a12:	f000 b869 	b.w	8005ae8 <_fwalk_sglue>
 8005a16:	bf00      	nop
 8005a18:	20000028 	.word	0x20000028
 8005a1c:	08007651 	.word	0x08007651
 8005a20:	20000034 	.word	0x20000034

08005a24 <cleanup_stdio>:
 8005a24:	6841      	ldr	r1, [r0, #4]
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <cleanup_stdio+0x34>)
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	d001      	beq.n	8005a34 <cleanup_stdio+0x10>
 8005a30:	f001 fe0e 	bl	8007650 <_fflush_r>
 8005a34:	68a1      	ldr	r1, [r4, #8]
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <cleanup_stdio+0x38>)
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d002      	beq.n	8005a42 <cleanup_stdio+0x1e>
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f001 fe07 	bl	8007650 <_fflush_r>
 8005a42:	68e1      	ldr	r1, [r4, #12]
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <cleanup_stdio+0x3c>)
 8005a46:	4299      	cmp	r1, r3
 8005a48:	d004      	beq.n	8005a54 <cleanup_stdio+0x30>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a50:	f001 bdfe 	b.w	8007650 <_fflush_r>
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	bf00      	nop
 8005a58:	2000036c 	.word	0x2000036c
 8005a5c:	200003d4 	.word	0x200003d4
 8005a60:	2000043c 	.word	0x2000043c

08005a64 <global_stdio_init.part.0>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <global_stdio_init.part.0+0x30>)
 8005a68:	4c0b      	ldr	r4, [pc, #44]	; (8005a98 <global_stdio_init.part.0+0x34>)
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <global_stdio_init.part.0+0x38>)
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	2200      	movs	r2, #0
 8005a72:	2104      	movs	r1, #4
 8005a74:	f7ff ff94 	bl	80059a0 <std>
 8005a78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2109      	movs	r1, #9
 8005a80:	f7ff ff8e 	bl	80059a0 <std>
 8005a84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a88:	2202      	movs	r2, #2
 8005a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8e:	2112      	movs	r1, #18
 8005a90:	f7ff bf86 	b.w	80059a0 <std>
 8005a94:	200004a4 	.word	0x200004a4
 8005a98:	2000036c 	.word	0x2000036c
 8005a9c:	08005a0d 	.word	0x08005a0d

08005aa0 <__sfp_lock_acquire>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__sfp_lock_acquire+0x8>)
 8005aa2:	f000 b912 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200004ad 	.word	0x200004ad

08005aac <__sfp_lock_release>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__sfp_lock_release+0x8>)
 8005aae:	f000 b90d 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200004ad 	.word	0x200004ad

08005ab8 <__sinit>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	4604      	mov	r4, r0
 8005abc:	f7ff fff0 	bl	8005aa0 <__sfp_lock_acquire>
 8005ac0:	6a23      	ldr	r3, [r4, #32]
 8005ac2:	b11b      	cbz	r3, 8005acc <__sinit+0x14>
 8005ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac8:	f7ff bff0 	b.w	8005aac <__sfp_lock_release>
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <__sinit+0x28>)
 8005ace:	6223      	str	r3, [r4, #32]
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <__sinit+0x2c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f5      	bne.n	8005ac4 <__sinit+0xc>
 8005ad8:	f7ff ffc4 	bl	8005a64 <global_stdio_init.part.0>
 8005adc:	e7f2      	b.n	8005ac4 <__sinit+0xc>
 8005ade:	bf00      	nop
 8005ae0:	08005a25 	.word	0x08005a25
 8005ae4:	200004a4 	.word	0x200004a4

08005ae8 <_fwalk_sglue>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4607      	mov	r7, r0
 8005aee:	4688      	mov	r8, r1
 8005af0:	4614      	mov	r4, r2
 8005af2:	2600      	movs	r6, #0
 8005af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af8:	f1b9 0901 	subs.w	r9, r9, #1
 8005afc:	d505      	bpl.n	8005b0a <_fwalk_sglue+0x22>
 8005afe:	6824      	ldr	r4, [r4, #0]
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	d1f7      	bne.n	8005af4 <_fwalk_sglue+0xc>
 8005b04:	4630      	mov	r0, r6
 8005b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d907      	bls.n	8005b20 <_fwalk_sglue+0x38>
 8005b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b14:	3301      	adds	r3, #1
 8005b16:	d003      	beq.n	8005b20 <_fwalk_sglue+0x38>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c0      	blx	r8
 8005b1e:	4306      	orrs	r6, r0
 8005b20:	3568      	adds	r5, #104	; 0x68
 8005b22:	e7e9      	b.n	8005af8 <_fwalk_sglue+0x10>

08005b24 <iprintf>:
 8005b24:	b40f      	push	{r0, r1, r2, r3}
 8005b26:	b507      	push	{r0, r1, r2, lr}
 8005b28:	4906      	ldr	r1, [pc, #24]	; (8005b44 <iprintf+0x20>)
 8005b2a:	ab04      	add	r3, sp, #16
 8005b2c:	6808      	ldr	r0, [r1, #0]
 8005b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b32:	6881      	ldr	r1, [r0, #8]
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f001 fbeb 	bl	8007310 <_vfiprintf_r>
 8005b3a:	b003      	add	sp, #12
 8005b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b40:	b004      	add	sp, #16
 8005b42:	4770      	bx	lr
 8005b44:	20000080 	.word	0x20000080

08005b48 <__sread>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	f000 f86c 	bl	8005c2c <_read_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	bfab      	itete	ge
 8005b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b5c:	181b      	addge	r3, r3, r0
 8005b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b62:	bfac      	ite	ge
 8005b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b66:	81a3      	strhlt	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__swrite>:
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	461f      	mov	r7, r3
 8005b70:	898b      	ldrh	r3, [r1, #12]
 8005b72:	05db      	lsls	r3, r3, #23
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4616      	mov	r6, r2
 8005b7a:	d505      	bpl.n	8005b88 <__swrite+0x1e>
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	2302      	movs	r3, #2
 8005b82:	2200      	movs	r2, #0
 8005b84:	f000 f840 	bl	8005c08 <_lseek_r>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	f000 b857 	b.w	8005c50 <_write_r>

08005ba2 <__sseek>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 f82d 	bl	8005c08 <_lseek_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	bf15      	itete	ne
 8005bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bbe:	81a3      	strheq	r3, [r4, #12]
 8005bc0:	bf18      	it	ne
 8005bc2:	81a3      	strhne	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__sclose>:
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	f000 b80d 	b.w	8005be8 <_close_r>

08005bce <memset>:
 8005bce:	4402      	add	r2, r0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d100      	bne.n	8005bd8 <memset+0xa>
 8005bd6:	4770      	bx	lr
 8005bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bdc:	e7f9      	b.n	8005bd2 <memset+0x4>
	...

08005be0 <_localeconv_r>:
 8005be0:	4800      	ldr	r0, [pc, #0]	; (8005be4 <_localeconv_r+0x4>)
 8005be2:	4770      	bx	lr
 8005be4:	20000174 	.word	0x20000174

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	; (8005c04 <_close_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb fc35 	bl	8001462 <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200004a8 	.word	0x200004a8

08005c08 <_lseek_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	; (8005c28 <_lseek_r+0x20>)
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4608      	mov	r0, r1
 8005c10:	4611      	mov	r1, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fb fc4a 	bl	80014b0 <_lseek>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_lseek_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_lseek_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200004a8 	.word	0x200004a8

08005c2c <_read_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	; (8005c4c <_read_r+0x20>)
 8005c30:	4604      	mov	r4, r0
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fb fbd8 	bl	80013f0 <_read>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_read_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_read_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200004a8 	.word	0x200004a8

08005c50 <_write_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d07      	ldr	r5, [pc, #28]	; (8005c70 <_write_r+0x20>)
 8005c54:	4604      	mov	r4, r0
 8005c56:	4608      	mov	r0, r1
 8005c58:	4611      	mov	r1, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb fbe3 	bl	800142a <_write>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_write_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_write_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200004a8 	.word	0x200004a8

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000080 	.word	0x20000080

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f001 feee 	bl	8007a74 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08007e54 	.word	0x08007e54
 8005cbc:	08007e54 	.word	0x08007e54
 8005cc0:	08007e54 	.word	0x08007e54
 8005cc4:	08007e58 	.word	0x08007e58

08005cc8 <__retarget_lock_init_recursive>:
 8005cc8:	4770      	bx	lr

08005cca <__retarget_lock_acquire_recursive>:
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_release_recursive>:
 8005ccc:	4770      	bx	lr

08005cce <quorem>:
 8005cce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd2:	6903      	ldr	r3, [r0, #16]
 8005cd4:	690c      	ldr	r4, [r1, #16]
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	4607      	mov	r7, r0
 8005cda:	db7e      	blt.n	8005dda <quorem+0x10c>
 8005cdc:	3c01      	subs	r4, #1
 8005cde:	f101 0814 	add.w	r8, r1, #20
 8005ce2:	f100 0514 	add.w	r5, r0, #20
 8005ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d04:	d331      	bcc.n	8005d6a <quorem+0x9c>
 8005d06:	f04f 0e00 	mov.w	lr, #0
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	46ac      	mov	ip, r5
 8005d0e:	46f2      	mov	sl, lr
 8005d10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d14:	b293      	uxth	r3, r2
 8005d16:	fb06 e303 	mla	r3, r6, r3, lr
 8005d1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d1e:	0c1a      	lsrs	r2, r3, #16
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	ebaa 0303 	sub.w	r3, sl, r3
 8005d26:	f8dc a000 	ldr.w	sl, [ip]
 8005d2a:	fa13 f38a 	uxtah	r3, r3, sl
 8005d2e:	fb06 220e 	mla	r2, r6, lr, r2
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	9b00      	ldr	r3, [sp, #0]
 8005d36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d44:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d48:	4581      	cmp	r9, r0
 8005d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d56:	d2db      	bcs.n	8005d10 <quorem+0x42>
 8005d58:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d5c:	b92b      	cbnz	r3, 8005d6a <quorem+0x9c>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	3b04      	subs	r3, #4
 8005d62:	429d      	cmp	r5, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	d32c      	bcc.n	8005dc2 <quorem+0xf4>
 8005d68:	613c      	str	r4, [r7, #16]
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f001 f9a6 	bl	80070bc <__mcmp>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	db22      	blt.n	8005dba <quorem+0xec>
 8005d74:	3601      	adds	r6, #1
 8005d76:	4629      	mov	r1, r5
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d7e:	f8d1 c000 	ldr.w	ip, [r1]
 8005d82:	b293      	uxth	r3, r2
 8005d84:	1ac3      	subs	r3, r0, r3
 8005d86:	0c12      	lsrs	r2, r2, #16
 8005d88:	fa13 f38c 	uxtah	r3, r3, ip
 8005d8c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d9a:	45c1      	cmp	r9, r8
 8005d9c:	f841 3b04 	str.w	r3, [r1], #4
 8005da0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005da4:	d2e9      	bcs.n	8005d7a <quorem+0xac>
 8005da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dae:	b922      	cbnz	r2, 8005dba <quorem+0xec>
 8005db0:	3b04      	subs	r3, #4
 8005db2:	429d      	cmp	r5, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	d30a      	bcc.n	8005dce <quorem+0x100>
 8005db8:	613c      	str	r4, [r7, #16]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	b003      	add	sp, #12
 8005dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	3b04      	subs	r3, #4
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	d1ce      	bne.n	8005d68 <quorem+0x9a>
 8005dca:	3c01      	subs	r4, #1
 8005dcc:	e7c9      	b.n	8005d62 <quorem+0x94>
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	d1f0      	bne.n	8005db8 <quorem+0xea>
 8005dd6:	3c01      	subs	r4, #1
 8005dd8:	e7eb      	b.n	8005db2 <quorem+0xe4>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e7ee      	b.n	8005dbc <quorem+0xee>
	...

08005de0 <_dtoa_r>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	ed2d 8b04 	vpush	{d8-d9}
 8005de8:	69c5      	ldr	r5, [r0, #28]
 8005dea:	b093      	sub	sp, #76	; 0x4c
 8005dec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005df0:	ec57 6b10 	vmov	r6, r7, d0
 8005df4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005df8:	9107      	str	r1, [sp, #28]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	920a      	str	r2, [sp, #40]	; 0x28
 8005dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8005e00:	b975      	cbnz	r5, 8005e20 <_dtoa_r+0x40>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f000 fe2a 	bl	8006a5c <malloc>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	61e0      	str	r0, [r4, #28]
 8005e0c:	b920      	cbnz	r0, 8005e18 <_dtoa_r+0x38>
 8005e0e:	4bae      	ldr	r3, [pc, #696]	; (80060c8 <_dtoa_r+0x2e8>)
 8005e10:	21ef      	movs	r1, #239	; 0xef
 8005e12:	48ae      	ldr	r0, [pc, #696]	; (80060cc <_dtoa_r+0x2ec>)
 8005e14:	f001 fcf8 	bl	8007808 <__assert_func>
 8005e18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e1c:	6005      	str	r5, [r0, #0]
 8005e1e:	60c5      	str	r5, [r0, #12]
 8005e20:	69e3      	ldr	r3, [r4, #28]
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	b151      	cbz	r1, 8005e3c <_dtoa_r+0x5c>
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	604a      	str	r2, [r1, #4]
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4093      	lsls	r3, r2
 8005e2e:	608b      	str	r3, [r1, #8]
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 ff07 	bl	8006c44 <_Bfree>
 8005e36:	69e3      	ldr	r3, [r4, #28]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	1e3b      	subs	r3, r7, #0
 8005e3e:	bfbb      	ittet	lt
 8005e40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	9303      	strlt	r3, [sp, #12]
 8005e46:	2300      	movge	r3, #0
 8005e48:	2201      	movlt	r2, #1
 8005e4a:	bfac      	ite	ge
 8005e4c:	f8c8 3000 	strge.w	r3, [r8]
 8005e50:	f8c8 2000 	strlt.w	r2, [r8]
 8005e54:	4b9e      	ldr	r3, [pc, #632]	; (80060d0 <_dtoa_r+0x2f0>)
 8005e56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e5a:	ea33 0308 	bics.w	r3, r3, r8
 8005e5e:	d11b      	bne.n	8005e98 <_dtoa_r+0xb8>
 8005e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e62:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e6c:	4333      	orrs	r3, r6
 8005e6e:	f000 8593 	beq.w	8006998 <_dtoa_r+0xbb8>
 8005e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e74:	b963      	cbnz	r3, 8005e90 <_dtoa_r+0xb0>
 8005e76:	4b97      	ldr	r3, [pc, #604]	; (80060d4 <_dtoa_r+0x2f4>)
 8005e78:	e027      	b.n	8005eca <_dtoa_r+0xea>
 8005e7a:	4b97      	ldr	r3, [pc, #604]	; (80060d8 <_dtoa_r+0x2f8>)
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	9800      	ldr	r0, [sp, #0]
 8005e86:	b013      	add	sp, #76	; 0x4c
 8005e88:	ecbd 8b04 	vpop	{d8-d9}
 8005e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e90:	4b90      	ldr	r3, [pc, #576]	; (80060d4 <_dtoa_r+0x2f4>)
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	3303      	adds	r3, #3
 8005e96:	e7f3      	b.n	8005e80 <_dtoa_r+0xa0>
 8005e98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	ec51 0b17 	vmov	r0, r1, d7
 8005ea2:	eeb0 8a47 	vmov.f32	s16, s14
 8005ea6:	eef0 8a67 	vmov.f32	s17, s15
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f7fa fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	b160      	cbz	r0, 8005ece <_dtoa_r+0xee>
 8005eb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8568 	beq.w	8006992 <_dtoa_r+0xbb2>
 8005ec2:	4b86      	ldr	r3, [pc, #536]	; (80060dc <_dtoa_r+0x2fc>)
 8005ec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	e7da      	b.n	8005e84 <_dtoa_r+0xa4>
 8005ece:	aa10      	add	r2, sp, #64	; 0x40
 8005ed0:	a911      	add	r1, sp, #68	; 0x44
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ed8:	eef0 0a68 	vmov.f32	s1, s17
 8005edc:	f001 f994 	bl	8007208 <__d2b>
 8005ee0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	2d00      	cmp	r5, #0
 8005ee8:	d07f      	beq.n	8005fea <_dtoa_r+0x20a>
 8005eea:	ee18 3a90 	vmov	r3, s17
 8005eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ef6:	ec51 0b18 	vmov	r0, r1, d8
 8005efa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005efe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f06:	4619      	mov	r1, r3
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4b75      	ldr	r3, [pc, #468]	; (80060e0 <_dtoa_r+0x300>)
 8005f0c:	f7fa f9bc 	bl	8000288 <__aeabi_dsub>
 8005f10:	a367      	add	r3, pc, #412	; (adr r3, 80060b0 <_dtoa_r+0x2d0>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fb6f 	bl	80005f8 <__aeabi_dmul>
 8005f1a:	a367      	add	r3, pc, #412	; (adr r3, 80060b8 <_dtoa_r+0x2d8>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fa f9b4 	bl	800028c <__adddf3>
 8005f24:	4606      	mov	r6, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	460f      	mov	r7, r1
 8005f2a:	f7fa fafb 	bl	8000524 <__aeabi_i2d>
 8005f2e:	a364      	add	r3, pc, #400	; (adr r3, 80060c0 <_dtoa_r+0x2e0>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f7fa fb60 	bl	80005f8 <__aeabi_dmul>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa f9a4 	bl	800028c <__adddf3>
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	f7fa fe06 	bl	8000b58 <__aeabi_d2iz>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4683      	mov	fp, r0
 8005f50:	2300      	movs	r3, #0
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa fdc1 	bl	8000adc <__aeabi_dcmplt>
 8005f5a:	b148      	cbz	r0, 8005f70 <_dtoa_r+0x190>
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	f7fa fae1 	bl	8000524 <__aeabi_i2d>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	f7fa fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6a:	b908      	cbnz	r0, 8005f70 <_dtoa_r+0x190>
 8005f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f70:	f1bb 0f16 	cmp.w	fp, #22
 8005f74:	d857      	bhi.n	8006026 <_dtoa_r+0x246>
 8005f76:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <_dtoa_r+0x304>)
 8005f78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	ec51 0b18 	vmov	r0, r1, d8
 8005f84:	f7fa fdaa 	bl	8000adc <__aeabi_dcmplt>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d04e      	beq.n	800602a <_dtoa_r+0x24a>
 8005f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f90:	2300      	movs	r3, #0
 8005f92:	930c      	str	r3, [sp, #48]	; 0x30
 8005f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f96:	1b5b      	subs	r3, r3, r5
 8005f98:	1e5a      	subs	r2, r3, #1
 8005f9a:	bf45      	ittet	mi
 8005f9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fa0:	9305      	strmi	r3, [sp, #20]
 8005fa2:	2300      	movpl	r3, #0
 8005fa4:	2300      	movmi	r3, #0
 8005fa6:	9206      	str	r2, [sp, #24]
 8005fa8:	bf54      	ite	pl
 8005faa:	9305      	strpl	r3, [sp, #20]
 8005fac:	9306      	strmi	r3, [sp, #24]
 8005fae:	f1bb 0f00 	cmp.w	fp, #0
 8005fb2:	db3c      	blt.n	800602e <_dtoa_r+0x24e>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005fba:	445b      	add	r3, fp
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	9b07      	ldr	r3, [sp, #28]
 8005fc4:	2b09      	cmp	r3, #9
 8005fc6:	d868      	bhi.n	800609a <_dtoa_r+0x2ba>
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	bfc4      	itt	gt
 8005fcc:	3b04      	subgt	r3, #4
 8005fce:	9307      	strgt	r3, [sp, #28]
 8005fd0:	9b07      	ldr	r3, [sp, #28]
 8005fd2:	f1a3 0302 	sub.w	r3, r3, #2
 8005fd6:	bfcc      	ite	gt
 8005fd8:	2500      	movgt	r5, #0
 8005fda:	2501      	movle	r5, #1
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	f200 8085 	bhi.w	80060ec <_dtoa_r+0x30c>
 8005fe2:	e8df f003 	tbb	[pc, r3]
 8005fe6:	3b2e      	.short	0x3b2e
 8005fe8:	5839      	.short	0x5839
 8005fea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fee:	441d      	add	r5, r3
 8005ff0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	bfc1      	itttt	gt
 8005ff8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ffc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006000:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006004:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006008:	bfd6      	itet	le
 800600a:	f1c3 0320 	rsble	r3, r3, #32
 800600e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006012:	fa06 f003 	lslle.w	r0, r6, r3
 8006016:	f7fa fa75 	bl	8000504 <__aeabi_ui2d>
 800601a:	2201      	movs	r2, #1
 800601c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006020:	3d01      	subs	r5, #1
 8006022:	920e      	str	r2, [sp, #56]	; 0x38
 8006024:	e76f      	b.n	8005f06 <_dtoa_r+0x126>
 8006026:	2301      	movs	r3, #1
 8006028:	e7b3      	b.n	8005f92 <_dtoa_r+0x1b2>
 800602a:	900c      	str	r0, [sp, #48]	; 0x30
 800602c:	e7b2      	b.n	8005f94 <_dtoa_r+0x1b4>
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	eba3 030b 	sub.w	r3, r3, fp
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	f1cb 0300 	rsb	r3, fp, #0
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	2300      	movs	r3, #0
 800603e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006040:	e7bf      	b.n	8005fc2 <_dtoa_r+0x1e2>
 8006042:	2300      	movs	r3, #0
 8006044:	9309      	str	r3, [sp, #36]	; 0x24
 8006046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc52      	bgt.n	80060f2 <_dtoa_r+0x312>
 800604c:	2301      	movs	r3, #1
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	9304      	str	r3, [sp, #16]
 8006052:	461a      	mov	r2, r3
 8006054:	920a      	str	r2, [sp, #40]	; 0x28
 8006056:	e00b      	b.n	8006070 <_dtoa_r+0x290>
 8006058:	2301      	movs	r3, #1
 800605a:	e7f3      	b.n	8006044 <_dtoa_r+0x264>
 800605c:	2300      	movs	r3, #0
 800605e:	9309      	str	r3, [sp, #36]	; 0x24
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	445b      	add	r3, fp
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	3301      	adds	r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	bfb8      	it	lt
 800606e:	2301      	movlt	r3, #1
 8006070:	69e0      	ldr	r0, [r4, #28]
 8006072:	2100      	movs	r1, #0
 8006074:	2204      	movs	r2, #4
 8006076:	f102 0614 	add.w	r6, r2, #20
 800607a:	429e      	cmp	r6, r3
 800607c:	d93d      	bls.n	80060fa <_dtoa_r+0x31a>
 800607e:	6041      	str	r1, [r0, #4]
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fd9f 	bl	8006bc4 <_Balloc>
 8006086:	9000      	str	r0, [sp, #0]
 8006088:	2800      	cmp	r0, #0
 800608a:	d139      	bne.n	8006100 <_dtoa_r+0x320>
 800608c:	4b16      	ldr	r3, [pc, #88]	; (80060e8 <_dtoa_r+0x308>)
 800608e:	4602      	mov	r2, r0
 8006090:	f240 11af 	movw	r1, #431	; 0x1af
 8006094:	e6bd      	b.n	8005e12 <_dtoa_r+0x32>
 8006096:	2301      	movs	r3, #1
 8006098:	e7e1      	b.n	800605e <_dtoa_r+0x27e>
 800609a:	2501      	movs	r5, #1
 800609c:	2300      	movs	r3, #0
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	9509      	str	r5, [sp, #36]	; 0x24
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2312      	movs	r3, #18
 80060ae:	e7d1      	b.n	8006054 <_dtoa_r+0x274>
 80060b0:	636f4361 	.word	0x636f4361
 80060b4:	3fd287a7 	.word	0x3fd287a7
 80060b8:	8b60c8b3 	.word	0x8b60c8b3
 80060bc:	3fc68a28 	.word	0x3fc68a28
 80060c0:	509f79fb 	.word	0x509f79fb
 80060c4:	3fd34413 	.word	0x3fd34413
 80060c8:	08007b21 	.word	0x08007b21
 80060cc:	08007b38 	.word	0x08007b38
 80060d0:	7ff00000 	.word	0x7ff00000
 80060d4:	08007b1d 	.word	0x08007b1d
 80060d8:	08007b14 	.word	0x08007b14
 80060dc:	08007af1 	.word	0x08007af1
 80060e0:	3ff80000 	.word	0x3ff80000
 80060e4:	08007c28 	.word	0x08007c28
 80060e8:	08007b90 	.word	0x08007b90
 80060ec:	2301      	movs	r3, #1
 80060ee:	9309      	str	r3, [sp, #36]	; 0x24
 80060f0:	e7d7      	b.n	80060a2 <_dtoa_r+0x2c2>
 80060f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	e7ba      	b.n	8006070 <_dtoa_r+0x290>
 80060fa:	3101      	adds	r1, #1
 80060fc:	0052      	lsls	r2, r2, #1
 80060fe:	e7ba      	b.n	8006076 <_dtoa_r+0x296>
 8006100:	69e3      	ldr	r3, [r4, #28]
 8006102:	9a00      	ldr	r2, [sp, #0]
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	9b04      	ldr	r3, [sp, #16]
 8006108:	2b0e      	cmp	r3, #14
 800610a:	f200 80a8 	bhi.w	800625e <_dtoa_r+0x47e>
 800610e:	2d00      	cmp	r5, #0
 8006110:	f000 80a5 	beq.w	800625e <_dtoa_r+0x47e>
 8006114:	f1bb 0f00 	cmp.w	fp, #0
 8006118:	dd38      	ble.n	800618c <_dtoa_r+0x3ac>
 800611a:	4bc0      	ldr	r3, [pc, #768]	; (800641c <_dtoa_r+0x63c>)
 800611c:	f00b 020f 	and.w	r2, fp, #15
 8006120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006124:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006128:	e9d3 6700 	ldrd	r6, r7, [r3]
 800612c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006130:	d019      	beq.n	8006166 <_dtoa_r+0x386>
 8006132:	4bbb      	ldr	r3, [pc, #748]	; (8006420 <_dtoa_r+0x640>)
 8006134:	ec51 0b18 	vmov	r0, r1, d8
 8006138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800613c:	f7fa fb86 	bl	800084c <__aeabi_ddiv>
 8006140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006144:	f008 080f 	and.w	r8, r8, #15
 8006148:	2503      	movs	r5, #3
 800614a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006420 <_dtoa_r+0x640>
 800614e:	f1b8 0f00 	cmp.w	r8, #0
 8006152:	d10a      	bne.n	800616a <_dtoa_r+0x38a>
 8006154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006158:	4632      	mov	r2, r6
 800615a:	463b      	mov	r3, r7
 800615c:	f7fa fb76 	bl	800084c <__aeabi_ddiv>
 8006160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006164:	e02b      	b.n	80061be <_dtoa_r+0x3de>
 8006166:	2502      	movs	r5, #2
 8006168:	e7ef      	b.n	800614a <_dtoa_r+0x36a>
 800616a:	f018 0f01 	tst.w	r8, #1
 800616e:	d008      	beq.n	8006182 <_dtoa_r+0x3a2>
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006178:	f7fa fa3e 	bl	80005f8 <__aeabi_dmul>
 800617c:	3501      	adds	r5, #1
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006186:	f109 0908 	add.w	r9, r9, #8
 800618a:	e7e0      	b.n	800614e <_dtoa_r+0x36e>
 800618c:	f000 809f 	beq.w	80062ce <_dtoa_r+0x4ee>
 8006190:	f1cb 0600 	rsb	r6, fp, #0
 8006194:	4ba1      	ldr	r3, [pc, #644]	; (800641c <_dtoa_r+0x63c>)
 8006196:	4fa2      	ldr	r7, [pc, #648]	; (8006420 <_dtoa_r+0x640>)
 8006198:	f006 020f 	and.w	r2, r6, #15
 800619c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	ec51 0b18 	vmov	r0, r1, d8
 80061a8:	f7fa fa26 	bl	80005f8 <__aeabi_dmul>
 80061ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b0:	1136      	asrs	r6, r6, #4
 80061b2:	2300      	movs	r3, #0
 80061b4:	2502      	movs	r5, #2
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d17e      	bne.n	80062b8 <_dtoa_r+0x4d8>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1d0      	bne.n	8006160 <_dtoa_r+0x380>
 80061be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8084 	beq.w	80062d2 <_dtoa_r+0x4f2>
 80061ca:	4b96      	ldr	r3, [pc, #600]	; (8006424 <_dtoa_r+0x644>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	4640      	mov	r0, r8
 80061d0:	4649      	mov	r1, r9
 80061d2:	f7fa fc83 	bl	8000adc <__aeabi_dcmplt>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d07b      	beq.n	80062d2 <_dtoa_r+0x4f2>
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d078      	beq.n	80062d2 <_dtoa_r+0x4f2>
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd39      	ble.n	800625a <_dtoa_r+0x47a>
 80061e6:	4b90      	ldr	r3, [pc, #576]	; (8006428 <_dtoa_r+0x648>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	f7fa fa03 	bl	80005f8 <__aeabi_dmul>
 80061f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f6:	9e01      	ldr	r6, [sp, #4]
 80061f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80061fc:	3501      	adds	r5, #1
 80061fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006202:	4628      	mov	r0, r5
 8006204:	f7fa f98e 	bl	8000524 <__aeabi_i2d>
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	f7fa f9f4 	bl	80005f8 <__aeabi_dmul>
 8006210:	4b86      	ldr	r3, [pc, #536]	; (800642c <_dtoa_r+0x64c>)
 8006212:	2200      	movs	r2, #0
 8006214:	f7fa f83a 	bl	800028c <__adddf3>
 8006218:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800621c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006220:	9303      	str	r3, [sp, #12]
 8006222:	2e00      	cmp	r6, #0
 8006224:	d158      	bne.n	80062d8 <_dtoa_r+0x4f8>
 8006226:	4b82      	ldr	r3, [pc, #520]	; (8006430 <_dtoa_r+0x650>)
 8006228:	2200      	movs	r2, #0
 800622a:	4640      	mov	r0, r8
 800622c:	4649      	mov	r1, r9
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006236:	4680      	mov	r8, r0
 8006238:	4689      	mov	r9, r1
 800623a:	f7fa fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 800623e:	2800      	cmp	r0, #0
 8006240:	f040 8296 	bne.w	8006770 <_dtoa_r+0x990>
 8006244:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006248:	4640      	mov	r0, r8
 800624a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800624e:	4649      	mov	r1, r9
 8006250:	f7fa fc44 	bl	8000adc <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 8289 	bne.w	800676c <_dtoa_r+0x98c>
 800625a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800625e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006260:	2b00      	cmp	r3, #0
 8006262:	f2c0 814e 	blt.w	8006502 <_dtoa_r+0x722>
 8006266:	f1bb 0f0e 	cmp.w	fp, #14
 800626a:	f300 814a 	bgt.w	8006502 <_dtoa_r+0x722>
 800626e:	4b6b      	ldr	r3, [pc, #428]	; (800641c <_dtoa_r+0x63c>)
 8006270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	f280 80dc 	bge.w	8006438 <_dtoa_r+0x658>
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f300 80d8 	bgt.w	8006438 <_dtoa_r+0x658>
 8006288:	f040 826f 	bne.w	800676a <_dtoa_r+0x98a>
 800628c:	4b68      	ldr	r3, [pc, #416]	; (8006430 <_dtoa_r+0x650>)
 800628e:	2200      	movs	r2, #0
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800629c:	f7fa fc32 	bl	8000b04 <__aeabi_dcmpge>
 80062a0:	9e04      	ldr	r6, [sp, #16]
 80062a2:	4637      	mov	r7, r6
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f040 8245 	bne.w	8006734 <_dtoa_r+0x954>
 80062aa:	9d00      	ldr	r5, [sp, #0]
 80062ac:	2331      	movs	r3, #49	; 0x31
 80062ae:	f805 3b01 	strb.w	r3, [r5], #1
 80062b2:	f10b 0b01 	add.w	fp, fp, #1
 80062b6:	e241      	b.n	800673c <_dtoa_r+0x95c>
 80062b8:	07f2      	lsls	r2, r6, #31
 80062ba:	d505      	bpl.n	80062c8 <_dtoa_r+0x4e8>
 80062bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	3501      	adds	r5, #1
 80062c6:	2301      	movs	r3, #1
 80062c8:	1076      	asrs	r6, r6, #1
 80062ca:	3708      	adds	r7, #8
 80062cc:	e773      	b.n	80061b6 <_dtoa_r+0x3d6>
 80062ce:	2502      	movs	r5, #2
 80062d0:	e775      	b.n	80061be <_dtoa_r+0x3de>
 80062d2:	9e04      	ldr	r6, [sp, #16]
 80062d4:	465f      	mov	r7, fp
 80062d6:	e792      	b.n	80061fe <_dtoa_r+0x41e>
 80062d8:	9900      	ldr	r1, [sp, #0]
 80062da:	4b50      	ldr	r3, [pc, #320]	; (800641c <_dtoa_r+0x63c>)
 80062dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062e0:	4431      	add	r1, r6
 80062e2:	9102      	str	r1, [sp, #8]
 80062e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062e6:	eeb0 9a47 	vmov.f32	s18, s14
 80062ea:	eef0 9a67 	vmov.f32	s19, s15
 80062ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062f6:	2900      	cmp	r1, #0
 80062f8:	d044      	beq.n	8006384 <_dtoa_r+0x5a4>
 80062fa:	494e      	ldr	r1, [pc, #312]	; (8006434 <_dtoa_r+0x654>)
 80062fc:	2000      	movs	r0, #0
 80062fe:	f7fa faa5 	bl	800084c <__aeabi_ddiv>
 8006302:	ec53 2b19 	vmov	r2, r3, d9
 8006306:	f7f9 ffbf 	bl	8000288 <__aeabi_dsub>
 800630a:	9d00      	ldr	r5, [sp, #0]
 800630c:	ec41 0b19 	vmov	d9, r0, r1
 8006310:	4649      	mov	r1, r9
 8006312:	4640      	mov	r0, r8
 8006314:	f7fa fc20 	bl	8000b58 <__aeabi_d2iz>
 8006318:	4606      	mov	r6, r0
 800631a:	f7fa f903 	bl	8000524 <__aeabi_i2d>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4640      	mov	r0, r8
 8006324:	4649      	mov	r1, r9
 8006326:	f7f9 ffaf 	bl	8000288 <__aeabi_dsub>
 800632a:	3630      	adds	r6, #48	; 0x30
 800632c:	f805 6b01 	strb.w	r6, [r5], #1
 8006330:	ec53 2b19 	vmov	r2, r3, d9
 8006334:	4680      	mov	r8, r0
 8006336:	4689      	mov	r9, r1
 8006338:	f7fa fbd0 	bl	8000adc <__aeabi_dcmplt>
 800633c:	2800      	cmp	r0, #0
 800633e:	d164      	bne.n	800640a <_dtoa_r+0x62a>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	4937      	ldr	r1, [pc, #220]	; (8006424 <_dtoa_r+0x644>)
 8006346:	2000      	movs	r0, #0
 8006348:	f7f9 ff9e 	bl	8000288 <__aeabi_dsub>
 800634c:	ec53 2b19 	vmov	r2, r3, d9
 8006350:	f7fa fbc4 	bl	8000adc <__aeabi_dcmplt>
 8006354:	2800      	cmp	r0, #0
 8006356:	f040 80b6 	bne.w	80064c6 <_dtoa_r+0x6e6>
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	429d      	cmp	r5, r3
 800635e:	f43f af7c 	beq.w	800625a <_dtoa_r+0x47a>
 8006362:	4b31      	ldr	r3, [pc, #196]	; (8006428 <_dtoa_r+0x648>)
 8006364:	ec51 0b19 	vmov	r0, r1, d9
 8006368:	2200      	movs	r2, #0
 800636a:	f7fa f945 	bl	80005f8 <__aeabi_dmul>
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <_dtoa_r+0x648>)
 8006370:	ec41 0b19 	vmov	d9, r0, r1
 8006374:	2200      	movs	r2, #0
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7fa f93d 	bl	80005f8 <__aeabi_dmul>
 800637e:	4680      	mov	r8, r0
 8006380:	4689      	mov	r9, r1
 8006382:	e7c5      	b.n	8006310 <_dtoa_r+0x530>
 8006384:	ec51 0b17 	vmov	r0, r1, d7
 8006388:	f7fa f936 	bl	80005f8 <__aeabi_dmul>
 800638c:	9b02      	ldr	r3, [sp, #8]
 800638e:	9d00      	ldr	r5, [sp, #0]
 8006390:	930f      	str	r3, [sp, #60]	; 0x3c
 8006392:	ec41 0b19 	vmov	d9, r0, r1
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	f7fa fbdd 	bl	8000b58 <__aeabi_d2iz>
 800639e:	4606      	mov	r6, r0
 80063a0:	f7fa f8c0 	bl	8000524 <__aeabi_i2d>
 80063a4:	3630      	adds	r6, #48	; 0x30
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7f9 ff6b 	bl	8000288 <__aeabi_dsub>
 80063b2:	f805 6b01 	strb.w	r6, [r5], #1
 80063b6:	9b02      	ldr	r3, [sp, #8]
 80063b8:	429d      	cmp	r5, r3
 80063ba:	4680      	mov	r8, r0
 80063bc:	4689      	mov	r9, r1
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	d124      	bne.n	800640e <_dtoa_r+0x62e>
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <_dtoa_r+0x654>)
 80063c6:	ec51 0b19 	vmov	r0, r1, d9
 80063ca:	f7f9 ff5f 	bl	800028c <__adddf3>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7fa fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d173      	bne.n	80064c6 <_dtoa_r+0x6e6>
 80063de:	ec53 2b19 	vmov	r2, r3, d9
 80063e2:	4914      	ldr	r1, [pc, #80]	; (8006434 <_dtoa_r+0x654>)
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7f9 ff4f 	bl	8000288 <__aeabi_dsub>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7fa fb73 	bl	8000adc <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f43f af2f 	beq.w	800625a <_dtoa_r+0x47a>
 80063fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063fe:	1e6b      	subs	r3, r5, #1
 8006400:	930f      	str	r3, [sp, #60]	; 0x3c
 8006402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006406:	2b30      	cmp	r3, #48	; 0x30
 8006408:	d0f8      	beq.n	80063fc <_dtoa_r+0x61c>
 800640a:	46bb      	mov	fp, r7
 800640c:	e04a      	b.n	80064a4 <_dtoa_r+0x6c4>
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <_dtoa_r+0x648>)
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	e7bd      	b.n	8006396 <_dtoa_r+0x5b6>
 800641a:	bf00      	nop
 800641c:	08007c28 	.word	0x08007c28
 8006420:	08007c00 	.word	0x08007c00
 8006424:	3ff00000 	.word	0x3ff00000
 8006428:	40240000 	.word	0x40240000
 800642c:	401c0000 	.word	0x401c0000
 8006430:	40140000 	.word	0x40140000
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800643c:	9d00      	ldr	r5, [sp, #0]
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7fa fa01 	bl	800084c <__aeabi_ddiv>
 800644a:	f7fa fb85 	bl	8000b58 <__aeabi_d2iz>
 800644e:	9001      	str	r0, [sp, #4]
 8006450:	f7fa f868 	bl	8000524 <__aeabi_i2d>
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7f9 ff10 	bl	8000288 <__aeabi_dsub>
 8006468:	9e01      	ldr	r6, [sp, #4]
 800646a:	9f04      	ldr	r7, [sp, #16]
 800646c:	3630      	adds	r6, #48	; 0x30
 800646e:	f805 6b01 	strb.w	r6, [r5], #1
 8006472:	9e00      	ldr	r6, [sp, #0]
 8006474:	1bae      	subs	r6, r5, r6
 8006476:	42b7      	cmp	r7, r6
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	d134      	bne.n	80064e8 <_dtoa_r+0x708>
 800647e:	f7f9 ff05 	bl	800028c <__adddf3>
 8006482:	4642      	mov	r2, r8
 8006484:	464b      	mov	r3, r9
 8006486:	4606      	mov	r6, r0
 8006488:	460f      	mov	r7, r1
 800648a:	f7fa fb45 	bl	8000b18 <__aeabi_dcmpgt>
 800648e:	b9c8      	cbnz	r0, 80064c4 <_dtoa_r+0x6e4>
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	4630      	mov	r0, r6
 8006496:	4639      	mov	r1, r7
 8006498:	f7fa fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800649c:	b110      	cbz	r0, 80064a4 <_dtoa_r+0x6c4>
 800649e:	9b01      	ldr	r3, [sp, #4]
 80064a0:	07db      	lsls	r3, r3, #31
 80064a2:	d40f      	bmi.n	80064c4 <_dtoa_r+0x6e4>
 80064a4:	4651      	mov	r1, sl
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fbcc 	bl	8006c44 <_Bfree>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064b0:	702b      	strb	r3, [r5, #0]
 80064b2:	f10b 0301 	add.w	r3, fp, #1
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f43f ace2 	beq.w	8005e84 <_dtoa_r+0xa4>
 80064c0:	601d      	str	r5, [r3, #0]
 80064c2:	e4df      	b.n	8005e84 <_dtoa_r+0xa4>
 80064c4:	465f      	mov	r7, fp
 80064c6:	462b      	mov	r3, r5
 80064c8:	461d      	mov	r5, r3
 80064ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ce:	2a39      	cmp	r2, #57	; 0x39
 80064d0:	d106      	bne.n	80064e0 <_dtoa_r+0x700>
 80064d2:	9a00      	ldr	r2, [sp, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d1f7      	bne.n	80064c8 <_dtoa_r+0x6e8>
 80064d8:	9900      	ldr	r1, [sp, #0]
 80064da:	2230      	movs	r2, #48	; 0x30
 80064dc:	3701      	adds	r7, #1
 80064de:	700a      	strb	r2, [r1, #0]
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	3201      	adds	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e790      	b.n	800640a <_dtoa_r+0x62a>
 80064e8:	4ba3      	ldr	r3, [pc, #652]	; (8006778 <_dtoa_r+0x998>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7fa f884 	bl	80005f8 <__aeabi_dmul>
 80064f0:	2200      	movs	r2, #0
 80064f2:	2300      	movs	r3, #0
 80064f4:	4606      	mov	r6, r0
 80064f6:	460f      	mov	r7, r1
 80064f8:	f7fa fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d09e      	beq.n	800643e <_dtoa_r+0x65e>
 8006500:	e7d0      	b.n	80064a4 <_dtoa_r+0x6c4>
 8006502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006504:	2a00      	cmp	r2, #0
 8006506:	f000 80ca 	beq.w	800669e <_dtoa_r+0x8be>
 800650a:	9a07      	ldr	r2, [sp, #28]
 800650c:	2a01      	cmp	r2, #1
 800650e:	f300 80ad 	bgt.w	800666c <_dtoa_r+0x88c>
 8006512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006514:	2a00      	cmp	r2, #0
 8006516:	f000 80a5 	beq.w	8006664 <_dtoa_r+0x884>
 800651a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800651e:	9e08      	ldr	r6, [sp, #32]
 8006520:	9d05      	ldr	r5, [sp, #20]
 8006522:	9a05      	ldr	r2, [sp, #20]
 8006524:	441a      	add	r2, r3
 8006526:	9205      	str	r2, [sp, #20]
 8006528:	9a06      	ldr	r2, [sp, #24]
 800652a:	2101      	movs	r1, #1
 800652c:	441a      	add	r2, r3
 800652e:	4620      	mov	r0, r4
 8006530:	9206      	str	r2, [sp, #24]
 8006532:	f000 fc3d 	bl	8006db0 <__i2b>
 8006536:	4607      	mov	r7, r0
 8006538:	b165      	cbz	r5, 8006554 <_dtoa_r+0x774>
 800653a:	9b06      	ldr	r3, [sp, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dd09      	ble.n	8006554 <_dtoa_r+0x774>
 8006540:	42ab      	cmp	r3, r5
 8006542:	9a05      	ldr	r2, [sp, #20]
 8006544:	bfa8      	it	ge
 8006546:	462b      	movge	r3, r5
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	9205      	str	r2, [sp, #20]
 800654c:	9a06      	ldr	r2, [sp, #24]
 800654e:	1aed      	subs	r5, r5, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	9b08      	ldr	r3, [sp, #32]
 8006556:	b1f3      	cbz	r3, 8006596 <_dtoa_r+0x7b6>
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a3 	beq.w	80066a6 <_dtoa_r+0x8c6>
 8006560:	2e00      	cmp	r6, #0
 8006562:	dd10      	ble.n	8006586 <_dtoa_r+0x7a6>
 8006564:	4639      	mov	r1, r7
 8006566:	4632      	mov	r2, r6
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fce1 	bl	8006f30 <__pow5mult>
 800656e:	4652      	mov	r2, sl
 8006570:	4601      	mov	r1, r0
 8006572:	4607      	mov	r7, r0
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fc31 	bl	8006ddc <__multiply>
 800657a:	4651      	mov	r1, sl
 800657c:	4680      	mov	r8, r0
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fb60 	bl	8006c44 <_Bfree>
 8006584:	46c2      	mov	sl, r8
 8006586:	9b08      	ldr	r3, [sp, #32]
 8006588:	1b9a      	subs	r2, r3, r6
 800658a:	d004      	beq.n	8006596 <_dtoa_r+0x7b6>
 800658c:	4651      	mov	r1, sl
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fcce 	bl	8006f30 <__pow5mult>
 8006594:	4682      	mov	sl, r0
 8006596:	2101      	movs	r1, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fc09 	bl	8006db0 <__i2b>
 800659e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	4606      	mov	r6, r0
 80065a4:	f340 8081 	ble.w	80066aa <_dtoa_r+0x8ca>
 80065a8:	461a      	mov	r2, r3
 80065aa:	4601      	mov	r1, r0
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fcbf 	bl	8006f30 <__pow5mult>
 80065b2:	9b07      	ldr	r3, [sp, #28]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	4606      	mov	r6, r0
 80065b8:	dd7a      	ble.n	80066b0 <_dtoa_r+0x8d0>
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	6933      	ldr	r3, [r6, #16]
 80065c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065c4:	6918      	ldr	r0, [r3, #16]
 80065c6:	f000 fba5 	bl	8006d14 <__hi0bits>
 80065ca:	f1c0 0020 	rsb	r0, r0, #32
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	4418      	add	r0, r3
 80065d2:	f010 001f 	ands.w	r0, r0, #31
 80065d6:	f000 8094 	beq.w	8006702 <_dtoa_r+0x922>
 80065da:	f1c0 0320 	rsb	r3, r0, #32
 80065de:	2b04      	cmp	r3, #4
 80065e0:	f340 8085 	ble.w	80066ee <_dtoa_r+0x90e>
 80065e4:	9b05      	ldr	r3, [sp, #20]
 80065e6:	f1c0 001c 	rsb	r0, r0, #28
 80065ea:	4403      	add	r3, r0
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	4403      	add	r3, r0
 80065f2:	4405      	add	r5, r0
 80065f4:	9306      	str	r3, [sp, #24]
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dd05      	ble.n	8006608 <_dtoa_r+0x828>
 80065fc:	4651      	mov	r1, sl
 80065fe:	461a      	mov	r2, r3
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fcef 	bl	8006fe4 <__lshift>
 8006606:	4682      	mov	sl, r0
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dd05      	ble.n	800661a <_dtoa_r+0x83a>
 800660e:	4631      	mov	r1, r6
 8006610:	461a      	mov	r2, r3
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fce6 	bl	8006fe4 <__lshift>
 8006618:	4606      	mov	r6, r0
 800661a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800661c:	2b00      	cmp	r3, #0
 800661e:	d072      	beq.n	8006706 <_dtoa_r+0x926>
 8006620:	4631      	mov	r1, r6
 8006622:	4650      	mov	r0, sl
 8006624:	f000 fd4a 	bl	80070bc <__mcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	da6c      	bge.n	8006706 <_dtoa_r+0x926>
 800662c:	2300      	movs	r3, #0
 800662e:	4651      	mov	r1, sl
 8006630:	220a      	movs	r2, #10
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fb28 	bl	8006c88 <__multadd>
 8006638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800663e:	4682      	mov	sl, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 81b0 	beq.w	80069a6 <_dtoa_r+0xbc6>
 8006646:	2300      	movs	r3, #0
 8006648:	4639      	mov	r1, r7
 800664a:	220a      	movs	r2, #10
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fb1b 	bl	8006c88 <__multadd>
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	4607      	mov	r7, r0
 8006658:	f300 8096 	bgt.w	8006788 <_dtoa_r+0x9a8>
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	2b02      	cmp	r3, #2
 8006660:	dc59      	bgt.n	8006716 <_dtoa_r+0x936>
 8006662:	e091      	b.n	8006788 <_dtoa_r+0x9a8>
 8006664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800666a:	e758      	b.n	800651e <_dtoa_r+0x73e>
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	1e5e      	subs	r6, r3, #1
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	42b3      	cmp	r3, r6
 8006674:	bfbf      	itttt	lt
 8006676:	9b08      	ldrlt	r3, [sp, #32]
 8006678:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800667a:	9608      	strlt	r6, [sp, #32]
 800667c:	1af3      	sublt	r3, r6, r3
 800667e:	bfb4      	ite	lt
 8006680:	18d2      	addlt	r2, r2, r3
 8006682:	1b9e      	subge	r6, r3, r6
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	bfbc      	itt	lt
 8006688:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800668a:	2600      	movlt	r6, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	bfb7      	itett	lt
 8006690:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006694:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006698:	1a9d      	sublt	r5, r3, r2
 800669a:	2300      	movlt	r3, #0
 800669c:	e741      	b.n	8006522 <_dtoa_r+0x742>
 800669e:	9e08      	ldr	r6, [sp, #32]
 80066a0:	9d05      	ldr	r5, [sp, #20]
 80066a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066a4:	e748      	b.n	8006538 <_dtoa_r+0x758>
 80066a6:	9a08      	ldr	r2, [sp, #32]
 80066a8:	e770      	b.n	800658c <_dtoa_r+0x7ac>
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	dc19      	bgt.n	80066e4 <_dtoa_r+0x904>
 80066b0:	9b02      	ldr	r3, [sp, #8]
 80066b2:	b9bb      	cbnz	r3, 80066e4 <_dtoa_r+0x904>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ba:	b99b      	cbnz	r3, 80066e4 <_dtoa_r+0x904>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	051b      	lsls	r3, r3, #20
 80066c6:	b183      	cbz	r3, 80066ea <_dtoa_r+0x90a>
 80066c8:	9b05      	ldr	r3, [sp, #20]
 80066ca:	3301      	adds	r3, #1
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	9306      	str	r3, [sp, #24]
 80066d4:	f04f 0801 	mov.w	r8, #1
 80066d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f af6f 	bne.w	80065be <_dtoa_r+0x7de>
 80066e0:	2001      	movs	r0, #1
 80066e2:	e774      	b.n	80065ce <_dtoa_r+0x7ee>
 80066e4:	f04f 0800 	mov.w	r8, #0
 80066e8:	e7f6      	b.n	80066d8 <_dtoa_r+0x8f8>
 80066ea:	4698      	mov	r8, r3
 80066ec:	e7f4      	b.n	80066d8 <_dtoa_r+0x8f8>
 80066ee:	d082      	beq.n	80065f6 <_dtoa_r+0x816>
 80066f0:	9a05      	ldr	r2, [sp, #20]
 80066f2:	331c      	adds	r3, #28
 80066f4:	441a      	add	r2, r3
 80066f6:	9205      	str	r2, [sp, #20]
 80066f8:	9a06      	ldr	r2, [sp, #24]
 80066fa:	441a      	add	r2, r3
 80066fc:	441d      	add	r5, r3
 80066fe:	9206      	str	r2, [sp, #24]
 8006700:	e779      	b.n	80065f6 <_dtoa_r+0x816>
 8006702:	4603      	mov	r3, r0
 8006704:	e7f4      	b.n	80066f0 <_dtoa_r+0x910>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc37      	bgt.n	800677c <_dtoa_r+0x99c>
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	2b02      	cmp	r3, #2
 8006710:	dd34      	ble.n	800677c <_dtoa_r+0x99c>
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	b963      	cbnz	r3, 8006734 <_dtoa_r+0x954>
 800671a:	4631      	mov	r1, r6
 800671c:	2205      	movs	r2, #5
 800671e:	4620      	mov	r0, r4
 8006720:	f000 fab2 	bl	8006c88 <__multadd>
 8006724:	4601      	mov	r1, r0
 8006726:	4606      	mov	r6, r0
 8006728:	4650      	mov	r0, sl
 800672a:	f000 fcc7 	bl	80070bc <__mcmp>
 800672e:	2800      	cmp	r0, #0
 8006730:	f73f adbb 	bgt.w	80062aa <_dtoa_r+0x4ca>
 8006734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006736:	9d00      	ldr	r5, [sp, #0]
 8006738:	ea6f 0b03 	mvn.w	fp, r3
 800673c:	f04f 0800 	mov.w	r8, #0
 8006740:	4631      	mov	r1, r6
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fa7e 	bl	8006c44 <_Bfree>
 8006748:	2f00      	cmp	r7, #0
 800674a:	f43f aeab 	beq.w	80064a4 <_dtoa_r+0x6c4>
 800674e:	f1b8 0f00 	cmp.w	r8, #0
 8006752:	d005      	beq.n	8006760 <_dtoa_r+0x980>
 8006754:	45b8      	cmp	r8, r7
 8006756:	d003      	beq.n	8006760 <_dtoa_r+0x980>
 8006758:	4641      	mov	r1, r8
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fa72 	bl	8006c44 <_Bfree>
 8006760:	4639      	mov	r1, r7
 8006762:	4620      	mov	r0, r4
 8006764:	f000 fa6e 	bl	8006c44 <_Bfree>
 8006768:	e69c      	b.n	80064a4 <_dtoa_r+0x6c4>
 800676a:	2600      	movs	r6, #0
 800676c:	4637      	mov	r7, r6
 800676e:	e7e1      	b.n	8006734 <_dtoa_r+0x954>
 8006770:	46bb      	mov	fp, r7
 8006772:	4637      	mov	r7, r6
 8006774:	e599      	b.n	80062aa <_dtoa_r+0x4ca>
 8006776:	bf00      	nop
 8006778:	40240000 	.word	0x40240000
 800677c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80c8 	beq.w	8006914 <_dtoa_r+0xb34>
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	2d00      	cmp	r5, #0
 800678a:	dd05      	ble.n	8006798 <_dtoa_r+0x9b8>
 800678c:	4639      	mov	r1, r7
 800678e:	462a      	mov	r2, r5
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fc27 	bl	8006fe4 <__lshift>
 8006796:	4607      	mov	r7, r0
 8006798:	f1b8 0f00 	cmp.w	r8, #0
 800679c:	d05b      	beq.n	8006856 <_dtoa_r+0xa76>
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fa0f 	bl	8006bc4 <_Balloc>
 80067a6:	4605      	mov	r5, r0
 80067a8:	b928      	cbnz	r0, 80067b6 <_dtoa_r+0x9d6>
 80067aa:	4b83      	ldr	r3, [pc, #524]	; (80069b8 <_dtoa_r+0xbd8>)
 80067ac:	4602      	mov	r2, r0
 80067ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80067b2:	f7ff bb2e 	b.w	8005e12 <_dtoa_r+0x32>
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	3202      	adds	r2, #2
 80067ba:	0092      	lsls	r2, r2, #2
 80067bc:	f107 010c 	add.w	r1, r7, #12
 80067c0:	300c      	adds	r0, #12
 80067c2:	f001 f813 	bl	80077ec <memcpy>
 80067c6:	2201      	movs	r2, #1
 80067c8:	4629      	mov	r1, r5
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fc0a 	bl	8006fe4 <__lshift>
 80067d0:	9b00      	ldr	r3, [sp, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067da:	4413      	add	r3, r2
 80067dc:	9308      	str	r3, [sp, #32]
 80067de:	9b02      	ldr	r3, [sp, #8]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	46b8      	mov	r8, r7
 80067e6:	9306      	str	r3, [sp, #24]
 80067e8:	4607      	mov	r7, r0
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	4631      	mov	r1, r6
 80067ee:	3b01      	subs	r3, #1
 80067f0:	4650      	mov	r0, sl
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	f7ff fa6b 	bl	8005cce <quorem>
 80067f8:	4641      	mov	r1, r8
 80067fa:	9002      	str	r0, [sp, #8]
 80067fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006800:	4650      	mov	r0, sl
 8006802:	f000 fc5b 	bl	80070bc <__mcmp>
 8006806:	463a      	mov	r2, r7
 8006808:	9005      	str	r0, [sp, #20]
 800680a:	4631      	mov	r1, r6
 800680c:	4620      	mov	r0, r4
 800680e:	f000 fc71 	bl	80070f4 <__mdiff>
 8006812:	68c2      	ldr	r2, [r0, #12]
 8006814:	4605      	mov	r5, r0
 8006816:	bb02      	cbnz	r2, 800685a <_dtoa_r+0xa7a>
 8006818:	4601      	mov	r1, r0
 800681a:	4650      	mov	r0, sl
 800681c:	f000 fc4e 	bl	80070bc <__mcmp>
 8006820:	4602      	mov	r2, r0
 8006822:	4629      	mov	r1, r5
 8006824:	4620      	mov	r0, r4
 8006826:	9209      	str	r2, [sp, #36]	; 0x24
 8006828:	f000 fa0c 	bl	8006c44 <_Bfree>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006830:	9d04      	ldr	r5, [sp, #16]
 8006832:	ea43 0102 	orr.w	r1, r3, r2
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	4319      	orrs	r1, r3
 800683a:	d110      	bne.n	800685e <_dtoa_r+0xa7e>
 800683c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006840:	d029      	beq.n	8006896 <_dtoa_r+0xab6>
 8006842:	9b05      	ldr	r3, [sp, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd02      	ble.n	800684e <_dtoa_r+0xa6e>
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	f883 9000 	strb.w	r9, [r3]
 8006854:	e774      	b.n	8006740 <_dtoa_r+0x960>
 8006856:	4638      	mov	r0, r7
 8006858:	e7ba      	b.n	80067d0 <_dtoa_r+0x9f0>
 800685a:	2201      	movs	r2, #1
 800685c:	e7e1      	b.n	8006822 <_dtoa_r+0xa42>
 800685e:	9b05      	ldr	r3, [sp, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	db04      	blt.n	800686e <_dtoa_r+0xa8e>
 8006864:	9907      	ldr	r1, [sp, #28]
 8006866:	430b      	orrs	r3, r1
 8006868:	9906      	ldr	r1, [sp, #24]
 800686a:	430b      	orrs	r3, r1
 800686c:	d120      	bne.n	80068b0 <_dtoa_r+0xad0>
 800686e:	2a00      	cmp	r2, #0
 8006870:	dded      	ble.n	800684e <_dtoa_r+0xa6e>
 8006872:	4651      	mov	r1, sl
 8006874:	2201      	movs	r2, #1
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fbb4 	bl	8006fe4 <__lshift>
 800687c:	4631      	mov	r1, r6
 800687e:	4682      	mov	sl, r0
 8006880:	f000 fc1c 	bl	80070bc <__mcmp>
 8006884:	2800      	cmp	r0, #0
 8006886:	dc03      	bgt.n	8006890 <_dtoa_r+0xab0>
 8006888:	d1e1      	bne.n	800684e <_dtoa_r+0xa6e>
 800688a:	f019 0f01 	tst.w	r9, #1
 800688e:	d0de      	beq.n	800684e <_dtoa_r+0xa6e>
 8006890:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006894:	d1d8      	bne.n	8006848 <_dtoa_r+0xa68>
 8006896:	9a01      	ldr	r2, [sp, #4]
 8006898:	2339      	movs	r3, #57	; 0x39
 800689a:	7013      	strb	r3, [r2, #0]
 800689c:	462b      	mov	r3, r5
 800689e:	461d      	mov	r5, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068a6:	2a39      	cmp	r2, #57	; 0x39
 80068a8:	d06c      	beq.n	8006984 <_dtoa_r+0xba4>
 80068aa:	3201      	adds	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e747      	b.n	8006740 <_dtoa_r+0x960>
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	dd07      	ble.n	80068c4 <_dtoa_r+0xae4>
 80068b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068b8:	d0ed      	beq.n	8006896 <_dtoa_r+0xab6>
 80068ba:	9a01      	ldr	r2, [sp, #4]
 80068bc:	f109 0301 	add.w	r3, r9, #1
 80068c0:	7013      	strb	r3, [r2, #0]
 80068c2:	e73d      	b.n	8006740 <_dtoa_r+0x960>
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	9a08      	ldr	r2, [sp, #32]
 80068c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d043      	beq.n	8006958 <_dtoa_r+0xb78>
 80068d0:	4651      	mov	r1, sl
 80068d2:	2300      	movs	r3, #0
 80068d4:	220a      	movs	r2, #10
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f9d6 	bl	8006c88 <__multadd>
 80068dc:	45b8      	cmp	r8, r7
 80068de:	4682      	mov	sl, r0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	f04f 020a 	mov.w	r2, #10
 80068e8:	4641      	mov	r1, r8
 80068ea:	4620      	mov	r0, r4
 80068ec:	d107      	bne.n	80068fe <_dtoa_r+0xb1e>
 80068ee:	f000 f9cb 	bl	8006c88 <__multadd>
 80068f2:	4680      	mov	r8, r0
 80068f4:	4607      	mov	r7, r0
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	3301      	adds	r3, #1
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	e775      	b.n	80067ea <_dtoa_r+0xa0a>
 80068fe:	f000 f9c3 	bl	8006c88 <__multadd>
 8006902:	4639      	mov	r1, r7
 8006904:	4680      	mov	r8, r0
 8006906:	2300      	movs	r3, #0
 8006908:	220a      	movs	r2, #10
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f9bc 	bl	8006c88 <__multadd>
 8006910:	4607      	mov	r7, r0
 8006912:	e7f0      	b.n	80068f6 <_dtoa_r+0xb16>
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	9d00      	ldr	r5, [sp, #0]
 800691a:	4631      	mov	r1, r6
 800691c:	4650      	mov	r0, sl
 800691e:	f7ff f9d6 	bl	8005cce <quorem>
 8006922:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	f805 9b01 	strb.w	r9, [r5], #1
 800692c:	1aea      	subs	r2, r5, r3
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	4293      	cmp	r3, r2
 8006932:	dd07      	ble.n	8006944 <_dtoa_r+0xb64>
 8006934:	4651      	mov	r1, sl
 8006936:	2300      	movs	r3, #0
 8006938:	220a      	movs	r2, #10
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f9a4 	bl	8006c88 <__multadd>
 8006940:	4682      	mov	sl, r0
 8006942:	e7ea      	b.n	800691a <_dtoa_r+0xb3a>
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfc8      	it	gt
 800694a:	461d      	movgt	r5, r3
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	bfd8      	it	le
 8006950:	2501      	movle	r5, #1
 8006952:	441d      	add	r5, r3
 8006954:	f04f 0800 	mov.w	r8, #0
 8006958:	4651      	mov	r1, sl
 800695a:	2201      	movs	r2, #1
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fb41 	bl	8006fe4 <__lshift>
 8006962:	4631      	mov	r1, r6
 8006964:	4682      	mov	sl, r0
 8006966:	f000 fba9 	bl	80070bc <__mcmp>
 800696a:	2800      	cmp	r0, #0
 800696c:	dc96      	bgt.n	800689c <_dtoa_r+0xabc>
 800696e:	d102      	bne.n	8006976 <_dtoa_r+0xb96>
 8006970:	f019 0f01 	tst.w	r9, #1
 8006974:	d192      	bne.n	800689c <_dtoa_r+0xabc>
 8006976:	462b      	mov	r3, r5
 8006978:	461d      	mov	r5, r3
 800697a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800697e:	2a30      	cmp	r2, #48	; 0x30
 8006980:	d0fa      	beq.n	8006978 <_dtoa_r+0xb98>
 8006982:	e6dd      	b.n	8006740 <_dtoa_r+0x960>
 8006984:	9a00      	ldr	r2, [sp, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d189      	bne.n	800689e <_dtoa_r+0xabe>
 800698a:	f10b 0b01 	add.w	fp, fp, #1
 800698e:	2331      	movs	r3, #49	; 0x31
 8006990:	e796      	b.n	80068c0 <_dtoa_r+0xae0>
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <_dtoa_r+0xbdc>)
 8006994:	f7ff ba99 	b.w	8005eca <_dtoa_r+0xea>
 8006998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800699a:	2b00      	cmp	r3, #0
 800699c:	f47f aa6d 	bne.w	8005e7a <_dtoa_r+0x9a>
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <_dtoa_r+0xbe0>)
 80069a2:	f7ff ba92 	b.w	8005eca <_dtoa_r+0xea>
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dcb5      	bgt.n	8006918 <_dtoa_r+0xb38>
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	f73f aeb1 	bgt.w	8006716 <_dtoa_r+0x936>
 80069b4:	e7b0      	b.n	8006918 <_dtoa_r+0xb38>
 80069b6:	bf00      	nop
 80069b8:	08007b90 	.word	0x08007b90
 80069bc:	08007af0 	.word	0x08007af0
 80069c0:	08007b14 	.word	0x08007b14

080069c4 <_free_r>:
 80069c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d044      	beq.n	8006a54 <_free_r+0x90>
 80069ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ce:	9001      	str	r0, [sp, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f1a1 0404 	sub.w	r4, r1, #4
 80069d6:	bfb8      	it	lt
 80069d8:	18e4      	addlt	r4, r4, r3
 80069da:	f000 f8e7 	bl	8006bac <__malloc_lock>
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <_free_r+0x94>)
 80069e0:	9801      	ldr	r0, [sp, #4]
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	b933      	cbnz	r3, 80069f4 <_free_r+0x30>
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6014      	str	r4, [r2, #0]
 80069ea:	b003      	add	sp, #12
 80069ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f0:	f000 b8e2 	b.w	8006bb8 <__malloc_unlock>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d908      	bls.n	8006a0a <_free_r+0x46>
 80069f8:	6825      	ldr	r5, [r4, #0]
 80069fa:	1961      	adds	r1, r4, r5
 80069fc:	428b      	cmp	r3, r1
 80069fe:	bf01      	itttt	eq
 8006a00:	6819      	ldreq	r1, [r3, #0]
 8006a02:	685b      	ldreq	r3, [r3, #4]
 8006a04:	1949      	addeq	r1, r1, r5
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	e7ed      	b.n	80069e6 <_free_r+0x22>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x50>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x46>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1855      	adds	r5, r2, r1
 8006a18:	42a5      	cmp	r5, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x70>
 8006a1c:	6824      	ldr	r4, [r4, #0]
 8006a1e:	4421      	add	r1, r4
 8006a20:	1854      	adds	r4, r2, r1
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1e0      	bne.n	80069ea <_free_r+0x26>
 8006a28:	681c      	ldr	r4, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	6053      	str	r3, [r2, #4]
 8006a2e:	440c      	add	r4, r1
 8006a30:	6014      	str	r4, [r2, #0]
 8006a32:	e7da      	b.n	80069ea <_free_r+0x26>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x78>
 8006a36:	230c      	movs	r3, #12
 8006a38:	6003      	str	r3, [r0, #0]
 8006a3a:	e7d6      	b.n	80069ea <_free_r+0x26>
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	1961      	adds	r1, r4, r5
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1949      	addeq	r1, r1, r5
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6054      	str	r4, [r2, #4]
 8006a52:	e7ca      	b.n	80069ea <_free_r+0x26>
 8006a54:	b003      	add	sp, #12
 8006a56:	bd30      	pop	{r4, r5, pc}
 8006a58:	200004b0 	.word	0x200004b0

08006a5c <malloc>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	; (8006a68 <malloc+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f000 b823 	b.w	8006aac <_malloc_r>
 8006a66:	bf00      	nop
 8006a68:	20000080 	.word	0x20000080

08006a6c <sbrk_aligned>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4e0e      	ldr	r6, [pc, #56]	; (8006aa8 <sbrk_aligned+0x3c>)
 8006a70:	460c      	mov	r4, r1
 8006a72:	6831      	ldr	r1, [r6, #0]
 8006a74:	4605      	mov	r5, r0
 8006a76:	b911      	cbnz	r1, 8006a7e <sbrk_aligned+0x12>
 8006a78:	f000 fea8 	bl	80077cc <_sbrk_r>
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fea3 	bl	80077cc <_sbrk_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d00a      	beq.n	8006aa0 <sbrk_aligned+0x34>
 8006a8a:	1cc4      	adds	r4, r0, #3
 8006a8c:	f024 0403 	bic.w	r4, r4, #3
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d007      	beq.n	8006aa4 <sbrk_aligned+0x38>
 8006a94:	1a21      	subs	r1, r4, r0
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 fe98 	bl	80077cc <_sbrk_r>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d101      	bne.n	8006aa4 <sbrk_aligned+0x38>
 8006aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	200004b4 	.word	0x200004b4

08006aac <_malloc_r>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	1ccd      	adds	r5, r1, #3
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	db01      	blt.n	8006ac8 <_malloc_r+0x1c>
 8006ac4:	42a9      	cmp	r1, r5
 8006ac6:	d905      	bls.n	8006ad4 <_malloc_r+0x28>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	2600      	movs	r6, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ba8 <_malloc_r+0xfc>
 8006ad8:	f000 f868 	bl	8006bac <__malloc_lock>
 8006adc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae0:	461c      	mov	r4, r3
 8006ae2:	bb5c      	cbnz	r4, 8006b3c <_malloc_r+0x90>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7ff ffc0 	bl	8006a6c <sbrk_aligned>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	4604      	mov	r4, r0
 8006af0:	d155      	bne.n	8006b9e <_malloc_r+0xf2>
 8006af2:	f8d8 4000 	ldr.w	r4, [r8]
 8006af6:	4626      	mov	r6, r4
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	d145      	bne.n	8006b88 <_malloc_r+0xdc>
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	d048      	beq.n	8006b92 <_malloc_r+0xe6>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	4631      	mov	r1, r6
 8006b04:	4638      	mov	r0, r7
 8006b06:	eb04 0903 	add.w	r9, r4, r3
 8006b0a:	f000 fe5f 	bl	80077cc <_sbrk_r>
 8006b0e:	4581      	cmp	r9, r0
 8006b10:	d13f      	bne.n	8006b92 <_malloc_r+0xe6>
 8006b12:	6821      	ldr	r1, [r4, #0]
 8006b14:	1a6d      	subs	r5, r5, r1
 8006b16:	4629      	mov	r1, r5
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff ffa7 	bl	8006a6c <sbrk_aligned>
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d037      	beq.n	8006b92 <_malloc_r+0xe6>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	442b      	add	r3, r5
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d038      	beq.n	8006ba2 <_malloc_r+0xf6>
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	42a2      	cmp	r2, r4
 8006b34:	d12b      	bne.n	8006b8e <_malloc_r+0xe2>
 8006b36:	2200      	movs	r2, #0
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	e00f      	b.n	8006b5c <_malloc_r+0xb0>
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	1b52      	subs	r2, r2, r5
 8006b40:	d41f      	bmi.n	8006b82 <_malloc_r+0xd6>
 8006b42:	2a0b      	cmp	r2, #11
 8006b44:	d917      	bls.n	8006b76 <_malloc_r+0xca>
 8006b46:	1961      	adds	r1, r4, r5
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	6025      	str	r5, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	6059      	strne	r1, [r3, #4]
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	bf08      	it	eq
 8006b54:	f8c8 1000 	streq.w	r1, [r8]
 8006b58:	5162      	str	r2, [r4, r5]
 8006b5a:	604b      	str	r3, [r1, #4]
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f104 060b 	add.w	r6, r4, #11
 8006b62:	f000 f829 	bl	8006bb8 <__malloc_unlock>
 8006b66:	f026 0607 	bic.w	r6, r6, #7
 8006b6a:	1d23      	adds	r3, r4, #4
 8006b6c:	1af2      	subs	r2, r6, r3
 8006b6e:	d0ae      	beq.n	8006ace <_malloc_r+0x22>
 8006b70:	1b9b      	subs	r3, r3, r6
 8006b72:	50a3      	str	r3, [r4, r2]
 8006b74:	e7ab      	b.n	8006ace <_malloc_r+0x22>
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6862      	ldr	r2, [r4, #4]
 8006b7a:	d1dd      	bne.n	8006b38 <_malloc_r+0x8c>
 8006b7c:	f8c8 2000 	str.w	r2, [r8]
 8006b80:	e7ec      	b.n	8006b5c <_malloc_r+0xb0>
 8006b82:	4623      	mov	r3, r4
 8006b84:	6864      	ldr	r4, [r4, #4]
 8006b86:	e7ac      	b.n	8006ae2 <_malloc_r+0x36>
 8006b88:	4634      	mov	r4, r6
 8006b8a:	6876      	ldr	r6, [r6, #4]
 8006b8c:	e7b4      	b.n	8006af8 <_malloc_r+0x4c>
 8006b8e:	4613      	mov	r3, r2
 8006b90:	e7cc      	b.n	8006b2c <_malloc_r+0x80>
 8006b92:	230c      	movs	r3, #12
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4638      	mov	r0, r7
 8006b98:	f000 f80e 	bl	8006bb8 <__malloc_unlock>
 8006b9c:	e797      	b.n	8006ace <_malloc_r+0x22>
 8006b9e:	6025      	str	r5, [r4, #0]
 8006ba0:	e7dc      	b.n	8006b5c <_malloc_r+0xb0>
 8006ba2:	605b      	str	r3, [r3, #4]
 8006ba4:	deff      	udf	#255	; 0xff
 8006ba6:	bf00      	nop
 8006ba8:	200004b0 	.word	0x200004b0

08006bac <__malloc_lock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__malloc_lock+0x8>)
 8006bae:	f7ff b88c 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	200004ac 	.word	0x200004ac

08006bb8 <__malloc_unlock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__malloc_unlock+0x8>)
 8006bba:	f7ff b887 	b.w	8005ccc <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	200004ac 	.word	0x200004ac

08006bc4 <_Balloc>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	69c6      	ldr	r6, [r0, #28]
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	b976      	cbnz	r6, 8006bec <_Balloc+0x28>
 8006bce:	2010      	movs	r0, #16
 8006bd0:	f7ff ff44 	bl	8006a5c <malloc>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	61e0      	str	r0, [r4, #28]
 8006bd8:	b920      	cbnz	r0, 8006be4 <_Balloc+0x20>
 8006bda:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <_Balloc+0x78>)
 8006bdc:	4818      	ldr	r0, [pc, #96]	; (8006c40 <_Balloc+0x7c>)
 8006bde:	216b      	movs	r1, #107	; 0x6b
 8006be0:	f000 fe12 	bl	8007808 <__assert_func>
 8006be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be8:	6006      	str	r6, [r0, #0]
 8006bea:	60c6      	str	r6, [r0, #12]
 8006bec:	69e6      	ldr	r6, [r4, #28]
 8006bee:	68f3      	ldr	r3, [r6, #12]
 8006bf0:	b183      	cbz	r3, 8006c14 <_Balloc+0x50>
 8006bf2:	69e3      	ldr	r3, [r4, #28]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bfa:	b9b8      	cbnz	r0, 8006c2c <_Balloc+0x68>
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006c02:	1d72      	adds	r2, r6, #5
 8006c04:	0092      	lsls	r2, r2, #2
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fe1c 	bl	8007844 <_calloc_r>
 8006c0c:	b160      	cbz	r0, 8006c28 <_Balloc+0x64>
 8006c0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c12:	e00e      	b.n	8006c32 <_Balloc+0x6e>
 8006c14:	2221      	movs	r2, #33	; 0x21
 8006c16:	2104      	movs	r1, #4
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fe13 	bl	8007844 <_calloc_r>
 8006c1e:	69e3      	ldr	r3, [r4, #28]
 8006c20:	60f0      	str	r0, [r6, #12]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e4      	bne.n	8006bf2 <_Balloc+0x2e>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	6802      	ldr	r2, [r0, #0]
 8006c2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c32:	2300      	movs	r3, #0
 8006c34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c38:	e7f7      	b.n	8006c2a <_Balloc+0x66>
 8006c3a:	bf00      	nop
 8006c3c:	08007b21 	.word	0x08007b21
 8006c40:	08007ba1 	.word	0x08007ba1

08006c44 <_Bfree>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	69c6      	ldr	r6, [r0, #28]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b976      	cbnz	r6, 8006c6c <_Bfree+0x28>
 8006c4e:	2010      	movs	r0, #16
 8006c50:	f7ff ff04 	bl	8006a5c <malloc>
 8006c54:	4602      	mov	r2, r0
 8006c56:	61e8      	str	r0, [r5, #28]
 8006c58:	b920      	cbnz	r0, 8006c64 <_Bfree+0x20>
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <_Bfree+0x3c>)
 8006c5c:	4809      	ldr	r0, [pc, #36]	; (8006c84 <_Bfree+0x40>)
 8006c5e:	218f      	movs	r1, #143	; 0x8f
 8006c60:	f000 fdd2 	bl	8007808 <__assert_func>
 8006c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c68:	6006      	str	r6, [r0, #0]
 8006c6a:	60c6      	str	r6, [r0, #12]
 8006c6c:	b13c      	cbz	r4, 8006c7e <_Bfree+0x3a>
 8006c6e:	69eb      	ldr	r3, [r5, #28]
 8006c70:	6862      	ldr	r2, [r4, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c78:	6021      	str	r1, [r4, #0]
 8006c7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	08007b21 	.word	0x08007b21
 8006c84:	08007ba1 	.word	0x08007ba1

08006c88 <__multadd>:
 8006c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8c:	690d      	ldr	r5, [r1, #16]
 8006c8e:	4607      	mov	r7, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	461e      	mov	r6, r3
 8006c94:	f101 0c14 	add.w	ip, r1, #20
 8006c98:	2000      	movs	r0, #0
 8006c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c9e:	b299      	uxth	r1, r3
 8006ca0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ca4:	0c1e      	lsrs	r6, r3, #16
 8006ca6:	0c0b      	lsrs	r3, r1, #16
 8006ca8:	fb02 3306 	mla	r3, r2, r6, r3
 8006cac:	b289      	uxth	r1, r1
 8006cae:	3001      	adds	r0, #1
 8006cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cb4:	4285      	cmp	r5, r0
 8006cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8006cba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cbe:	dcec      	bgt.n	8006c9a <__multadd+0x12>
 8006cc0:	b30e      	cbz	r6, 8006d06 <__multadd+0x7e>
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dc19      	bgt.n	8006cfc <__multadd+0x74>
 8006cc8:	6861      	ldr	r1, [r4, #4]
 8006cca:	4638      	mov	r0, r7
 8006ccc:	3101      	adds	r1, #1
 8006cce:	f7ff ff79 	bl	8006bc4 <_Balloc>
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	b928      	cbnz	r0, 8006ce2 <__multadd+0x5a>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <__multadd+0x84>)
 8006cda:	480d      	ldr	r0, [pc, #52]	; (8006d10 <__multadd+0x88>)
 8006cdc:	21ba      	movs	r1, #186	; 0xba
 8006cde:	f000 fd93 	bl	8007808 <__assert_func>
 8006ce2:	6922      	ldr	r2, [r4, #16]
 8006ce4:	3202      	adds	r2, #2
 8006ce6:	f104 010c 	add.w	r1, r4, #12
 8006cea:	0092      	lsls	r2, r2, #2
 8006cec:	300c      	adds	r0, #12
 8006cee:	f000 fd7d 	bl	80077ec <memcpy>
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff ffa5 	bl	8006c44 <_Bfree>
 8006cfa:	4644      	mov	r4, r8
 8006cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d00:	3501      	adds	r5, #1
 8006d02:	615e      	str	r6, [r3, #20]
 8006d04:	6125      	str	r5, [r4, #16]
 8006d06:	4620      	mov	r0, r4
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d0c:	08007b90 	.word	0x08007b90
 8006d10:	08007ba1 	.word	0x08007ba1

08006d14 <__hi0bits>:
 8006d14:	0c03      	lsrs	r3, r0, #16
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	b9d3      	cbnz	r3, 8006d50 <__hi0bits+0x3c>
 8006d1a:	0400      	lsls	r0, r0, #16
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d22:	bf04      	itt	eq
 8006d24:	0200      	lsleq	r0, r0, #8
 8006d26:	3308      	addeq	r3, #8
 8006d28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d2c:	bf04      	itt	eq
 8006d2e:	0100      	lsleq	r0, r0, #4
 8006d30:	3304      	addeq	r3, #4
 8006d32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d36:	bf04      	itt	eq
 8006d38:	0080      	lsleq	r0, r0, #2
 8006d3a:	3302      	addeq	r3, #2
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	db05      	blt.n	8006d4c <__hi0bits+0x38>
 8006d40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d44:	f103 0301 	add.w	r3, r3, #1
 8006d48:	bf08      	it	eq
 8006d4a:	2320      	moveq	r3, #32
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	4770      	bx	lr
 8006d50:	2300      	movs	r3, #0
 8006d52:	e7e4      	b.n	8006d1e <__hi0bits+0xa>

08006d54 <__lo0bits>:
 8006d54:	6803      	ldr	r3, [r0, #0]
 8006d56:	f013 0207 	ands.w	r2, r3, #7
 8006d5a:	d00c      	beq.n	8006d76 <__lo0bits+0x22>
 8006d5c:	07d9      	lsls	r1, r3, #31
 8006d5e:	d422      	bmi.n	8006da6 <__lo0bits+0x52>
 8006d60:	079a      	lsls	r2, r3, #30
 8006d62:	bf49      	itett	mi
 8006d64:	085b      	lsrmi	r3, r3, #1
 8006d66:	089b      	lsrpl	r3, r3, #2
 8006d68:	6003      	strmi	r3, [r0, #0]
 8006d6a:	2201      	movmi	r2, #1
 8006d6c:	bf5c      	itt	pl
 8006d6e:	6003      	strpl	r3, [r0, #0]
 8006d70:	2202      	movpl	r2, #2
 8006d72:	4610      	mov	r0, r2
 8006d74:	4770      	bx	lr
 8006d76:	b299      	uxth	r1, r3
 8006d78:	b909      	cbnz	r1, 8006d7e <__lo0bits+0x2a>
 8006d7a:	0c1b      	lsrs	r3, r3, #16
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	b2d9      	uxtb	r1, r3
 8006d80:	b909      	cbnz	r1, 8006d86 <__lo0bits+0x32>
 8006d82:	3208      	adds	r2, #8
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	0719      	lsls	r1, r3, #28
 8006d88:	bf04      	itt	eq
 8006d8a:	091b      	lsreq	r3, r3, #4
 8006d8c:	3204      	addeq	r2, #4
 8006d8e:	0799      	lsls	r1, r3, #30
 8006d90:	bf04      	itt	eq
 8006d92:	089b      	lsreq	r3, r3, #2
 8006d94:	3202      	addeq	r2, #2
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	d403      	bmi.n	8006da2 <__lo0bits+0x4e>
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	f102 0201 	add.w	r2, r2, #1
 8006da0:	d003      	beq.n	8006daa <__lo0bits+0x56>
 8006da2:	6003      	str	r3, [r0, #0]
 8006da4:	e7e5      	b.n	8006d72 <__lo0bits+0x1e>
 8006da6:	2200      	movs	r2, #0
 8006da8:	e7e3      	b.n	8006d72 <__lo0bits+0x1e>
 8006daa:	2220      	movs	r2, #32
 8006dac:	e7e1      	b.n	8006d72 <__lo0bits+0x1e>
	...

08006db0 <__i2b>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	2101      	movs	r1, #1
 8006db6:	f7ff ff05 	bl	8006bc4 <_Balloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <__i2b+0x1a>
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <__i2b+0x24>)
 8006dc0:	4805      	ldr	r0, [pc, #20]	; (8006dd8 <__i2b+0x28>)
 8006dc2:	f240 1145 	movw	r1, #325	; 0x145
 8006dc6:	f000 fd1f 	bl	8007808 <__assert_func>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6144      	str	r4, [r0, #20]
 8006dce:	6103      	str	r3, [r0, #16]
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08007b90 	.word	0x08007b90
 8006dd8:	08007ba1 	.word	0x08007ba1

08006ddc <__multiply>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	4691      	mov	r9, r2
 8006de2:	690a      	ldr	r2, [r1, #16]
 8006de4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bfb8      	it	lt
 8006dec:	460b      	movlt	r3, r1
 8006dee:	460c      	mov	r4, r1
 8006df0:	bfbc      	itt	lt
 8006df2:	464c      	movlt	r4, r9
 8006df4:	4699      	movlt	r9, r3
 8006df6:	6927      	ldr	r7, [r4, #16]
 8006df8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	6861      	ldr	r1, [r4, #4]
 8006e00:	eb07 060a 	add.w	r6, r7, sl
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	b085      	sub	sp, #20
 8006e08:	bfb8      	it	lt
 8006e0a:	3101      	addlt	r1, #1
 8006e0c:	f7ff feda 	bl	8006bc4 <_Balloc>
 8006e10:	b930      	cbnz	r0, 8006e20 <__multiply+0x44>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b44      	ldr	r3, [pc, #272]	; (8006f28 <__multiply+0x14c>)
 8006e16:	4845      	ldr	r0, [pc, #276]	; (8006f2c <__multiply+0x150>)
 8006e18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e1c:	f000 fcf4 	bl	8007808 <__assert_func>
 8006e20:	f100 0514 	add.w	r5, r0, #20
 8006e24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e28:	462b      	mov	r3, r5
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4543      	cmp	r3, r8
 8006e2e:	d321      	bcc.n	8006e74 <__multiply+0x98>
 8006e30:	f104 0314 	add.w	r3, r4, #20
 8006e34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e38:	f109 0314 	add.w	r3, r9, #20
 8006e3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e40:	9202      	str	r2, [sp, #8]
 8006e42:	1b3a      	subs	r2, r7, r4
 8006e44:	3a15      	subs	r2, #21
 8006e46:	f022 0203 	bic.w	r2, r2, #3
 8006e4a:	3204      	adds	r2, #4
 8006e4c:	f104 0115 	add.w	r1, r4, #21
 8006e50:	428f      	cmp	r7, r1
 8006e52:	bf38      	it	cc
 8006e54:	2204      	movcc	r2, #4
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	9a02      	ldr	r2, [sp, #8]
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d80c      	bhi.n	8006e7a <__multiply+0x9e>
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	dd03      	ble.n	8006e6c <__multiply+0x90>
 8006e64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d05b      	beq.n	8006f24 <__multiply+0x148>
 8006e6c:	6106      	str	r6, [r0, #16]
 8006e6e:	b005      	add	sp, #20
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	f843 2b04 	str.w	r2, [r3], #4
 8006e78:	e7d8      	b.n	8006e2c <__multiply+0x50>
 8006e7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e7e:	f1ba 0f00 	cmp.w	sl, #0
 8006e82:	d024      	beq.n	8006ece <__multiply+0xf2>
 8006e84:	f104 0e14 	add.w	lr, r4, #20
 8006e88:	46a9      	mov	r9, r5
 8006e8a:	f04f 0c00 	mov.w	ip, #0
 8006e8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e92:	f8d9 1000 	ldr.w	r1, [r9]
 8006e96:	fa1f fb82 	uxth.w	fp, r2
 8006e9a:	b289      	uxth	r1, r1
 8006e9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ea0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ea8:	4461      	add	r1, ip
 8006eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eae:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eb6:	b289      	uxth	r1, r1
 8006eb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ebc:	4577      	cmp	r7, lr
 8006ebe:	f849 1b04 	str.w	r1, [r9], #4
 8006ec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec6:	d8e2      	bhi.n	8006e8e <__multiply+0xb2>
 8006ec8:	9a01      	ldr	r2, [sp, #4]
 8006eca:	f845 c002 	str.w	ip, [r5, r2]
 8006ece:	9a03      	ldr	r2, [sp, #12]
 8006ed0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	d021      	beq.n	8006f20 <__multiply+0x144>
 8006edc:	6829      	ldr	r1, [r5, #0]
 8006ede:	f104 0c14 	add.w	ip, r4, #20
 8006ee2:	46ae      	mov	lr, r5
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	f8bc b000 	ldrh.w	fp, [ip]
 8006eec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ef0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ef4:	4452      	add	r2, sl
 8006ef6:	b289      	uxth	r1, r1
 8006ef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006efc:	f84e 1b04 	str.w	r1, [lr], #4
 8006f00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f08:	f8be 1000 	ldrh.w	r1, [lr]
 8006f0c:	fb09 110a 	mla	r1, r9, sl, r1
 8006f10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f14:	4567      	cmp	r7, ip
 8006f16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f1a:	d8e5      	bhi.n	8006ee8 <__multiply+0x10c>
 8006f1c:	9a01      	ldr	r2, [sp, #4]
 8006f1e:	50a9      	str	r1, [r5, r2]
 8006f20:	3504      	adds	r5, #4
 8006f22:	e799      	b.n	8006e58 <__multiply+0x7c>
 8006f24:	3e01      	subs	r6, #1
 8006f26:	e79b      	b.n	8006e60 <__multiply+0x84>
 8006f28:	08007b90 	.word	0x08007b90
 8006f2c:	08007ba1 	.word	0x08007ba1

08006f30 <__pow5mult>:
 8006f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f34:	4615      	mov	r5, r2
 8006f36:	f012 0203 	ands.w	r2, r2, #3
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	d007      	beq.n	8006f50 <__pow5mult+0x20>
 8006f40:	4c25      	ldr	r4, [pc, #148]	; (8006fd8 <__pow5mult+0xa8>)
 8006f42:	3a01      	subs	r2, #1
 8006f44:	2300      	movs	r3, #0
 8006f46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f4a:	f7ff fe9d 	bl	8006c88 <__multadd>
 8006f4e:	4607      	mov	r7, r0
 8006f50:	10ad      	asrs	r5, r5, #2
 8006f52:	d03d      	beq.n	8006fd0 <__pow5mult+0xa0>
 8006f54:	69f4      	ldr	r4, [r6, #28]
 8006f56:	b97c      	cbnz	r4, 8006f78 <__pow5mult+0x48>
 8006f58:	2010      	movs	r0, #16
 8006f5a:	f7ff fd7f 	bl	8006a5c <malloc>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	61f0      	str	r0, [r6, #28]
 8006f62:	b928      	cbnz	r0, 8006f70 <__pow5mult+0x40>
 8006f64:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <__pow5mult+0xac>)
 8006f66:	481e      	ldr	r0, [pc, #120]	; (8006fe0 <__pow5mult+0xb0>)
 8006f68:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f6c:	f000 fc4c 	bl	8007808 <__assert_func>
 8006f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f74:	6004      	str	r4, [r0, #0]
 8006f76:	60c4      	str	r4, [r0, #12]
 8006f78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f80:	b94c      	cbnz	r4, 8006f96 <__pow5mult+0x66>
 8006f82:	f240 2171 	movw	r1, #625	; 0x271
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7ff ff12 	bl	8006db0 <__i2b>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f92:	4604      	mov	r4, r0
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	f04f 0900 	mov.w	r9, #0
 8006f9a:	07eb      	lsls	r3, r5, #31
 8006f9c:	d50a      	bpl.n	8006fb4 <__pow5mult+0x84>
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f7ff ff1a 	bl	8006ddc <__multiply>
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4680      	mov	r8, r0
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff fe49 	bl	8006c44 <_Bfree>
 8006fb2:	4647      	mov	r7, r8
 8006fb4:	106d      	asrs	r5, r5, #1
 8006fb6:	d00b      	beq.n	8006fd0 <__pow5mult+0xa0>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	b938      	cbnz	r0, 8006fcc <__pow5mult+0x9c>
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7ff ff0b 	bl	8006ddc <__multiply>
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	f8c0 9000 	str.w	r9, [r0]
 8006fcc:	4604      	mov	r4, r0
 8006fce:	e7e4      	b.n	8006f9a <__pow5mult+0x6a>
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08007cf0 	.word	0x08007cf0
 8006fdc:	08007b21 	.word	0x08007b21
 8006fe0:	08007ba1 	.word	0x08007ba1

08006fe4 <__lshift>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	6849      	ldr	r1, [r1, #4]
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4691      	mov	r9, r2
 8006ff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ffc:	f108 0601 	add.w	r6, r8, #1
 8007000:	42b3      	cmp	r3, r6
 8007002:	db0b      	blt.n	800701c <__lshift+0x38>
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff fddd 	bl	8006bc4 <_Balloc>
 800700a:	4605      	mov	r5, r0
 800700c:	b948      	cbnz	r0, 8007022 <__lshift+0x3e>
 800700e:	4602      	mov	r2, r0
 8007010:	4b28      	ldr	r3, [pc, #160]	; (80070b4 <__lshift+0xd0>)
 8007012:	4829      	ldr	r0, [pc, #164]	; (80070b8 <__lshift+0xd4>)
 8007014:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007018:	f000 fbf6 	bl	8007808 <__assert_func>
 800701c:	3101      	adds	r1, #1
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	e7ee      	b.n	8007000 <__lshift+0x1c>
 8007022:	2300      	movs	r3, #0
 8007024:	f100 0114 	add.w	r1, r0, #20
 8007028:	f100 0210 	add.w	r2, r0, #16
 800702c:	4618      	mov	r0, r3
 800702e:	4553      	cmp	r3, sl
 8007030:	db33      	blt.n	800709a <__lshift+0xb6>
 8007032:	6920      	ldr	r0, [r4, #16]
 8007034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007038:	f104 0314 	add.w	r3, r4, #20
 800703c:	f019 091f 	ands.w	r9, r9, #31
 8007040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007048:	d02b      	beq.n	80070a2 <__lshift+0xbe>
 800704a:	f1c9 0e20 	rsb	lr, r9, #32
 800704e:	468a      	mov	sl, r1
 8007050:	2200      	movs	r2, #0
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	fa00 f009 	lsl.w	r0, r0, r9
 8007058:	4310      	orrs	r0, r2
 800705a:	f84a 0b04 	str.w	r0, [sl], #4
 800705e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007062:	459c      	cmp	ip, r3
 8007064:	fa22 f20e 	lsr.w	r2, r2, lr
 8007068:	d8f3      	bhi.n	8007052 <__lshift+0x6e>
 800706a:	ebac 0304 	sub.w	r3, ip, r4
 800706e:	3b15      	subs	r3, #21
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	3304      	adds	r3, #4
 8007076:	f104 0015 	add.w	r0, r4, #21
 800707a:	4584      	cmp	ip, r0
 800707c:	bf38      	it	cc
 800707e:	2304      	movcc	r3, #4
 8007080:	50ca      	str	r2, [r1, r3]
 8007082:	b10a      	cbz	r2, 8007088 <__lshift+0xa4>
 8007084:	f108 0602 	add.w	r6, r8, #2
 8007088:	3e01      	subs	r6, #1
 800708a:	4638      	mov	r0, r7
 800708c:	612e      	str	r6, [r5, #16]
 800708e:	4621      	mov	r1, r4
 8007090:	f7ff fdd8 	bl	8006c44 <_Bfree>
 8007094:	4628      	mov	r0, r5
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	f842 0f04 	str.w	r0, [r2, #4]!
 800709e:	3301      	adds	r3, #1
 80070a0:	e7c5      	b.n	800702e <__lshift+0x4a>
 80070a2:	3904      	subs	r1, #4
 80070a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070ac:	459c      	cmp	ip, r3
 80070ae:	d8f9      	bhi.n	80070a4 <__lshift+0xc0>
 80070b0:	e7ea      	b.n	8007088 <__lshift+0xa4>
 80070b2:	bf00      	nop
 80070b4:	08007b90 	.word	0x08007b90
 80070b8:	08007ba1 	.word	0x08007ba1

080070bc <__mcmp>:
 80070bc:	b530      	push	{r4, r5, lr}
 80070be:	6902      	ldr	r2, [r0, #16]
 80070c0:	690c      	ldr	r4, [r1, #16]
 80070c2:	1b12      	subs	r2, r2, r4
 80070c4:	d10e      	bne.n	80070e4 <__mcmp+0x28>
 80070c6:	f100 0314 	add.w	r3, r0, #20
 80070ca:	3114      	adds	r1, #20
 80070cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070dc:	42a5      	cmp	r5, r4
 80070de:	d003      	beq.n	80070e8 <__mcmp+0x2c>
 80070e0:	d305      	bcc.n	80070ee <__mcmp+0x32>
 80070e2:	2201      	movs	r2, #1
 80070e4:	4610      	mov	r0, r2
 80070e6:	bd30      	pop	{r4, r5, pc}
 80070e8:	4283      	cmp	r3, r0
 80070ea:	d3f3      	bcc.n	80070d4 <__mcmp+0x18>
 80070ec:	e7fa      	b.n	80070e4 <__mcmp+0x28>
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e7f7      	b.n	80070e4 <__mcmp+0x28>

080070f4 <__mdiff>:
 80070f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	460c      	mov	r4, r1
 80070fa:	4606      	mov	r6, r0
 80070fc:	4611      	mov	r1, r2
 80070fe:	4620      	mov	r0, r4
 8007100:	4690      	mov	r8, r2
 8007102:	f7ff ffdb 	bl	80070bc <__mcmp>
 8007106:	1e05      	subs	r5, r0, #0
 8007108:	d110      	bne.n	800712c <__mdiff+0x38>
 800710a:	4629      	mov	r1, r5
 800710c:	4630      	mov	r0, r6
 800710e:	f7ff fd59 	bl	8006bc4 <_Balloc>
 8007112:	b930      	cbnz	r0, 8007122 <__mdiff+0x2e>
 8007114:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <__mdiff+0x10c>)
 8007116:	4602      	mov	r2, r0
 8007118:	f240 2137 	movw	r1, #567	; 0x237
 800711c:	4839      	ldr	r0, [pc, #228]	; (8007204 <__mdiff+0x110>)
 800711e:	f000 fb73 	bl	8007808 <__assert_func>
 8007122:	2301      	movs	r3, #1
 8007124:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	bfa4      	itt	ge
 800712e:	4643      	movge	r3, r8
 8007130:	46a0      	movge	r8, r4
 8007132:	4630      	mov	r0, r6
 8007134:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007138:	bfa6      	itte	ge
 800713a:	461c      	movge	r4, r3
 800713c:	2500      	movge	r5, #0
 800713e:	2501      	movlt	r5, #1
 8007140:	f7ff fd40 	bl	8006bc4 <_Balloc>
 8007144:	b920      	cbnz	r0, 8007150 <__mdiff+0x5c>
 8007146:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <__mdiff+0x10c>)
 8007148:	4602      	mov	r2, r0
 800714a:	f240 2145 	movw	r1, #581	; 0x245
 800714e:	e7e5      	b.n	800711c <__mdiff+0x28>
 8007150:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007154:	6926      	ldr	r6, [r4, #16]
 8007156:	60c5      	str	r5, [r0, #12]
 8007158:	f104 0914 	add.w	r9, r4, #20
 800715c:	f108 0514 	add.w	r5, r8, #20
 8007160:	f100 0e14 	add.w	lr, r0, #20
 8007164:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007168:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800716c:	f108 0210 	add.w	r2, r8, #16
 8007170:	46f2      	mov	sl, lr
 8007172:	2100      	movs	r1, #0
 8007174:	f859 3b04 	ldr.w	r3, [r9], #4
 8007178:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800717c:	fa11 f88b 	uxtah	r8, r1, fp
 8007180:	b299      	uxth	r1, r3
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	eba8 0801 	sub.w	r8, r8, r1
 8007188:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800718c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007190:	fa1f f888 	uxth.w	r8, r8
 8007194:	1419      	asrs	r1, r3, #16
 8007196:	454e      	cmp	r6, r9
 8007198:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800719c:	f84a 3b04 	str.w	r3, [sl], #4
 80071a0:	d8e8      	bhi.n	8007174 <__mdiff+0x80>
 80071a2:	1b33      	subs	r3, r6, r4
 80071a4:	3b15      	subs	r3, #21
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	3304      	adds	r3, #4
 80071ac:	3415      	adds	r4, #21
 80071ae:	42a6      	cmp	r6, r4
 80071b0:	bf38      	it	cc
 80071b2:	2304      	movcc	r3, #4
 80071b4:	441d      	add	r5, r3
 80071b6:	4473      	add	r3, lr
 80071b8:	469e      	mov	lr, r3
 80071ba:	462e      	mov	r6, r5
 80071bc:	4566      	cmp	r6, ip
 80071be:	d30e      	bcc.n	80071de <__mdiff+0xea>
 80071c0:	f10c 0203 	add.w	r2, ip, #3
 80071c4:	1b52      	subs	r2, r2, r5
 80071c6:	f022 0203 	bic.w	r2, r2, #3
 80071ca:	3d03      	subs	r5, #3
 80071cc:	45ac      	cmp	ip, r5
 80071ce:	bf38      	it	cc
 80071d0:	2200      	movcc	r2, #0
 80071d2:	4413      	add	r3, r2
 80071d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071d8:	b17a      	cbz	r2, 80071fa <__mdiff+0x106>
 80071da:	6107      	str	r7, [r0, #16]
 80071dc:	e7a4      	b.n	8007128 <__mdiff+0x34>
 80071de:	f856 8b04 	ldr.w	r8, [r6], #4
 80071e2:	fa11 f288 	uxtah	r2, r1, r8
 80071e6:	1414      	asrs	r4, r2, #16
 80071e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071ec:	b292      	uxth	r2, r2
 80071ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071f2:	f84e 2b04 	str.w	r2, [lr], #4
 80071f6:	1421      	asrs	r1, r4, #16
 80071f8:	e7e0      	b.n	80071bc <__mdiff+0xc8>
 80071fa:	3f01      	subs	r7, #1
 80071fc:	e7ea      	b.n	80071d4 <__mdiff+0xe0>
 80071fe:	bf00      	nop
 8007200:	08007b90 	.word	0x08007b90
 8007204:	08007ba1 	.word	0x08007ba1

08007208 <__d2b>:
 8007208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800720c:	460f      	mov	r7, r1
 800720e:	2101      	movs	r1, #1
 8007210:	ec59 8b10 	vmov	r8, r9, d0
 8007214:	4616      	mov	r6, r2
 8007216:	f7ff fcd5 	bl	8006bc4 <_Balloc>
 800721a:	4604      	mov	r4, r0
 800721c:	b930      	cbnz	r0, 800722c <__d2b+0x24>
 800721e:	4602      	mov	r2, r0
 8007220:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <__d2b+0xac>)
 8007222:	4825      	ldr	r0, [pc, #148]	; (80072b8 <__d2b+0xb0>)
 8007224:	f240 310f 	movw	r1, #783	; 0x30f
 8007228:	f000 faee 	bl	8007808 <__assert_func>
 800722c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007234:	bb2d      	cbnz	r5, 8007282 <__d2b+0x7a>
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	f1b8 0300 	subs.w	r3, r8, #0
 800723c:	d026      	beq.n	800728c <__d2b+0x84>
 800723e:	4668      	mov	r0, sp
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	f7ff fd87 	bl	8006d54 <__lo0bits>
 8007246:	e9dd 1200 	ldrd	r1, r2, [sp]
 800724a:	b1e8      	cbz	r0, 8007288 <__d2b+0x80>
 800724c:	f1c0 0320 	rsb	r3, r0, #32
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	430b      	orrs	r3, r1
 8007256:	40c2      	lsrs	r2, r0
 8007258:	6163      	str	r3, [r4, #20]
 800725a:	9201      	str	r2, [sp, #4]
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	61a3      	str	r3, [r4, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bf14      	ite	ne
 8007264:	2202      	movne	r2, #2
 8007266:	2201      	moveq	r2, #1
 8007268:	6122      	str	r2, [r4, #16]
 800726a:	b1bd      	cbz	r5, 800729c <__d2b+0x94>
 800726c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007270:	4405      	add	r5, r0
 8007272:	603d      	str	r5, [r7, #0]
 8007274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007278:	6030      	str	r0, [r6, #0]
 800727a:	4620      	mov	r0, r4
 800727c:	b003      	add	sp, #12
 800727e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007286:	e7d6      	b.n	8007236 <__d2b+0x2e>
 8007288:	6161      	str	r1, [r4, #20]
 800728a:	e7e7      	b.n	800725c <__d2b+0x54>
 800728c:	a801      	add	r0, sp, #4
 800728e:	f7ff fd61 	bl	8006d54 <__lo0bits>
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	6163      	str	r3, [r4, #20]
 8007296:	3020      	adds	r0, #32
 8007298:	2201      	movs	r2, #1
 800729a:	e7e5      	b.n	8007268 <__d2b+0x60>
 800729c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072a4:	6038      	str	r0, [r7, #0]
 80072a6:	6918      	ldr	r0, [r3, #16]
 80072a8:	f7ff fd34 	bl	8006d14 <__hi0bits>
 80072ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072b0:	e7e2      	b.n	8007278 <__d2b+0x70>
 80072b2:	bf00      	nop
 80072b4:	08007b90 	.word	0x08007b90
 80072b8:	08007ba1 	.word	0x08007ba1

080072bc <__sfputc_r>:
 80072bc:	6893      	ldr	r3, [r2, #8]
 80072be:	3b01      	subs	r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	b410      	push	{r4}
 80072c4:	6093      	str	r3, [r2, #8]
 80072c6:	da08      	bge.n	80072da <__sfputc_r+0x1e>
 80072c8:	6994      	ldr	r4, [r2, #24]
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	db01      	blt.n	80072d2 <__sfputc_r+0x16>
 80072ce:	290a      	cmp	r1, #10
 80072d0:	d103      	bne.n	80072da <__sfputc_r+0x1e>
 80072d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d6:	f000 b9e3 	b.w	80076a0 <__swbuf_r>
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	1c58      	adds	r0, r3, #1
 80072de:	6010      	str	r0, [r2, #0]
 80072e0:	7019      	strb	r1, [r3, #0]
 80072e2:	4608      	mov	r0, r1
 80072e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <__sfputs_r>:
 80072ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ec:	4606      	mov	r6, r0
 80072ee:	460f      	mov	r7, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	18d5      	adds	r5, r2, r3
 80072f4:	42ac      	cmp	r4, r5
 80072f6:	d101      	bne.n	80072fc <__sfputs_r+0x12>
 80072f8:	2000      	movs	r0, #0
 80072fa:	e007      	b.n	800730c <__sfputs_r+0x22>
 80072fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007300:	463a      	mov	r2, r7
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ffda 	bl	80072bc <__sfputc_r>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d1f3      	bne.n	80072f4 <__sfputs_r+0xa>
 800730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007310 <_vfiprintf_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	460d      	mov	r5, r1
 8007316:	b09d      	sub	sp, #116	; 0x74
 8007318:	4614      	mov	r4, r2
 800731a:	4698      	mov	r8, r3
 800731c:	4606      	mov	r6, r0
 800731e:	b118      	cbz	r0, 8007328 <_vfiprintf_r+0x18>
 8007320:	6a03      	ldr	r3, [r0, #32]
 8007322:	b90b      	cbnz	r3, 8007328 <_vfiprintf_r+0x18>
 8007324:	f7fe fbc8 	bl	8005ab8 <__sinit>
 8007328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800732a:	07d9      	lsls	r1, r3, #31
 800732c:	d405      	bmi.n	800733a <_vfiprintf_r+0x2a>
 800732e:	89ab      	ldrh	r3, [r5, #12]
 8007330:	059a      	lsls	r2, r3, #22
 8007332:	d402      	bmi.n	800733a <_vfiprintf_r+0x2a>
 8007334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007336:	f7fe fcc8 	bl	8005cca <__retarget_lock_acquire_recursive>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	071b      	lsls	r3, r3, #28
 800733e:	d501      	bpl.n	8007344 <_vfiprintf_r+0x34>
 8007340:	692b      	ldr	r3, [r5, #16]
 8007342:	b99b      	cbnz	r3, 800736c <_vfiprintf_r+0x5c>
 8007344:	4629      	mov	r1, r5
 8007346:	4630      	mov	r0, r6
 8007348:	f000 f9e8 	bl	800771c <__swsetup_r>
 800734c:	b170      	cbz	r0, 800736c <_vfiprintf_r+0x5c>
 800734e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007350:	07dc      	lsls	r4, r3, #31
 8007352:	d504      	bpl.n	800735e <_vfiprintf_r+0x4e>
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	b01d      	add	sp, #116	; 0x74
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	0598      	lsls	r0, r3, #22
 8007362:	d4f7      	bmi.n	8007354 <_vfiprintf_r+0x44>
 8007364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007366:	f7fe fcb1 	bl	8005ccc <__retarget_lock_release_recursive>
 800736a:	e7f3      	b.n	8007354 <_vfiprintf_r+0x44>
 800736c:	2300      	movs	r3, #0
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	2320      	movs	r3, #32
 8007372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007376:	f8cd 800c 	str.w	r8, [sp, #12]
 800737a:	2330      	movs	r3, #48	; 0x30
 800737c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007530 <_vfiprintf_r+0x220>
 8007380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007384:	f04f 0901 	mov.w	r9, #1
 8007388:	4623      	mov	r3, r4
 800738a:	469a      	mov	sl, r3
 800738c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007390:	b10a      	cbz	r2, 8007396 <_vfiprintf_r+0x86>
 8007392:	2a25      	cmp	r2, #37	; 0x25
 8007394:	d1f9      	bne.n	800738a <_vfiprintf_r+0x7a>
 8007396:	ebba 0b04 	subs.w	fp, sl, r4
 800739a:	d00b      	beq.n	80073b4 <_vfiprintf_r+0xa4>
 800739c:	465b      	mov	r3, fp
 800739e:	4622      	mov	r2, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff ffa1 	bl	80072ea <__sfputs_r>
 80073a8:	3001      	adds	r0, #1
 80073aa:	f000 80a9 	beq.w	8007500 <_vfiprintf_r+0x1f0>
 80073ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b0:	445a      	add	r2, fp
 80073b2:	9209      	str	r2, [sp, #36]	; 0x24
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80a1 	beq.w	8007500 <_vfiprintf_r+0x1f0>
 80073be:	2300      	movs	r3, #0
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295
 80073c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073c8:	f10a 0a01 	add.w	sl, sl, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073d4:	931a      	str	r3, [sp, #104]	; 0x68
 80073d6:	4654      	mov	r4, sl
 80073d8:	2205      	movs	r2, #5
 80073da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073de:	4854      	ldr	r0, [pc, #336]	; (8007530 <_vfiprintf_r+0x220>)
 80073e0:	f7f8 fef6 	bl	80001d0 <memchr>
 80073e4:	9a04      	ldr	r2, [sp, #16]
 80073e6:	b9d8      	cbnz	r0, 8007420 <_vfiprintf_r+0x110>
 80073e8:	06d1      	lsls	r1, r2, #27
 80073ea:	bf44      	itt	mi
 80073ec:	2320      	movmi	r3, #32
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f2:	0713      	lsls	r3, r2, #28
 80073f4:	bf44      	itt	mi
 80073f6:	232b      	movmi	r3, #43	; 0x2b
 80073f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007400:	2b2a      	cmp	r3, #42	; 0x2a
 8007402:	d015      	beq.n	8007430 <_vfiprintf_r+0x120>
 8007404:	9a07      	ldr	r2, [sp, #28]
 8007406:	4654      	mov	r4, sl
 8007408:	2000      	movs	r0, #0
 800740a:	f04f 0c0a 	mov.w	ip, #10
 800740e:	4621      	mov	r1, r4
 8007410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007414:	3b30      	subs	r3, #48	; 0x30
 8007416:	2b09      	cmp	r3, #9
 8007418:	d94d      	bls.n	80074b6 <_vfiprintf_r+0x1a6>
 800741a:	b1b0      	cbz	r0, 800744a <_vfiprintf_r+0x13a>
 800741c:	9207      	str	r2, [sp, #28]
 800741e:	e014      	b.n	800744a <_vfiprintf_r+0x13a>
 8007420:	eba0 0308 	sub.w	r3, r0, r8
 8007424:	fa09 f303 	lsl.w	r3, r9, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	46a2      	mov	sl, r4
 800742e:	e7d2      	b.n	80073d6 <_vfiprintf_r+0xc6>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	1d19      	adds	r1, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	9103      	str	r1, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfbb      	ittet	lt
 800743c:	425b      	neglt	r3, r3
 800743e:	f042 0202 	orrlt.w	r2, r2, #2
 8007442:	9307      	strge	r3, [sp, #28]
 8007444:	9307      	strlt	r3, [sp, #28]
 8007446:	bfb8      	it	lt
 8007448:	9204      	strlt	r2, [sp, #16]
 800744a:	7823      	ldrb	r3, [r4, #0]
 800744c:	2b2e      	cmp	r3, #46	; 0x2e
 800744e:	d10c      	bne.n	800746a <_vfiprintf_r+0x15a>
 8007450:	7863      	ldrb	r3, [r4, #1]
 8007452:	2b2a      	cmp	r3, #42	; 0x2a
 8007454:	d134      	bne.n	80074c0 <_vfiprintf_r+0x1b0>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	1d1a      	adds	r2, r3, #4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	9203      	str	r2, [sp, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bfb8      	it	lt
 8007462:	f04f 33ff 	movlt.w	r3, #4294967295
 8007466:	3402      	adds	r4, #2
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007540 <_vfiprintf_r+0x230>
 800746e:	7821      	ldrb	r1, [r4, #0]
 8007470:	2203      	movs	r2, #3
 8007472:	4650      	mov	r0, sl
 8007474:	f7f8 feac 	bl	80001d0 <memchr>
 8007478:	b138      	cbz	r0, 800748a <_vfiprintf_r+0x17a>
 800747a:	9b04      	ldr	r3, [sp, #16]
 800747c:	eba0 000a 	sub.w	r0, r0, sl
 8007480:	2240      	movs	r2, #64	; 0x40
 8007482:	4082      	lsls	r2, r0
 8007484:	4313      	orrs	r3, r2
 8007486:	3401      	adds	r4, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	4829      	ldr	r0, [pc, #164]	; (8007534 <_vfiprintf_r+0x224>)
 8007490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007494:	2206      	movs	r2, #6
 8007496:	f7f8 fe9b 	bl	80001d0 <memchr>
 800749a:	2800      	cmp	r0, #0
 800749c:	d03f      	beq.n	800751e <_vfiprintf_r+0x20e>
 800749e:	4b26      	ldr	r3, [pc, #152]	; (8007538 <_vfiprintf_r+0x228>)
 80074a0:	bb1b      	cbnz	r3, 80074ea <_vfiprintf_r+0x1da>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	3307      	adds	r3, #7
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	3308      	adds	r3, #8
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	443b      	add	r3, r7
 80074b2:	9309      	str	r3, [sp, #36]	; 0x24
 80074b4:	e768      	b.n	8007388 <_vfiprintf_r+0x78>
 80074b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ba:	460c      	mov	r4, r1
 80074bc:	2001      	movs	r0, #1
 80074be:	e7a6      	b.n	800740e <_vfiprintf_r+0xfe>
 80074c0:	2300      	movs	r3, #0
 80074c2:	3401      	adds	r4, #1
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	4619      	mov	r1, r3
 80074c8:	f04f 0c0a 	mov.w	ip, #10
 80074cc:	4620      	mov	r0, r4
 80074ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d2:	3a30      	subs	r2, #48	; 0x30
 80074d4:	2a09      	cmp	r2, #9
 80074d6:	d903      	bls.n	80074e0 <_vfiprintf_r+0x1d0>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0c6      	beq.n	800746a <_vfiprintf_r+0x15a>
 80074dc:	9105      	str	r1, [sp, #20]
 80074de:	e7c4      	b.n	800746a <_vfiprintf_r+0x15a>
 80074e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074e4:	4604      	mov	r4, r0
 80074e6:	2301      	movs	r3, #1
 80074e8:	e7f0      	b.n	80074cc <_vfiprintf_r+0x1bc>
 80074ea:	ab03      	add	r3, sp, #12
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	462a      	mov	r2, r5
 80074f0:	4b12      	ldr	r3, [pc, #72]	; (800753c <_vfiprintf_r+0x22c>)
 80074f2:	a904      	add	r1, sp, #16
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7fd fe8d 	bl	8005214 <_printf_float>
 80074fa:	4607      	mov	r7, r0
 80074fc:	1c78      	adds	r0, r7, #1
 80074fe:	d1d6      	bne.n	80074ae <_vfiprintf_r+0x19e>
 8007500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	d405      	bmi.n	8007512 <_vfiprintf_r+0x202>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	059a      	lsls	r2, r3, #22
 800750a:	d402      	bmi.n	8007512 <_vfiprintf_r+0x202>
 800750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800750e:	f7fe fbdd 	bl	8005ccc <__retarget_lock_release_recursive>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	065b      	lsls	r3, r3, #25
 8007516:	f53f af1d 	bmi.w	8007354 <_vfiprintf_r+0x44>
 800751a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800751c:	e71c      	b.n	8007358 <_vfiprintf_r+0x48>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <_vfiprintf_r+0x22c>)
 8007526:	a904      	add	r1, sp, #16
 8007528:	4630      	mov	r0, r6
 800752a:	f7fe f917 	bl	800575c <_printf_i>
 800752e:	e7e4      	b.n	80074fa <_vfiprintf_r+0x1ea>
 8007530:	08007cfc 	.word	0x08007cfc
 8007534:	08007d06 	.word	0x08007d06
 8007538:	08005215 	.word	0x08005215
 800753c:	080072eb 	.word	0x080072eb
 8007540:	08007d02 	.word	0x08007d02

08007544 <__sflush_r>:
 8007544:	898a      	ldrh	r2, [r1, #12]
 8007546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754a:	4605      	mov	r5, r0
 800754c:	0710      	lsls	r0, r2, #28
 800754e:	460c      	mov	r4, r1
 8007550:	d458      	bmi.n	8007604 <__sflush_r+0xc0>
 8007552:	684b      	ldr	r3, [r1, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc05      	bgt.n	8007564 <__sflush_r+0x20>
 8007558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	dc02      	bgt.n	8007564 <__sflush_r+0x20>
 800755e:	2000      	movs	r0, #0
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007566:	2e00      	cmp	r6, #0
 8007568:	d0f9      	beq.n	800755e <__sflush_r+0x1a>
 800756a:	2300      	movs	r3, #0
 800756c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007570:	682f      	ldr	r7, [r5, #0]
 8007572:	6a21      	ldr	r1, [r4, #32]
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	d032      	beq.n	80075de <__sflush_r+0x9a>
 8007578:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	075a      	lsls	r2, r3, #29
 800757e:	d505      	bpl.n	800758c <__sflush_r+0x48>
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	1ac0      	subs	r0, r0, r3
 8007584:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007586:	b10b      	cbz	r3, 800758c <__sflush_r+0x48>
 8007588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800758a:	1ac0      	subs	r0, r0, r3
 800758c:	2300      	movs	r3, #0
 800758e:	4602      	mov	r2, r0
 8007590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007592:	6a21      	ldr	r1, [r4, #32]
 8007594:	4628      	mov	r0, r5
 8007596:	47b0      	blx	r6
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	d106      	bne.n	80075ac <__sflush_r+0x68>
 800759e:	6829      	ldr	r1, [r5, #0]
 80075a0:	291d      	cmp	r1, #29
 80075a2:	d82b      	bhi.n	80075fc <__sflush_r+0xb8>
 80075a4:	4a29      	ldr	r2, [pc, #164]	; (800764c <__sflush_r+0x108>)
 80075a6:	410a      	asrs	r2, r1
 80075a8:	07d6      	lsls	r6, r2, #31
 80075aa:	d427      	bmi.n	80075fc <__sflush_r+0xb8>
 80075ac:	2200      	movs	r2, #0
 80075ae:	6062      	str	r2, [r4, #4]
 80075b0:	04d9      	lsls	r1, r3, #19
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	d504      	bpl.n	80075c2 <__sflush_r+0x7e>
 80075b8:	1c42      	adds	r2, r0, #1
 80075ba:	d101      	bne.n	80075c0 <__sflush_r+0x7c>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b903      	cbnz	r3, 80075c2 <__sflush_r+0x7e>
 80075c0:	6560      	str	r0, [r4, #84]	; 0x54
 80075c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075c4:	602f      	str	r7, [r5, #0]
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d0c9      	beq.n	800755e <__sflush_r+0x1a>
 80075ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075ce:	4299      	cmp	r1, r3
 80075d0:	d002      	beq.n	80075d8 <__sflush_r+0x94>
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7ff f9f6 	bl	80069c4 <_free_r>
 80075d8:	2000      	movs	r0, #0
 80075da:	6360      	str	r0, [r4, #52]	; 0x34
 80075dc:	e7c0      	b.n	8007560 <__sflush_r+0x1c>
 80075de:	2301      	movs	r3, #1
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b0      	blx	r6
 80075e4:	1c41      	adds	r1, r0, #1
 80075e6:	d1c8      	bne.n	800757a <__sflush_r+0x36>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0c5      	beq.n	800757a <__sflush_r+0x36>
 80075ee:	2b1d      	cmp	r3, #29
 80075f0:	d001      	beq.n	80075f6 <__sflush_r+0xb2>
 80075f2:	2b16      	cmp	r3, #22
 80075f4:	d101      	bne.n	80075fa <__sflush_r+0xb6>
 80075f6:	602f      	str	r7, [r5, #0]
 80075f8:	e7b1      	b.n	800755e <__sflush_r+0x1a>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	e7ad      	b.n	8007560 <__sflush_r+0x1c>
 8007604:	690f      	ldr	r7, [r1, #16]
 8007606:	2f00      	cmp	r7, #0
 8007608:	d0a9      	beq.n	800755e <__sflush_r+0x1a>
 800760a:	0793      	lsls	r3, r2, #30
 800760c:	680e      	ldr	r6, [r1, #0]
 800760e:	bf08      	it	eq
 8007610:	694b      	ldreq	r3, [r1, #20]
 8007612:	600f      	str	r7, [r1, #0]
 8007614:	bf18      	it	ne
 8007616:	2300      	movne	r3, #0
 8007618:	eba6 0807 	sub.w	r8, r6, r7
 800761c:	608b      	str	r3, [r1, #8]
 800761e:	f1b8 0f00 	cmp.w	r8, #0
 8007622:	dd9c      	ble.n	800755e <__sflush_r+0x1a>
 8007624:	6a21      	ldr	r1, [r4, #32]
 8007626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007628:	4643      	mov	r3, r8
 800762a:	463a      	mov	r2, r7
 800762c:	4628      	mov	r0, r5
 800762e:	47b0      	blx	r6
 8007630:	2800      	cmp	r0, #0
 8007632:	dc06      	bgt.n	8007642 <__sflush_r+0xfe>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	e78e      	b.n	8007560 <__sflush_r+0x1c>
 8007642:	4407      	add	r7, r0
 8007644:	eba8 0800 	sub.w	r8, r8, r0
 8007648:	e7e9      	b.n	800761e <__sflush_r+0xda>
 800764a:	bf00      	nop
 800764c:	dfbffffe 	.word	0xdfbffffe

08007650 <_fflush_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	b913      	cbnz	r3, 8007660 <_fflush_r+0x10>
 800765a:	2500      	movs	r5, #0
 800765c:	4628      	mov	r0, r5
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	b118      	cbz	r0, 800766a <_fflush_r+0x1a>
 8007662:	6a03      	ldr	r3, [r0, #32]
 8007664:	b90b      	cbnz	r3, 800766a <_fflush_r+0x1a>
 8007666:	f7fe fa27 	bl	8005ab8 <__sinit>
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f3      	beq.n	800765a <_fflush_r+0xa>
 8007672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007674:	07d0      	lsls	r0, r2, #31
 8007676:	d404      	bmi.n	8007682 <_fflush_r+0x32>
 8007678:	0599      	lsls	r1, r3, #22
 800767a:	d402      	bmi.n	8007682 <_fflush_r+0x32>
 800767c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767e:	f7fe fb24 	bl	8005cca <__retarget_lock_acquire_recursive>
 8007682:	4628      	mov	r0, r5
 8007684:	4621      	mov	r1, r4
 8007686:	f7ff ff5d 	bl	8007544 <__sflush_r>
 800768a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800768c:	07da      	lsls	r2, r3, #31
 800768e:	4605      	mov	r5, r0
 8007690:	d4e4      	bmi.n	800765c <_fflush_r+0xc>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	059b      	lsls	r3, r3, #22
 8007696:	d4e1      	bmi.n	800765c <_fflush_r+0xc>
 8007698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769a:	f7fe fb17 	bl	8005ccc <__retarget_lock_release_recursive>
 800769e:	e7dd      	b.n	800765c <_fflush_r+0xc>

080076a0 <__swbuf_r>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	460e      	mov	r6, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	4605      	mov	r5, r0
 80076a8:	b118      	cbz	r0, 80076b2 <__swbuf_r+0x12>
 80076aa:	6a03      	ldr	r3, [r0, #32]
 80076ac:	b90b      	cbnz	r3, 80076b2 <__swbuf_r+0x12>
 80076ae:	f7fe fa03 	bl	8005ab8 <__sinit>
 80076b2:	69a3      	ldr	r3, [r4, #24]
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	071a      	lsls	r2, r3, #28
 80076ba:	d525      	bpl.n	8007708 <__swbuf_r+0x68>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	b31b      	cbz	r3, 8007708 <__swbuf_r+0x68>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	1a98      	subs	r0, r3, r2
 80076c6:	6963      	ldr	r3, [r4, #20]
 80076c8:	b2f6      	uxtb	r6, r6
 80076ca:	4283      	cmp	r3, r0
 80076cc:	4637      	mov	r7, r6
 80076ce:	dc04      	bgt.n	80076da <__swbuf_r+0x3a>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7ff ffbc 	bl	8007650 <_fflush_r>
 80076d8:	b9e0      	cbnz	r0, 8007714 <__swbuf_r+0x74>
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	3b01      	subs	r3, #1
 80076de:	60a3      	str	r3, [r4, #8]
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	6022      	str	r2, [r4, #0]
 80076e6:	701e      	strb	r6, [r3, #0]
 80076e8:	6962      	ldr	r2, [r4, #20]
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d004      	beq.n	80076fa <__swbuf_r+0x5a>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d506      	bpl.n	8007704 <__swbuf_r+0x64>
 80076f6:	2e0a      	cmp	r6, #10
 80076f8:	d104      	bne.n	8007704 <__swbuf_r+0x64>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff ffa7 	bl	8007650 <_fflush_r>
 8007702:	b938      	cbnz	r0, 8007714 <__swbuf_r+0x74>
 8007704:	4638      	mov	r0, r7
 8007706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007708:	4621      	mov	r1, r4
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f806 	bl	800771c <__swsetup_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	d0d5      	beq.n	80076c0 <__swbuf_r+0x20>
 8007714:	f04f 37ff 	mov.w	r7, #4294967295
 8007718:	e7f4      	b.n	8007704 <__swbuf_r+0x64>
	...

0800771c <__swsetup_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <__swsetup_r+0xac>)
 8007720:	4605      	mov	r5, r0
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	460c      	mov	r4, r1
 8007726:	b118      	cbz	r0, 8007730 <__swsetup_r+0x14>
 8007728:	6a03      	ldr	r3, [r0, #32]
 800772a:	b90b      	cbnz	r3, 8007730 <__swsetup_r+0x14>
 800772c:	f7fe f9c4 	bl	8005ab8 <__sinit>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007736:	0718      	lsls	r0, r3, #28
 8007738:	d422      	bmi.n	8007780 <__swsetup_r+0x64>
 800773a:	06d9      	lsls	r1, r3, #27
 800773c:	d407      	bmi.n	800774e <__swsetup_r+0x32>
 800773e:	2309      	movs	r3, #9
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e034      	b.n	80077b8 <__swsetup_r+0x9c>
 800774e:	0758      	lsls	r0, r3, #29
 8007750:	d512      	bpl.n	8007778 <__swsetup_r+0x5c>
 8007752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007754:	b141      	cbz	r1, 8007768 <__swsetup_r+0x4c>
 8007756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775a:	4299      	cmp	r1, r3
 800775c:	d002      	beq.n	8007764 <__swsetup_r+0x48>
 800775e:	4628      	mov	r0, r5
 8007760:	f7ff f930 	bl	80069c4 <_free_r>
 8007764:	2300      	movs	r3, #0
 8007766:	6363      	str	r3, [r4, #52]	; 0x34
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	2300      	movs	r3, #0
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f043 0308 	orr.w	r3, r3, #8
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	b94b      	cbnz	r3, 8007798 <__swsetup_r+0x7c>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800778a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778e:	d003      	beq.n	8007798 <__swsetup_r+0x7c>
 8007790:	4621      	mov	r1, r4
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f8c4 	bl	8007920 <__smakebuf_r>
 8007798:	89a0      	ldrh	r0, [r4, #12]
 800779a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800779e:	f010 0301 	ands.w	r3, r0, #1
 80077a2:	d00a      	beq.n	80077ba <__swsetup_r+0x9e>
 80077a4:	2300      	movs	r3, #0
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	6963      	ldr	r3, [r4, #20]
 80077aa:	425b      	negs	r3, r3
 80077ac:	61a3      	str	r3, [r4, #24]
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	b943      	cbnz	r3, 80077c4 <__swsetup_r+0xa8>
 80077b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077b6:	d1c4      	bne.n	8007742 <__swsetup_r+0x26>
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	0781      	lsls	r1, r0, #30
 80077bc:	bf58      	it	pl
 80077be:	6963      	ldrpl	r3, [r4, #20]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	e7f4      	b.n	80077ae <__swsetup_r+0x92>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e7f7      	b.n	80077b8 <__swsetup_r+0x9c>
 80077c8:	20000080 	.word	0x20000080

080077cc <_sbrk_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_sbrk_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7f9 fe78 	bl	80014cc <_sbrk>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_sbrk_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_sbrk_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	200004a8 	.word	0x200004a8

080077ec <memcpy>:
 80077ec:	440a      	add	r2, r1
 80077ee:	4291      	cmp	r1, r2
 80077f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f4:	d100      	bne.n	80077f8 <memcpy+0xc>
 80077f6:	4770      	bx	lr
 80077f8:	b510      	push	{r4, lr}
 80077fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007802:	4291      	cmp	r1, r2
 8007804:	d1f9      	bne.n	80077fa <memcpy+0xe>
 8007806:	bd10      	pop	{r4, pc}

08007808 <__assert_func>:
 8007808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800780a:	4614      	mov	r4, r2
 800780c:	461a      	mov	r2, r3
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <__assert_func+0x2c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	68d8      	ldr	r0, [r3, #12]
 8007816:	b14c      	cbz	r4, 800782c <__assert_func+0x24>
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <__assert_func+0x30>)
 800781a:	9100      	str	r1, [sp, #0]
 800781c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007820:	4906      	ldr	r1, [pc, #24]	; (800783c <__assert_func+0x34>)
 8007822:	462b      	mov	r3, r5
 8007824:	f000 f844 	bl	80078b0 <fiprintf>
 8007828:	f000 f8d8 	bl	80079dc <abort>
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__assert_func+0x38>)
 800782e:	461c      	mov	r4, r3
 8007830:	e7f3      	b.n	800781a <__assert_func+0x12>
 8007832:	bf00      	nop
 8007834:	20000080 	.word	0x20000080
 8007838:	08007d17 	.word	0x08007d17
 800783c:	08007d24 	.word	0x08007d24
 8007840:	08007d52 	.word	0x08007d52

08007844 <_calloc_r>:
 8007844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007846:	fba1 2402 	umull	r2, r4, r1, r2
 800784a:	b94c      	cbnz	r4, 8007860 <_calloc_r+0x1c>
 800784c:	4611      	mov	r1, r2
 800784e:	9201      	str	r2, [sp, #4]
 8007850:	f7ff f92c 	bl	8006aac <_malloc_r>
 8007854:	9a01      	ldr	r2, [sp, #4]
 8007856:	4605      	mov	r5, r0
 8007858:	b930      	cbnz	r0, 8007868 <_calloc_r+0x24>
 800785a:	4628      	mov	r0, r5
 800785c:	b003      	add	sp, #12
 800785e:	bd30      	pop	{r4, r5, pc}
 8007860:	220c      	movs	r2, #12
 8007862:	6002      	str	r2, [r0, #0]
 8007864:	2500      	movs	r5, #0
 8007866:	e7f8      	b.n	800785a <_calloc_r+0x16>
 8007868:	4621      	mov	r1, r4
 800786a:	f7fe f9b0 	bl	8005bce <memset>
 800786e:	e7f4      	b.n	800785a <_calloc_r+0x16>

08007870 <__ascii_mbtowc>:
 8007870:	b082      	sub	sp, #8
 8007872:	b901      	cbnz	r1, 8007876 <__ascii_mbtowc+0x6>
 8007874:	a901      	add	r1, sp, #4
 8007876:	b142      	cbz	r2, 800788a <__ascii_mbtowc+0x1a>
 8007878:	b14b      	cbz	r3, 800788e <__ascii_mbtowc+0x1e>
 800787a:	7813      	ldrb	r3, [r2, #0]
 800787c:	600b      	str	r3, [r1, #0]
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	1e10      	subs	r0, r2, #0
 8007882:	bf18      	it	ne
 8007884:	2001      	movne	r0, #1
 8007886:	b002      	add	sp, #8
 8007888:	4770      	bx	lr
 800788a:	4610      	mov	r0, r2
 800788c:	e7fb      	b.n	8007886 <__ascii_mbtowc+0x16>
 800788e:	f06f 0001 	mvn.w	r0, #1
 8007892:	e7f8      	b.n	8007886 <__ascii_mbtowc+0x16>

08007894 <__ascii_wctomb>:
 8007894:	b149      	cbz	r1, 80078aa <__ascii_wctomb+0x16>
 8007896:	2aff      	cmp	r2, #255	; 0xff
 8007898:	bf85      	ittet	hi
 800789a:	238a      	movhi	r3, #138	; 0x8a
 800789c:	6003      	strhi	r3, [r0, #0]
 800789e:	700a      	strbls	r2, [r1, #0]
 80078a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80078a4:	bf98      	it	ls
 80078a6:	2001      	movls	r0, #1
 80078a8:	4770      	bx	lr
 80078aa:	4608      	mov	r0, r1
 80078ac:	4770      	bx	lr
	...

080078b0 <fiprintf>:
 80078b0:	b40e      	push	{r1, r2, r3}
 80078b2:	b503      	push	{r0, r1, lr}
 80078b4:	4601      	mov	r1, r0
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	4805      	ldr	r0, [pc, #20]	; (80078d0 <fiprintf+0x20>)
 80078ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f7ff fd25 	bl	8007310 <_vfiprintf_r>
 80078c6:	b002      	add	sp, #8
 80078c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078cc:	b003      	add	sp, #12
 80078ce:	4770      	bx	lr
 80078d0:	20000080 	.word	0x20000080

080078d4 <__swhatbuf_r>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2900      	cmp	r1, #0
 80078de:	b096      	sub	sp, #88	; 0x58
 80078e0:	4615      	mov	r5, r2
 80078e2:	461e      	mov	r6, r3
 80078e4:	da0d      	bge.n	8007902 <__swhatbuf_r+0x2e>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078ec:	f04f 0100 	mov.w	r1, #0
 80078f0:	bf0c      	ite	eq
 80078f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078f6:	2340      	movne	r3, #64	; 0x40
 80078f8:	2000      	movs	r0, #0
 80078fa:	6031      	str	r1, [r6, #0]
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	b016      	add	sp, #88	; 0x58
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	466a      	mov	r2, sp
 8007904:	f000 f848 	bl	8007998 <_fstat_r>
 8007908:	2800      	cmp	r0, #0
 800790a:	dbec      	blt.n	80078e6 <__swhatbuf_r+0x12>
 800790c:	9901      	ldr	r1, [sp, #4]
 800790e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007912:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007916:	4259      	negs	r1, r3
 8007918:	4159      	adcs	r1, r3
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	e7eb      	b.n	80078f8 <__swhatbuf_r+0x24>

08007920 <__smakebuf_r>:
 8007920:	898b      	ldrh	r3, [r1, #12]
 8007922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007924:	079d      	lsls	r5, r3, #30
 8007926:	4606      	mov	r6, r0
 8007928:	460c      	mov	r4, r1
 800792a:	d507      	bpl.n	800793c <__smakebuf_r+0x1c>
 800792c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	2301      	movs	r3, #1
 8007936:	6163      	str	r3, [r4, #20]
 8007938:	b002      	add	sp, #8
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	ab01      	add	r3, sp, #4
 800793e:	466a      	mov	r2, sp
 8007940:	f7ff ffc8 	bl	80078d4 <__swhatbuf_r>
 8007944:	9900      	ldr	r1, [sp, #0]
 8007946:	4605      	mov	r5, r0
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff f8af 	bl	8006aac <_malloc_r>
 800794e:	b948      	cbnz	r0, 8007964 <__smakebuf_r+0x44>
 8007950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007954:	059a      	lsls	r2, r3, #22
 8007956:	d4ef      	bmi.n	8007938 <__smakebuf_r+0x18>
 8007958:	f023 0303 	bic.w	r3, r3, #3
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	e7e3      	b.n	800792c <__smakebuf_r+0xc>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	6020      	str	r0, [r4, #0]
 8007968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	9b00      	ldr	r3, [sp, #0]
 8007970:	6163      	str	r3, [r4, #20]
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	6120      	str	r0, [r4, #16]
 8007976:	b15b      	cbz	r3, 8007990 <__smakebuf_r+0x70>
 8007978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f81d 	bl	80079bc <_isatty_r>
 8007982:	b128      	cbz	r0, 8007990 <__smakebuf_r+0x70>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	431d      	orrs	r5, r3
 8007994:	81a5      	strh	r5, [r4, #12]
 8007996:	e7cf      	b.n	8007938 <__smakebuf_r+0x18>

08007998 <_fstat_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_fstat_r+0x20>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	f7f9 fd68 	bl	800147a <_fstat>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	d102      	bne.n	80079b4 <_fstat_r+0x1c>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	b103      	cbz	r3, 80079b4 <_fstat_r+0x1c>
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	200004a8 	.word	0x200004a8

080079bc <_isatty_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d06      	ldr	r5, [pc, #24]	; (80079d8 <_isatty_r+0x1c>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7f9 fd67 	bl	800149a <_isatty>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_isatty_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_isatty_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	200004a8 	.word	0x200004a8

080079dc <abort>:
 80079dc:	b508      	push	{r3, lr}
 80079de:	2006      	movs	r0, #6
 80079e0:	f000 f82c 	bl	8007a3c <raise>
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7f9 fcf9 	bl	80013dc <_exit>

080079ea <_raise_r>:
 80079ea:	291f      	cmp	r1, #31
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	d904      	bls.n	80079fe <_raise_r+0x14>
 80079f4:	2316      	movs	r3, #22
 80079f6:	6003      	str	r3, [r0, #0]
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a00:	b112      	cbz	r2, 8007a08 <_raise_r+0x1e>
 8007a02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a06:	b94b      	cbnz	r3, 8007a1c <_raise_r+0x32>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f831 	bl	8007a70 <_getpid_r>
 8007a0e:	462a      	mov	r2, r5
 8007a10:	4601      	mov	r1, r0
 8007a12:	4620      	mov	r0, r4
 8007a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a18:	f000 b818 	b.w	8007a4c <_kill_r>
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d00a      	beq.n	8007a36 <_raise_r+0x4c>
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	d103      	bne.n	8007a2c <_raise_r+0x42>
 8007a24:	2316      	movs	r3, #22
 8007a26:	6003      	str	r3, [r0, #0]
 8007a28:	2001      	movs	r0, #1
 8007a2a:	e7e7      	b.n	80079fc <_raise_r+0x12>
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a32:	4628      	mov	r0, r5
 8007a34:	4798      	blx	r3
 8007a36:	2000      	movs	r0, #0
 8007a38:	e7e0      	b.n	80079fc <_raise_r+0x12>
	...

08007a3c <raise>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <raise+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f7ff bfd2 	b.w	80079ea <_raise_r>
 8007a46:	bf00      	nop
 8007a48:	20000080 	.word	0x20000080

08007a4c <_kill_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_kill_r+0x20>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f7f9 fcaf 	bl	80013bc <_kill>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d102      	bne.n	8007a68 <_kill_r+0x1c>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b103      	cbz	r3, 8007a68 <_kill_r+0x1c>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200004a8 	.word	0x200004a8

08007a70 <_getpid_r>:
 8007a70:	f7f9 bc9c 	b.w	80013ac <_getpid>

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
