
Gestion_direction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063ac  080063ac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080063ac  080063ac  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063ac  080063ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000660  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006bc  200006bc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fe24  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000274b  00000000  00000000  0002fef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8f  00000000  00000000  000333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e35  00000000  00000000  00033e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000129a1  00000000  00000000  00054c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c37bf  00000000  00000000  0006762d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fd4  00000000  00000000  0012adec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0012edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800618c 	.word	0x0800618c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800618c 	.word	0x0800618c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <choose_device>:
 */

#include "ESP01.h"
#include "stdio.h"

void choose_device(ItemUnit *const me, UART_HandleTypeDef *huart) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	me->huart = huart;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	601a      	str	r2, [r3, #0]

}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <__printf>:

void __printf(ItemUnit *const me, const char *string) {
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	if (string[0] != '\0') {
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d020      	beq.n	80002f0 <__printf+0x54>

		sprintf(me->buffer, string);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3304      	adds	r3, #4
 80002b2:	6839      	ldr	r1, [r7, #0]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f004 fded 	bl	8004e94 <siprintf>
		HAL_UART_Transmit(me->huart, (uint8_t*) me->buffer, strlen(me->buffer),
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681c      	ldr	r4, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	1d1d      	adds	r5, r3, #4
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3304      	adds	r3, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff82 	bl	80001d0 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d4:	4629      	mov	r1, r5
 80002d6:	4620      	mov	r0, r4
 80002d8:	f003 fc04 	bl	8003ae4 <HAL_UART_Transmit>
				1000);
		HAL_Delay(50);
 80002dc:	2032      	movs	r0, #50	; 0x32
 80002de:	f000 fd9f 	bl	8000e20 <HAL_Delay>
		memset(me->buffer, 0, sizeof(me->buffer));
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3304      	adds	r3, #4
 80002e6:	2264      	movs	r2, #100	; 0x64
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f004 fe20 	bl	8004f30 <memset>

	}
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bdb0      	pop	{r4, r5, r7, pc}

080002f8 <TEST_AT>:

void TEST_AT(ItemUnit *esp) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

	uint8_t ESPEventCase = 0, stateTry = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	2300      	movs	r3, #0
 8000306:	73bb      	strb	r3, [r7, #14]

	while (ESPEventCase == 0) {
 8000308:	e02a      	b.n	8000360 <TEST_AT+0x68>
		__printf(esp, "AT\r\n");
 800030a:	4919      	ldr	r1, [pc, #100]	; (8000370 <TEST_AT+0x78>)
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ffc5 	bl	800029c <__printf>
		HAL_Delay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 fd83 	bl	8000e20 <HAL_Delay>

		if (strstr((char*) (esp->rxBuffer), "OK") != NULL) {
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3369      	adds	r3, #105	; 0x69
 800031e:	4915      	ldr	r1, [pc, #84]	; (8000374 <TEST_AT+0x7c>)
 8000320:	4618      	mov	r0, r3
 8000322:	f004 fe0d 	bl	8004f40 <strstr>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <TEST_AT+0x38>
			ESPEventCase = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	73fb      	strb	r3, [r7, #15]
		}

		if (strstr((char*) (esp->rxBuffer), "OK") == NULL && stateTry == 5) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3369      	adds	r3, #105	; 0x69
 8000334:	490f      	ldr	r1, [pc, #60]	; (8000374 <TEST_AT+0x7c>)
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fe02 	bl	8004f40 <strstr>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d108      	bne.n	8000354 <TEST_AT+0x5c>
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	2b05      	cmp	r3, #5
 8000346:	d105      	bne.n	8000354 <TEST_AT+0x5c>
			stateTry = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	73bb      	strb	r3, [r7, #14]
			HAL_Delay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f000 fd66 	bl	8000e20 <HAL_Delay>
		}
		stateTry++;
 8000354:	7bbb      	ldrb	r3, [r7, #14]
 8000356:	3301      	adds	r3, #1
 8000358:	73bb      	strb	r3, [r7, #14]
		clearBuffer(esp);
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f860 	bl	8000420 <clearBuffer>
	while (ESPEventCase == 0) {
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0d1      	beq.n	800030a <TEST_AT+0x12>
	}
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	080061a4 	.word	0x080061a4
 8000374:	080061ac 	.word	0x080061ac

08000378 <EspInit>:


void EspInit(ItemUnit *const esp) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint8_t ESPInitCase = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
	while (ESPInitCase == 0) {
 8000384:	e011      	b.n	80003aa <EspInit+0x32>
		__printf(esp, "AT\r\n");
 8000386:	4920      	ldr	r1, [pc, #128]	; (8000408 <EspInit+0x90>)
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff87 	bl	800029c <__printf>
		if (strstr((char*) (esp->rxBuffer), "OK") != NULL) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3369      	adds	r3, #105	; 0x69
 8000392:	491e      	ldr	r1, [pc, #120]	; (800040c <EspInit+0x94>)
 8000394:	4618      	mov	r0, r3
 8000396:	f004 fdd3 	bl	8004f40 <strstr>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <EspInit+0x2c>

			ESPInitCase = 1;
 80003a0:	2301      	movs	r3, #1
 80003a2:	73fb      	strb	r3, [r7, #15]
		}

		clearBuffer(esp);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f000 f83b 	bl	8000420 <clearBuffer>
	while (ESPInitCase == 0) {
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0ea      	beq.n	8000386 <EspInit+0xe>
	}
	while (ESPInitCase == 1) {
 80003b0:	e022      	b.n	80003f8 <EspInit+0x80>
		__printf(esp, "AT+CIPMUX?\r\n");
 80003b2:	4917      	ldr	r1, [pc, #92]	; (8000410 <EspInit+0x98>)
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff71 	bl	800029c <__printf>
		HAL_Delay(1500);
 80003ba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80003be:	f000 fd2f 	bl	8000e20 <HAL_Delay>

		if (strstr((char*) (esp->rxBuffer), "+CIPMUX:1") != NULL) {
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3369      	adds	r3, #105	; 0x69
 80003c6:	4913      	ldr	r1, [pc, #76]	; (8000414 <EspInit+0x9c>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fdb9 	bl	8004f40 <strstr>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <EspInit+0x62>

			ESPInitCase = 2;
 80003d4:	2302      	movs	r3, #2
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	e00b      	b.n	80003f2 <EspInit+0x7a>
		} else {

			__printf(esp, "AT+CIPMUX=1\r\n");
 80003da:	490f      	ldr	r1, [pc, #60]	; (8000418 <EspInit+0xa0>)
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f7ff ff5d 	bl	800029c <__printf>
			HAL_Delay(700);
 80003e2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80003e6:	f000 fd1b 	bl	8000e20 <HAL_Delay>
			__printf(esp, "AT+CIPSERVER=1,80\r\n");
 80003ea:	490c      	ldr	r1, [pc, #48]	; (800041c <EspInit+0xa4>)
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff55 	bl	800029c <__printf>
		}
		clearBuffer(esp);
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 f814 	bl	8000420 <clearBuffer>
	while (ESPInitCase == 1) {
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d0d9      	beq.n	80003b2 <EspInit+0x3a>
	}


}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	080061a4 	.word	0x080061a4
 800040c:	080061ac 	.word	0x080061ac
 8000410:	080061b0 	.word	0x080061b0
 8000414:	080061c0 	.word	0x080061c0
 8000418:	080061cc 	.word	0x080061cc
 800041c:	080061dc 	.word	0x080061dc

08000420 <clearBuffer>:

void clearBuffer(ItemUnit *const me)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	memset((char*) me->rxBuffer, 0, strlen((char*) me->rxBuffer));
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f103 0469 	add.w	r4, r3, #105	; 0x69
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3369      	adds	r3, #105	; 0x69
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fecc 	bl	80001d0 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	4620      	mov	r0, r4
 8000440:	f004 fd76 	bl	8004f30 <memset>
	me->rxbufferIndex = 0;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bd90      	pop	{r4, r7, pc}

08000454 <get_server_command>:


void get_server_command(ItemUnit *esp){
 8000454:	b580      	push	{r7, lr}
 8000456:	b092      	sub	sp, #72	; 0x48
 8000458:	af02      	add	r7, sp, #8
 800045a:	6078      	str	r0, [r7, #4]
    char tempData[50]; // Tableau intermédiaire pour stocker les données

    if(esp->ServerState == CONNECTED){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f893 3394 	ldrb.w	r3, [r3, #916]	; 0x394
 8000462:	2b00      	cmp	r3, #0
 8000464:	d135      	bne.n	80004d2 <get_server_command+0x7e>
    	if(esp->IPDActive == true){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800046c:	2b00      	cmp	r3, #0
 800046e:	d030      	beq.n	80004d2 <get_server_command+0x7e>


			if (strstr((char*) (esp->rxBuffer), "IPD") != NULL) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3369      	adds	r3, #105	; 0x69
 8000474:	4919      	ldr	r1, [pc, #100]	; (80004dc <get_server_command+0x88>)
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fd62 	bl	8004f40 <strstr>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d024      	beq.n	80004cc <get_server_command+0x78>
				sscanf((char*)esp->rxBuffer, "\r\n+IPD,%d,%d:%s\r\n", &(esp->idIPD), &(esp->lengthIPD), tempData);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f103 0069 	add.w	r0, r3, #105	; 0x69
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f503 7263 	add.w	r2, r3, #908	; 0x38c
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f503 7164 	add.w	r1, r3, #912	; 0x390
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	460b      	mov	r3, r1
 800049c:	4910      	ldr	r1, [pc, #64]	; (80004e0 <get_server_command+0x8c>)
 800049e:	f004 fd19 	bl	8004ed4 <siscanf>
				// Si lengthIPD est supérieur à 2, alors nous avons des données valides
				if(esp->lengthIPD > 2){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80004a8:	2b02      	cmp	r3, #2
 80004aa:	dd0f      	ble.n	80004cc <get_server_command+0x78>
					esp->lengthIPD -= 2; // Enlever 2 à la taille de length pour prendre en compte uniquement la data
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80004b2:	1e9a      	subs	r2, r3, #2
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
					strcpy(esp->dataIPD, tempData); // Copier les données du tableau intermédiaire à dataIPD
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80004c0:	f107 020c 	add.w	r2, r7, #12
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 fd7c 	bl	8004fc4 <strcpy>
					// Maintenant, "idIPD" contient l'ID de connexion, "lengthIPD" contient la taille des données, et "dataIPD" contient les données extraites.
				}
			}
			clearBuffer(esp);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ffa7 	bl	8000420 <clearBuffer>
    	}
    }
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	; 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	080061f0 	.word	0x080061f0
 80004e0:	080061f4 	.word	0x080061f4

080004e4 <get_server_status>:


void get_server_status(ItemUnit *esp){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (strstr((char*) (esp->rxBuffer), "CONNECT") != NULL){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3369      	adds	r3, #105	; 0x69
 80004f0:	4911      	ldr	r1, [pc, #68]	; (8000538 <get_server_status+0x54>)
 80004f2:	4618      	mov	r0, r3
 80004f4:	f004 fd24 	bl	8004f40 <strstr>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d007      	beq.n	800050e <get_server_status+0x2a>
		esp->ServerState = CONNECTED;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
		clearBuffer(esp);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ff8a 	bl	8000420 <clearBuffer>
	else if(strstr((char*) (esp->rxBuffer), "CLOSED") != NULL){
		esp->ServerState = DISCONNECTED;
		clearBuffer(esp);
	}

}
 800050c:	e00f      	b.n	800052e <get_server_status+0x4a>
	else if(strstr((char*) (esp->rxBuffer), "CLOSED") != NULL){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3369      	adds	r3, #105	; 0x69
 8000512:	490a      	ldr	r1, [pc, #40]	; (800053c <get_server_status+0x58>)
 8000514:	4618      	mov	r0, r3
 8000516:	f004 fd13 	bl	8004f40 <strstr>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d006      	beq.n	800052e <get_server_status+0x4a>
		esp->ServerState = DISCONNECTED;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2201      	movs	r2, #1
 8000524:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
		clearBuffer(esp);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ff79 	bl	8000420 <clearBuffer>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	08006208 	.word	0x08006208
 800053c:	08006210 	.word	0x08006210

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <MX_GPIO_Init+0x108>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a3b      	ldr	r2, [pc, #236]	; (8000648 <MX_GPIO_Init+0x108>)
 800055c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b39      	ldr	r3, [pc, #228]	; (8000648 <MX_GPIO_Init+0x108>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <MX_GPIO_Init+0x108>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a35      	ldr	r2, [pc, #212]	; (8000648 <MX_GPIO_Init+0x108>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b33      	ldr	r3, [pc, #204]	; (8000648 <MX_GPIO_Init+0x108>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <MX_GPIO_Init+0x108>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <MX_GPIO_Init+0x108>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0x108>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0x108>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a29      	ldr	r2, [pc, #164]	; (8000648 <MX_GPIO_Init+0x108>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_GPIO_Init+0x108>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2120      	movs	r1, #32
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 ff4d 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_ENABLE_GPIO_Port, IR_ENABLE_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c8:	4820      	ldr	r0, [pc, #128]	; (800064c <MX_GPIO_Init+0x10c>)
 80005ca:	f000 ff47 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <MX_GPIO_Init+0x10c>)
 80005e6:	f000 fdc7 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D4_Pin
 80005ea:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80005ee:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <MX_GPIO_Init+0x10c>)
 8000600:	f000 fdba 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000604:	2320      	movs	r3, #32
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 fdab 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_ENABLE_Pin;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0x10c>)
 800063c:	f000 fd9c 	bl	8001178 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000800 	.word	0x48000800

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb7e 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f82e 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff70 	bl	8000540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000660:	f000 fa68 	bl	8000b34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000664:	f000 f962 	bl	800092c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000668:	f000 fa94 	bl	8000b94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  choose_device(&Test_uartEsp, &huart3);
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <main+0x5c>)
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <main+0x60>)
 8000670:	f7ff fe06 	bl	8000280 <choose_device>
  HAL_UART_Receive_IT(Test_uartEsp.huart, &Test_uartEsp.byteRx, 1);
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <main+0x60>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2201      	movs	r2, #1
 800067a:	490e      	ldr	r1, [pc, #56]	; (80006b4 <main+0x64>)
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fabb 	bl	8003bf8 <HAL_UART_Receive_IT>
  HAL_Delay(700);
 8000682:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000686:	f000 fbcb 	bl	8000e20 <HAL_Delay>
  TEST_AT(&Test_uartEsp);
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <main+0x60>)
 800068c:	f7ff fe34 	bl	80002f8 <TEST_AT>
  EspInit(&Test_uartEsp);
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <main+0x60>)
 8000692:	f7ff fe71 	bl	8000378 <EspInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 4, 0xFFFFFF);
	 get_server_status(&Test_uartEsp);
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <main+0x60>)
 8000698:	f7ff ff24 	bl	80004e4 <get_server_status>
	 get_server_command(&Test_uartEsp);
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <main+0x60>)
 800069e:	f7ff fed9 	bl	8000454 <get_server_command>
	 HAL_Delay(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fbbb 	bl	8000e20 <HAL_Delay>
  {
 80006aa:	e7f4      	b.n	8000696 <main+0x46>
 80006ac:	200004e8 	.word	0x200004e8
 80006b0:	20000078 	.word	0x20000078
 80006b4:	200003cf 	.word	0x200003cf

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c2:	2228      	movs	r2, #40	; 0x28
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fc32 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2300      	movs	r3, #0
 8000700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000702:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800070c:	4618      	mov	r0, r3
 800070e:	f000 febd 	bl	800148c <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000718:	f000 f858 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fee5 	bl	8002508 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000744:	f000 f842 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f90d 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 f834 	bl	80007cc <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3758      	adds	r7, #88	; 0x58
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	if (huart->Instance == Test_uartESP) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <HAL_UART_RxCpltCallback+0x54>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d11b      	bne.n	80007b6 <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(Test_uartEsp.huart,&Test_uartEsp.byteRx, 1);
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	4910      	ldr	r1, [pc, #64]	; (80007c8 <HAL_UART_RxCpltCallback+0x5c>)
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fa36 	bl	8003bf8 <HAL_UART_Receive_IT>

		Test_uartEsp.rxBuffer[Test_uartEsp.rxbufferIndex] = Test_uartEsp.byteRx;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 800078e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 8000798:	f893 2357 	ldrb.w	r2, [r3, #855]	; 0x357
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		Test_uartEsp.rxbufferIndex++;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 80007a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_UART_RxCpltCallback+0x58>)
 80007b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	}
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40004800 	.word	0x40004800
 80007c4:	20000078 	.word	0x20000078
 80007c8:	200003cf 	.word	0x200003cf

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x44>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x44>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x44>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fbfa 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 fab8 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <USART2_IRQHandler+0x10>)
 800087a:	f003 fa01 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000460 	.word	0x20000460

08000888 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXT line 28.
  */
void USART3_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USART3_IRQHandler+0x10>)
 800088e:	f003 f9f7 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200004e8 	.word	0x200004e8

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f004 fb4e 	bl	8004f6c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20003000 	.word	0x20003000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000410 	.word	0x20000410
 8000904:	200006c0 	.word	0x200006c0

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09a      	sub	sp, #104	; 0x68
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	222c      	movs	r2, #44	; 0x2c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fae2 	bl	8004f30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <MX_TIM1_Init+0x150>)
 800096e:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <MX_TIM1_Init+0x154>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000974:	2213      	movs	r2, #19
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b40      	ldr	r3, [pc, #256]	; (8000a7c <MX_TIM1_Init+0x150>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000980:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_TIM1_Init+0x150>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000998:	4838      	ldr	r0, [pc, #224]	; (8000a7c <MX_TIM1_Init+0x150>)
 800099a:	f002 f921 	bl	8002be0 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f7ff ff12 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009b2:	4619      	mov	r1, r3
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009b6:	f002 fadf 	bl	8002f78 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009c0:	f7ff ff04 	bl	80007cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c4:	482d      	ldr	r0, [pc, #180]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009c6:	f002 f962 	bl	8002c8e <HAL_TIM_PWM_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009d0:	f7ff fefc 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009e8:	f002 ff48 	bl	800387c <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009f2:	f7ff feeb 	bl	80007cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a1c:	f002 f998 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a26:	f7ff fed1 	bl	80007cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a60:	f002 ff7a 	bl	8003958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a6a:	f7ff feaf 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a70:	f000 f828 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3768      	adds	r7, #104	; 0x68
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000414 	.word	0x20000414
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_TIM_Base_MspInit+0x38>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10b      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_TIM_MspPostInit+0x64>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d11b      	bne.n	8000b1e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_TIM_MspPostInit+0x68>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_TIM_MspPostInit+0x68>)
 8000aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_TIM_MspPostInit+0x68>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_control_Pin;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_control_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_TIM_MspPostInit+0x6c>)
 8000b1a:	f000 fb2d 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800

08000b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART2_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b78:	f002 ff66 	bl	8003a48 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f7ff fe23 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000460 	.word	0x20000460
 8000b90:	40004400 	.word	0x40004400

08000b94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_USART3_UART_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART3_UART_Init+0x58>)
 8000bd8:	f002 ff36 	bl	8003a48 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000be2:	f7ff fdf3 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200004e8 	.word	0x200004e8
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a37      	ldr	r2, [pc, #220]	; (8000cf0 <HAL_UART_MspInit+0xfc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d131      	bne.n	8000c7a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a30      	ldr	r2, [pc, #192]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c46:	230c      	movs	r3, #12
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c56:	2307      	movs	r3, #7
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fa88 	bl	8001178 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2026      	movs	r0, #38	; 0x26
 8000c6e:	f000 f9d6 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c72:	2026      	movs	r0, #38	; 0x26
 8000c74:	f000 f9ef 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c78:	e035      	b.n	8000ce6 <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_UART_MspInit+0x104>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d130      	bne.n	8000ce6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	61d3      	str	r3, [r2, #28]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	6153      	str	r3, [r2, #20]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_UART_MspInit+0x100>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <HAL_UART_MspInit+0x108>)
 8000cd2:	f000 fa51 	bl	8001178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2027      	movs	r0, #39	; 0x27
 8000cdc:	f000 f99f 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce0:	2027      	movs	r0, #39	; 0x27
 8000ce2:	f000 f9b8 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff fe00 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f004 f923 	bl	8004f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc8d 	bl	8000650 <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d44:	080063b4 	.word	0x080063b4
  ldr r2, =_sbss
 8000d48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d4c:	200006bc 	.word	0x200006bc

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fd32 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000570 	.word	0x20000570

08000e08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000570 	.word	0x20000570

08000e20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001098:	2b02      	cmp	r3, #2
 800109a:	d008      	beq.n	80010ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e020      	b.n	80010f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 020e 	bic.w	r2, r2, #14
 80010bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800110e:	2b02      	cmp	r3, #2
 8001110:	d005      	beq.n	800111e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e027      	b.n	800116e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020e 	bic.w	r2, r2, #14
 800112c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
    } 
  }
  return status;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	e14e      	b.n	8001426 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2101      	movs	r1, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8140 	beq.w	8001420 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d005      	beq.n	80011b8 <HAL_GPIO_Init+0x40>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d130      	bne.n	800121a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 0201 	and.w	r2, r3, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b03      	cmp	r3, #3
 8001224:	d017      	beq.n	8001256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d123      	bne.n	80012aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0203 	and.w	r2, r3, #3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 809a 	beq.w	8001420 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001304:	4a50      	ldr	r2, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1e0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a46      	ldr	r2, [pc, #280]	; (800144c <HAL_GPIO_Init+0x2d4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1dc>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a45      	ldr	r2, [pc, #276]	; (8001450 <HAL_GPIO_Init+0x2d8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1d8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a44      	ldr	r2, [pc, #272]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1d4>
 8001348:	2303      	movs	r3, #3
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1e2>
 800134c:	2305      	movs	r3, #5
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1e2>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1e2>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1e2>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136a:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001378:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800139c:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c6:	4a24      	ldr	r2, [pc, #144]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_GPIO_Init+0x2e0>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f aea9 	bne.w	8001188 <HAL_GPIO_Init+0x10>
  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001478:	e002      	b.n	8001480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001492:	af00      	add	r7, sp, #0
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800149c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f001 b823 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 817d 	beq.w	80017c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014c8:	4bbc      	ldr	r3, [pc, #752]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d00c      	beq.n	80014ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d4:	4bb9      	ldr	r3, [pc, #740]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d15c      	bne.n	800159a <HAL_RCC_OscConfig+0x10e>
 80014e0:	4bb6      	ldr	r3, [pc, #728]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d155      	bne.n	800159a <HAL_RCC_OscConfig+0x10e>
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001502:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_RCC_OscConfig+0x94>
 800151a:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e015      	b.n	800154c <HAL_RCC_OscConfig+0xc0>
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001538:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800153c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001548:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001550:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001554:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001558:	fa92 f2a2 	rbit	r2, r2
 800155c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001560:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001564:	fab2 f282 	clz	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 811f 	beq.w	80017c0 <HAL_RCC_OscConfig+0x334>
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 8116 	bne.w	80017c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f000 bfaf 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x12e>
 80015ac:	4b83      	ldr	r3, [pc, #524]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a82      	ldr	r2, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e036      	b.n	8001628 <HAL_RCC_OscConfig+0x19c>
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x158>
 80015ca:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a7b      	ldr	r2, [pc, #492]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b79      	ldr	r3, [pc, #484]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a78      	ldr	r2, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e021      	b.n	8001628 <HAL_RCC_OscConfig+0x19c>
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x184>
 80015f6:	4b71      	ldr	r3, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a70      	ldr	r2, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x19c>
 8001610:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a69      	ldr	r2, [pc, #420]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a66      	ldr	r2, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	f023 020f 	bic.w	r2, r3, #15
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	495f      	ldr	r1, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 800163e:	4313      	orrs	r3, r2
 8001640:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d059      	beq.n	8001706 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fbd9 	bl	8000e08 <HAL_GetTick>
 8001656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fbd4 	bl	8000e08 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d902      	bls.n	8001672 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	f000 bf43 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001676:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001686:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x218>
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e015      	b.n	80016d0 <HAL_RCC_OscConfig+0x244>
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016dc:	fa92 f2a2 	rbit	r2, r2
 80016e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016e8:	fab2 f282 	clz	r2, r2
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f002 021f 	and.w	r2, r2, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ab      	beq.n	800165c <HAL_RCC_OscConfig+0x1d0>
 8001704:	e05d      	b.n	80017c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb7f 	bl	8000e08 <HAL_GetTick>
 800170a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb7a 	bl	8000e08 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d902      	bls.n	8001726 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	f000 bee9 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800173a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	095b      	lsrs	r3, r3, #5
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d102      	bne.n	8001758 <HAL_RCC_OscConfig+0x2cc>
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	e015      	b.n	8001784 <HAL_RCC_OscConfig+0x2f8>
 8001758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001774:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_RCC_OscConfig+0x330>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001788:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800178c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001790:	fa92 f2a2 	rbit	r2, r2
 8001794:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001798:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ab      	bne.n	8001710 <HAL_RCC_OscConfig+0x284>
 80017b8:	e003      	b.n	80017c2 <HAL_RCC_OscConfig+0x336>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 817d 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017d8:	4ba6      	ldr	r3, [pc, #664]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017e4:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d172      	bne.n	80018d6 <HAL_RCC_OscConfig+0x44a>
 80017f0:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d16c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x44a>
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800180e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x3a0>
 8001826:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0x3c8>
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001844:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001850:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800185a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800185e:	fa92 f2a2 	rbit	r2, r2
 8001862:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001866:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f042 0220 	orr.w	r2, r2, #32
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f002 021f 	and.w	r2, r2, #31
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_RCC_OscConfig+0x410>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	f000 be2e 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	21f8      	movs	r1, #248	; 0xf8
 80018b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018ba:	fa91 f1a1 	rbit	r1, r1
 80018be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018c6:	fab1 f181 	clz	r1, r1
 80018ca:	b2c9      	uxtb	r1, r1
 80018cc:	408b      	lsls	r3, r1
 80018ce:	4969      	ldr	r1, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d4:	e0fd      	b.n	8001ad2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8088 	beq.w	80019f8 <HAL_RCC_OscConfig+0x56c>
 80018e8:	2301      	movs	r3, #1
 80018ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	2301      	movs	r3, #1
 8001912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fa78 	bl	8000e08 <HAL_GetTick>
 8001918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fa73 	bl	8000e08 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d902      	bls.n	8001934 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	f000 bde2 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001946:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x4d8>
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e013      	b.n	800198c <HAL_RCC_OscConfig+0x500>
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800197c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2202      	movs	r2, #2
 800198e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001992:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001996:	fa92 f2a2 	rbit	r2, r2
 800199a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800199e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0af      	beq.n	800191e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	21f8      	movs	r1, #248	; 0xf8
 80019d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019dc:	fa91 f1a1 	rbit	r1, r1
 80019e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019e8:	fab1 f181 	clz	r1, r1
 80019ec:	b2c9      	uxtb	r1, r1
 80019ee:	408b      	lsls	r3, r1
 80019f0:	4920      	ldr	r1, [pc, #128]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
 80019f6:	e06c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x646>
 80019f8:	2301      	movs	r3, #1
 80019fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff f9f0 	bl	8000e08 <HAL_GetTick>
 8001a28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f9eb 	bl	8000e08 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d902      	bls.n	8001a44 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	f000 bd5a 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d104      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5ec>
 8001a6e:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <HAL_RCC_OscConfig+0x5e8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x614>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a9c:	4bc8      	ldr	r3, [pc, #800]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001aa6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ab2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f042 0220 	orr.w	r2, r2, #32
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ad      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8110 	beq.w	8001d08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d079      	beq.n	8001bec <HAL_RCC_OscConfig+0x760>
 8001af8:	2301      	movs	r3, #1
 8001afa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4bab      	ldr	r3, [pc, #684]	; (8001dc4 <HAL_RCC_OscConfig+0x938>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f971 	bl	8000e08 <HAL_GetTick>
 8001b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f96c 	bl	8000e08 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d902      	bls.n	8001b42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f000 bcdb 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba8:	2102      	movs	r1, #2
 8001baa:	6019      	str	r1, [r3, #0]
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f1a3 	rbit	r1, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bc2:	6019      	str	r1, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0a0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x6a0>
 8001bea:	e08d      	b.n	8001d08 <HAL_RCC_OscConfig+0x87c>
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c0e:	601a      	str	r2, [r3, #0]
  return result;
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x938>)
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8eb 	bl	8000e08 <HAL_GetTick>
 8001c32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff f8e6 	bl	8000e08 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d902      	bls.n	8001c4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f000 bc55 	b.w	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	6019      	str	r1, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f1a3 	rbit	r1, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ce0:	6019      	str	r1, [r3, #0]
  return result;
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d197      	bne.n	8001c38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 81a1 	beq.w	8002060 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_RCC_OscConfig+0x93c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_RCC_OscConfig+0x93c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x93c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f847 	bl	8000e08 <HAL_GetTick>
 8001d7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	e009      	b.n	8001d94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7ff f842 	bl	8000e08 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e3b1      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x93c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ef      	beq.n	8001d80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCC_OscConfig+0x940>
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a02      	ldr	r2, [pc, #8]	; (8001dc0 <HAL_RCC_OscConfig+0x934>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e03c      	b.n	8001e38 <HAL_RCC_OscConfig+0x9ac>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	10908120 	.word	0x10908120
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x96a>
 8001ddc:	4bc1      	ldr	r3, [pc, #772]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4ac0      	ldr	r2, [pc, #768]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	4bbe      	ldr	r3, [pc, #760]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4abd      	ldr	r2, [pc, #756]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e020      	b.n	8001e38 <HAL_RCC_OscConfig+0x9ac>
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x994>
 8001e06:	4bb7      	ldr	r3, [pc, #732]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4ab6      	ldr	r2, [pc, #728]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4bb4      	ldr	r3, [pc, #720]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4ab3      	ldr	r2, [pc, #716]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0x9ac>
 8001e20:	4bb0      	ldr	r3, [pc, #704]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4aaf      	ldr	r2, [pc, #700]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	4bad      	ldr	r3, [pc, #692]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4aac      	ldr	r2, [pc, #688]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001e32:	f023 0304 	bic.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8081 	beq.w	8001f4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ffdd 	bl	8000e08 <HAL_GetTick>
 8001e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe ffd8 	bl	8000e08 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e345      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eb2:	601a      	str	r2, [r3, #0]
  return result;
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ebc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xa4c>
 8001ed2:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0xa74>
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f08:	2102      	movs	r1, #2
 8001f0a:	6011      	str	r1, [r2, #0]
 8001f0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	fa92 f1a2 	rbit	r1, r2
 8001f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f22:	6011      	str	r1, [r2, #0]
  return result;
 8001f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d084      	beq.n	8001e54 <HAL_RCC_OscConfig+0x9c8>
 8001f4a:	e07f      	b.n	800204c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe ff5c 	bl	8000e08 <HAL_GetTick>
 8001f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	e00b      	b.n	8001f6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe ff57 	bl	8000e08 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e2c4      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fb4:	601a      	str	r2, [r3, #0]
  return result;
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0xb4e>
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	e013      	b.n	8002002 <HAL_RCC_OscConfig+0xb76>
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002006:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800200a:	2102      	movs	r1, #2
 800200c:	6011      	str	r1, [r2, #0]
 800200e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002012:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	fa92 f1a2 	rbit	r1, r2
 800201c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002020:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002024:	6011      	str	r1, [r2, #0]
  return result;
 8002026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800202a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d184      	bne.n	8001f56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800204c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8242 	beq.w	80024f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_RCC_OscConfig+0xc58>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	f000 8213 	beq.w	80024a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 8162 	bne.w	8002356 <HAL_RCC_OscConfig+0xeca>
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800209a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800209e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020b6:	601a      	str	r2, [r3, #0]
  return result;
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe96 	bl	8000e08 <HAL_GetTick>
 80020dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	e00c      	b.n	80020fc <HAL_RCC_OscConfig+0xc70>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fe8e 	bl	8000e08 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1fd      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002120:	601a      	str	r2, [r3, #0]
  return result;
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800212a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0xcba>
 8002140:	4bb0      	ldr	r3, [pc, #704]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e027      	b.n	8002196 <HAL_RCC_OscConfig+0xd0a>
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800214e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4b9c      	ldr	r3, [pc, #624]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800219a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800219e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	fa92 f1a2 	rbit	r1, r2
 80021b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021ba:	6011      	str	r1, [r2, #0]
  return result;
 80021bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d182      	bne.n	80020e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	430b      	orrs	r3, r1
 8002204:	497f      	ldr	r1, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800222e:	601a      	str	r2, [r3, #0]
  return result;
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002238:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	2301      	movs	r3, #1
 800224e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fdda 	bl	8000e08 <HAL_GetTick>
 8002254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	e009      	b.n	800226e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fdd5 	bl	8000e08 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e144      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002292:	601a      	str	r2, [r3, #0]
  return result;
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800229c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_RCC_OscConfig+0xe2c>
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	e027      	b.n	8002308 <HAL_RCC_OscConfig+0xe7c>
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002310:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002314:	6011      	str	r1, [r2, #0]
 8002316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	fa92 f1a2 	rbit	r1, r2
 8002324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002328:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800232c:	6011      	str	r1, [r2, #0]
  return result;
 800232e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002332:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	fab2 f282 	clz	r2, r2
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f042 0220 	orr.w	r2, r2, #32
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f002 021f 	and.w	r2, r2, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d082      	beq.n	800225a <HAL_RCC_OscConfig+0xdce>
 8002354:	e0cf      	b.n	80024f6 <HAL_RCC_OscConfig+0x106a>
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800235e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002384:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002390:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	461a      	mov	r2, r3
 8002398:	2300      	movs	r3, #0
 800239a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fd34 	bl	8000e08 <HAL_GetTick>
 80023a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	e009      	b.n	80023ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fd2f 	bl	8000e08 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e09e      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023de:	601a      	str	r2, [r3, #0]
  return result;
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d104      	bne.n	8002408 <HAL_RCC_OscConfig+0xf7c>
 80023fe:	4b01      	ldr	r3, [pc, #4]	; (8002404 <HAL_RCC_OscConfig+0xf78>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	e029      	b.n	8002458 <HAL_RCC_OscConfig+0xfcc>
 8002404:	40021000 	.word	0x40021000
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x1078>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002460:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002464:	6011      	str	r1, [r2, #0]
 8002466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800246a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fa92 f1a2 	rbit	r1, r2
 8002474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002478:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800247c:	6011      	str	r1, [r2, #0]
  return result;
 800247e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002482:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d180      	bne.n	80023a6 <HAL_RCC_OscConfig+0xf1a>
 80024a4:	e027      	b.n	80024f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01e      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_OscConfig+0x1078>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b09e      	sub	sp, #120	; 0x78
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e162      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b90      	ldr	r3, [pc, #576]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b8d      	ldr	r3, [pc, #564]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	498b      	ldr	r1, [pc, #556]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e14a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b82      	ldr	r3, [pc, #520]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	497f      	ldr	r1, [pc, #508]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80dc 	beq.w	8002734 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d13c      	bne.n	80025fe <HAL_RCC_ClockConfig+0xf6>
 8002584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002588:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_ClockConfig+0xa6>
 80025a8:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e00f      	b.n	80025ce <HAL_RCC_ClockConfig+0xc6>
 80025ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	667b      	str	r3, [r7, #100]	; 0x64
 80025bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ca:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d17b      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0f3      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d13c      	bne.n	8002680 <HAL_RCC_ClockConfig+0x178>
 8002606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d102      	bne.n	8002630 <HAL_RCC_ClockConfig+0x128>
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	e00f      	b.n	8002650 <HAL_RCC_ClockConfig+0x148>
 8002630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
 800263e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002654:	63ba      	str	r2, [r7, #56]	; 0x38
 8002656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002658:	fa92 f2a2 	rbit	r2, r2
 800265c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800265e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13a      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b2      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
 8002680:	2302      	movs	r3, #2
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x1a0>
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e00d      	b.n	80026c4 <HAL_RCC_ClockConfig+0x1bc>
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
 80026b4:	2302      	movs	r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2202      	movs	r2, #2
 80026c6:	61ba      	str	r2, [r7, #24]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	fa92 f2a2 	rbit	r2, r2
 80026ce:	617a      	str	r2, [r7, #20]
  return result;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f002 021f 	and.w	r2, r2, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e079      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	491a      	ldr	r1, [pc, #104]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7fe fb80 	bl	8000e08 <HAL_GetTick>
 8002708:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fb7c 	bl	8000e08 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e061      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_ClockConfig+0x260>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d214      	bcs.n	800276c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4906      	ldr	r1, [pc, #24]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_RCC_ClockConfig+0x25c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e040      	b.n	80027e6 <HAL_RCC_ClockConfig+0x2de>
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_ClockConfig+0x2e8>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x2e8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027aa:	f000 f829 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_ClockConfig+0x2e8>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	22f0      	movs	r2, #240	; 0xf0
 80027ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	fa92 f2a2 	rbit	r2, r2
 80027c2:	60fa      	str	r2, [r7, #12]
  return result;
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	40d3      	lsrs	r3, r2
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x2ec>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	fa21 f303 	lsr.w	r3, r1, r3
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x2f0>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_RCC_ClockConfig+0x2f4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe face 	bl	8000d80 <HAL_InitTick>
  
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3778      	adds	r7, #120	; 0x78
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08006224 	.word	0x08006224
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b08b      	sub	sp, #44	; 0x2c
 8002804:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x30>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x36>
 800282e:	e03c      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	e03c      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800283c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002840:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	607a      	str	r2, [r7, #4]
  return result;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	40d3      	lsrs	r3, r2
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	220f      	movs	r2, #15
 8002864:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	60fa      	str	r2, [r7, #12]
  return result;
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	40d3      	lsrs	r3, r2
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	e004      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	623b      	str	r3, [r7, #32]
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ac:	623b      	str	r3, [r7, #32]
      break;
 80028ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	372c      	adds	r7, #44	; 0x2c
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	0800623c 	.word	0x0800623c
 80028cc:	0800624c 	.word	0x0800624c
 80028d0:	003d0900 	.word	0x003d0900

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028f2:	f7ff ffef 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002900:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002904:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	fa92 f2a2 	rbit	r2, r2
 800290c:	603a      	str	r2, [r7, #0]
  return result;
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	40d3      	lsrs	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_RCC_GetPCLK1Freq+0x40>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	08006234 	.word	0x08006234

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002936:	f7ff ffcd 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002944:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002948:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	603a      	str	r2, [r7, #0]
  return result;
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	40d3      	lsrs	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x40>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	08006234 	.word	0x08006234

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b092      	sub	sp, #72	; 0x48
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80cd 	beq.w	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002998:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10e      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a8a      	ldr	r2, [pc, #552]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ae:	61d3      	str	r3, [r2, #28]
 80029b0:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b82      	ldr	r3, [pc, #520]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a81      	ldr	r2, [pc, #516]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe fa15 	bl	8000e08 <HAL_GetTick>
 80029de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe fa11 	bl	8000e08 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0ea      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a00:	4b74      	ldr	r3, [pc, #464]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d07d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d076      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d045      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe f9c2 	bl	8000e08 <HAL_GetTick>
 8002a84:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe f9be 	bl	8000e08 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e095      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	2302      	movs	r3, #2
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	e007      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	613a      	str	r2, [r7, #16]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	60fa      	str	r2, [r7, #12]
  return result;
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0bd      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	492e      	ldr	r1, [pc, #184]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4922      	ldr	r1, [pc, #136]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f023 0210 	bic.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	491a      	ldr	r1, [pc, #104]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	4913      	ldr	r1, [pc, #76]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	490b      	ldr	r1, [pc, #44]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3748      	adds	r7, #72	; 0x48
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	10908100 	.word	0x10908100

08002be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e049      	b.n	8002c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd ff3c 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 fa74 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e049      	b.n	8002d34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f841 	bl	8002d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f000 fa1d 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ff      	b.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b14      	cmp	r3, #20
 8002d7a:	f200 80f0 	bhi.w	8002f5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002f5f 	.word	0x08002f5f
 8002d8c:	08002f5f 	.word	0x08002f5f
 8002d90:	08002f5f 	.word	0x08002f5f
 8002d94:	08002e19 	.word	0x08002e19
 8002d98:	08002f5f 	.word	0x08002f5f
 8002d9c:	08002f5f 	.word	0x08002f5f
 8002da0:	08002f5f 	.word	0x08002f5f
 8002da4:	08002e5b 	.word	0x08002e5b
 8002da8:	08002f5f 	.word	0x08002f5f
 8002dac:	08002f5f 	.word	0x08002f5f
 8002db0:	08002f5f 	.word	0x08002f5f
 8002db4:	08002e9b 	.word	0x08002e9b
 8002db8:	08002f5f 	.word	0x08002f5f
 8002dbc:	08002f5f 	.word	0x08002f5f
 8002dc0:	08002f5f 	.word	0x08002f5f
 8002dc4:	08002edd 	.word	0x08002edd
 8002dc8:	08002f5f 	.word	0x08002f5f
 8002dcc:	08002f5f 	.word	0x08002f5f
 8002dd0:	08002f5f 	.word	0x08002f5f
 8002dd4:	08002f1d 	.word	0x08002f1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fa0c 	bl	80031fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6999      	ldr	r1, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]
      break;
 8002e16:	e0a5      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa72 	bl	8003308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
      break;
 8002e58:	e084      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fad1 	bl	8003408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0208 	orr.w	r2, r2, #8
 8002e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0204 	bic.w	r2, r2, #4
 8002e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69d9      	ldr	r1, [r3, #28]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      break;
 8002e98:	e064      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fb2f 	bl	8003504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	021a      	lsls	r2, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	61da      	str	r2, [r3, #28]
      break;
 8002eda:	e043      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fb72 	bl	80035cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f1a:	e023      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fbb0 	bl	8003688 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	021a      	lsls	r2, r3, #8
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
      break;
 8002f62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop

08002f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_ConfigClockSource+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0b6      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x18a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd8>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x176>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xaa>
 8002fec:	2b70      	cmp	r3, #112	; 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11e>
 8002ff4:	2b60      	cmp	r3, #96	; 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfe>
 8002ffc:	2b50      	cmp	r3, #80	; 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13e>
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	f000 fc03 	bl	800383c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	f000 fbec 	bl	800383c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 fb60 	bl	8003748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	; 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fbb9 	bl	8003806 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fb7f 	bl	80037a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	; 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fba9 	bl	8003806 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fb40 	bl	8003748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fb99 	bl	8003806 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 fb90 	bl	8003806 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <TIM_Base_SetConfig+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x28>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x28>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <TIM_Base_SetConfig+0xe0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <TIM_Base_SetConfig+0xdc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <TIM_Base_SetConfig+0x6a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d00f      	beq.n	8003176 <TIM_Base_SetConfig+0x6a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <TIM_Base_SetConfig+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x6a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <TIM_Base_SetConfig+0xe4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x6a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <TIM_Base_SetConfig+0xe8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x6a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <TIM_Base_SetConfig+0xec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <TIM_Base_SetConfig+0xdc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0xc0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <TIM_Base_SetConfig+0xe4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <TIM_Base_SetConfig+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <TIM_Base_SetConfig+0xec>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800

080031fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 0302 	bic.w	r3, r3, #2
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <TIM_OC1_SetConfig+0xfc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_OC1_SetConfig+0x78>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <TIM_OC1_SetConfig+0x100>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_OC1_SetConfig+0x78>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <TIM_OC1_SetConfig+0x104>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC1_SetConfig+0x78>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a25      	ldr	r2, [pc, #148]	; (8003304 <TIM_OC1_SetConfig+0x108>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10c      	bne.n	800328e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0308 	bic.w	r3, r3, #8
 800327a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_OC1_SetConfig+0xfc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC1_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <TIM_OC1_SetConfig+0x100>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC1_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a17      	ldr	r2, [pc, #92]	; (8003300 <TIM_OC1_SetConfig+0x104>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC1_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <TIM_OC1_SetConfig+0x108>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800

08003308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0210 	bic.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0320 	bic.w	r3, r3, #32
 8003356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <TIM_OC2_SetConfig+0xf0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10d      	bne.n	8003388 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <TIM_OC2_SetConfig+0xf0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_OC2_SetConfig+0xa0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <TIM_OC2_SetConfig+0xf4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_OC2_SetConfig+0xa0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <TIM_OC2_SetConfig+0xf8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_OC2_SetConfig+0xa0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <TIM_OC2_SetConfig+0xfc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d113      	bne.n	80033d0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <TIM_OC3_SetConfig+0xec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10d      	bne.n	8003486 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003484:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <TIM_OC3_SetConfig+0xec>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_OC3_SetConfig+0x9e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <TIM_OC3_SetConfig+0xf0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_OC3_SetConfig+0x9e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a18      	ldr	r2, [pc, #96]	; (80034fc <TIM_OC3_SetConfig+0xf4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC3_SetConfig+0x9e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <TIM_OC3_SetConfig+0xf8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d113      	bne.n	80034ce <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a16      	ldr	r2, [pc, #88]	; (80035bc <TIM_OC4_SetConfig+0xb8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_OC4_SetConfig+0x7c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <TIM_OC4_SetConfig+0xbc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_OC4_SetConfig+0x7c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_OC4_SetConfig+0xc0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC4_SetConfig+0x7c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <TIM_OC4_SetConfig+0xc4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003610:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <TIM_OC5_SetConfig+0xac>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_OC5_SetConfig+0x72>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <TIM_OC5_SetConfig+0xb0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_OC5_SetConfig+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <TIM_OC5_SetConfig+0xb4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC5_SetConfig+0x72>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a12      	ldr	r2, [pc, #72]	; (8003684 <TIM_OC5_SetConfig+0xb8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d109      	bne.n	8003652 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800

08003688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	051b      	lsls	r3, r3, #20
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <TIM_OC6_SetConfig+0xb0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_OC6_SetConfig+0x74>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <TIM_OC6_SetConfig+0xb4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_OC6_SetConfig+0x74>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <TIM_OC6_SetConfig+0xb8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_OC6_SetConfig+0x74>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <TIM_OC6_SetConfig+0xbc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d109      	bne.n	8003710 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	029b      	lsls	r3, r3, #10
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f023 0201 	bic.w	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 030a 	bic.w	r3, r3, #10
 8003784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	031b      	lsls	r3, r3, #12
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	f043 0307 	orr.w	r3, r3, #7
 8003828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	021a      	lsls	r2, r3, #8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	431a      	orrs	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e054      	b.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d009      	beq.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d10c      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	4313      	orrs	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40014000 	.word	0x40014000

08003958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e060      	b.n	8003a36 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d115      	bne.n	8003a24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	051b      	lsls	r3, r3, #20
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00

08003a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e040      	b.n	8003adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f8c2 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fc00 	bl	800428c <UART_SetConfig>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fd2a 	bl	80044f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fdb1 	bl	800463c <UART_CheckIdleState>
 8003ada:	4603      	mov	r3, r0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d178      	bne.n	8003bee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Transmit+0x24>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e071      	b.n	8003bf0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	; 0x21
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1a:	f7fd f975 	bl	8000e08 <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b38:	d108      	bne.n	8003b4c <HAL_UART_Transmit+0x68>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	e003      	b.n	8003b54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b54:	e030      	b.n	8003bb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fe13 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e03c      	b.n	8003bf0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	3302      	adds	r3, #2
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e008      	b.n	8003ba6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1c8      	bne.n	8003b56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2140      	movs	r1, #64	; 0x40
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fddc 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e005      	b.n	8003bf0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d132      	bne.n	8003c76 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_UART_Receive_IT+0x24>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e02b      	b.n	8003c78 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d018      	beq.n	8003c66 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e6      	bne.n	8003c34 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fdf5 	bl	800485c <UART_Start_Receive_IT>
 8003c72:	4603      	mov	r3, r0
 8003c74:	e000      	b.n	8003c78 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0ba      	sub	sp, #232	; 0xe8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003caa:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cae:	4013      	ands	r3, r2
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d115      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00f      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 82ab 	beq.w	8004234 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      }
      return;
 8003ce6:	e2a5      	b.n	8004234 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8117 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_UART_IRQHandler+0x298>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 810a 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
 8003d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8211 	beq.w	8004238 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04f      	beq.n	8003f02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fdc0 	bl	80049e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d141      	bne.n	8003efa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d9      	bne.n	8003e76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <HAL_UART_IRQHandler+0x29c>)
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f910 	bl	80010fc <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00f      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9b4 	bl	8004260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00b      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9b0 	bl	8004260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e007      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f9ac 	bl	8004260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f10:	e192      	b.n	8004238 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f12:	bf00      	nop
    return;
 8003f14:	e190      	b.n	8004238 <HAL_UART_IRQHandler+0x5b8>
 8003f16:	bf00      	nop
 8003f18:	04000120 	.word	0x04000120
 8003f1c:	08004ab1 	.word	0x08004ab1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 814b 	bne.w	80041c0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8144 	beq.w	80041c0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 813d 	beq.w	80041c0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	f040 80b5 	bne.w	80040c8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8164 	beq.w	800423c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	f080 815c 	bcs.w	800423c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	f000 8086 	beq.w	80040a6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fc8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1da      	bne.n	8003f9a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004008:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004010:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e1      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004044:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800404a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e3      	bne.n	8004020 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004088:	65bb      	str	r3, [r7, #88]	; 0x58
 800408a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e4      	bne.n	8004066 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fff2 	bl	800108a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8d7 	bl	8004274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040c6:	e0b9      	b.n	800423c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80ab 	beq.w	8004240 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80040ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a6 	beq.w	8004240 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
 8004118:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e4      	bne.n	80040f4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	623b      	str	r3, [r7, #32]
   return(result);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800414e:	633a      	str	r2, [r7, #48]	; 0x30
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e3      	bne.n	800412a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	617b      	str	r3, [r7, #20]
   return(result);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e4      	bne.n	8004176 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f85b 	bl	8004274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041be:	e03f      	b.n	8004240 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <HAL_UART_IRQHandler+0x56a>
 80041cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fe4c 	bl	8004e80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041e8:	e02d      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01c      	beq.n	8004244 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
    }
    return;
 8004212:	e017      	b.n	8004244 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_UART_IRQHandler+0x5c6>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fc55 	bl	8004adc <UART_EndTransmit_IT>
    return;
 8004232:	e008      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004234:	bf00      	nop
 8004236:	e006      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004238:	bf00      	nop
 800423a:	e004      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
      return;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004244:	bf00      	nop
  }

}
 8004246:	37e8      	adds	r7, #232	; 0xe8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b8a      	ldr	r3, [pc, #552]	; (80044e0 <UART_SetConfig+0x254>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a78      	ldr	r2, [pc, #480]	; (80044e4 <UART_SetConfig+0x258>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d120      	bne.n	800434a <UART_SetConfig+0xbe>
 8004308:	4b77      	ldr	r3, [pc, #476]	; (80044e8 <UART_SetConfig+0x25c>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b03      	cmp	r3, #3
 8004312:	d817      	bhi.n	8004344 <UART_SetConfig+0xb8>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <UART_SetConfig+0x90>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	0800432d 	.word	0x0800432d
 8004320:	08004339 	.word	0x08004339
 8004324:	0800433f 	.word	0x0800433f
 8004328:	08004333 	.word	0x08004333
 800432c:	2300      	movs	r3, #0
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e01d      	b.n	800436e <UART_SetConfig+0xe2>
 8004332:	2302      	movs	r3, #2
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e01a      	b.n	800436e <UART_SetConfig+0xe2>
 8004338:	2304      	movs	r3, #4
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e017      	b.n	800436e <UART_SetConfig+0xe2>
 800433e:	2308      	movs	r3, #8
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e014      	b.n	800436e <UART_SetConfig+0xe2>
 8004344:	2310      	movs	r3, #16
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e011      	b.n	800436e <UART_SetConfig+0xe2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a67      	ldr	r2, [pc, #412]	; (80044ec <UART_SetConfig+0x260>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d102      	bne.n	800435a <UART_SetConfig+0xce>
 8004354:	2300      	movs	r3, #0
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e009      	b.n	800436e <UART_SetConfig+0xe2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a64      	ldr	r2, [pc, #400]	; (80044f0 <UART_SetConfig+0x264>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d102      	bne.n	800436a <UART_SetConfig+0xde>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e001      	b.n	800436e <UART_SetConfig+0xe2>
 800436a:	2310      	movs	r3, #16
 800436c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	d15a      	bne.n	800442e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004378:	7ffb      	ldrb	r3, [r7, #31]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d827      	bhi.n	80043ce <UART_SetConfig+0x142>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0xf8>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe faa0 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 80043ac:	61b8      	str	r0, [r7, #24]
        break;
 80043ae:	e013      	b.n	80043d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fe fabe 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e00f      	b.n	80043d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <UART_SetConfig+0x268>)
 80043ba:	61bb      	str	r3, [r7, #24]
        break;
 80043bc:	e00c      	b.n	80043d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fe fa1f 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80043c2:	61b8      	str	r0, [r7, #24]
        break;
 80043c4:	e008      	b.n	80043d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ca:	61bb      	str	r3, [r7, #24]
        break;
 80043cc:	e004      	b.n	80043d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	77bb      	strb	r3, [r7, #30]
        break;
 80043d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d074      	beq.n	80044c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	005a      	lsls	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d916      	bls.n	8004428 <UART_SetConfig+0x19c>
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d212      	bcs.n	8004428 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f023 030f 	bic.w	r3, r3, #15
 800440a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b29a      	uxth	r2, r3
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	4313      	orrs	r3, r2
 800441c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	89fa      	ldrh	r2, [r7, #14]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e04f      	b.n	80044c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	77bb      	strb	r3, [r7, #30]
 800442c:	e04c      	b.n	80044c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800442e:	7ffb      	ldrb	r3, [r7, #31]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d828      	bhi.n	8004486 <UART_SetConfig+0x1fa>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x1b0>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	08004487 	.word	0x08004487
 800444c:	08004477 	.word	0x08004477
 8004450:	08004487 	.word	0x08004487
 8004454:	08004487 	.word	0x08004487
 8004458:	08004487 	.word	0x08004487
 800445c:	0800447f 	.word	0x0800447f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fa44 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8004464:	61b8      	str	r0, [r7, #24]
        break;
 8004466:	e013      	b.n	8004490 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7fe fa62 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e00f      	b.n	8004490 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <UART_SetConfig+0x268>)
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e00c      	b.n	8004490 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe f9c3 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 800447a:	61b8      	str	r0, [r7, #24]
        break;
 800447c:	e008      	b.n	8004490 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e004      	b.n	8004490 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	77bb      	strb	r3, [r7, #30]
        break;
 800448e:	bf00      	nop
    }

    if (pclk != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085a      	lsrs	r2, r3, #1
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	441a      	add	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b0f      	cmp	r3, #15
 80044ae:	d909      	bls.n	80044c4 <UART_SetConfig+0x238>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d205      	bcs.n	80044c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e001      	b.n	80044c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	efff69f3 	.word	0xefff69f3
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40004400 	.word	0x40004400
 80044f0:	40004800 	.word	0x40004800
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01a      	beq.n	800460e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f6:	d10a      	bne.n	800460e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b098      	sub	sp, #96	; 0x60
 8004640:	af02      	add	r7, sp, #8
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800464c:	f7fc fbdc 	bl	8000e08 <HAL_GetTick>
 8004650:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b08      	cmp	r3, #8
 800465e:	d12e      	bne.n	80046be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f88c 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d021      	beq.n	80046be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468e:	653b      	str	r3, [r7, #80]	; 0x50
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004698:	647b      	str	r3, [r7, #68]	; 0x44
 800469a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800469e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e062      	b.n	8004784 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d149      	bne.n	8004760 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f856 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03c      	beq.n	8004760 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	623b      	str	r3, [r7, #32]
   return(result);
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	633b      	str	r3, [r7, #48]	; 0x30
 8004706:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800470a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e6      	bne.n	80046e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	60fb      	str	r3, [r7, #12]
   return(result);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	617b      	str	r3, [r7, #20]
   return(result);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e5      	bne.n	8004718 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e011      	b.n	8004784 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3758      	adds	r7, #88	; 0x58
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479c:	e049      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d045      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fc fb2f 	bl	8000e08 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <UART_WaitOnFlagUntilTimeout+0x30>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e048      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d031      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d110      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2208      	movs	r2, #8
 80047e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f8ff 	bl	80049e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2208      	movs	r2, #8
 80047ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e029      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480c:	d111      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f8e5 	bl	80049e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	429a      	cmp	r2, r3
 800484e:	d0a6      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485c:	b480      	push	{r7}
 800485e:	b097      	sub	sp, #92	; 0x5c
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d10e      	bne.n	80048ae <UART_Start_Receive_IT+0x52>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <UART_Start_Receive_IT+0x48>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800489e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a2:	e02d      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	22ff      	movs	r2, #255	; 0xff
 80048a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ac:	e028      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <UART_Start_Receive_IT+0x76>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <UART_Start_Receive_IT+0x6c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c6:	e01b      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	227f      	movs	r2, #127	; 0x7f
 80048cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d0:	e016      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d10d      	bne.n	80048f8 <UART_Start_Receive_IT+0x9c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <UART_Start_Receive_IT+0x92>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	227f      	movs	r2, #127	; 0x7f
 80048e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ec:	e008      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	223f      	movs	r2, #63	; 0x3f
 80048f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f6:	e003      	b.n	8004900 <UART_Start_Receive_IT+0xa4>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2222      	movs	r2, #34	; 0x22
 800490c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004930:	64ba      	str	r2, [r7, #72]	; 0x48
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d107      	bne.n	800495e <UART_Start_Receive_IT+0x102>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <UART_Start_Receive_IT+0x184>)
 800495a:	669a      	str	r2, [r3, #104]	; 0x68
 800495c:	e002      	b.n	8004964 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <UART_Start_Receive_IT+0x188>)
 8004962:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d019      	beq.n	80049a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004980:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
 800498c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e6      	bne.n	800496c <UART_Start_Receive_IT+0x110>
 800499e:	e018      	b.n	80049d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	613b      	str	r3, [r7, #16]
   return(result);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	69f9      	ldr	r1, [r7, #28]
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	375c      	adds	r7, #92	; 0x5c
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	08004cd9 	.word	0x08004cd9
 80049e4:	08004b31 	.word	0x08004b31

080049e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b095      	sub	sp, #84	; 0x54
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e6      	bne.n	80049f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e5      	bne.n	8004a22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d118      	bne.n	8004a90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aa4:	bf00      	nop
 8004aa6:	3754      	adds	r7, #84	; 0x54
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fbc6 	bl	8004260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fb92 	bl	800424c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b09c      	sub	sp, #112	; 0x70
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b48:	2b22      	cmp	r3, #34	; 0x22
 8004b4a:	f040 80b9 	bne.w	8004cc0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b5c:	b2d9      	uxtb	r1, r3
 8004b5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	400a      	ands	r2, r1
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 809c 	bne.w	8004cd0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	667b      	str	r3, [r7, #100]	; 0x64
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bea:	647a      	str	r2, [r7, #68]	; 0x44
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d018      	beq.n	8004c52 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c34:	663b      	str	r3, [r7, #96]	; 0x60
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d12e      	bne.n	8004cb8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	69b9      	ldr	r1, [r7, #24]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d103      	bne.n	8004ca8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fadf 	bl	8004274 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cb6:	e00b      	b.n	8004cd0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fb fd57 	bl	800076c <HAL_UART_RxCpltCallback>
}
 8004cbe:	e007      	b.n	8004cd0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	619a      	str	r2, [r3, #24]
}
 8004cd0:	bf00      	nop
 8004cd2:	3770      	adds	r7, #112	; 0x70
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b09c      	sub	sp, #112	; 0x70
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ce6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf0:	2b22      	cmp	r3, #34	; 0x22
 8004cf2:	f040 80b9 	bne.w	8004e68 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004d0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 809c 	bne.w	8004e78 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d54:	667b      	str	r3, [r7, #100]	; 0x64
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d60:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d92:	643a      	str	r2, [r7, #64]	; 0x40
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d018      	beq.n	8004dfa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d12e      	bne.n	8004e60 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d103      	bne.n	8004e50 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fa0b 	bl	8004274 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e5e:	e00b      	b.n	8004e78 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fb fc83 	bl	800076c <HAL_UART_RxCpltCallback>
}
 8004e66:	e007      	b.n	8004e78 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	619a      	str	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	3770      	adds	r7, #112	; 0x70
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <siprintf>:
 8004e94:	b40e      	push	{r1, r2, r3}
 8004e96:	b500      	push	{lr}
 8004e98:	b09c      	sub	sp, #112	; 0x70
 8004e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e9c:	9002      	str	r0, [sp, #8]
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea4:	4809      	ldr	r0, [pc, #36]	; (8004ecc <siprintf+0x38>)
 8004ea6:	9107      	str	r1, [sp, #28]
 8004ea8:	9104      	str	r1, [sp, #16]
 8004eaa:	4909      	ldr	r1, [pc, #36]	; (8004ed0 <siprintf+0x3c>)
 8004eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb0:	9105      	str	r1, [sp, #20]
 8004eb2:	6800      	ldr	r0, [r0, #0]
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	a902      	add	r1, sp, #8
 8004eb8:	f000 f9de 	bl	8005278 <_svfiprintf_r>
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	b01c      	add	sp, #112	; 0x70
 8004ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec8:	b003      	add	sp, #12
 8004eca:	4770      	bx	lr
 8004ecc:	20000058 	.word	0x20000058
 8004ed0:	ffff0208 	.word	0xffff0208

08004ed4 <siscanf>:
 8004ed4:	b40e      	push	{r1, r2, r3}
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	b09f      	sub	sp, #124	; 0x7c
 8004eda:	ac21      	add	r4, sp, #132	; 0x84
 8004edc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004ee0:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ee4:	9201      	str	r2, [sp, #4]
 8004ee6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004eea:	9004      	str	r0, [sp, #16]
 8004eec:	9008      	str	r0, [sp, #32]
 8004eee:	f7fb f96f 	bl	80001d0 <strlen>
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <siscanf+0x50>)
 8004ef4:	9005      	str	r0, [sp, #20]
 8004ef6:	9009      	str	r0, [sp, #36]	; 0x24
 8004ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8004efa:	480b      	ldr	r0, [pc, #44]	; (8004f28 <siscanf+0x54>)
 8004efc:	9a01      	ldr	r2, [sp, #4]
 8004efe:	6800      	ldr	r0, [r0, #0]
 8004f00:	9403      	str	r4, [sp, #12]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9311      	str	r3, [sp, #68]	; 0x44
 8004f06:	9316      	str	r3, [sp, #88]	; 0x58
 8004f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004f10:	a904      	add	r1, sp, #16
 8004f12:	4623      	mov	r3, r4
 8004f14:	f000 fb08 	bl	8005528 <__ssvfiscanf_r>
 8004f18:	b01f      	add	sp, #124	; 0x7c
 8004f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1e:	b003      	add	sp, #12
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	08004f2d 	.word	0x08004f2d
 8004f28:	20000058 	.word	0x20000058

08004f2c <__seofread>:
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4770      	bx	lr

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <strstr>:
 8004f40:	780a      	ldrb	r2, [r1, #0]
 8004f42:	b570      	push	{r4, r5, r6, lr}
 8004f44:	b96a      	cbnz	r2, 8004f62 <strstr+0x22>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d109      	bne.n	8004f60 <strstr+0x20>
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	4605      	mov	r5, r0
 8004f50:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f6      	beq.n	8004f46 <strstr+0x6>
 8004f58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004f5c:	429e      	cmp	r6, r3
 8004f5e:	d0f7      	beq.n	8004f50 <strstr+0x10>
 8004f60:	3001      	adds	r0, #1
 8004f62:	7803      	ldrb	r3, [r0, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ef      	bne.n	8004f48 <strstr+0x8>
 8004f68:	4618      	mov	r0, r3
 8004f6a:	e7ec      	b.n	8004f46 <strstr+0x6>

08004f6c <__errno>:
 8004f6c:	4b01      	ldr	r3, [pc, #4]	; (8004f74 <__errno+0x8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000058 	.word	0x20000058

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4d0d      	ldr	r5, [pc, #52]	; (8004fb0 <__libc_init_array+0x38>)
 8004f7c:	4c0d      	ldr	r4, [pc, #52]	; (8004fb4 <__libc_init_array+0x3c>)
 8004f7e:	1b64      	subs	r4, r4, r5
 8004f80:	10a4      	asrs	r4, r4, #2
 8004f82:	2600      	movs	r6, #0
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	4d0b      	ldr	r5, [pc, #44]	; (8004fb8 <__libc_init_array+0x40>)
 8004f8a:	4c0c      	ldr	r4, [pc, #48]	; (8004fbc <__libc_init_array+0x44>)
 8004f8c:	f001 f8fe 	bl	800618c <_init>
 8004f90:	1b64      	subs	r4, r4, r5
 8004f92:	10a4      	asrs	r4, r4, #2
 8004f94:	2600      	movs	r6, #0
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	080063ac 	.word	0x080063ac
 8004fb4:	080063ac 	.word	0x080063ac
 8004fb8:	080063ac 	.word	0x080063ac
 8004fbc:	080063b0 	.word	0x080063b0

08004fc0 <__retarget_lock_acquire_recursive>:
 8004fc0:	4770      	bx	lr

08004fc2 <__retarget_lock_release_recursive>:
 8004fc2:	4770      	bx	lr

08004fc4 <strcpy>:
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fca:	f803 2b01 	strb.w	r2, [r3], #1
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d1f9      	bne.n	8004fc6 <strcpy+0x2>
 8004fd2:	4770      	bx	lr

08004fd4 <_free_r>:
 8004fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	d044      	beq.n	8005064 <_free_r+0x90>
 8004fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fde:	9001      	str	r0, [sp, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fe6:	bfb8      	it	lt
 8004fe8:	18e4      	addlt	r4, r4, r3
 8004fea:	f000 f8df 	bl	80051ac <__malloc_lock>
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <_free_r+0x94>)
 8004ff0:	9801      	ldr	r0, [sp, #4]
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	b933      	cbnz	r3, 8005004 <_free_r+0x30>
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6014      	str	r4, [r2, #0]
 8004ffa:	b003      	add	sp, #12
 8004ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005000:	f000 b8da 	b.w	80051b8 <__malloc_unlock>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d908      	bls.n	800501a <_free_r+0x46>
 8005008:	6825      	ldr	r5, [r4, #0]
 800500a:	1961      	adds	r1, r4, r5
 800500c:	428b      	cmp	r3, r1
 800500e:	bf01      	itttt	eq
 8005010:	6819      	ldreq	r1, [r3, #0]
 8005012:	685b      	ldreq	r3, [r3, #4]
 8005014:	1949      	addeq	r1, r1, r5
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	e7ed      	b.n	8004ff6 <_free_r+0x22>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x50>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x46>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1855      	adds	r5, r2, r1
 8005028:	42a5      	cmp	r5, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x70>
 800502c:	6824      	ldr	r4, [r4, #0]
 800502e:	4421      	add	r1, r4
 8005030:	1854      	adds	r4, r2, r1
 8005032:	42a3      	cmp	r3, r4
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1e0      	bne.n	8004ffa <_free_r+0x26>
 8005038:	681c      	ldr	r4, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6053      	str	r3, [r2, #4]
 800503e:	440c      	add	r4, r1
 8005040:	6014      	str	r4, [r2, #0]
 8005042:	e7da      	b.n	8004ffa <_free_r+0x26>
 8005044:	d902      	bls.n	800504c <_free_r+0x78>
 8005046:	230c      	movs	r3, #12
 8005048:	6003      	str	r3, [r0, #0]
 800504a:	e7d6      	b.n	8004ffa <_free_r+0x26>
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1961      	adds	r1, r4, r5
 8005050:	428b      	cmp	r3, r1
 8005052:	bf04      	itt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	6063      	str	r3, [r4, #4]
 800505a:	bf04      	itt	eq
 800505c:	1949      	addeq	r1, r1, r5
 800505e:	6021      	streq	r1, [r4, #0]
 8005060:	6054      	str	r4, [r2, #4]
 8005062:	e7ca      	b.n	8004ffa <_free_r+0x26>
 8005064:	b003      	add	sp, #12
 8005066:	bd30      	pop	{r4, r5, pc}
 8005068:	200006b4 	.word	0x200006b4

0800506c <sbrk_aligned>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4e0e      	ldr	r6, [pc, #56]	; (80050a8 <sbrk_aligned+0x3c>)
 8005070:	460c      	mov	r4, r1
 8005072:	6831      	ldr	r1, [r6, #0]
 8005074:	4605      	mov	r5, r0
 8005076:	b911      	cbnz	r1, 800507e <sbrk_aligned+0x12>
 8005078:	f000 ff3a 	bl	8005ef0 <_sbrk_r>
 800507c:	6030      	str	r0, [r6, #0]
 800507e:	4621      	mov	r1, r4
 8005080:	4628      	mov	r0, r5
 8005082:	f000 ff35 	bl	8005ef0 <_sbrk_r>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	d00a      	beq.n	80050a0 <sbrk_aligned+0x34>
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d007      	beq.n	80050a4 <sbrk_aligned+0x38>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4628      	mov	r0, r5
 8005098:	f000 ff2a 	bl	8005ef0 <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d101      	bne.n	80050a4 <sbrk_aligned+0x38>
 80050a0:	f04f 34ff 	mov.w	r4, #4294967295
 80050a4:	4620      	mov	r0, r4
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	200006b8 	.word	0x200006b8

080050ac <_malloc_r>:
 80050ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b0:	1ccd      	adds	r5, r1, #3
 80050b2:	f025 0503 	bic.w	r5, r5, #3
 80050b6:	3508      	adds	r5, #8
 80050b8:	2d0c      	cmp	r5, #12
 80050ba:	bf38      	it	cc
 80050bc:	250c      	movcc	r5, #12
 80050be:	2d00      	cmp	r5, #0
 80050c0:	4607      	mov	r7, r0
 80050c2:	db01      	blt.n	80050c8 <_malloc_r+0x1c>
 80050c4:	42a9      	cmp	r1, r5
 80050c6:	d905      	bls.n	80050d4 <_malloc_r+0x28>
 80050c8:	230c      	movs	r3, #12
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	2600      	movs	r6, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051a8 <_malloc_r+0xfc>
 80050d8:	f000 f868 	bl	80051ac <__malloc_lock>
 80050dc:	f8d8 3000 	ldr.w	r3, [r8]
 80050e0:	461c      	mov	r4, r3
 80050e2:	bb5c      	cbnz	r4, 800513c <_malloc_r+0x90>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ffc0 	bl	800506c <sbrk_aligned>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	4604      	mov	r4, r0
 80050f0:	d155      	bne.n	800519e <_malloc_r+0xf2>
 80050f2:	f8d8 4000 	ldr.w	r4, [r8]
 80050f6:	4626      	mov	r6, r4
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	d145      	bne.n	8005188 <_malloc_r+0xdc>
 80050fc:	2c00      	cmp	r4, #0
 80050fe:	d048      	beq.n	8005192 <_malloc_r+0xe6>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	4631      	mov	r1, r6
 8005104:	4638      	mov	r0, r7
 8005106:	eb04 0903 	add.w	r9, r4, r3
 800510a:	f000 fef1 	bl	8005ef0 <_sbrk_r>
 800510e:	4581      	cmp	r9, r0
 8005110:	d13f      	bne.n	8005192 <_malloc_r+0xe6>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	1a6d      	subs	r5, r5, r1
 8005116:	4629      	mov	r1, r5
 8005118:	4638      	mov	r0, r7
 800511a:	f7ff ffa7 	bl	800506c <sbrk_aligned>
 800511e:	3001      	adds	r0, #1
 8005120:	d037      	beq.n	8005192 <_malloc_r+0xe6>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	442b      	add	r3, r5
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	f8d8 3000 	ldr.w	r3, [r8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d038      	beq.n	80051a2 <_malloc_r+0xf6>
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	42a2      	cmp	r2, r4
 8005134:	d12b      	bne.n	800518e <_malloc_r+0xe2>
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e00f      	b.n	800515c <_malloc_r+0xb0>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	1b52      	subs	r2, r2, r5
 8005140:	d41f      	bmi.n	8005182 <_malloc_r+0xd6>
 8005142:	2a0b      	cmp	r2, #11
 8005144:	d917      	bls.n	8005176 <_malloc_r+0xca>
 8005146:	1961      	adds	r1, r4, r5
 8005148:	42a3      	cmp	r3, r4
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	bf18      	it	ne
 800514e:	6059      	strne	r1, [r3, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	bf08      	it	eq
 8005154:	f8c8 1000 	streq.w	r1, [r8]
 8005158:	5162      	str	r2, [r4, r5]
 800515a:	604b      	str	r3, [r1, #4]
 800515c:	4638      	mov	r0, r7
 800515e:	f104 060b 	add.w	r6, r4, #11
 8005162:	f000 f829 	bl	80051b8 <__malloc_unlock>
 8005166:	f026 0607 	bic.w	r6, r6, #7
 800516a:	1d23      	adds	r3, r4, #4
 800516c:	1af2      	subs	r2, r6, r3
 800516e:	d0ae      	beq.n	80050ce <_malloc_r+0x22>
 8005170:	1b9b      	subs	r3, r3, r6
 8005172:	50a3      	str	r3, [r4, r2]
 8005174:	e7ab      	b.n	80050ce <_malloc_r+0x22>
 8005176:	42a3      	cmp	r3, r4
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	d1dd      	bne.n	8005138 <_malloc_r+0x8c>
 800517c:	f8c8 2000 	str.w	r2, [r8]
 8005180:	e7ec      	b.n	800515c <_malloc_r+0xb0>
 8005182:	4623      	mov	r3, r4
 8005184:	6864      	ldr	r4, [r4, #4]
 8005186:	e7ac      	b.n	80050e2 <_malloc_r+0x36>
 8005188:	4634      	mov	r4, r6
 800518a:	6876      	ldr	r6, [r6, #4]
 800518c:	e7b4      	b.n	80050f8 <_malloc_r+0x4c>
 800518e:	4613      	mov	r3, r2
 8005190:	e7cc      	b.n	800512c <_malloc_r+0x80>
 8005192:	230c      	movs	r3, #12
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4638      	mov	r0, r7
 8005198:	f000 f80e 	bl	80051b8 <__malloc_unlock>
 800519c:	e797      	b.n	80050ce <_malloc_r+0x22>
 800519e:	6025      	str	r5, [r4, #0]
 80051a0:	e7dc      	b.n	800515c <_malloc_r+0xb0>
 80051a2:	605b      	str	r3, [r3, #4]
 80051a4:	deff      	udf	#255	; 0xff
 80051a6:	bf00      	nop
 80051a8:	200006b4 	.word	0x200006b4

080051ac <__malloc_lock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__malloc_lock+0x8>)
 80051ae:	f7ff bf07 	b.w	8004fc0 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	200006b0 	.word	0x200006b0

080051b8 <__malloc_unlock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_unlock+0x8>)
 80051ba:	f7ff bf02 	b.w	8004fc2 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	200006b0 	.word	0x200006b0

080051c4 <__ssputs_r>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	688e      	ldr	r6, [r1, #8]
 80051ca:	461f      	mov	r7, r3
 80051cc:	42be      	cmp	r6, r7
 80051ce:	680b      	ldr	r3, [r1, #0]
 80051d0:	4682      	mov	sl, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	4690      	mov	r8, r2
 80051d6:	d82c      	bhi.n	8005232 <__ssputs_r+0x6e>
 80051d8:	898a      	ldrh	r2, [r1, #12]
 80051da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051de:	d026      	beq.n	800522e <__ssputs_r+0x6a>
 80051e0:	6965      	ldr	r5, [r4, #20]
 80051e2:	6909      	ldr	r1, [r1, #16]
 80051e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e8:	eba3 0901 	sub.w	r9, r3, r1
 80051ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051f0:	1c7b      	adds	r3, r7, #1
 80051f2:	444b      	add	r3, r9
 80051f4:	106d      	asrs	r5, r5, #1
 80051f6:	429d      	cmp	r5, r3
 80051f8:	bf38      	it	cc
 80051fa:	461d      	movcc	r5, r3
 80051fc:	0553      	lsls	r3, r2, #21
 80051fe:	d527      	bpl.n	8005250 <__ssputs_r+0x8c>
 8005200:	4629      	mov	r1, r5
 8005202:	f7ff ff53 	bl	80050ac <_malloc_r>
 8005206:	4606      	mov	r6, r0
 8005208:	b360      	cbz	r0, 8005264 <__ssputs_r+0xa0>
 800520a:	6921      	ldr	r1, [r4, #16]
 800520c:	464a      	mov	r2, r9
 800520e:	f000 fe7f 	bl	8005f10 <memcpy>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	6126      	str	r6, [r4, #16]
 8005220:	6165      	str	r5, [r4, #20]
 8005222:	444e      	add	r6, r9
 8005224:	eba5 0509 	sub.w	r5, r5, r9
 8005228:	6026      	str	r6, [r4, #0]
 800522a:	60a5      	str	r5, [r4, #8]
 800522c:	463e      	mov	r6, r7
 800522e:	42be      	cmp	r6, r7
 8005230:	d900      	bls.n	8005234 <__ssputs_r+0x70>
 8005232:	463e      	mov	r6, r7
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	4632      	mov	r2, r6
 8005238:	4641      	mov	r1, r8
 800523a:	f000 fe3e 	bl	8005eba <memmove>
 800523e:	68a3      	ldr	r3, [r4, #8]
 8005240:	1b9b      	subs	r3, r3, r6
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	4433      	add	r3, r6
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	2000      	movs	r0, #0
 800524c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005250:	462a      	mov	r2, r5
 8005252:	f000 fe6b 	bl	8005f2c <_realloc_r>
 8005256:	4606      	mov	r6, r0
 8005258:	2800      	cmp	r0, #0
 800525a:	d1e0      	bne.n	800521e <__ssputs_r+0x5a>
 800525c:	6921      	ldr	r1, [r4, #16]
 800525e:	4650      	mov	r0, sl
 8005260:	f7ff feb8 	bl	8004fd4 <_free_r>
 8005264:	230c      	movs	r3, #12
 8005266:	f8ca 3000 	str.w	r3, [sl]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	e7e9      	b.n	800524c <__ssputs_r+0x88>

08005278 <_svfiprintf_r>:
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	4698      	mov	r8, r3
 800527e:	898b      	ldrh	r3, [r1, #12]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	b09d      	sub	sp, #116	; 0x74
 8005284:	4607      	mov	r7, r0
 8005286:	460d      	mov	r5, r1
 8005288:	4614      	mov	r4, r2
 800528a:	d50e      	bpl.n	80052aa <_svfiprintf_r+0x32>
 800528c:	690b      	ldr	r3, [r1, #16]
 800528e:	b963      	cbnz	r3, 80052aa <_svfiprintf_r+0x32>
 8005290:	2140      	movs	r1, #64	; 0x40
 8005292:	f7ff ff0b 	bl	80050ac <_malloc_r>
 8005296:	6028      	str	r0, [r5, #0]
 8005298:	6128      	str	r0, [r5, #16]
 800529a:	b920      	cbnz	r0, 80052a6 <_svfiprintf_r+0x2e>
 800529c:	230c      	movs	r3, #12
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e0d0      	b.n	8005448 <_svfiprintf_r+0x1d0>
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	616b      	str	r3, [r5, #20]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9309      	str	r3, [sp, #36]	; 0x24
 80052ae:	2320      	movs	r3, #32
 80052b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052b8:	2330      	movs	r3, #48	; 0x30
 80052ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005460 <_svfiprintf_r+0x1e8>
 80052be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c2:	f04f 0901 	mov.w	r9, #1
 80052c6:	4623      	mov	r3, r4
 80052c8:	469a      	mov	sl, r3
 80052ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ce:	b10a      	cbz	r2, 80052d4 <_svfiprintf_r+0x5c>
 80052d0:	2a25      	cmp	r2, #37	; 0x25
 80052d2:	d1f9      	bne.n	80052c8 <_svfiprintf_r+0x50>
 80052d4:	ebba 0b04 	subs.w	fp, sl, r4
 80052d8:	d00b      	beq.n	80052f2 <_svfiprintf_r+0x7a>
 80052da:	465b      	mov	r3, fp
 80052dc:	4622      	mov	r2, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	4638      	mov	r0, r7
 80052e2:	f7ff ff6f 	bl	80051c4 <__ssputs_r>
 80052e6:	3001      	adds	r0, #1
 80052e8:	f000 80a9 	beq.w	800543e <_svfiprintf_r+0x1c6>
 80052ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ee:	445a      	add	r2, fp
 80052f0:	9209      	str	r2, [sp, #36]	; 0x24
 80052f2:	f89a 3000 	ldrb.w	r3, [sl]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80a1 	beq.w	800543e <_svfiprintf_r+0x1c6>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005306:	f10a 0a01 	add.w	sl, sl, #1
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005312:	931a      	str	r3, [sp, #104]	; 0x68
 8005314:	4654      	mov	r4, sl
 8005316:	2205      	movs	r2, #5
 8005318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800531c:	4850      	ldr	r0, [pc, #320]	; (8005460 <_svfiprintf_r+0x1e8>)
 800531e:	f7fa ff5f 	bl	80001e0 <memchr>
 8005322:	9a04      	ldr	r2, [sp, #16]
 8005324:	b9d8      	cbnz	r0, 800535e <_svfiprintf_r+0xe6>
 8005326:	06d0      	lsls	r0, r2, #27
 8005328:	bf44      	itt	mi
 800532a:	2320      	movmi	r3, #32
 800532c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005330:	0711      	lsls	r1, r2, #28
 8005332:	bf44      	itt	mi
 8005334:	232b      	movmi	r3, #43	; 0x2b
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800533a:	f89a 3000 	ldrb.w	r3, [sl]
 800533e:	2b2a      	cmp	r3, #42	; 0x2a
 8005340:	d015      	beq.n	800536e <_svfiprintf_r+0xf6>
 8005342:	9a07      	ldr	r2, [sp, #28]
 8005344:	4654      	mov	r4, sl
 8005346:	2000      	movs	r0, #0
 8005348:	f04f 0c0a 	mov.w	ip, #10
 800534c:	4621      	mov	r1, r4
 800534e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005352:	3b30      	subs	r3, #48	; 0x30
 8005354:	2b09      	cmp	r3, #9
 8005356:	d94d      	bls.n	80053f4 <_svfiprintf_r+0x17c>
 8005358:	b1b0      	cbz	r0, 8005388 <_svfiprintf_r+0x110>
 800535a:	9207      	str	r2, [sp, #28]
 800535c:	e014      	b.n	8005388 <_svfiprintf_r+0x110>
 800535e:	eba0 0308 	sub.w	r3, r0, r8
 8005362:	fa09 f303 	lsl.w	r3, r9, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	46a2      	mov	sl, r4
 800536c:	e7d2      	b.n	8005314 <_svfiprintf_r+0x9c>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	1d19      	adds	r1, r3, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	9103      	str	r1, [sp, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	bfbb      	ittet	lt
 800537a:	425b      	neglt	r3, r3
 800537c:	f042 0202 	orrlt.w	r2, r2, #2
 8005380:	9307      	strge	r3, [sp, #28]
 8005382:	9307      	strlt	r3, [sp, #28]
 8005384:	bfb8      	it	lt
 8005386:	9204      	strlt	r2, [sp, #16]
 8005388:	7823      	ldrb	r3, [r4, #0]
 800538a:	2b2e      	cmp	r3, #46	; 0x2e
 800538c:	d10c      	bne.n	80053a8 <_svfiprintf_r+0x130>
 800538e:	7863      	ldrb	r3, [r4, #1]
 8005390:	2b2a      	cmp	r3, #42	; 0x2a
 8005392:	d134      	bne.n	80053fe <_svfiprintf_r+0x186>
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	1d1a      	adds	r2, r3, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	9203      	str	r2, [sp, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	bfb8      	it	lt
 80053a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a4:	3402      	adds	r4, #2
 80053a6:	9305      	str	r3, [sp, #20]
 80053a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005470 <_svfiprintf_r+0x1f8>
 80053ac:	7821      	ldrb	r1, [r4, #0]
 80053ae:	2203      	movs	r2, #3
 80053b0:	4650      	mov	r0, sl
 80053b2:	f7fa ff15 	bl	80001e0 <memchr>
 80053b6:	b138      	cbz	r0, 80053c8 <_svfiprintf_r+0x150>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	eba0 000a 	sub.w	r0, r0, sl
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	4082      	lsls	r2, r0
 80053c2:	4313      	orrs	r3, r2
 80053c4:	3401      	adds	r4, #1
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053cc:	4825      	ldr	r0, [pc, #148]	; (8005464 <_svfiprintf_r+0x1ec>)
 80053ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d2:	2206      	movs	r2, #6
 80053d4:	f7fa ff04 	bl	80001e0 <memchr>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d038      	beq.n	800544e <_svfiprintf_r+0x1d6>
 80053dc:	4b22      	ldr	r3, [pc, #136]	; (8005468 <_svfiprintf_r+0x1f0>)
 80053de:	bb1b      	cbnz	r3, 8005428 <_svfiprintf_r+0x1b0>
 80053e0:	9b03      	ldr	r3, [sp, #12]
 80053e2:	3307      	adds	r3, #7
 80053e4:	f023 0307 	bic.w	r3, r3, #7
 80053e8:	3308      	adds	r3, #8
 80053ea:	9303      	str	r3, [sp, #12]
 80053ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ee:	4433      	add	r3, r6
 80053f0:	9309      	str	r3, [sp, #36]	; 0x24
 80053f2:	e768      	b.n	80052c6 <_svfiprintf_r+0x4e>
 80053f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f8:	460c      	mov	r4, r1
 80053fa:	2001      	movs	r0, #1
 80053fc:	e7a6      	b.n	800534c <_svfiprintf_r+0xd4>
 80053fe:	2300      	movs	r3, #0
 8005400:	3401      	adds	r4, #1
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	4619      	mov	r1, r3
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	4620      	mov	r0, r4
 800540c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005410:	3a30      	subs	r2, #48	; 0x30
 8005412:	2a09      	cmp	r2, #9
 8005414:	d903      	bls.n	800541e <_svfiprintf_r+0x1a6>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0c6      	beq.n	80053a8 <_svfiprintf_r+0x130>
 800541a:	9105      	str	r1, [sp, #20]
 800541c:	e7c4      	b.n	80053a8 <_svfiprintf_r+0x130>
 800541e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005422:	4604      	mov	r4, r0
 8005424:	2301      	movs	r3, #1
 8005426:	e7f0      	b.n	800540a <_svfiprintf_r+0x192>
 8005428:	ab03      	add	r3, sp, #12
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	462a      	mov	r2, r5
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <_svfiprintf_r+0x1f4>)
 8005430:	a904      	add	r1, sp, #16
 8005432:	4638      	mov	r0, r7
 8005434:	f3af 8000 	nop.w
 8005438:	1c42      	adds	r2, r0, #1
 800543a:	4606      	mov	r6, r0
 800543c:	d1d6      	bne.n	80053ec <_svfiprintf_r+0x174>
 800543e:	89ab      	ldrh	r3, [r5, #12]
 8005440:	065b      	lsls	r3, r3, #25
 8005442:	f53f af2d 	bmi.w	80052a0 <_svfiprintf_r+0x28>
 8005446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005448:	b01d      	add	sp, #116	; 0x74
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544e:	ab03      	add	r3, sp, #12
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	462a      	mov	r2, r5
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <_svfiprintf_r+0x1f4>)
 8005456:	a904      	add	r1, sp, #16
 8005458:	4638      	mov	r0, r7
 800545a:	f000 fa4b 	bl	80058f4 <_printf_i>
 800545e:	e7eb      	b.n	8005438 <_svfiprintf_r+0x1c0>
 8005460:	0800625c 	.word	0x0800625c
 8005464:	08006266 	.word	0x08006266
 8005468:	00000000 	.word	0x00000000
 800546c:	080051c5 	.word	0x080051c5
 8005470:	08006262 	.word	0x08006262

08005474 <_sungetc_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	1c4b      	adds	r3, r1, #1
 8005478:	4614      	mov	r4, r2
 800547a:	d103      	bne.n	8005484 <_sungetc_r+0x10>
 800547c:	f04f 35ff 	mov.w	r5, #4294967295
 8005480:	4628      	mov	r0, r5
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	8993      	ldrh	r3, [r2, #12]
 8005486:	f023 0320 	bic.w	r3, r3, #32
 800548a:	8193      	strh	r3, [r2, #12]
 800548c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548e:	6852      	ldr	r2, [r2, #4]
 8005490:	b2cd      	uxtb	r5, r1
 8005492:	b18b      	cbz	r3, 80054b8 <_sungetc_r+0x44>
 8005494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005496:	4293      	cmp	r3, r2
 8005498:	dd08      	ble.n	80054ac <_sungetc_r+0x38>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	3301      	adds	r3, #1
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	e7e9      	b.n	8005480 <_sungetc_r+0xc>
 80054ac:	4621      	mov	r1, r4
 80054ae:	f000 fcca 	bl	8005e46 <__submore>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0f1      	beq.n	800549a <_sungetc_r+0x26>
 80054b6:	e7e1      	b.n	800547c <_sungetc_r+0x8>
 80054b8:	6921      	ldr	r1, [r4, #16]
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	b151      	cbz	r1, 80054d4 <_sungetc_r+0x60>
 80054be:	4299      	cmp	r1, r3
 80054c0:	d208      	bcs.n	80054d4 <_sungetc_r+0x60>
 80054c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80054c6:	42a9      	cmp	r1, r5
 80054c8:	d104      	bne.n	80054d4 <_sungetc_r+0x60>
 80054ca:	3b01      	subs	r3, #1
 80054cc:	3201      	adds	r2, #1
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	6062      	str	r2, [r4, #4]
 80054d2:	e7d5      	b.n	8005480 <_sungetc_r+0xc>
 80054d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80054d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054dc:	6363      	str	r3, [r4, #52]	; 0x34
 80054de:	2303      	movs	r3, #3
 80054e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80054e2:	4623      	mov	r3, r4
 80054e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	2301      	movs	r3, #1
 80054ec:	e7dc      	b.n	80054a8 <_sungetc_r+0x34>

080054ee <__ssrefill_r>:
 80054ee:	b510      	push	{r4, lr}
 80054f0:	460c      	mov	r4, r1
 80054f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80054f4:	b169      	cbz	r1, 8005512 <__ssrefill_r+0x24>
 80054f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d001      	beq.n	8005502 <__ssrefill_r+0x14>
 80054fe:	f7ff fd69 	bl	8004fd4 <_free_r>
 8005502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	2000      	movs	r0, #0
 8005508:	6360      	str	r0, [r4, #52]	; 0x34
 800550a:	b113      	cbz	r3, 8005512 <__ssrefill_r+0x24>
 800550c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	bd10      	pop	{r4, pc}
 8005512:	6923      	ldr	r3, [r4, #16]
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f043 0320 	orr.w	r3, r3, #32
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	e7f3      	b.n	8005510 <__ssrefill_r+0x22>

08005528 <__ssvfiscanf_r>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	460c      	mov	r4, r1
 800552e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005532:	2100      	movs	r1, #0
 8005534:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005538:	49a6      	ldr	r1, [pc, #664]	; (80057d4 <__ssvfiscanf_r+0x2ac>)
 800553a:	91a0      	str	r1, [sp, #640]	; 0x280
 800553c:	f10d 0804 	add.w	r8, sp, #4
 8005540:	49a5      	ldr	r1, [pc, #660]	; (80057d8 <__ssvfiscanf_r+0x2b0>)
 8005542:	4fa6      	ldr	r7, [pc, #664]	; (80057dc <__ssvfiscanf_r+0x2b4>)
 8005544:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80057e0 <__ssvfiscanf_r+0x2b8>
 8005548:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800554c:	4606      	mov	r6, r0
 800554e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	7813      	ldrb	r3, [r2, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 815a 	beq.w	800580e <__ssvfiscanf_r+0x2e6>
 800555a:	5cf9      	ldrb	r1, [r7, r3]
 800555c:	f011 0108 	ands.w	r1, r1, #8
 8005560:	f102 0501 	add.w	r5, r2, #1
 8005564:	d019      	beq.n	800559a <__ssvfiscanf_r+0x72>
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd0f      	ble.n	800558c <__ssvfiscanf_r+0x64>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	5cba      	ldrb	r2, [r7, r2]
 8005572:	0712      	lsls	r2, r2, #28
 8005574:	d401      	bmi.n	800557a <__ssvfiscanf_r+0x52>
 8005576:	462a      	mov	r2, r5
 8005578:	e7eb      	b.n	8005552 <__ssvfiscanf_r+0x2a>
 800557a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800557c:	3201      	adds	r2, #1
 800557e:	9245      	str	r2, [sp, #276]	; 0x114
 8005580:	6862      	ldr	r2, [r4, #4]
 8005582:	3301      	adds	r3, #1
 8005584:	3a01      	subs	r2, #1
 8005586:	6062      	str	r2, [r4, #4]
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	e7ec      	b.n	8005566 <__ssvfiscanf_r+0x3e>
 800558c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800558e:	4621      	mov	r1, r4
 8005590:	4630      	mov	r0, r6
 8005592:	4798      	blx	r3
 8005594:	2800      	cmp	r0, #0
 8005596:	d0e9      	beq.n	800556c <__ssvfiscanf_r+0x44>
 8005598:	e7ed      	b.n	8005576 <__ssvfiscanf_r+0x4e>
 800559a:	2b25      	cmp	r3, #37	; 0x25
 800559c:	d012      	beq.n	80055c4 <__ssvfiscanf_r+0x9c>
 800559e:	469a      	mov	sl, r3
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f340 8091 	ble.w	80056ca <__ssvfiscanf_r+0x1a2>
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	7813      	ldrb	r3, [r2, #0]
 80055ac:	4553      	cmp	r3, sl
 80055ae:	f040 812e 	bne.w	800580e <__ssvfiscanf_r+0x2e6>
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80055ba:	3201      	adds	r2, #1
 80055bc:	3301      	adds	r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	9345      	str	r3, [sp, #276]	; 0x114
 80055c2:	e7d8      	b.n	8005576 <__ssvfiscanf_r+0x4e>
 80055c4:	9141      	str	r1, [sp, #260]	; 0x104
 80055c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80055c8:	7853      	ldrb	r3, [r2, #1]
 80055ca:	2b2a      	cmp	r3, #42	; 0x2a
 80055cc:	bf02      	ittt	eq
 80055ce:	2310      	moveq	r3, #16
 80055d0:	1c95      	addeq	r5, r2, #2
 80055d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80055d4:	220a      	movs	r2, #10
 80055d6:	46aa      	mov	sl, r5
 80055d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80055dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	d91c      	bls.n	800561e <__ssvfiscanf_r+0xf6>
 80055e4:	487e      	ldr	r0, [pc, #504]	; (80057e0 <__ssvfiscanf_r+0x2b8>)
 80055e6:	2203      	movs	r2, #3
 80055e8:	f7fa fdfa 	bl	80001e0 <memchr>
 80055ec:	b138      	cbz	r0, 80055fe <__ssvfiscanf_r+0xd6>
 80055ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80055f0:	eba0 0009 	sub.w	r0, r0, r9
 80055f4:	2301      	movs	r3, #1
 80055f6:	4083      	lsls	r3, r0
 80055f8:	4313      	orrs	r3, r2
 80055fa:	9341      	str	r3, [sp, #260]	; 0x104
 80055fc:	4655      	mov	r5, sl
 80055fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005602:	2b78      	cmp	r3, #120	; 0x78
 8005604:	d806      	bhi.n	8005614 <__ssvfiscanf_r+0xec>
 8005606:	2b57      	cmp	r3, #87	; 0x57
 8005608:	d810      	bhi.n	800562c <__ssvfiscanf_r+0x104>
 800560a:	2b25      	cmp	r3, #37	; 0x25
 800560c:	d0c7      	beq.n	800559e <__ssvfiscanf_r+0x76>
 800560e:	d857      	bhi.n	80056c0 <__ssvfiscanf_r+0x198>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d065      	beq.n	80056e0 <__ssvfiscanf_r+0x1b8>
 8005614:	2303      	movs	r3, #3
 8005616:	9347      	str	r3, [sp, #284]	; 0x11c
 8005618:	230a      	movs	r3, #10
 800561a:	9342      	str	r3, [sp, #264]	; 0x108
 800561c:	e076      	b.n	800570c <__ssvfiscanf_r+0x1e4>
 800561e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005620:	fb02 1103 	mla	r1, r2, r3, r1
 8005624:	3930      	subs	r1, #48	; 0x30
 8005626:	9143      	str	r1, [sp, #268]	; 0x10c
 8005628:	4655      	mov	r5, sl
 800562a:	e7d4      	b.n	80055d6 <__ssvfiscanf_r+0xae>
 800562c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005630:	2a20      	cmp	r2, #32
 8005632:	d8ef      	bhi.n	8005614 <__ssvfiscanf_r+0xec>
 8005634:	a101      	add	r1, pc, #4	; (adr r1, 800563c <__ssvfiscanf_r+0x114>)
 8005636:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800563a:	bf00      	nop
 800563c:	080056ef 	.word	0x080056ef
 8005640:	08005615 	.word	0x08005615
 8005644:	08005615 	.word	0x08005615
 8005648:	0800574d 	.word	0x0800574d
 800564c:	08005615 	.word	0x08005615
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	08005615 	.word	0x08005615
 800565c:	08005615 	.word	0x08005615
 8005660:	08005615 	.word	0x08005615
 8005664:	08005615 	.word	0x08005615
 8005668:	08005763 	.word	0x08005763
 800566c:	08005749 	.word	0x08005749
 8005670:	080056c7 	.word	0x080056c7
 8005674:	080056c7 	.word	0x080056c7
 8005678:	080056c7 	.word	0x080056c7
 800567c:	08005615 	.word	0x08005615
 8005680:	08005705 	.word	0x08005705
 8005684:	08005615 	.word	0x08005615
 8005688:	08005615 	.word	0x08005615
 800568c:	08005615 	.word	0x08005615
 8005690:	08005615 	.word	0x08005615
 8005694:	08005773 	.word	0x08005773
 8005698:	08005741 	.word	0x08005741
 800569c:	080056e7 	.word	0x080056e7
 80056a0:	08005615 	.word	0x08005615
 80056a4:	08005615 	.word	0x08005615
 80056a8:	0800576f 	.word	0x0800576f
 80056ac:	08005615 	.word	0x08005615
 80056b0:	08005749 	.word	0x08005749
 80056b4:	08005615 	.word	0x08005615
 80056b8:	08005615 	.word	0x08005615
 80056bc:	080056ef 	.word	0x080056ef
 80056c0:	3b45      	subs	r3, #69	; 0x45
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d8a6      	bhi.n	8005614 <__ssvfiscanf_r+0xec>
 80056c6:	2305      	movs	r3, #5
 80056c8:	e01f      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 80056ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80056cc:	4621      	mov	r1, r4
 80056ce:	4630      	mov	r0, r6
 80056d0:	4798      	blx	r3
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f43f af68 	beq.w	80055a8 <__ssvfiscanf_r+0x80>
 80056d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 808d 	bne.w	80057fa <__ssvfiscanf_r+0x2d2>
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	e08f      	b.n	8005806 <__ssvfiscanf_r+0x2de>
 80056e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80056e8:	f042 0220 	orr.w	r2, r2, #32
 80056ec:	9241      	str	r2, [sp, #260]	; 0x104
 80056ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80056f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f4:	9241      	str	r2, [sp, #260]	; 0x104
 80056f6:	2210      	movs	r2, #16
 80056f8:	2b6f      	cmp	r3, #111	; 0x6f
 80056fa:	9242      	str	r2, [sp, #264]	; 0x108
 80056fc:	bf34      	ite	cc
 80056fe:	2303      	movcc	r3, #3
 8005700:	2304      	movcs	r3, #4
 8005702:	e002      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 8005704:	2300      	movs	r3, #0
 8005706:	9342      	str	r3, [sp, #264]	; 0x108
 8005708:	2303      	movs	r3, #3
 800570a:	9347      	str	r3, [sp, #284]	; 0x11c
 800570c:	6863      	ldr	r3, [r4, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd3d      	ble.n	800578e <__ssvfiscanf_r+0x266>
 8005712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005714:	0659      	lsls	r1, r3, #25
 8005716:	d404      	bmi.n	8005722 <__ssvfiscanf_r+0x1fa>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	5cba      	ldrb	r2, [r7, r2]
 800571e:	0712      	lsls	r2, r2, #28
 8005720:	d43c      	bmi.n	800579c <__ssvfiscanf_r+0x274>
 8005722:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005724:	2b02      	cmp	r3, #2
 8005726:	dc4b      	bgt.n	80057c0 <__ssvfiscanf_r+0x298>
 8005728:	466b      	mov	r3, sp
 800572a:	4622      	mov	r2, r4
 800572c:	a941      	add	r1, sp, #260	; 0x104
 800572e:	4630      	mov	r0, r6
 8005730:	f000 fa02 	bl	8005b38 <_scanf_chars>
 8005734:	2801      	cmp	r0, #1
 8005736:	d06a      	beq.n	800580e <__ssvfiscanf_r+0x2e6>
 8005738:	2802      	cmp	r0, #2
 800573a:	f47f af1c 	bne.w	8005576 <__ssvfiscanf_r+0x4e>
 800573e:	e7cb      	b.n	80056d8 <__ssvfiscanf_r+0x1b0>
 8005740:	2308      	movs	r3, #8
 8005742:	9342      	str	r3, [sp, #264]	; 0x108
 8005744:	2304      	movs	r3, #4
 8005746:	e7e0      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 8005748:	220a      	movs	r2, #10
 800574a:	e7d5      	b.n	80056f8 <__ssvfiscanf_r+0x1d0>
 800574c:	4629      	mov	r1, r5
 800574e:	4640      	mov	r0, r8
 8005750:	f000 fb40 	bl	8005dd4 <__sccl>
 8005754:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575a:	9341      	str	r3, [sp, #260]	; 0x104
 800575c:	4605      	mov	r5, r0
 800575e:	2301      	movs	r3, #1
 8005760:	e7d3      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 8005762:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005768:	9341      	str	r3, [sp, #260]	; 0x104
 800576a:	2300      	movs	r3, #0
 800576c:	e7cd      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 800576e:	2302      	movs	r3, #2
 8005770:	e7cb      	b.n	800570a <__ssvfiscanf_r+0x1e2>
 8005772:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005774:	06c3      	lsls	r3, r0, #27
 8005776:	f53f aefe 	bmi.w	8005576 <__ssvfiscanf_r+0x4e>
 800577a:	9b00      	ldr	r3, [sp, #0]
 800577c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800577e:	1d19      	adds	r1, r3, #4
 8005780:	9100      	str	r1, [sp, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	07c0      	lsls	r0, r0, #31
 8005786:	bf4c      	ite	mi
 8005788:	801a      	strhmi	r2, [r3, #0]
 800578a:	601a      	strpl	r2, [r3, #0]
 800578c:	e6f3      	b.n	8005576 <__ssvfiscanf_r+0x4e>
 800578e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005790:	4621      	mov	r1, r4
 8005792:	4630      	mov	r0, r6
 8005794:	4798      	blx	r3
 8005796:	2800      	cmp	r0, #0
 8005798:	d0bb      	beq.n	8005712 <__ssvfiscanf_r+0x1ea>
 800579a:	e79d      	b.n	80056d8 <__ssvfiscanf_r+0x1b0>
 800579c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800579e:	3201      	adds	r2, #1
 80057a0:	9245      	str	r2, [sp, #276]	; 0x114
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	3a01      	subs	r2, #1
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	6062      	str	r2, [r4, #4]
 80057aa:	dd02      	ble.n	80057b2 <__ssvfiscanf_r+0x28a>
 80057ac:	3301      	adds	r3, #1
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	e7b2      	b.n	8005718 <__ssvfiscanf_r+0x1f0>
 80057b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80057b4:	4621      	mov	r1, r4
 80057b6:	4630      	mov	r0, r6
 80057b8:	4798      	blx	r3
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0ac      	beq.n	8005718 <__ssvfiscanf_r+0x1f0>
 80057be:	e78b      	b.n	80056d8 <__ssvfiscanf_r+0x1b0>
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	dc0f      	bgt.n	80057e4 <__ssvfiscanf_r+0x2bc>
 80057c4:	466b      	mov	r3, sp
 80057c6:	4622      	mov	r2, r4
 80057c8:	a941      	add	r1, sp, #260	; 0x104
 80057ca:	4630      	mov	r0, r6
 80057cc:	f000 fa0e 	bl	8005bec <_scanf_i>
 80057d0:	e7b0      	b.n	8005734 <__ssvfiscanf_r+0x20c>
 80057d2:	bf00      	nop
 80057d4:	08005475 	.word	0x08005475
 80057d8:	080054ef 	.word	0x080054ef
 80057dc:	080062ab 	.word	0x080062ab
 80057e0:	08006262 	.word	0x08006262
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <__ssvfiscanf_r+0x2ec>)
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f43f aec5 	beq.w	8005576 <__ssvfiscanf_r+0x4e>
 80057ec:	466b      	mov	r3, sp
 80057ee:	4622      	mov	r2, r4
 80057f0:	a941      	add	r1, sp, #260	; 0x104
 80057f2:	4630      	mov	r0, r6
 80057f4:	f3af 8000 	nop.w
 80057f8:	e79c      	b.n	8005734 <__ssvfiscanf_r+0x20c>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005800:	bf18      	it	ne
 8005802:	f04f 30ff 	movne.w	r0, #4294967295
 8005806:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005810:	e7f9      	b.n	8005806 <__ssvfiscanf_r+0x2de>
 8005812:	bf00      	nop
 8005814:	00000000 	.word	0x00000000

08005818 <_printf_common>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	4616      	mov	r6, r2
 800581e:	4699      	mov	r9, r3
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	4293      	cmp	r3, r2
 800582a:	bfb8      	it	lt
 800582c:	4613      	movlt	r3, r2
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005834:	4607      	mov	r7, r0
 8005836:	460c      	mov	r4, r1
 8005838:	b10a      	cbz	r2, 800583e <_printf_common+0x26>
 800583a:	3301      	adds	r3, #1
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	0699      	lsls	r1, r3, #26
 8005842:	bf42      	ittt	mi
 8005844:	6833      	ldrmi	r3, [r6, #0]
 8005846:	3302      	addmi	r3, #2
 8005848:	6033      	strmi	r3, [r6, #0]
 800584a:	6825      	ldr	r5, [r4, #0]
 800584c:	f015 0506 	ands.w	r5, r5, #6
 8005850:	d106      	bne.n	8005860 <_printf_common+0x48>
 8005852:	f104 0a19 	add.w	sl, r4, #25
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	6832      	ldr	r2, [r6, #0]
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	42ab      	cmp	r3, r5
 800585e:	dc26      	bgt.n	80058ae <_printf_common+0x96>
 8005860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005864:	1e13      	subs	r3, r2, #0
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	bf18      	it	ne
 800586a:	2301      	movne	r3, #1
 800586c:	0692      	lsls	r2, r2, #26
 800586e:	d42b      	bmi.n	80058c8 <_printf_common+0xb0>
 8005870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005874:	4649      	mov	r1, r9
 8005876:	4638      	mov	r0, r7
 8005878:	47c0      	blx	r8
 800587a:	3001      	adds	r0, #1
 800587c:	d01e      	beq.n	80058bc <_printf_common+0xa4>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	6922      	ldr	r2, [r4, #16]
 8005882:	f003 0306 	and.w	r3, r3, #6
 8005886:	2b04      	cmp	r3, #4
 8005888:	bf02      	ittt	eq
 800588a:	68e5      	ldreq	r5, [r4, #12]
 800588c:	6833      	ldreq	r3, [r6, #0]
 800588e:	1aed      	subeq	r5, r5, r3
 8005890:	68a3      	ldr	r3, [r4, #8]
 8005892:	bf0c      	ite	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	2500      	movne	r5, #0
 800589a:	4293      	cmp	r3, r2
 800589c:	bfc4      	itt	gt
 800589e:	1a9b      	subgt	r3, r3, r2
 80058a0:	18ed      	addgt	r5, r5, r3
 80058a2:	2600      	movs	r6, #0
 80058a4:	341a      	adds	r4, #26
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	d11a      	bne.n	80058e0 <_printf_common+0xc8>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e008      	b.n	80058c0 <_printf_common+0xa8>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4649      	mov	r1, r9
 80058b4:	4638      	mov	r0, r7
 80058b6:	47c0      	blx	r8
 80058b8:	3001      	adds	r0, #1
 80058ba:	d103      	bne.n	80058c4 <_printf_common+0xac>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c4:	3501      	adds	r5, #1
 80058c6:	e7c6      	b.n	8005856 <_printf_common+0x3e>
 80058c8:	18e1      	adds	r1, r4, r3
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	2030      	movs	r0, #48	; 0x30
 80058ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d2:	4422      	add	r2, r4
 80058d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058dc:	3302      	adds	r3, #2
 80058de:	e7c7      	b.n	8005870 <_printf_common+0x58>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4622      	mov	r2, r4
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d0e6      	beq.n	80058bc <_printf_common+0xa4>
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7d9      	b.n	80058a6 <_printf_common+0x8e>
	...

080058f4 <_printf_i>:
 80058f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	7e0f      	ldrb	r7, [r1, #24]
 80058fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058fc:	2f78      	cmp	r7, #120	; 0x78
 80058fe:	4691      	mov	r9, r2
 8005900:	4680      	mov	r8, r0
 8005902:	460c      	mov	r4, r1
 8005904:	469a      	mov	sl, r3
 8005906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800590a:	d807      	bhi.n	800591c <_printf_i+0x28>
 800590c:	2f62      	cmp	r7, #98	; 0x62
 800590e:	d80a      	bhi.n	8005926 <_printf_i+0x32>
 8005910:	2f00      	cmp	r7, #0
 8005912:	f000 80d4 	beq.w	8005abe <_printf_i+0x1ca>
 8005916:	2f58      	cmp	r7, #88	; 0x58
 8005918:	f000 80c0 	beq.w	8005a9c <_printf_i+0x1a8>
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005924:	e03a      	b.n	800599c <_printf_i+0xa8>
 8005926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800592a:	2b15      	cmp	r3, #21
 800592c:	d8f6      	bhi.n	800591c <_printf_i+0x28>
 800592e:	a101      	add	r1, pc, #4	; (adr r1, 8005934 <_printf_i+0x40>)
 8005930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005934:	0800598d 	.word	0x0800598d
 8005938:	080059a1 	.word	0x080059a1
 800593c:	0800591d 	.word	0x0800591d
 8005940:	0800591d 	.word	0x0800591d
 8005944:	0800591d 	.word	0x0800591d
 8005948:	0800591d 	.word	0x0800591d
 800594c:	080059a1 	.word	0x080059a1
 8005950:	0800591d 	.word	0x0800591d
 8005954:	0800591d 	.word	0x0800591d
 8005958:	0800591d 	.word	0x0800591d
 800595c:	0800591d 	.word	0x0800591d
 8005960:	08005aa5 	.word	0x08005aa5
 8005964:	080059cd 	.word	0x080059cd
 8005968:	08005a5f 	.word	0x08005a5f
 800596c:	0800591d 	.word	0x0800591d
 8005970:	0800591d 	.word	0x0800591d
 8005974:	08005ac7 	.word	0x08005ac7
 8005978:	0800591d 	.word	0x0800591d
 800597c:	080059cd 	.word	0x080059cd
 8005980:	0800591d 	.word	0x0800591d
 8005984:	0800591d 	.word	0x0800591d
 8005988:	08005a67 	.word	0x08005a67
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	602a      	str	r2, [r5, #0]
 8005994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599c:	2301      	movs	r3, #1
 800599e:	e09f      	b.n	8005ae0 <_printf_i+0x1ec>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	0607      	lsls	r7, r0, #24
 80059a6:	f103 0104 	add.w	r1, r3, #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	d501      	bpl.n	80059b2 <_printf_i+0xbe>
 80059ae:	681e      	ldr	r6, [r3, #0]
 80059b0:	e003      	b.n	80059ba <_printf_i+0xc6>
 80059b2:	0646      	lsls	r6, r0, #25
 80059b4:	d5fb      	bpl.n	80059ae <_printf_i+0xba>
 80059b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059ba:	2e00      	cmp	r6, #0
 80059bc:	da03      	bge.n	80059c6 <_printf_i+0xd2>
 80059be:	232d      	movs	r3, #45	; 0x2d
 80059c0:	4276      	negs	r6, r6
 80059c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c6:	485a      	ldr	r0, [pc, #360]	; (8005b30 <_printf_i+0x23c>)
 80059c8:	230a      	movs	r3, #10
 80059ca:	e012      	b.n	80059f2 <_printf_i+0xfe>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	6029      	str	r1, [r5, #0]
 80059d4:	0605      	lsls	r5, r0, #24
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0xe8>
 80059d8:	681e      	ldr	r6, [r3, #0]
 80059da:	e002      	b.n	80059e2 <_printf_i+0xee>
 80059dc:	0641      	lsls	r1, r0, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0xe4>
 80059e0:	881e      	ldrh	r6, [r3, #0]
 80059e2:	4853      	ldr	r0, [pc, #332]	; (8005b30 <_printf_i+0x23c>)
 80059e4:	2f6f      	cmp	r7, #111	; 0x6f
 80059e6:	bf0c      	ite	eq
 80059e8:	2308      	moveq	r3, #8
 80059ea:	230a      	movne	r3, #10
 80059ec:	2100      	movs	r1, #0
 80059ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f2:	6865      	ldr	r5, [r4, #4]
 80059f4:	60a5      	str	r5, [r4, #8]
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	bfa2      	ittt	ge
 80059fa:	6821      	ldrge	r1, [r4, #0]
 80059fc:	f021 0104 	bicge.w	r1, r1, #4
 8005a00:	6021      	strge	r1, [r4, #0]
 8005a02:	b90e      	cbnz	r6, 8005a08 <_printf_i+0x114>
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	d04b      	beq.n	8005aa0 <_printf_i+0x1ac>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a12:	5dc7      	ldrb	r7, [r0, r7]
 8005a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a18:	4637      	mov	r7, r6
 8005a1a:	42bb      	cmp	r3, r7
 8005a1c:	460e      	mov	r6, r1
 8005a1e:	d9f4      	bls.n	8005a0a <_printf_i+0x116>
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d10b      	bne.n	8005a3c <_printf_i+0x148>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07de      	lsls	r6, r3, #31
 8005a28:	d508      	bpl.n	8005a3c <_printf_i+0x148>
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6861      	ldr	r1, [r4, #4]
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	bfde      	ittt	le
 8005a32:	2330      	movle	r3, #48	; 0x30
 8005a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a3c:	1b52      	subs	r2, r2, r5
 8005a3e:	6122      	str	r2, [r4, #16]
 8005a40:	f8cd a000 	str.w	sl, [sp]
 8005a44:	464b      	mov	r3, r9
 8005a46:	aa03      	add	r2, sp, #12
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7ff fee4 	bl	8005818 <_printf_common>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d14a      	bne.n	8005aea <_printf_i+0x1f6>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	b004      	add	sp, #16
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f043 0320 	orr.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	4833      	ldr	r0, [pc, #204]	; (8005b34 <_printf_i+0x240>)
 8005a68:	2778      	movs	r7, #120	; 0x78
 8005a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	6829      	ldr	r1, [r5, #0]
 8005a72:	061f      	lsls	r7, r3, #24
 8005a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a78:	d402      	bmi.n	8005a80 <_printf_i+0x18c>
 8005a7a:	065f      	lsls	r7, r3, #25
 8005a7c:	bf48      	it	mi
 8005a7e:	b2b6      	uxthmi	r6, r6
 8005a80:	07df      	lsls	r7, r3, #31
 8005a82:	bf48      	it	mi
 8005a84:	f043 0320 	orrmi.w	r3, r3, #32
 8005a88:	6029      	str	r1, [r5, #0]
 8005a8a:	bf48      	it	mi
 8005a8c:	6023      	strmi	r3, [r4, #0]
 8005a8e:	b91e      	cbnz	r6, 8005a98 <_printf_i+0x1a4>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	f023 0320 	bic.w	r3, r3, #32
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	2310      	movs	r3, #16
 8005a9a:	e7a7      	b.n	80059ec <_printf_i+0xf8>
 8005a9c:	4824      	ldr	r0, [pc, #144]	; (8005b30 <_printf_i+0x23c>)
 8005a9e:	e7e4      	b.n	8005a6a <_printf_i+0x176>
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	e7bd      	b.n	8005a20 <_printf_i+0x12c>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	6826      	ldr	r6, [r4, #0]
 8005aa8:	6961      	ldr	r1, [r4, #20]
 8005aaa:	1d18      	adds	r0, r3, #4
 8005aac:	6028      	str	r0, [r5, #0]
 8005aae:	0635      	lsls	r5, r6, #24
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0x1c4>
 8005ab4:	6019      	str	r1, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0x1ca>
 8005ab8:	0670      	lsls	r0, r6, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0x1c0>
 8005abc:	8019      	strh	r1, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	4615      	mov	r5, r2
 8005ac4:	e7bc      	b.n	8005a40 <_printf_i+0x14c>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	602a      	str	r2, [r5, #0]
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7fa fb84 	bl	80001e0 <memchr>
 8005ad8:	b108      	cbz	r0, 8005ade <_printf_i+0x1ea>
 8005ada:	1b40      	subs	r0, r0, r5
 8005adc:	6060      	str	r0, [r4, #4]
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae8:	e7aa      	b.n	8005a40 <_printf_i+0x14c>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	462a      	mov	r2, r5
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d0ad      	beq.n	8005a54 <_printf_i+0x160>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	d413      	bmi.n	8005b26 <_printf_i+0x232>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e7a6      	b.n	8005a58 <_printf_i+0x164>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	47d0      	blx	sl
 8005b14:	3001      	adds	r0, #1
 8005b16:	d09d      	beq.n	8005a54 <_printf_i+0x160>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	9903      	ldr	r1, [sp, #12]
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dcf2      	bgt.n	8005b0a <_printf_i+0x216>
 8005b24:	e7eb      	b.n	8005afe <_printf_i+0x20a>
 8005b26:	2500      	movs	r5, #0
 8005b28:	f104 0619 	add.w	r6, r4, #25
 8005b2c:	e7f5      	b.n	8005b1a <_printf_i+0x226>
 8005b2e:	bf00      	nop
 8005b30:	0800626d 	.word	0x0800626d
 8005b34:	0800627e 	.word	0x0800627e

08005b38 <_scanf_chars>:
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b3c:	4615      	mov	r5, r2
 8005b3e:	688a      	ldr	r2, [r1, #8]
 8005b40:	4680      	mov	r8, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	b932      	cbnz	r2, 8005b54 <_scanf_chars+0x1c>
 8005b46:	698a      	ldr	r2, [r1, #24]
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2201      	moveq	r2, #1
 8005b4e:	f04f 32ff 	movne.w	r2, #4294967295
 8005b52:	608a      	str	r2, [r1, #8]
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005be8 <_scanf_chars+0xb0>
 8005b5a:	06d1      	lsls	r1, r2, #27
 8005b5c:	bf5f      	itttt	pl
 8005b5e:	681a      	ldrpl	r2, [r3, #0]
 8005b60:	1d11      	addpl	r1, r2, #4
 8005b62:	6019      	strpl	r1, [r3, #0]
 8005b64:	6816      	ldrpl	r6, [r2, #0]
 8005b66:	2700      	movs	r7, #0
 8005b68:	69a0      	ldr	r0, [r4, #24]
 8005b6a:	b188      	cbz	r0, 8005b90 <_scanf_chars+0x58>
 8005b6c:	2801      	cmp	r0, #1
 8005b6e:	d107      	bne.n	8005b80 <_scanf_chars+0x48>
 8005b70:	682a      	ldr	r2, [r5, #0]
 8005b72:	7811      	ldrb	r1, [r2, #0]
 8005b74:	6962      	ldr	r2, [r4, #20]
 8005b76:	5c52      	ldrb	r2, [r2, r1]
 8005b78:	b952      	cbnz	r2, 8005b90 <_scanf_chars+0x58>
 8005b7a:	2f00      	cmp	r7, #0
 8005b7c:	d031      	beq.n	8005be2 <_scanf_chars+0xaa>
 8005b7e:	e022      	b.n	8005bc6 <_scanf_chars+0x8e>
 8005b80:	2802      	cmp	r0, #2
 8005b82:	d120      	bne.n	8005bc6 <_scanf_chars+0x8e>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005b8c:	071b      	lsls	r3, r3, #28
 8005b8e:	d41a      	bmi.n	8005bc6 <_scanf_chars+0x8e>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	06da      	lsls	r2, r3, #27
 8005b94:	bf5e      	ittt	pl
 8005b96:	682b      	ldrpl	r3, [r5, #0]
 8005b98:	781b      	ldrbpl	r3, [r3, #0]
 8005b9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005b9e:	682a      	ldr	r2, [r5, #0]
 8005ba0:	686b      	ldr	r3, [r5, #4]
 8005ba2:	3201      	adds	r2, #1
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	68a2      	ldr	r2, [r4, #8]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	3a01      	subs	r2, #1
 8005bac:	606b      	str	r3, [r5, #4]
 8005bae:	3701      	adds	r7, #1
 8005bb0:	60a2      	str	r2, [r4, #8]
 8005bb2:	b142      	cbz	r2, 8005bc6 <_scanf_chars+0x8e>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dcd7      	bgt.n	8005b68 <_scanf_chars+0x30>
 8005bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4798      	blx	r3
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d0d0      	beq.n	8005b68 <_scanf_chars+0x30>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f013 0310 	ands.w	r3, r3, #16
 8005bcc:	d105      	bne.n	8005bda <_scanf_chars+0xa2>
 8005bce:	68e2      	ldr	r2, [r4, #12]
 8005bd0:	3201      	adds	r2, #1
 8005bd2:	60e2      	str	r2, [r4, #12]
 8005bd4:	69a2      	ldr	r2, [r4, #24]
 8005bd6:	b102      	cbz	r2, 8005bda <_scanf_chars+0xa2>
 8005bd8:	7033      	strb	r3, [r6, #0]
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	443b      	add	r3, r7
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	2000      	movs	r0, #0
 8005be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be6:	bf00      	nop
 8005be8:	080062ab 	.word	0x080062ab

08005bec <_scanf_i>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	4698      	mov	r8, r3
 8005bf2:	4b74      	ldr	r3, [pc, #464]	; (8005dc4 <_scanf_i+0x1d8>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	4682      	mov	sl, r0
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <_scanf_i+0x1dc>)
 8005c08:	69a1      	ldr	r1, [r4, #24]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	; (8005dcc <_scanf_i+0x1e0>)
 8005c0c:	2903      	cmp	r1, #3
 8005c0e:	bf18      	it	ne
 8005c10:	461a      	movne	r2, r3
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	9201      	str	r2, [sp, #4]
 8005c16:	1e5a      	subs	r2, r3, #1
 8005c18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c1c:	bf88      	it	hi
 8005c1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c22:	4627      	mov	r7, r4
 8005c24:	bf82      	ittt	hi
 8005c26:	eb03 0905 	addhi.w	r9, r3, r5
 8005c2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c2e:	60a3      	strhi	r3, [r4, #8]
 8005c30:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005c34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005c38:	bf98      	it	ls
 8005c3a:	f04f 0900 	movls.w	r9, #0
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	463d      	mov	r5, r7
 8005c42:	f04f 0b00 	mov.w	fp, #0
 8005c46:	6831      	ldr	r1, [r6, #0]
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	7809      	ldrb	r1, [r1, #0]
 8005c4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f7fa fac5 	bl	80001e0 <memchr>
 8005c56:	b328      	cbz	r0, 8005ca4 <_scanf_i+0xb8>
 8005c58:	f1bb 0f01 	cmp.w	fp, #1
 8005c5c:	d159      	bne.n	8005d12 <_scanf_i+0x126>
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	b92a      	cbnz	r2, 8005c6e <_scanf_i+0x82>
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	2308      	movs	r3, #8
 8005c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6a:	6063      	str	r3, [r4, #4]
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	68a2      	ldr	r2, [r4, #8]
 8005c78:	1e51      	subs	r1, r2, #1
 8005c7a:	60a1      	str	r1, [r4, #8]
 8005c7c:	b192      	cbz	r2, 8005ca4 <_scanf_i+0xb8>
 8005c7e:	6832      	ldr	r2, [r6, #0]
 8005c80:	1c51      	adds	r1, r2, #1
 8005c82:	6031      	str	r1, [r6, #0]
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	f805 2b01 	strb.w	r2, [r5], #1
 8005c8a:	6872      	ldr	r2, [r6, #4]
 8005c8c:	3a01      	subs	r2, #1
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	6072      	str	r2, [r6, #4]
 8005c92:	dc07      	bgt.n	8005ca4 <_scanf_i+0xb8>
 8005c94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4790      	blx	r2
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f040 8085 	bne.w	8005dae <_scanf_i+0x1c2>
 8005ca4:	f10b 0b01 	add.w	fp, fp, #1
 8005ca8:	f1bb 0f03 	cmp.w	fp, #3
 8005cac:	d1cb      	bne.n	8005c46 <_scanf_i+0x5a>
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	b90b      	cbnz	r3, 8005cb6 <_scanf_i+0xca>
 8005cb2:	230a      	movs	r3, #10
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	4945      	ldr	r1, [pc, #276]	; (8005dd0 <_scanf_i+0x1e4>)
 8005cba:	6960      	ldr	r0, [r4, #20]
 8005cbc:	1ac9      	subs	r1, r1, r3
 8005cbe:	f000 f889 	bl	8005dd4 <__sccl>
 8005cc2:	f04f 0b00 	mov.w	fp, #0
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03d      	beq.n	8005d4a <_scanf_i+0x15e>
 8005cce:	6831      	ldr	r1, [r6, #0]
 8005cd0:	6960      	ldr	r0, [r4, #20]
 8005cd2:	f891 c000 	ldrb.w	ip, [r1]
 8005cd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d035      	beq.n	8005d4a <_scanf_i+0x15e>
 8005cde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005ce2:	d124      	bne.n	8005d2e <_scanf_i+0x142>
 8005ce4:	0510      	lsls	r0, r2, #20
 8005ce6:	d522      	bpl.n	8005d2e <_scanf_i+0x142>
 8005ce8:	f10b 0b01 	add.w	fp, fp, #1
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	d003      	beq.n	8005cfa <_scanf_i+0x10e>
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	6873      	ldr	r3, [r6, #4]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	6073      	str	r3, [r6, #4]
 8005d02:	dd1b      	ble.n	8005d3c <_scanf_i+0x150>
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	60a3      	str	r3, [r4, #8]
 8005d10:	e7d9      	b.n	8005cc6 <_scanf_i+0xda>
 8005d12:	f1bb 0f02 	cmp.w	fp, #2
 8005d16:	d1ae      	bne.n	8005c76 <_scanf_i+0x8a>
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005d1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005d22:	d1bf      	bne.n	8005ca4 <_scanf_i+0xb8>
 8005d24:	2310      	movs	r3, #16
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2c:	e7a2      	b.n	8005c74 <_scanf_i+0x88>
 8005d2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	780b      	ldrb	r3, [r1, #0]
 8005d36:	f805 3b01 	strb.w	r3, [r5], #1
 8005d3a:	e7de      	b.n	8005cfa <_scanf_i+0x10e>
 8005d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d40:	4631      	mov	r1, r6
 8005d42:	4650      	mov	r0, sl
 8005d44:	4798      	blx	r3
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d0df      	beq.n	8005d0a <_scanf_i+0x11e>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	05d9      	lsls	r1, r3, #23
 8005d4e:	d50d      	bpl.n	8005d6c <_scanf_i+0x180>
 8005d50:	42bd      	cmp	r5, r7
 8005d52:	d909      	bls.n	8005d68 <_scanf_i+0x17c>
 8005d54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	4650      	mov	r0, sl
 8005d60:	4798      	blx	r3
 8005d62:	f105 39ff 	add.w	r9, r5, #4294967295
 8005d66:	464d      	mov	r5, r9
 8005d68:	42bd      	cmp	r5, r7
 8005d6a:	d028      	beq.n	8005dbe <_scanf_i+0x1d2>
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	f012 0210 	ands.w	r2, r2, #16
 8005d72:	d113      	bne.n	8005d9c <_scanf_i+0x1b0>
 8005d74:	702a      	strb	r2, [r5, #0]
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	9e01      	ldr	r6, [sp, #4]
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	47b0      	blx	r6
 8005d80:	f8d8 3000 	ldr.w	r3, [r8]
 8005d84:	6821      	ldr	r1, [r4, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	f8c8 2000 	str.w	r2, [r8]
 8005d8c:	f011 0f20 	tst.w	r1, #32
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	d00f      	beq.n	8005db4 <_scanf_i+0x1c8>
 8005d94:	6018      	str	r0, [r3, #0]
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60e3      	str	r3, [r4, #12]
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	1bed      	subs	r5, r5, r7
 8005da0:	445d      	add	r5, fp
 8005da2:	442b      	add	r3, r5
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	2000      	movs	r0, #0
 8005da8:	b007      	add	sp, #28
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	f04f 0b00 	mov.w	fp, #0
 8005db2:	e7ca      	b.n	8005d4a <_scanf_i+0x15e>
 8005db4:	07ca      	lsls	r2, r1, #31
 8005db6:	bf4c      	ite	mi
 8005db8:	8018      	strhmi	r0, [r3, #0]
 8005dba:	6018      	strpl	r0, [r3, #0]
 8005dbc:	e7eb      	b.n	8005d96 <_scanf_i+0x1aa>
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	e7f2      	b.n	8005da8 <_scanf_i+0x1bc>
 8005dc2:	bf00      	nop
 8005dc4:	08006218 	.word	0x08006218
 8005dc8:	08006179 	.word	0x08006179
 8005dcc:	08006091 	.word	0x08006091
 8005dd0:	0800629f 	.word	0x0800629f

08005dd4 <__sccl>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	780b      	ldrb	r3, [r1, #0]
 8005dd8:	4604      	mov	r4, r0
 8005dda:	2b5e      	cmp	r3, #94	; 0x5e
 8005ddc:	bf0b      	itete	eq
 8005dde:	784b      	ldrbeq	r3, [r1, #1]
 8005de0:	1c4a      	addne	r2, r1, #1
 8005de2:	1c8a      	addeq	r2, r1, #2
 8005de4:	2100      	movne	r1, #0
 8005de6:	bf08      	it	eq
 8005de8:	2101      	moveq	r1, #1
 8005dea:	3801      	subs	r0, #1
 8005dec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005df0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005df4:	42a8      	cmp	r0, r5
 8005df6:	d1fb      	bne.n	8005df0 <__sccl+0x1c>
 8005df8:	b90b      	cbnz	r3, 8005dfe <__sccl+0x2a>
 8005dfa:	1e50      	subs	r0, r2, #1
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
 8005dfe:	f081 0101 	eor.w	r1, r1, #1
 8005e02:	54e1      	strb	r1, [r4, r3]
 8005e04:	4610      	mov	r0, r2
 8005e06:	4602      	mov	r2, r0
 8005e08:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e0c:	2d2d      	cmp	r5, #45	; 0x2d
 8005e0e:	d005      	beq.n	8005e1c <__sccl+0x48>
 8005e10:	2d5d      	cmp	r5, #93	; 0x5d
 8005e12:	d016      	beq.n	8005e42 <__sccl+0x6e>
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	d0f1      	beq.n	8005dfc <__sccl+0x28>
 8005e18:	462b      	mov	r3, r5
 8005e1a:	e7f2      	b.n	8005e02 <__sccl+0x2e>
 8005e1c:	7846      	ldrb	r6, [r0, #1]
 8005e1e:	2e5d      	cmp	r6, #93	; 0x5d
 8005e20:	d0fa      	beq.n	8005e18 <__sccl+0x44>
 8005e22:	42b3      	cmp	r3, r6
 8005e24:	dcf8      	bgt.n	8005e18 <__sccl+0x44>
 8005e26:	3002      	adds	r0, #2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	4296      	cmp	r6, r2
 8005e2e:	54a1      	strb	r1, [r4, r2]
 8005e30:	dcfb      	bgt.n	8005e2a <__sccl+0x56>
 8005e32:	1af2      	subs	r2, r6, r3
 8005e34:	3a01      	subs	r2, #1
 8005e36:	1c5d      	adds	r5, r3, #1
 8005e38:	42b3      	cmp	r3, r6
 8005e3a:	bfa8      	it	ge
 8005e3c:	2200      	movge	r2, #0
 8005e3e:	18ab      	adds	r3, r5, r2
 8005e40:	e7e1      	b.n	8005e06 <__sccl+0x32>
 8005e42:	4610      	mov	r0, r2
 8005e44:	e7da      	b.n	8005dfc <__sccl+0x28>

08005e46 <__submore>:
 8005e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e52:	4299      	cmp	r1, r3
 8005e54:	d11d      	bne.n	8005e92 <__submore+0x4c>
 8005e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e5a:	f7ff f927 	bl	80050ac <_malloc_r>
 8005e5e:	b918      	cbnz	r0, 8005e68 <__submore+0x22>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e6e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005e72:	6360      	str	r0, [r4, #52]	; 0x34
 8005e74:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005e78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e7c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005e80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e84:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005e88:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005e8c:	6020      	str	r0, [r4, #0]
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e7e8      	b.n	8005e64 <__submore+0x1e>
 8005e92:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005e94:	0077      	lsls	r7, r6, #1
 8005e96:	463a      	mov	r2, r7
 8005e98:	f000 f848 	bl	8005f2c <_realloc_r>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0de      	beq.n	8005e60 <__submore+0x1a>
 8005ea2:	eb00 0806 	add.w	r8, r0, r6
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f000 f830 	bl	8005f10 <memcpy>
 8005eb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005eb4:	f8c4 8000 	str.w	r8, [r4]
 8005eb8:	e7e9      	b.n	8005e8e <__submore+0x48>

08005eba <memmove>:
 8005eba:	4288      	cmp	r0, r1
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	eb01 0402 	add.w	r4, r1, r2
 8005ec2:	d902      	bls.n	8005eca <memmove+0x10>
 8005ec4:	4284      	cmp	r4, r0
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	d807      	bhi.n	8005eda <memmove+0x20>
 8005eca:	1e43      	subs	r3, r0, #1
 8005ecc:	42a1      	cmp	r1, r4
 8005ece:	d008      	beq.n	8005ee2 <memmove+0x28>
 8005ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ed4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ed8:	e7f8      	b.n	8005ecc <memmove+0x12>
 8005eda:	4402      	add	r2, r0
 8005edc:	4601      	mov	r1, r0
 8005ede:	428a      	cmp	r2, r1
 8005ee0:	d100      	bne.n	8005ee4 <memmove+0x2a>
 8005ee2:	bd10      	pop	{r4, pc}
 8005ee4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ee8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eec:	e7f7      	b.n	8005ede <memmove+0x24>
	...

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	; (8005f0c <_sbrk_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fa fcce 	bl	800089c <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200006ac 	.word	0x200006ac

08005f10 <memcpy>:
 8005f10:	440a      	add	r2, r1
 8005f12:	4291      	cmp	r1, r2
 8005f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f18:	d100      	bne.n	8005f1c <memcpy+0xc>
 8005f1a:	4770      	bx	lr
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f26:	4291      	cmp	r1, r2
 8005f28:	d1f9      	bne.n	8005f1e <memcpy+0xe>
 8005f2a:	bd10      	pop	{r4, pc}

08005f2c <_realloc_r>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	4680      	mov	r8, r0
 8005f32:	4614      	mov	r4, r2
 8005f34:	460e      	mov	r6, r1
 8005f36:	b921      	cbnz	r1, 8005f42 <_realloc_r+0x16>
 8005f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f7ff b8b5 	b.w	80050ac <_malloc_r>
 8005f42:	b92a      	cbnz	r2, 8005f50 <_realloc_r+0x24>
 8005f44:	f7ff f846 	bl	8004fd4 <_free_r>
 8005f48:	4625      	mov	r5, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	f000 f914 	bl	800617c <_malloc_usable_size_r>
 8005f54:	4284      	cmp	r4, r0
 8005f56:	4607      	mov	r7, r0
 8005f58:	d802      	bhi.n	8005f60 <_realloc_r+0x34>
 8005f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f5e:	d812      	bhi.n	8005f86 <_realloc_r+0x5a>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff f8a2 	bl	80050ac <_malloc_r>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0ed      	beq.n	8005f4a <_realloc_r+0x1e>
 8005f6e:	42bc      	cmp	r4, r7
 8005f70:	4622      	mov	r2, r4
 8005f72:	4631      	mov	r1, r6
 8005f74:	bf28      	it	cs
 8005f76:	463a      	movcs	r2, r7
 8005f78:	f7ff ffca 	bl	8005f10 <memcpy>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff f828 	bl	8004fd4 <_free_r>
 8005f84:	e7e1      	b.n	8005f4a <_realloc_r+0x1e>
 8005f86:	4635      	mov	r5, r6
 8005f88:	e7df      	b.n	8005f4a <_realloc_r+0x1e>
	...

08005f8c <_strtol_l.constprop.0>:
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f92:	d001      	beq.n	8005f98 <_strtol_l.constprop.0+0xc>
 8005f94:	2b24      	cmp	r3, #36	; 0x24
 8005f96:	d906      	bls.n	8005fa6 <_strtol_l.constprop.0+0x1a>
 8005f98:	f7fe ffe8 	bl	8004f6c <__errno>
 8005f9c:	2316      	movs	r3, #22
 8005f9e:	6003      	str	r3, [r0, #0]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800608c <_strtol_l.constprop.0+0x100>
 8005faa:	460d      	mov	r5, r1
 8005fac:	462e      	mov	r6, r5
 8005fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005fb6:	f017 0708 	ands.w	r7, r7, #8
 8005fba:	d1f7      	bne.n	8005fac <_strtol_l.constprop.0+0x20>
 8005fbc:	2c2d      	cmp	r4, #45	; 0x2d
 8005fbe:	d132      	bne.n	8006026 <_strtol_l.constprop.0+0x9a>
 8005fc0:	782c      	ldrb	r4, [r5, #0]
 8005fc2:	2701      	movs	r7, #1
 8005fc4:	1cb5      	adds	r5, r6, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d05b      	beq.n	8006082 <_strtol_l.constprop.0+0xf6>
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d109      	bne.n	8005fe2 <_strtol_l.constprop.0+0x56>
 8005fce:	2c30      	cmp	r4, #48	; 0x30
 8005fd0:	d107      	bne.n	8005fe2 <_strtol_l.constprop.0+0x56>
 8005fd2:	782c      	ldrb	r4, [r5, #0]
 8005fd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005fd8:	2c58      	cmp	r4, #88	; 0x58
 8005fda:	d14d      	bne.n	8006078 <_strtol_l.constprop.0+0xec>
 8005fdc:	786c      	ldrb	r4, [r5, #1]
 8005fde:	2310      	movs	r3, #16
 8005fe0:	3502      	adds	r5, #2
 8005fe2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005fe6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fea:	f04f 0e00 	mov.w	lr, #0
 8005fee:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ff2:	4676      	mov	r6, lr
 8005ff4:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ff8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ffc:	f1bc 0f09 	cmp.w	ip, #9
 8006000:	d816      	bhi.n	8006030 <_strtol_l.constprop.0+0xa4>
 8006002:	4664      	mov	r4, ip
 8006004:	42a3      	cmp	r3, r4
 8006006:	dd24      	ble.n	8006052 <_strtol_l.constprop.0+0xc6>
 8006008:	f1be 3fff 	cmp.w	lr, #4294967295
 800600c:	d008      	beq.n	8006020 <_strtol_l.constprop.0+0x94>
 800600e:	45b1      	cmp	r9, r6
 8006010:	d31c      	bcc.n	800604c <_strtol_l.constprop.0+0xc0>
 8006012:	d101      	bne.n	8006018 <_strtol_l.constprop.0+0x8c>
 8006014:	45a2      	cmp	sl, r4
 8006016:	db19      	blt.n	800604c <_strtol_l.constprop.0+0xc0>
 8006018:	fb06 4603 	mla	r6, r6, r3, r4
 800601c:	f04f 0e01 	mov.w	lr, #1
 8006020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006024:	e7e8      	b.n	8005ff8 <_strtol_l.constprop.0+0x6c>
 8006026:	2c2b      	cmp	r4, #43	; 0x2b
 8006028:	bf04      	itt	eq
 800602a:	782c      	ldrbeq	r4, [r5, #0]
 800602c:	1cb5      	addeq	r5, r6, #2
 800602e:	e7ca      	b.n	8005fc6 <_strtol_l.constprop.0+0x3a>
 8006030:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006034:	f1bc 0f19 	cmp.w	ip, #25
 8006038:	d801      	bhi.n	800603e <_strtol_l.constprop.0+0xb2>
 800603a:	3c37      	subs	r4, #55	; 0x37
 800603c:	e7e2      	b.n	8006004 <_strtol_l.constprop.0+0x78>
 800603e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006042:	f1bc 0f19 	cmp.w	ip, #25
 8006046:	d804      	bhi.n	8006052 <_strtol_l.constprop.0+0xc6>
 8006048:	3c57      	subs	r4, #87	; 0x57
 800604a:	e7db      	b.n	8006004 <_strtol_l.constprop.0+0x78>
 800604c:	f04f 3eff 	mov.w	lr, #4294967295
 8006050:	e7e6      	b.n	8006020 <_strtol_l.constprop.0+0x94>
 8006052:	f1be 3fff 	cmp.w	lr, #4294967295
 8006056:	d105      	bne.n	8006064 <_strtol_l.constprop.0+0xd8>
 8006058:	2322      	movs	r3, #34	; 0x22
 800605a:	6003      	str	r3, [r0, #0]
 800605c:	4646      	mov	r6, r8
 800605e:	b942      	cbnz	r2, 8006072 <_strtol_l.constprop.0+0xe6>
 8006060:	4630      	mov	r0, r6
 8006062:	e79e      	b.n	8005fa2 <_strtol_l.constprop.0+0x16>
 8006064:	b107      	cbz	r7, 8006068 <_strtol_l.constprop.0+0xdc>
 8006066:	4276      	negs	r6, r6
 8006068:	2a00      	cmp	r2, #0
 800606a:	d0f9      	beq.n	8006060 <_strtol_l.constprop.0+0xd4>
 800606c:	f1be 0f00 	cmp.w	lr, #0
 8006070:	d000      	beq.n	8006074 <_strtol_l.constprop.0+0xe8>
 8006072:	1e69      	subs	r1, r5, #1
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	e7f3      	b.n	8006060 <_strtol_l.constprop.0+0xd4>
 8006078:	2430      	movs	r4, #48	; 0x30
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1b1      	bne.n	8005fe2 <_strtol_l.constprop.0+0x56>
 800607e:	2308      	movs	r3, #8
 8006080:	e7af      	b.n	8005fe2 <_strtol_l.constprop.0+0x56>
 8006082:	2c30      	cmp	r4, #48	; 0x30
 8006084:	d0a5      	beq.n	8005fd2 <_strtol_l.constprop.0+0x46>
 8006086:	230a      	movs	r3, #10
 8006088:	e7ab      	b.n	8005fe2 <_strtol_l.constprop.0+0x56>
 800608a:	bf00      	nop
 800608c:	080062ab 	.word	0x080062ab

08006090 <_strtol_r>:
 8006090:	f7ff bf7c 	b.w	8005f8c <_strtol_l.constprop.0>

08006094 <_strtoul_l.constprop.0>:
 8006094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006098:	4f36      	ldr	r7, [pc, #216]	; (8006174 <_strtoul_l.constprop.0+0xe0>)
 800609a:	4686      	mov	lr, r0
 800609c:	460d      	mov	r5, r1
 800609e:	4628      	mov	r0, r5
 80060a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060a4:	5d3e      	ldrb	r6, [r7, r4]
 80060a6:	f016 0608 	ands.w	r6, r6, #8
 80060aa:	d1f8      	bne.n	800609e <_strtoul_l.constprop.0+0xa>
 80060ac:	2c2d      	cmp	r4, #45	; 0x2d
 80060ae:	d130      	bne.n	8006112 <_strtoul_l.constprop.0+0x7e>
 80060b0:	782c      	ldrb	r4, [r5, #0]
 80060b2:	2601      	movs	r6, #1
 80060b4:	1c85      	adds	r5, r0, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d057      	beq.n	800616a <_strtoul_l.constprop.0+0xd6>
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d109      	bne.n	80060d2 <_strtoul_l.constprop.0+0x3e>
 80060be:	2c30      	cmp	r4, #48	; 0x30
 80060c0:	d107      	bne.n	80060d2 <_strtoul_l.constprop.0+0x3e>
 80060c2:	7828      	ldrb	r0, [r5, #0]
 80060c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80060c8:	2858      	cmp	r0, #88	; 0x58
 80060ca:	d149      	bne.n	8006160 <_strtoul_l.constprop.0+0xcc>
 80060cc:	786c      	ldrb	r4, [r5, #1]
 80060ce:	2310      	movs	r3, #16
 80060d0:	3502      	adds	r5, #2
 80060d2:	f04f 38ff 	mov.w	r8, #4294967295
 80060d6:	2700      	movs	r7, #0
 80060d8:	fbb8 f8f3 	udiv	r8, r8, r3
 80060dc:	fb03 f908 	mul.w	r9, r3, r8
 80060e0:	ea6f 0909 	mvn.w	r9, r9
 80060e4:	4638      	mov	r0, r7
 80060e6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80060ea:	f1bc 0f09 	cmp.w	ip, #9
 80060ee:	d815      	bhi.n	800611c <_strtoul_l.constprop.0+0x88>
 80060f0:	4664      	mov	r4, ip
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	dd23      	ble.n	800613e <_strtoul_l.constprop.0+0xaa>
 80060f6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80060fa:	d007      	beq.n	800610c <_strtoul_l.constprop.0+0x78>
 80060fc:	4580      	cmp	r8, r0
 80060fe:	d31b      	bcc.n	8006138 <_strtoul_l.constprop.0+0xa4>
 8006100:	d101      	bne.n	8006106 <_strtoul_l.constprop.0+0x72>
 8006102:	45a1      	cmp	r9, r4
 8006104:	db18      	blt.n	8006138 <_strtoul_l.constprop.0+0xa4>
 8006106:	fb00 4003 	mla	r0, r0, r3, r4
 800610a:	2701      	movs	r7, #1
 800610c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006110:	e7e9      	b.n	80060e6 <_strtoul_l.constprop.0+0x52>
 8006112:	2c2b      	cmp	r4, #43	; 0x2b
 8006114:	bf04      	itt	eq
 8006116:	782c      	ldrbeq	r4, [r5, #0]
 8006118:	1c85      	addeq	r5, r0, #2
 800611a:	e7cc      	b.n	80060b6 <_strtoul_l.constprop.0+0x22>
 800611c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006120:	f1bc 0f19 	cmp.w	ip, #25
 8006124:	d801      	bhi.n	800612a <_strtoul_l.constprop.0+0x96>
 8006126:	3c37      	subs	r4, #55	; 0x37
 8006128:	e7e3      	b.n	80060f2 <_strtoul_l.constprop.0+0x5e>
 800612a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800612e:	f1bc 0f19 	cmp.w	ip, #25
 8006132:	d804      	bhi.n	800613e <_strtoul_l.constprop.0+0xaa>
 8006134:	3c57      	subs	r4, #87	; 0x57
 8006136:	e7dc      	b.n	80060f2 <_strtoul_l.constprop.0+0x5e>
 8006138:	f04f 37ff 	mov.w	r7, #4294967295
 800613c:	e7e6      	b.n	800610c <_strtoul_l.constprop.0+0x78>
 800613e:	1c7b      	adds	r3, r7, #1
 8006140:	d106      	bne.n	8006150 <_strtoul_l.constprop.0+0xbc>
 8006142:	2322      	movs	r3, #34	; 0x22
 8006144:	f8ce 3000 	str.w	r3, [lr]
 8006148:	4638      	mov	r0, r7
 800614a:	b932      	cbnz	r2, 800615a <_strtoul_l.constprop.0+0xc6>
 800614c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006150:	b106      	cbz	r6, 8006154 <_strtoul_l.constprop.0+0xc0>
 8006152:	4240      	negs	r0, r0
 8006154:	2a00      	cmp	r2, #0
 8006156:	d0f9      	beq.n	800614c <_strtoul_l.constprop.0+0xb8>
 8006158:	b107      	cbz	r7, 800615c <_strtoul_l.constprop.0+0xc8>
 800615a:	1e69      	subs	r1, r5, #1
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	e7f5      	b.n	800614c <_strtoul_l.constprop.0+0xb8>
 8006160:	2430      	movs	r4, #48	; 0x30
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1b5      	bne.n	80060d2 <_strtoul_l.constprop.0+0x3e>
 8006166:	2308      	movs	r3, #8
 8006168:	e7b3      	b.n	80060d2 <_strtoul_l.constprop.0+0x3e>
 800616a:	2c30      	cmp	r4, #48	; 0x30
 800616c:	d0a9      	beq.n	80060c2 <_strtoul_l.constprop.0+0x2e>
 800616e:	230a      	movs	r3, #10
 8006170:	e7af      	b.n	80060d2 <_strtoul_l.constprop.0+0x3e>
 8006172:	bf00      	nop
 8006174:	080062ab 	.word	0x080062ab

08006178 <_strtoul_r>:
 8006178:	f7ff bf8c 	b.w	8006094 <_strtoul_l.constprop.0>

0800617c <_malloc_usable_size_r>:
 800617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006180:	1f18      	subs	r0, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfbc      	itt	lt
 8006186:	580b      	ldrlt	r3, [r1, r0]
 8006188:	18c0      	addlt	r0, r0, r3
 800618a:	4770      	bx	lr

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
