
Gestion_direction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004704  08004704  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004704  08004704  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000fc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d573  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001de8  00000000  00000000  0002d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c08  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000969  00000000  00000000  0002ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001faf2  00000000  00000000  00030951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ff41  00000000  00000000  00050443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf65c  00000000  00000000  00060384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032d4  00000000  00000000  0011f9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00122cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b4 	.word	0x080046b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080046b4 	.word	0x080046b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a35      	ldr	r2, [pc, #212]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_GPIO_Init+0xf0>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1_Pin|D2_Pin|D3_Pin|D4_Pin
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f241 11fe 	movw	r1, #4606	; 0x11fe
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0xf4>)
 8000a22:	f000 fe79 	bl	8001718 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin|D8_Pin
                          |IR_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2120      	movs	r1, #32
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f000 fe73 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MX_GPIO_Init+0xf4>)
 8000a4a:	f000 fcf3 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D4_Pin
 8000a4e:	f241 13fe 	movw	r3, #4606	; 0x11fe
 8000a52:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin|D8_Pin
                          |IR_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0xf4>)
 8000a68:	f000 fce4 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 fcd5 	bl	8001434 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800
 8000a9c:	00000000 	.word	0x00000000

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	ARR_Value = 64000000/(50.0*(PSC_Value+1))-1;
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <main+0x138>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcce 	bl	800044c <__aeabi_ui2d>
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <main+0x13c>)
 8000ab6:	f7ff fd43 	bl	8000540 <__aeabi_dmul>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	a140      	add	r1, pc, #256	; (adr r1, 8000bc0 <main+0x120>)
 8000ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ac4:	f7ff fe66 	bl	8000794 <__aeabi_ddiv>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <main+0x140>)
 8000ad6:	f7ff fb7b 	bl	80001d0 <__aeabi_dsub>
 8000ada:	4602      	mov	r2, r0
 8000adc:	460b      	mov	r3, r1
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff ff3f 	bl	8000964 <__aeabi_d2uiz>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a3e      	ldr	r2, [pc, #248]	; (8000be4 <main+0x144>)
 8000aea:	6013      	str	r3, [r2, #0]
	Period_Min = ARR_Value*(0.7/20.0);
 8000aec:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <main+0x144>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fcab 	bl	800044c <__aeabi_ui2d>
 8000af6:	a334      	add	r3, pc, #208	; (adr r3, 8000bc8 <main+0x128>)
 8000af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afc:	f7ff fd20 	bl	8000540 <__aeabi_dmul>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4610      	mov	r0, r2
 8000b06:	4619      	mov	r1, r3
 8000b08:	f7ff ff2c 	bl	8000964 <__aeabi_d2uiz>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <main+0x148>)
 8000b12:	801a      	strh	r2, [r3, #0]
	Period_Max = ARR_Value*(2.3/20.0);
 8000b14:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <main+0x144>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc97 	bl	800044c <__aeabi_ui2d>
 8000b1e:	a32c      	add	r3, pc, #176	; (adr r3, 8000bd0 <main+0x130>)
 8000b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b24:	f7ff fd0c 	bl	8000540 <__aeabi_dmul>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f7ff ff18 	bl	8000964 <__aeabi_d2uiz>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <main+0x14c>)
 8000b3a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fb0a 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f864 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff ff2e 	bl	80009a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b48:	f000 fa68 	bl	800101c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b4c:	f000 f962 	bl	8000e14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b50:	2100      	movs	r1, #0
 8000b52:	4827      	ldr	r0, [pc, #156]	; (8000bf0 <main+0x150>)
 8000b54:	f002 fa5a 	bl	800300c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SERVO_MoveTo(0);
 8000b58:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000bf4 <main+0x154>
 8000b5c:	f000 f8b0 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(1500);
 8000b60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b64:	f000 fb5c 	bl	8001220 <HAL_Delay>

	  SERVO_MoveTo(45);
 8000b68:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000bf8 <main+0x158>
 8000b6c:	f000 f8a8 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(500);
 8000b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b74:	f000 fb54 	bl	8001220 <HAL_Delay>

	  SERVO_MoveTo(90);
 8000b78:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000bfc <main+0x15c>
 8000b7c:	f000 f8a0 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f000 fb4c 	bl	8001220 <HAL_Delay>

	  SERVO_MoveTo(180);
 8000b88:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000c00 <main+0x160>
 8000b8c:	f000 f898 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f000 fb44 	bl	8001220 <HAL_Delay>

	  SERVO_MoveTo(275);
 8000b98:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000c04 <main+0x164>
 8000b9c:	f000 f890 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(500);
 8000ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba4:	f000 fb3c 	bl	8001220 <HAL_Delay>

	  SERVO_MoveTo(360);
 8000ba8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000c08 <main+0x168>
 8000bac:	f000 f888 	bl	8000cc0 <SERVO_MoveTo>
	  HAL_Delay(500);
 8000bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb4:	f000 fb34 	bl	8001220 <HAL_Delay>
	  SERVO_MoveTo(0);
 8000bb8:	e7ce      	b.n	8000b58 <main+0xb8>
 8000bba:	bf00      	nop
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	418e8480 	.word	0x418e8480
 8000bc8:	1eb851eb 	.word	0x1eb851eb
 8000bcc:	3fa1eb85 	.word	0x3fa1eb85
 8000bd0:	d70a3d70 	.word	0xd70a3d70
 8000bd4:	3fbd70a3 	.word	0x3fbd70a3
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	40490000 	.word	0x40490000
 8000be0:	3ff00000 	.word	0x3ff00000
 8000be4:	2000002c 	.word	0x2000002c
 8000be8:	20000030 	.word	0x20000030
 8000bec:	20000032 	.word	0x20000032
 8000bf0:	20000034 	.word	0x20000034
 8000bf4:	00000000 	.word	0x00000000
 8000bf8:	42340000 	.word	0x42340000
 8000bfc:	42b40000 	.word	0x42b40000
 8000c00:	43340000 	.word	0x43340000
 8000c04:	43898000 	.word	0x43898000
 8000c08:	43b40000 	.word	0x43b40000

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b096      	sub	sp, #88	; 0x58
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c16:	2228      	movs	r2, #40	; 0x28
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fd1d 	bl	800465a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c42:	2302      	movs	r3, #2
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c46:	2301      	movs	r3, #1
 8000c48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c52:	2300      	movs	r3, #0
 8000c54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c56:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fd71 	bl	8001748 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000c6c:	f000 f86c 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fd99 	bl	80027c4 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c98:	f000 f856 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 ffc1 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cb4:	f000 f848 	bl	8000d48 <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3758      	adds	r7, #88	; 0x58
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SERVO_MoveTo>:

/* USER CODE BEGIN 4 */

void SERVO_MoveTo(float af_Angle)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t au16_Pulse = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(Period_Max - Period_Min))/360.0)+ Period_Min;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <SERVO_MoveTo+0x78>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <SERVO_MoveTo+0x7c>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cea:	ee17 0a90 	vmov	r0, s15
 8000cee:	f7ff fbcf 	bl	8000490 <__aeabi_f2d>
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <SERVO_MoveTo+0x80>)
 8000cf8:	f7ff fd4c 	bl	8000794 <__aeabi_ddiv>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4614      	mov	r4, r2
 8000d02:	461d      	mov	r5, r3
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <SERVO_MoveTo+0x7c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fbaf 	bl	800046c <__aeabi_i2d>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4620      	mov	r0, r4
 8000d14:	4629      	mov	r1, r5
 8000d16:	f7ff fa5d 	bl	80001d4 <__adddf3>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fe1f 	bl	8000964 <__aeabi_d2uiz>
 8000d26:	4603      	mov	r3, r0
 8000d28:	81fb      	strh	r3, [r7, #14]

	TIM1->CCR1 = au16_Pulse;
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <SERVO_MoveTo+0x84>)
 8000d2c:	89fb      	ldrh	r3, [r7, #14]
 8000d2e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bdb0      	pop	{r4, r5, r7, pc}
 8000d38:	20000032 	.word	0x20000032
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	40768000 	.word	0x40768000
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fb1e 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f9fa 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b09a      	sub	sp, #104	; 0x68
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	222c      	movs	r2, #44	; 0x2c
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fc03 	bl	800465a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e56:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <MX_TIM1_Init+0x154>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e5a:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e80:	4838      	ldr	r0, [pc, #224]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e82:	f002 f80b 	bl	8002e9c <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e8c:	f7ff ff5c 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4831      	ldr	r0, [pc, #196]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000e9e:	f002 fab5 	bl	800340c <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ea8:	f7ff ff4e 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000eae:	f002 f84c 	bl	8002f4a <HAL_TIM_PWM_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000eb8:	f7ff ff46 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000ed0:	f002 ff44 	bl	8003d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000eda:	f7ff ff35 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	2360      	movs	r3, #96	; 0x60
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4818      	ldr	r0, [pc, #96]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000f04:	f002 f96e 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f0e:	f7ff ff1b 	bl	8000d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000f48:	f002 ff76 	bl	8003e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f52:	f7ff fef9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_TIM1_Init+0x150>)
 8000f58:	f000 f828 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000f5c:	bf00      	nop
 8000f5e:	3768      	adds	r7, #104	; 0x68
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000034 	.word	0x20000034
 8000f68:	40012c00 	.word	0x40012c00

08000f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_TIM_Base_MspInit+0x38>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10b      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_TIM_MspPostInit+0x64>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11b      	bne.n	8001006 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_control_Pin;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_control_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8001002:	f000 fa17 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000
 8001018:	48000800 	.word	0x48000800

0800101c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_USART2_UART_Init+0x5c>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001028:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001060:	f002 ff62 	bl	8003f28 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106a:	f7ff fe6d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000080 	.word	0x20000080
 8001078:	40004400 	.word	0x40004400

0800107c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d128      	bne.n	80010f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_UART_MspInit+0x80>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ce:	230c      	movs	r3, #12
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010de:	2307      	movs	r3, #7
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 f9a2 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40021000 	.word	0x40021000

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fe74 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 fa9d 	bl	800466c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fcb5 	bl	8000aa0 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001138:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001144:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 8001148:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800114c:	2000010c 	.word	0x2000010c

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x28>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f931 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fdf0 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f93b 	bl	800141a <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f911 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000004 	.word	0x20000004
 80011d8:	2000000c 	.word	0x2000000c
 80011dc:	20000008 	.word	0x20000008

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000108 	.word	0x20000108

08001208 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;  
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000108 	.word	0x20000108

08001220 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000000c 	.word	0x2000000c

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff47 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff5c 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffb0 	bl	8001388 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e14e      	b.n	80016e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8140 	beq.w	80016dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x40>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 0201 	and.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d017      	beq.n	8001512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 809a 	beq.w	80016dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d013      	beq.n	8001614 <HAL_GPIO_Init+0x1e0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_GPIO_Init+0x2d4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1dc>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a45      	ldr	r2, [pc, #276]	; (800170c <HAL_GPIO_Init+0x2d8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1d8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a44      	ldr	r2, [pc, #272]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1d4>
 8001604:	2303      	movs	r3, #3
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 8001608:	2305      	movs	r3, #5
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 8001614:	2300      	movs	r3, #0
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001626:	4937      	ldr	r1, [pc, #220]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001658:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f aea9 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001734:	e002      	b.n	800173c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800174e:	af00      	add	r7, sp, #0
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001758:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f001 b823 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 817d 	beq.w	8001a7e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001784:	4bbc      	ldr	r3, [pc, #752]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4bb9      	ldr	r3, [pc, #740]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d15c      	bne.n	8001856 <HAL_RCC_OscConfig+0x10e>
 800179c:	4bb6      	ldr	r3, [pc, #728]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d155      	bne.n	8001856 <HAL_RCC_OscConfig+0x10e>
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0x94>
 80017d6:	4ba8      	ldr	r3, [pc, #672]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e015      	b.n	8001808 <HAL_RCC_OscConfig+0xc0>
 80017dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001804:	4b9c      	ldr	r3, [pc, #624]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800180c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001810:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001814:	fa92 f2a2 	rbit	r2, r2
 8001818:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800181c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001820:	fab2 f282 	clz	r2, r2
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f002 021f 	and.w	r2, r2, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 811f 	beq.w	8001a7c <HAL_RCC_OscConfig+0x334>
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8116 	bne.w	8001a7c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	f000 bfaf 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x12e>
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e036      	b.n	80018e4 <HAL_RCC_OscConfig+0x19c>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x158>
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800188c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a78      	ldr	r2, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e021      	b.n	80018e4 <HAL_RCC_OscConfig+0x19c>
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x184>
 80018b2:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a70      	ldr	r2, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6d      	ldr	r2, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x19c>
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e4:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f023 020f 	bic.w	r2, r3, #15
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	495f      	ldr	r1, [pc, #380]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d059      	beq.n	80019c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fc7b 	bl	8001208 <HAL_GetTick>
 8001912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc76 	bl	8001208 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d902      	bls.n	800192e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	f000 bf43 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 800192e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001932:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_RCC_OscConfig+0x218>
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e015      	b.n	800198c <HAL_RCC_OscConfig+0x244>
 8001960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001964:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001978:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800197c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001990:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001994:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001998:	fa92 f2a2 	rbit	r2, r2
 800199c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019a4:	fab2 f282 	clz	r2, r2
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ab      	beq.n	8001918 <HAL_RCC_OscConfig+0x1d0>
 80019c0:	e05d      	b.n	8001a7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc21 	bl	8001208 <HAL_GetTick>
 80019c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fc1c 	bl	8001208 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d902      	bls.n	80019e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	f000 bee9 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 80019e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2cc>
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	e015      	b.n	8001a40 <HAL_RCC_OscConfig+0x2f8>
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_RCC_OscConfig+0x330>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a44:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a4c:	fa92 f2a2 	rbit	r2, r2
 8001a50:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a54:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f002 021f 	and.w	r2, r2, #31
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ab      	bne.n	80019cc <HAL_RCC_OscConfig+0x284>
 8001a74:	e003      	b.n	8001a7e <HAL_RCC_OscConfig+0x336>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 817d 	beq.w	8001d8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a94:	4ba6      	ldr	r3, [pc, #664]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa0:	4ba3      	ldr	r3, [pc, #652]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d172      	bne.n	8001b92 <HAL_RCC_OscConfig+0x44a>
 8001aac:	4ba0      	ldr	r3, [pc, #640]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d16c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x44a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001aca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	095b      	lsrs	r3, r3, #5
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3a0>
 8001ae2:	4b93      	ldr	r3, [pc, #588]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	e013      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c8>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2202      	movs	r2, #2
 8001b12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b1a:	fa92 f2a2 	rbit	r2, r2
 8001b1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b26:	fab2 f282 	clz	r2, r2
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f042 0220 	orr.w	r2, r2, #32
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f002 021f 	and.w	r2, r2, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_RCC_OscConfig+0x410>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f000 be2e 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	21f8      	movs	r1, #248	; 0xf8
 8001b6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b76:	fa91 f1a1 	rbit	r1, r1
 8001b7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b82:	fab1 f181 	clz	r1, r1
 8001b86:	b2c9      	uxtb	r1, r1
 8001b88:	408b      	lsls	r3, r1
 8001b8a:	4969      	ldr	r1, [pc, #420]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	e0fd      	b.n	8001d8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8088 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x56c>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2301      	movs	r3, #1
 8001bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb1a 	bl	8001208 <HAL_GetTick>
 8001bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb15 	bl	8001208 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d902      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f000 bde2 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4d8>
 8001c1a:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e013      	b.n	8001c48 <HAL_RCC_OscConfig+0x500>
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0af      	beq.n	8001bda <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	21f8      	movs	r1, #248	; 0xf8
 8001c90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c98:	fa91 f1a1 	rbit	r1, r1
 8001c9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ca0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ca4:	fab1 f181 	clz	r1, r1
 8001ca8:	b2c9      	uxtb	r1, r1
 8001caa:	408b      	lsls	r3, r1
 8001cac:	4920      	ldr	r1, [pc, #128]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e06c      	b.n	8001d8e <HAL_RCC_OscConfig+0x646>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fa92 	bl	8001208 <HAL_GetTick>
 8001ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fa8d 	bl	8001208 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d902      	bls.n	8001d00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f000 bd5a 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d104      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5ec>
 8001d2a:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <HAL_RCC_OscConfig+0x5e8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x614>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d58:	4bc8      	ldr	r3, [pc, #800]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ad      	bne.n	8001cea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8110 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d079      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x760>
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4bab      	ldr	r3, [pc, #684]	; (8002080 <HAL_RCC_OscConfig+0x938>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa13 	bl	8001208 <HAL_GetTick>
 8001de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fa0e 	bl	8001208 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d902      	bls.n	8001dfe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	f000 bcdb 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e58:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e64:	2102      	movs	r1, #2
 8001e66:	6019      	str	r1, [r3, #0]
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f1a3 	rbit	r1, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e7e:	6019      	str	r1, [r3, #0]
  return result;
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0a0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x6a0>
 8001ea6:	e08d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x87c>
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fa93 f2a3 	rbit	r2, r3
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eca:	601a      	str	r2, [r3, #0]
  return result;
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ed4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x938>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f98d 	bl	8001208 <HAL_GetTick>
 8001eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f988 	bl	8001208 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f000 bc55 	b.w	80027b4 <HAL_RCC_OscConfig+0x106c>
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f12:	2202      	movs	r2, #2
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f82:	2102      	movs	r1, #2
 8001f84:	6019      	str	r1, [r3, #0]
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f1a3 	rbit	r1, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f9c:	6019      	str	r1, [r3, #0]
  return result;
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d197      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 81a1 	beq.w	800231c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	61d3      	str	r3, [r2, #28]
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002012:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCC_OscConfig+0x93c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11a      	bne.n	800205c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x93c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_RCC_OscConfig+0x93c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f8e9 	bl	8001208 <HAL_GetTick>
 8002036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	e009      	b.n	8002050 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203c:	f7ff f8e4 	bl	8001208 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e3b1      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_OscConfig+0x93c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10d      	bne.n	8002088 <HAL_RCC_OscConfig+0x940>
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_OscConfig+0x934>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a02      	ldr	r2, [pc, #8]	; (800207c <HAL_RCC_OscConfig+0x934>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e03c      	b.n	80020f4 <HAL_RCC_OscConfig+0x9ac>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	10908120 	.word	0x10908120
 8002084:	40007000 	.word	0x40007000
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x96a>
 8002098:	4bc1      	ldr	r3, [pc, #772]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4ac0      	ldr	r2, [pc, #768]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	4bbe      	ldr	r3, [pc, #760]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4abd      	ldr	r2, [pc, #756]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_OscConfig+0x9ac>
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x994>
 80020c2:	4bb7      	ldr	r3, [pc, #732]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4ab6      	ldr	r2, [pc, #728]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4bb4      	ldr	r3, [pc, #720]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4ab3      	ldr	r2, [pc, #716]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x9ac>
 80020dc:	4bb0      	ldr	r3, [pc, #704]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4aaf      	ldr	r2, [pc, #700]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	4bad      	ldr	r3, [pc, #692]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4aac      	ldr	r2, [pc, #688]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8081 	beq.w	8002208 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff f87f 	bl	8001208 <HAL_GetTick>
 800210a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7ff f87a 	bl	8001208 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e345      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800216e:	601a      	str	r2, [r3, #0]
  return result;
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0xa4c>
 800218e:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0xa74>
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	4b79      	ldr	r3, [pc, #484]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021c4:	2102      	movs	r1, #2
 80021c6:	6011      	str	r1, [r2, #0]
 80021c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	fa92 f1a2 	rbit	r1, r2
 80021d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021de:	6011      	str	r1, [r2, #0]
  return result;
 80021e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 021f 	and.w	r2, r2, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d084      	beq.n	8002110 <HAL_RCC_OscConfig+0x9c8>
 8002206:	e07f      	b.n	8002308 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe fffe 	bl	8001208 <HAL_GetTick>
 800220c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fff9 	bl	8001208 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2c4      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002270:	601a      	str	r2, [r3, #0]
  return result;
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800227a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d102      	bne.n	8002296 <HAL_RCC_OscConfig+0xb4e>
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	e013      	b.n	80022be <HAL_RCC_OscConfig+0xb76>
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800229e:	2202      	movs	r2, #2
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022c6:	2102      	movs	r1, #2
 80022c8:	6011      	str	r1, [r2, #0]
 80022ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fa92 f1a2 	rbit	r1, r2
 80022d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022e0:	6011      	str	r1, [r2, #0]
  return result;
 80022e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f002 021f 	and.w	r2, r2, #31
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d184      	bne.n	8002212 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002308:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8242 	beq.w	80027b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_RCC_OscConfig+0xc58>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b08      	cmp	r3, #8
 8002338:	f000 8213 	beq.w	8002762 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	f040 8162 	bne.w	8002612 <HAL_RCC_OscConfig+0xeca>
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002356:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800237c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	461a      	mov	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe ff38 	bl	8001208 <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e00c      	b.n	80023b8 <HAL_RCC_OscConfig+0xc70>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe ff30 	bl	8001208 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1fd      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023dc:	601a      	str	r2, [r3, #0]
  return result;
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_OscConfig+0xcba>
 80023fc:	4bb0      	ldr	r3, [pc, #704]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e027      	b.n	8002452 <HAL_RCC_OscConfig+0xd0a>
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800240a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	4b9c      	ldr	r3, [pc, #624]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002456:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800245a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002464:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	fa92 f1a2 	rbit	r1, r2
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002476:	6011      	str	r1, [r2, #0]
  return result;
 8002478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800247c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d182      	bne.n	80023a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	430b      	orrs	r3, r1
 80024c0:	497f      	ldr	r1, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ea:	601a      	str	r2, [r3, #0]
  return result;
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fe7c 	bl	8001208 <HAL_GetTick>
 8002510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	e009      	b.n	800252a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fe77 	bl	8001208 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e144      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800254e:	601a      	str	r2, [r3, #0]
  return result;
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_RCC_OscConfig+0xe2c>
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e027      	b.n	80025c4 <HAL_RCC_OscConfig+0xe7c>
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800257c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025d0:	6011      	str	r1, [r2, #0]
 80025d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	fa92 f1a2 	rbit	r1, r2
 80025e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025e8:	6011      	str	r1, [r2, #0]
  return result;
 80025ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d082      	beq.n	8002516 <HAL_RCC_OscConfig+0xdce>
 8002610:	e0cf      	b.n	80027b2 <HAL_RCC_OscConfig+0x106a>
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800261a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002640:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	461a      	mov	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fdd6 	bl	8001208 <HAL_GetTick>
 800265c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e009      	b.n	8002676 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fdd1 	bl	8001208 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e09e      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800267e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800269a:	601a      	str	r2, [r3, #0]
  return result;
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d104      	bne.n	80026c4 <HAL_RCC_OscConfig+0xf7c>
 80026ba:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <HAL_RCC_OscConfig+0xf78>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e029      	b.n	8002714 <HAL_RCC_OscConfig+0xfcc>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCC_OscConfig+0x1078>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002718:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800271c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002720:	6011      	str	r1, [r2, #0]
 8002722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002726:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	fa92 f1a2 	rbit	r1, r2
 8002730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002734:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002738:	6011      	str	r1, [r2, #0]
  return result;
 800273a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800273e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f002 021f 	and.w	r2, r2, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d180      	bne.n	8002662 <HAL_RCC_OscConfig+0xf1a>
 8002760:	e027      	b.n	80027b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e01e      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_OscConfig+0x1078>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800277e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002782:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	429a      	cmp	r2, r3
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002796:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b09e      	sub	sp, #120	; 0x78
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e162      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	498b      	ldr	r1, [pc, #556]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e14a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	497f      	ldr	r1, [pc, #508]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80dc 	beq.w	80029f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d13c      	bne.n	80028ba <HAL_RCC_ClockConfig+0xf6>
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_ClockConfig+0xa6>
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e00f      	b.n	800288a <HAL_RCC_ClockConfig+0xc6>
 800286a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	663b      	str	r3, [r7, #96]	; 0x60
 800287e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800288e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f002 021f 	and.w	r2, r2, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d17b      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0f3      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d13c      	bne.n	800293c <HAL_RCC_ClockConfig+0x178>
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_ClockConfig+0x128>
 80028e6:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e00f      	b.n	800290c <HAL_RCC_ClockConfig+0x148>
 80028ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	63ba      	str	r2, [r7, #56]	; 0x38
 8002912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002914:	fa92 f2a2 	rbit	r2, r2
 8002918:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800291a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13a      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b2      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 800293c:	2302      	movs	r3, #2
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_ClockConfig+0x1a0>
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e00d      	b.n	8002980 <HAL_RCC_ClockConfig+0x1bc>
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	61ba      	str	r2, [r7, #24]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	617a      	str	r2, [r7, #20]
  return result;
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e079      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fc22 	bl	8001208 <HAL_GetTick>
 80029c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fc1e 	bl	8001208 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e061      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d214      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4906      	ldr	r1, [pc, #24]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e040      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	491a      	ldr	r1, [pc, #104]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4912      	ldr	r1, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a66:	f000 f829 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	22f0      	movs	r2, #240	; 0xf0
 8002a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fb70 	bl	8001180 <HAL_InitTick>
  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3778      	adds	r7, #120	; 0x78
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080046cc 	.word	0x080046cc
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	20000008 	.word	0x20000008

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e03c      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aee:	623b      	str	r3, [r7, #32]
      break;
 8002af0:	e03c      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002af8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002afc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	fa92 f2a2 	rbit	r2, r2
 8002b04:	607a      	str	r2, [r7, #4]
  return result;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	40d3      	lsrs	r3, r2
 8002b10:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	220f      	movs	r2, #15
 8002b20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	60fa      	str	r2, [r7, #12]
  return result;
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	40d3      	lsrs	r3, r2
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e004      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	623b      	str	r3, [r7, #32]
      break;
 8002b64:	e002      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b68:	623b      	str	r3, [r7, #32]
      break;
 8002b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	372c      	adds	r7, #44	; 0x2c
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	080046e4 	.word	0x080046e4
 8002b88:	080046f4 	.word	0x080046f4
 8002b8c:	003d0900 	.word	0x003d0900

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bae:	f7ff ffef 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	fa92 f2a2 	rbit	r2, r2
 8002bc8:	603a      	str	r2, [r7, #0]
  return result;
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	40d3      	lsrs	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	080046dc 	.word	0x080046dc

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bf2:	f7ff ffcd 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	603a      	str	r2, [r7, #0]
  return result;
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	40d3      	lsrs	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	080046dc 	.word	0x080046dc

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b092      	sub	sp, #72	; 0x48
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80cd 	beq.w	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c54:	4b8e      	ldr	r3, [pc, #568]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10e      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b8b      	ldr	r3, [pc, #556]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a8a      	ldr	r2, [pc, #552]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
 8002c6c:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a81      	ldr	r2, [pc, #516]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe fab7 	bl	8001208 <HAL_GetTick>
 8002c9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe fab3 	bl	8001208 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0ea      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b78      	ldr	r3, [pc, #480]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cbc:	4b74      	ldr	r3, [pc, #464]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d07d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d076      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cda:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	2301      	movs	r3, #1
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d045      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fa64 	bl	8001208 <HAL_GetTick>
 8002d40:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fe fa60 	bl	8001208 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e095      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	2302      	movs	r3, #2
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	61fb      	str	r3, [r7, #28]
  return result;
 8002d72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d102      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	e007      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2202      	movs	r2, #2
 8002da0:	613a      	str	r2, [r7, #16]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	60fa      	str	r2, [r7, #12]
  return result;
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	fab2 f282 	clz	r2, r2
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f002 021f 	and.w	r2, r2, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0bd      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	492e      	ldr	r1, [pc, #184]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4922      	ldr	r1, [pc, #136]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f023 0210 	bic.w	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	491a      	ldr	r1, [pc, #104]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	4913      	ldr	r1, [pc, #76]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	490b      	ldr	r1, [pc, #44]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3748      	adds	r7, #72	; 0x48
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	10908100 	.word	0x10908100

08002e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e049      	b.n	8002f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe f852 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 fb60 	bl	80035a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e049      	b.n	8002ff0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f841 	bl	8002ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f000 fb09 	bl	80035a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_TIM_PWM_Start+0x24>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e03c      	b.n	80030aa <HAL_TIM_PWM_Start+0x9e>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d109      	bne.n	800304a <HAL_TIM_PWM_Start+0x3e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e02f      	b.n	80030aa <HAL_TIM_PWM_Start+0x9e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d109      	bne.n	8003064 <HAL_TIM_PWM_Start+0x58>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e022      	b.n	80030aa <HAL_TIM_PWM_Start+0x9e>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d109      	bne.n	800307e <HAL_TIM_PWM_Start+0x72>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e015      	b.n	80030aa <HAL_TIM_PWM_Start+0x9e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b10      	cmp	r3, #16
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start+0x8c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e008      	b.n	80030aa <HAL_TIM_PWM_Start+0x9e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e088      	b.n	80031c4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_PWM_Start+0xb6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	e023      	b.n	800310a <HAL_TIM_PWM_Start+0xfe>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_PWM_Start+0xc6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d0:	e01b      	b.n	800310a <HAL_TIM_PWM_Start+0xfe>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PWM_Start+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e0:	e013      	b.n	800310a <HAL_TIM_PWM_Start+0xfe>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Start+0xe6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030f0:	e00b      	b.n	800310a <HAL_TIM_PWM_Start+0xfe>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start+0xf6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003100:	e003      	b.n	800310a <HAL_TIM_PWM_Start+0xfe>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fdfc 	bl	8003d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_TIM_PWM_Start+0x1c0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_TIM_PWM_Start+0x134>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <HAL_TIM_PWM_Start+0x1c4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_TIM_PWM_Start+0x134>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_TIM_PWM_Start+0x1c8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_TIM_PWM_Start+0x134>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <HAL_TIM_PWM_Start+0x1cc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_TIM_PWM_Start+0x138>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_TIM_PWM_Start+0x13a>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIM_PWM_Start+0x1c0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_TIM_PWM_Start+0x176>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d009      	beq.n	8003182 <HAL_TIM_PWM_Start+0x176>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_TIM_PWM_Start+0x1d0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_TIM_PWM_Start+0x176>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_TIM_PWM_Start+0x1c4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d115      	bne.n	80031ae <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_TIM_PWM_Start+0x1d4>)
 800318a:	4013      	ands	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d015      	beq.n	80031c0 <HAL_TIM_PWM_Start+0x1b4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d011      	beq.n	80031c0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	e008      	b.n	80031c0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e000      	b.n	80031c2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800
 80031dc:	40000400 	.word	0x40000400
 80031e0:	00010007 	.word	0x00010007

080031e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0ff      	b.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b14      	cmp	r3, #20
 800320e:	f200 80f0 	bhi.w	80033f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080033f3 	.word	0x080033f3
 8003220:	080033f3 	.word	0x080033f3
 8003224:	080033f3 	.word	0x080033f3
 8003228:	080032ad 	.word	0x080032ad
 800322c:	080033f3 	.word	0x080033f3
 8003230:	080033f3 	.word	0x080033f3
 8003234:	080033f3 	.word	0x080033f3
 8003238:	080032ef 	.word	0x080032ef
 800323c:	080033f3 	.word	0x080033f3
 8003240:	080033f3 	.word	0x080033f3
 8003244:	080033f3 	.word	0x080033f3
 8003248:	0800332f 	.word	0x0800332f
 800324c:	080033f3 	.word	0x080033f3
 8003250:	080033f3 	.word	0x080033f3
 8003254:	080033f3 	.word	0x080033f3
 8003258:	08003371 	.word	0x08003371
 800325c:	080033f3 	.word	0x080033f3
 8003260:	080033f3 	.word	0x080033f3
 8003264:	080033f3 	.word	0x080033f3
 8003268:	080033b1 	.word	0x080033b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa0c 	bl	8003690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e0a5      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa72 	bl	800379c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e084      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fad1 	bl	800389c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e064      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb2f 	bl	8003998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e043      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fb72 	bl	8003a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033ae:	e023      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fbb0 	bl	8003b1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033f0:	e002      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
      break;
 80033f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIM_ConfigClockSource+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e0b6      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d03e      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xd8>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	f200 8087 	bhi.w	800357c <HAL_TIM_ConfigClockSource+0x170>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x176>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d87f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d01a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xaa>
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d87b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d050      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x11e>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d877      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d03c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xfe>
 8003490:	2b50      	cmp	r3, #80	; 0x50
 8003492:	d873      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d058      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x13e>
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d86f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d064      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15e>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d86b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d060      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15e>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d867      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x170>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15e>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d05a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15e>
 80034b4:	e062      	b.n	800357c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034c6:	f000 fc03 	bl	8003cd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04f      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f4:	f000 fbec 	bl	8003cd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fb60 	bl	8003bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fbb9 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003528:	e02c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fb7f 	bl	8003c3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fba9 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003548:	e01c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fb40 	bl	8003bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb99 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003568:	e00c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 fb90 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 800357a:	e003      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e000      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a32      	ldr	r2, [pc, #200]	; (800367c <TIM_Base_SetConfig+0xdc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x28>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x28>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <TIM_Base_SetConfig+0xe0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a27      	ldr	r2, [pc, #156]	; (800367c <TIM_Base_SetConfig+0xdc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0x6a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0x6a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_Base_SetConfig+0xe0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x6a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <TIM_Base_SetConfig+0xe4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x6a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <TIM_Base_SetConfig+0xe8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x6a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <TIM_Base_SetConfig+0xec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0e      	ldr	r2, [pc, #56]	; (800367c <TIM_Base_SetConfig+0xdc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_Base_SetConfig+0xc0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <TIM_Base_SetConfig+0xe4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_Base_SetConfig+0xc0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <TIM_Base_SetConfig+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_Base_SetConfig+0xc0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <TIM_Base_SetConfig+0xec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d103      	bne.n	8003668 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	615a      	str	r2, [r3, #20]
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800

08003690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a28      	ldr	r2, [pc, #160]	; (800378c <TIM_OC1_SetConfig+0xfc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <TIM_OC1_SetConfig+0x78>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a27      	ldr	r2, [pc, #156]	; (8003790 <TIM_OC1_SetConfig+0x100>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <TIM_OC1_SetConfig+0x78>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a26      	ldr	r2, [pc, #152]	; (8003794 <TIM_OC1_SetConfig+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_OC1_SetConfig+0x78>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <TIM_OC1_SetConfig+0x108>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10c      	bne.n	8003722 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0308 	bic.w	r3, r3, #8
 800370e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_OC1_SetConfig+0xfc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00b      	beq.n	8003742 <TIM_OC1_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_OC1_SetConfig+0x100>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <TIM_OC1_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <TIM_OC1_SetConfig+0x104>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC1_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a16      	ldr	r2, [pc, #88]	; (8003798 <TIM_OC1_SetConfig+0x108>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d111      	bne.n	8003766 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0210 	bic.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0320 	bic.w	r3, r3, #32
 80037ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <TIM_OC2_SetConfig+0xf0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10d      	bne.n	800381c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <TIM_OC2_SetConfig+0xf0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_OC2_SetConfig+0xa0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <TIM_OC2_SetConfig+0xf4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_OC2_SetConfig+0xa0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_OC2_SetConfig+0xf8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0xa0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_OC2_SetConfig+0xfc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a23      	ldr	r2, [pc, #140]	; (8003988 <TIM_OC3_SetConfig+0xec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10d      	bne.n	800391a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003918:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <TIM_OC3_SetConfig+0xec>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_OC3_SetConfig+0x9e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_OC3_SetConfig+0xf0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_OC3_SetConfig+0x9e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <TIM_OC3_SetConfig+0xf4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_OC3_SetConfig+0x9e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <TIM_OC3_SetConfig+0xf8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d113      	bne.n	8003962 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	031b      	lsls	r3, r3, #12
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <TIM_OC4_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_OC4_SetConfig+0x7c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <TIM_OC4_SetConfig+0xbc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_OC4_SetConfig+0x7c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <TIM_OC4_SetConfig+0xc0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC4_SetConfig+0x7c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <TIM_OC4_SetConfig+0xc4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d109      	bne.n	8003a28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <TIM_OC5_SetConfig+0xac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x72>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <TIM_OC5_SetConfig+0xb0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x72>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <TIM_OC5_SetConfig+0xb4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x72>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <TIM_OC5_SetConfig+0xb8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d109      	bne.n	8003ae6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800

08003b1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	051b      	lsls	r3, r3, #20
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <TIM_OC6_SetConfig+0xb0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_OC6_SetConfig+0x74>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <TIM_OC6_SetConfig+0xb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <TIM_OC6_SetConfig+0x74>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <TIM_OC6_SetConfig+0xb8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_OC6_SetConfig+0x74>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <TIM_OC6_SetConfig+0xbc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800

08003bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 030a 	bic.w	r3, r3, #10
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	031b      	lsls	r3, r3, #12
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f043 0307 	orr.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e054      	b.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d009      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10c      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40014000 	.word	0x40014000

08003e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e060      	b.n	8003f16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d115      	bne.n	8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	051b      	lsls	r3, r3, #20
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e040      	b.n	8003fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd f896 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f82c 	bl	8003fc4 <UART_SetConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e022      	b.n	8003fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f956 	bl	8004230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9dd 	bl	8004374 <UART_CheckIdleState>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8a      	ldr	r3, [pc, #552]	; (8004218 <UART_SetConfig+0x254>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a78      	ldr	r2, [pc, #480]	; (800421c <UART_SetConfig+0x258>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d120      	bne.n	8004082 <UART_SetConfig+0xbe>
 8004040:	4b77      	ldr	r3, [pc, #476]	; (8004220 <UART_SetConfig+0x25c>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d817      	bhi.n	800407c <UART_SetConfig+0xb8>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0x90>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004065 	.word	0x08004065
 8004058:	08004071 	.word	0x08004071
 800405c:	08004077 	.word	0x08004077
 8004060:	0800406b 	.word	0x0800406b
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e01d      	b.n	80040a6 <UART_SetConfig+0xe2>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e01a      	b.n	80040a6 <UART_SetConfig+0xe2>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e017      	b.n	80040a6 <UART_SetConfig+0xe2>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e014      	b.n	80040a6 <UART_SetConfig+0xe2>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e011      	b.n	80040a6 <UART_SetConfig+0xe2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a67      	ldr	r2, [pc, #412]	; (8004224 <UART_SetConfig+0x260>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d102      	bne.n	8004092 <UART_SetConfig+0xce>
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e009      	b.n	80040a6 <UART_SetConfig+0xe2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a64      	ldr	r2, [pc, #400]	; (8004228 <UART_SetConfig+0x264>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <UART_SetConfig+0xde>
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e001      	b.n	80040a6 <UART_SetConfig+0xe2>
 80040a2:	2310      	movs	r3, #16
 80040a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ae:	d15a      	bne.n	8004166 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d827      	bhi.n	8004106 <UART_SetConfig+0x142>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <UART_SetConfig+0xf8>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f7 	.word	0x080040f7
 80040d0:	08004107 	.word	0x08004107
 80040d4:	08004107 	.word	0x08004107
 80040d8:	08004107 	.word	0x08004107
 80040dc:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7fe fd62 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80040e4:	61b8      	str	r0, [r7, #24]
        break;
 80040e6:	e013      	b.n	8004110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7fe fd80 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80040ec:	61b8      	str	r0, [r7, #24]
        break;
 80040ee:	e00f      	b.n	8004110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b4e      	ldr	r3, [pc, #312]	; (800422c <UART_SetConfig+0x268>)
 80040f2:	61bb      	str	r3, [r7, #24]
        break;
 80040f4:	e00c      	b.n	8004110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7fe fce1 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 80040fa:	61b8      	str	r0, [r7, #24]
        break;
 80040fc:	e008      	b.n	8004110 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004102:	61bb      	str	r3, [r7, #24]
        break;
 8004104:	e004      	b.n	8004110 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	77bb      	strb	r3, [r7, #30]
        break;
 800410e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d074      	beq.n	8004200 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d916      	bls.n	8004160 <UART_SetConfig+0x19c>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d212      	bcs.n	8004160 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f023 030f 	bic.w	r3, r3, #15
 8004142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	b29a      	uxth	r2, r3
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	4313      	orrs	r3, r2
 8004154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	89fa      	ldrh	r2, [r7, #14]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e04f      	b.n	8004200 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	77bb      	strb	r3, [r7, #30]
 8004164:	e04c      	b.n	8004200 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004166:	7ffb      	ldrb	r3, [r7, #31]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d828      	bhi.n	80041be <UART_SetConfig+0x1fa>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x1b0>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004199 	.word	0x08004199
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041a9 	.word	0x080041a9
 8004180:	080041bf 	.word	0x080041bf
 8004184:	080041af 	.word	0x080041af
 8004188:	080041bf 	.word	0x080041bf
 800418c:	080041bf 	.word	0x080041bf
 8004190:	080041bf 	.word	0x080041bf
 8004194:	080041b7 	.word	0x080041b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7fe fd06 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 800419c:	61b8      	str	r0, [r7, #24]
        break;
 800419e:	e013      	b.n	80041c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7fe fd24 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80041a4:	61b8      	str	r0, [r7, #24]
        break;
 80041a6:	e00f      	b.n	80041c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a8:	4b20      	ldr	r3, [pc, #128]	; (800422c <UART_SetConfig+0x268>)
 80041aa:	61bb      	str	r3, [r7, #24]
        break;
 80041ac:	e00c      	b.n	80041c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	f7fe fc85 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 80041b2:	61b8      	str	r0, [r7, #24]
        break;
 80041b4:	e008      	b.n	80041c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e004      	b.n	80041c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77bb      	strb	r3, [r7, #30]
        break;
 80041c6:	bf00      	nop
    }

    if (pclk != 0U)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	085a      	lsrs	r2, r3, #1
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d909      	bls.n	80041fc <UART_SetConfig+0x238>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d205      	bcs.n	80041fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	e001      	b.n	8004200 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800420c:	7fbb      	ldrb	r3, [r7, #30]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	efff69f3 	.word	0xefff69f3
 800421c:	40013800 	.word	0x40013800
 8004220:	40021000 	.word	0x40021000
 8004224:	40004400 	.word	0x40004400
 8004228:	40004800 	.word	0x40004800
 800422c:	007a1200 	.word	0x007a1200

08004230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01a      	beq.n	8004346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432e:	d10a      	bne.n	8004346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
  }
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b098      	sub	sp, #96	; 0x60
 8004378:	af02      	add	r7, sp, #8
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004384:	f7fc ff40 	bl	8001208 <HAL_GetTick>
 8004388:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d12e      	bne.n	80043f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a0:	2200      	movs	r2, #0
 80043a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f88c 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d021      	beq.n	80043f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d0:	647b      	str	r3, [r7, #68]	; 0x44
 80043d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e6      	bne.n	80043b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e062      	b.n	80044bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d149      	bne.n	8004498 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f856 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d03c      	beq.n	8004498 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	623b      	str	r3, [r7, #32]
   return(result);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
 800443e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e6      	bne.n	800441e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3308      	adds	r3, #8
 800446e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	617b      	str	r3, [r7, #20]
   return(result);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e011      	b.n	80044bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3758      	adds	r7, #88	; 0x58
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d4:	e049      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d045      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fc fe93 	bl	8001208 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e048      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d031      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b08      	cmp	r3, #8
 8004512:	d110      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2208      	movs	r2, #8
 800451a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f838 	bl	8004592 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2208      	movs	r2, #8
 8004526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e029      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d111      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800454e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f81e 	bl	8004592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00f      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4013      	ands	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	429a      	cmp	r2, r3
 8004586:	d0a6      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004592:	b480      	push	{r7}
 8004594:	b095      	sub	sp, #84	; 0x54
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
 80045ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e6      	bne.n	800459a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	61fb      	str	r3, [r7, #28]
   return(result);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	2b01      	cmp	r3, #1
 8004606:	d118      	bne.n	800463a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	60bb      	str	r3, [r7, #8]
   return(result);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f023 0310 	bic.w	r3, r3, #16
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	613b      	str	r3, [r7, #16]
   return(result);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800464e:	bf00      	nop
 8004650:	3754      	adds	r7, #84	; 0x54
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <memset>:
 800465a:	4402      	add	r2, r0
 800465c:	4603      	mov	r3, r0
 800465e:	4293      	cmp	r3, r2
 8004660:	d100      	bne.n	8004664 <memset+0xa>
 8004662:	4770      	bx	lr
 8004664:	f803 1b01 	strb.w	r1, [r3], #1
 8004668:	e7f9      	b.n	800465e <memset+0x4>
	...

0800466c <__libc_init_array>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4d0d      	ldr	r5, [pc, #52]	; (80046a4 <__libc_init_array+0x38>)
 8004670:	4c0d      	ldr	r4, [pc, #52]	; (80046a8 <__libc_init_array+0x3c>)
 8004672:	1b64      	subs	r4, r4, r5
 8004674:	10a4      	asrs	r4, r4, #2
 8004676:	2600      	movs	r6, #0
 8004678:	42a6      	cmp	r6, r4
 800467a:	d109      	bne.n	8004690 <__libc_init_array+0x24>
 800467c:	4d0b      	ldr	r5, [pc, #44]	; (80046ac <__libc_init_array+0x40>)
 800467e:	4c0c      	ldr	r4, [pc, #48]	; (80046b0 <__libc_init_array+0x44>)
 8004680:	f000 f818 	bl	80046b4 <_init>
 8004684:	1b64      	subs	r4, r4, r5
 8004686:	10a4      	asrs	r4, r4, #2
 8004688:	2600      	movs	r6, #0
 800468a:	42a6      	cmp	r6, r4
 800468c:	d105      	bne.n	800469a <__libc_init_array+0x2e>
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	f855 3b04 	ldr.w	r3, [r5], #4
 8004694:	4798      	blx	r3
 8004696:	3601      	adds	r6, #1
 8004698:	e7ee      	b.n	8004678 <__libc_init_array+0xc>
 800469a:	f855 3b04 	ldr.w	r3, [r5], #4
 800469e:	4798      	blx	r3
 80046a0:	3601      	adds	r6, #1
 80046a2:	e7f2      	b.n	800468a <__libc_init_array+0x1e>
 80046a4:	08004704 	.word	0x08004704
 80046a8:	08004704 	.word	0x08004704
 80046ac:	08004704 	.word	0x08004704
 80046b0:	08004708 	.word	0x08004708

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
