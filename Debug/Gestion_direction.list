
Gestion_direction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000445c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800461c  0800461c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800461c  0800461c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800461c  0800461c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d766  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001eb4  00000000  00000000  0002d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c20  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000975  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f23d  00000000  00000000  00030c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010666  00000000  00000000  0004fe72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf67e  00000000  00000000  000604d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032e4  00000000  00000000  0011fb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00122e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045cc 	.word	0x080045cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080045cc 	.word	0x080045cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <MX_GPIO_Init+0x108>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a3b      	ldr	r2, [pc, #236]	; (8000aac <MX_GPIO_Init+0x108>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <MX_GPIO_Init+0x108>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <MX_GPIO_Init+0x108>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a35      	ldr	r2, [pc, #212]	; (8000aac <MX_GPIO_Init+0x108>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <MX_GPIO_Init+0x108>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MX_GPIO_Init+0x108>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <MX_GPIO_Init+0x108>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_GPIO_Init+0x108>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_GPIO_Init+0x108>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <MX_GPIO_Init+0x108>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_GPIO_Init+0x108>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 fe05 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_ENABLE_GPIO_Port, IR_ENABLE_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0x10c>)
 8000a2e:	f000 fdff 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x10c>)
 8000a4a:	f000 fc7f 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D4_Pin
 8000a4e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000a52:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <MX_GPIO_Init+0x10c>)
 8000a64:	f000 fc72 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 fc63 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_ENABLE_Pin;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_GPIO_Init+0x10c>)
 8000aa0:	f000 fc54 	bl	800134c <HAL_GPIO_Init>

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000800 	.word	0x48000800

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f000 fad8 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 f836 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f7ff ff70 	bl	80009a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac4:	f000 fa36 	bl	8000f34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ac8:	f000 f930 	bl	8000d2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000acc:	2100      	movs	r1, #0
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <main+0x64>)
 8000ad0:	f002 fa28 	bl	8002f24 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SERVO_MoveTo(0);
 8000ad4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000b1c <main+0x68>
 8000ad8:	f000 f888 	bl	8000bec <SERVO_MoveTo>
	  HAL_Delay(1500);
 8000adc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ae0:	f000 fb2a 	bl	8001138 <HAL_Delay>

	  SERVO_MoveTo(45);
 8000ae4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000b20 <main+0x6c>
 8000ae8:	f000 f880 	bl	8000bec <SERVO_MoveTo>
	  HAL_Delay(1500);
 8000aec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000af0:	f000 fb22 	bl	8001138 <HAL_Delay>

	  SERVO_MoveTo(90);
 8000af4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000b24 <main+0x70>
 8000af8:	f000 f878 	bl	8000bec <SERVO_MoveTo>
	  HAL_Delay(1500);
 8000afc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b00:	f000 fb1a 	bl	8001138 <HAL_Delay>

	  SERVO_MoveTo(180);
 8000b04:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000b28 <main+0x74>
 8000b08:	f000 f870 	bl	8000bec <SERVO_MoveTo>
	  HAL_Delay(1500);
 8000b0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b10:	f000 fb12 	bl	8001138 <HAL_Delay>
	  SERVO_MoveTo(0);
 8000b14:	e7de      	b.n	8000ad4 <main+0x20>
 8000b16:	bf00      	nop
 8000b18:	20000028 	.word	0x20000028
 8000b1c:	00000000 	.word	0x00000000
 8000b20:	42340000 	.word	0x42340000
 8000b24:	42b40000 	.word	0x42b40000
 8000b28:	43340000 	.word	0x43340000

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b096      	sub	sp, #88	; 0x58
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b36:	2228      	movs	r2, #40	; 0x28
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fd19 	bl	8004572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fd6d 	bl	8001660 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b8c:	f000 f828 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fd95 	bl	80026dc <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bb8:	f000 f812 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 ffbd 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bd4:	f000 f804 	bl	8000be0 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3758      	adds	r7, #88	; 0x58
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <SERVO_MoveTo>:




void SERVO_MoveTo(float af_Angle)
{
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t au16_Pulse = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	81fb      	strh	r3, [r7, #14]


	au16_Pulse = ((af_Angle*(Period_Max - Period_Min))/180.0)+ Period_Min;
 8000bfa:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f640 437f 	movw	r3, #3199	; 0xc7f
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c16:	ee17 0a90 	vmov	r0, s15
 8000c1a:	f7ff fc39 	bl	8000490 <__aeabi_f2d>
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <SERVO_MoveTo+0x78>)
 8000c24:	f7ff fdb6 	bl	8000794 <__aeabi_ddiv>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	461d      	mov	r5, r3
 8000c30:	f640 437f 	movw	r3, #3199	; 0xc7f
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fc19 	bl	800046c <__aeabi_i2d>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4620      	mov	r0, r4
 8000c40:	4629      	mov	r1, r5
 8000c42:	f7ff fac7 	bl	80001d4 <__adddf3>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f7ff fe89 	bl	8000964 <__aeabi_d2uiz>
 8000c52:	4603      	mov	r3, r0
 8000c54:	81fb      	strh	r3, [r7, #14]

	TIM1->CCR1 = au16_Pulse;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <SERVO_MoveTo+0x7c>)
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	40668000 	.word	0x40668000
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fb1e 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f9fa 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	; 0x68
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	222c      	movs	r2, #44	; 0x2c
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fc03 	bl	8004572 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <MX_TIM1_Init+0x154>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d74:	2213      	movs	r2, #19
 8000d76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d98:	4838      	ldr	r0, [pc, #224]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d9a:	f002 f80b 	bl	8002db4 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f7ff ff1c 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000db2:	4619      	mov	r1, r3
 8000db4:	4831      	ldr	r0, [pc, #196]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000db6:	f002 fab5 	bl	8003324 <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dc0:	f7ff ff0e 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dc4:	482d      	ldr	r0, [pc, #180]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000dc6:	f002 f84c 	bl	8002e62 <HAL_TIM_PWM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000dd0:	f7ff ff06 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000de8:	f002 ff44 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000df2:	f7ff fef5 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e1c:	f002 f96e 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e26:	f7ff fedb 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e60:	f002 ff76 	bl	8003d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e6a:	f7ff feb9 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e70:	f000 f828 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000e74:	bf00      	nop
 8000e76:	3768      	adds	r7, #104	; 0x68
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000028 	.word	0x20000028
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_TIM_Base_MspInit+0x38>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10b      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_TIM_MspPostInit+0x64>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11b      	bne.n	8000f1e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_TIM_MspPostInit+0x68>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_control_Pin;
 8000efe:	2301      	movs	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_control_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_TIM_MspPostInit+0x6c>)
 8000f1a:	f000 fa17 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800

08000f34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_USART2_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART2_UART_Init+0x58>)
 8000f78:	f002 ff62 	bl	8003e40 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f7ff fe2d 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000074 	.word	0x20000074
 8000f90:	40004400 	.word	0x40004400

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x7c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d128      	bne.n	8001008 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_UART_MspInit+0x80>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f000 f9a2 	bl	800134c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40004400 	.word	0x40004400
 8001014:	40021000 	.word	0x40021000

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff fe74 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f003 fa9d 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff fd33 	bl	8000ab4 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001050:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800105c:	08004624 	.word	0x08004624
  ldr r2, =_sbss
 8001060:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001064:	20000100 	.word	0x20000100

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>
	...

0800106c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x28>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f931 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fdf0 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f93b 	bl	8001332 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f911 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	200000fc 	.word	0x200000fc

08001120 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;  
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200000fc 	.word	0x200000fc

08001138 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5c 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e14e      	b.n	80015fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8140 	beq.w	80015f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x40>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f003 0201 	and.w	r2, r3, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d017      	beq.n	800142a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0203 	and.w	r2, r3, #3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 809a 	beq.w	80015f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d8:	4a50      	ldr	r2, [pc, #320]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x1e0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2d4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1dc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x2d8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1d8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a44      	ldr	r2, [pc, #272]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1d4>
 800151c:	2303      	movs	r3, #3
 800151e:	e006      	b.n	800152e <HAL_GPIO_Init+0x1e2>
 8001520:	2305      	movs	r3, #5
 8001522:	e004      	b.n	800152e <HAL_GPIO_Init+0x1e2>
 8001524:	2302      	movs	r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x1e2>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_GPIO_Init+0x1e2>
 800152c:	2300      	movs	r3, #0
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	4093      	lsls	r3, r2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800153e:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_GPIO_Init+0x2e0>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_GPIO_Init+0x2e0>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2e0>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <HAL_GPIO_Init+0x2e0>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f aea9 	bne.w	800135c <HAL_GPIO_Init+0x10>
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001666:	af00      	add	r7, sp, #0
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001670:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	f001 b823 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 817d 	beq.w	8001996 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800169c:	4bbc      	ldr	r3, [pc, #752]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d00c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a8:	4bb9      	ldr	r3, [pc, #740]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d15c      	bne.n	800176e <HAL_RCC_OscConfig+0x10e>
 80016b4:	4bb6      	ldr	r3, [pc, #728]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d155      	bne.n	800176e <HAL_RCC_OscConfig+0x10e>
 80016c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x94>
 80016ee:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	e015      	b.n	8001720 <HAL_RCC_OscConfig+0xc0>
 80016f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001710:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800171c:	4b9c      	ldr	r3, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001724:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001728:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001734:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 811f 	beq.w	8001994 <HAL_RCC_OscConfig+0x334>
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8116 	bne.w	8001994 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f000 bfaf 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x12e>
 8001780:	4b83      	ldr	r3, [pc, #524]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a82      	ldr	r2, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e036      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x158>
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b79      	ldr	r3, [pc, #484]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a78      	ldr	r2, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e021      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x184>
 80017ca:	4b71      	ldr	r3, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a70      	ldr	r2, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6d      	ldr	r2, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fc:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f023 020f 	bic.w	r2, r3, #15
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	495f      	ldr	r1, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001812:	4313      	orrs	r3, r2
 8001814:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d059      	beq.n	80018da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fc7b 	bl	8001120 <HAL_GetTick>
 800182a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc76 	bl	8001120 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d902      	bls.n	8001846 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f000 bf43 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800185a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	095b      	lsrs	r3, r3, #5
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x218>
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	e015      	b.n	80018a4 <HAL_RCC_OscConfig+0x244>
 8001878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001894:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ab      	beq.n	8001830 <HAL_RCC_OscConfig+0x1d0>
 80018d8:	e05d      	b.n	8001996 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fc21 	bl	8001120 <HAL_GetTick>
 80018de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fc1c 	bl	8001120 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d902      	bls.n	80018fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f000 bee9 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 80018fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800190e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_RCC_OscConfig+0x2cc>
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x2f8>
 800192c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001930:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001944:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001948:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800195c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001960:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001964:	fa92 f2a2 	rbit	r2, r2
 8001968:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800196c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001970:	fab2 f282 	clz	r2, r2
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f002 021f 	and.w	r2, r2, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ab      	bne.n	80018e4 <HAL_RCC_OscConfig+0x284>
 800198c:	e003      	b.n	8001996 <HAL_RCC_OscConfig+0x336>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 817d 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ac:	4ba6      	ldr	r3, [pc, #664]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b8:	4ba3      	ldr	r3, [pc, #652]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d172      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 80019c4:	4ba0      	ldr	r3, [pc, #640]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d16c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x3a0>
 80019fa:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e013      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c8>
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a24:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_RCC_OscConfig+0x410>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f000 be2e 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	21f8      	movs	r1, #248	; 0xf8
 8001a86:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a8e:	fa91 f1a1 	rbit	r1, r1
 8001a92:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a96:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a9a:	fab1 f181 	clz	r1, r1
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	4969      	ldr	r1, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa8:	e0fd      	b.n	8001ca6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8088 	beq.w	8001bcc <HAL_RCC_OscConfig+0x56c>
 8001abc:	2301      	movs	r3, #1
 8001abe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ace:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fb1a 	bl	8001120 <HAL_GetTick>
 8001aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fb15 	bl	8001120 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d902      	bls.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f000 bde2 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b32:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x500>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2202      	movs	r2, #2
 8001b62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b6a:	fa92 f2a2 	rbit	r2, r2
 8001b6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0af      	beq.n	8001af2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	21f8      	movs	r1, #248	; 0xf8
 8001ba8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bb0:	fa91 f1a1 	rbit	r1, r1
 8001bb4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bbc:	fab1 f181 	clz	r1, r1
 8001bc0:	b2c9      	uxtb	r1, r1
 8001bc2:	408b      	lsls	r3, r1
 8001bc4:	4920      	ldr	r1, [pc, #128]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
 8001bca:	e06c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x646>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fa92 	bl	8001120 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fa8d 	bl	8001120 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d902      	bls.n	8001c18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f000 bd5a 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5ec>
 8001c42:	4b01      	ldr	r3, [pc, #4]	; (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e015      	b.n	8001c74 <HAL_RCC_OscConfig+0x614>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c70:	4bc8      	ldr	r3, [pc, #800]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	2202      	movs	r2, #2
 8001c76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ad      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8110 	beq.w	8001edc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d079      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x760>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4bab      	ldr	r3, [pc, #684]	; (8001f98 <HAL_RCC_OscConfig+0x938>)
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fa13 	bl	8001120 <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fa0e 	bl	8001120 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f000 bcdb 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d54:	2202      	movs	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d70:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	6019      	str	r1, [r3, #0]
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f1a3 	rbit	r1, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d96:	6019      	str	r1, [r3, #0]
  return result;
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0a0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x6a0>
 8001dbe:	e08d      	b.n	8001edc <HAL_RCC_OscConfig+0x87c>
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001de2:	601a      	str	r2, [r3, #0]
  return result;
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x938>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff f98d 	bl	8001120 <HAL_GetTick>
 8001e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f988 	bl	8001120 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d902      	bls.n	8001e22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	f000 bc55 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	6019      	str	r1, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f1a3 	rbit	r1, r3
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eb4:	6019      	str	r1, [r3, #0]
  return result;
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d197      	bne.n	8001e0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 81a1 	beq.w	8002234 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	61d3      	str	r3, [r2, #28]
 8001f10:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11a      	bne.n	8001f74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f8e9 	bl	8001120 <HAL_GetTick>
 8001f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff f8e4 	bl	8001120 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e3b1      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x940>
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e03c      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	10908120 	.word	0x10908120
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x96a>
 8001fb0:	4bc1      	ldr	r3, [pc, #772]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4ac0      	ldr	r2, [pc, #768]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4bbe      	ldr	r3, [pc, #760]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4abd      	ldr	r2, [pc, #756]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e020      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x994>
 8001fda:	4bb7      	ldr	r3, [pc, #732]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4ab6      	ldr	r2, [pc, #728]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4bb4      	ldr	r3, [pc, #720]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4ab3      	ldr	r2, [pc, #716]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001ff4:	4bb0      	ldr	r3, [pc, #704]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4aaf      	ldr	r2, [pc, #700]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	4bad      	ldr	r3, [pc, #692]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4aac      	ldr	r2, [pc, #688]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8081 	beq.w	8002120 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff f87f 	bl	8001120 <HAL_GetTick>
 8002022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f87a 	bl	8001120 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e345      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f2a3 	rbit	r2, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800206c:	2202      	movs	r2, #2
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002090:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_OscConfig+0xa4c>
 80020a6:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0xa74>
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020dc:	2102      	movs	r1, #2
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	fa92 f1a2 	rbit	r1, r2
 80020ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d084      	beq.n	8002028 <HAL_RCC_OscConfig+0x9c8>
 800211e:	e07f      	b.n	8002220 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7fe fffe 	bl	8001120 <HAL_GetTick>
 8002124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fff9 	bl	8001120 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e2c4      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002192:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_OscConfig+0xb4e>
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0xb76>
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021b6:	2202      	movs	r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021de:	2102      	movs	r1, #2
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	fa92 f1a2 	rbit	r1, r2
 80021f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021f8:	6011      	str	r1, [r2, #0]
  return result;
 80021fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d184      	bne.n	800212a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002220:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8242 	beq.w	80026ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	f000 8213 	beq.w	800267a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b02      	cmp	r3, #2
 8002262:	f040 8162 	bne.w	800252a <HAL_RCC_OscConfig+0xeca>
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800226e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002294:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	461a      	mov	r2, r3
 80022a8:	2300      	movs	r3, #0
 80022aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe ff38 	bl	8001120 <HAL_GetTick>
 80022b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	e00c      	b.n	80022d0 <HAL_RCC_OscConfig+0xc70>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe ff30 	bl	8001120 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1fd      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0xcba>
 8002314:	4bb0      	ldr	r3, [pc, #704]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e027      	b.n	800236a <HAL_RCC_OscConfig+0xd0a>
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b9c      	ldr	r3, [pc, #624]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800236e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002372:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800237c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002394:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d182      	bne.n	80022bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	430b      	orrs	r3, r1
 80023d8:	497f      	ldr	r1, [pc, #508]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002402:	601a      	str	r2, [r3, #0]
  return result;
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800240c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	461a      	mov	r2, r3
 8002420:	2301      	movs	r3, #1
 8002422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fe7c 	bl	8001120 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e009      	b.n	8002442 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fe77 	bl	8001120 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e144      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002466:	601a      	str	r2, [r3, #0]
  return result;
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0xe2c>
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e027      	b.n	80024dc <HAL_RCC_OscConfig+0xe7c>
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002506:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d082      	beq.n	800242e <HAL_RCC_OscConfig+0xdce>
 8002528:	e0cf      	b.n	80026ca <HAL_RCC_OscConfig+0x106a>
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002532:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800254e:	601a      	str	r2, [r3, #0]
  return result;
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002558:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	461a      	mov	r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fdd6 	bl	8001120 <HAL_GetTick>
 8002574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e009      	b.n	800258e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fdd1 	bl	8001120 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e09e      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025b2:	601a      	str	r2, [r3, #0]
  return result;
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d104      	bne.n	80025dc <HAL_RCC_OscConfig+0xf7c>
 80025d2:	4b01      	ldr	r3, [pc, #4]	; (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0xfcc>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800260a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x1078>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002630:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002634:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002638:	6011      	str	r1, [r2, #0]
 800263a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002650:	6011      	str	r1, [r2, #0]
  return result;
 8002652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002656:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d180      	bne.n	800257a <HAL_RCC_OscConfig+0xf1a>
 8002678:	e027      	b.n	80026ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e01e      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_OscConfig+0x1078>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002696:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800269a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09e      	sub	sp, #120	; 0x78
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e162      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b8d      	ldr	r3, [pc, #564]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	498b      	ldr	r1, [pc, #556]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b89      	ldr	r3, [pc, #548]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e14a      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	497f      	ldr	r1, [pc, #508]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80dc 	beq.w	8002908 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d13c      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xf6>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_ClockConfig+0xa6>
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e00f      	b.n	80027a2 <HAL_RCC_ClockConfig+0xc6>
 8002782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	663b      	str	r3, [r7, #96]	; 0x60
 8002796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f002 021f 	and.w	r2, r2, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d17b      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0f3      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d13c      	bne.n	8002854 <HAL_RCC_ClockConfig+0x178>
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_ClockConfig+0x128>
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e00f      	b.n	8002824 <HAL_RCC_ClockConfig+0x148>
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	647b      	str	r3, [r7, #68]	; 0x44
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	643b      	str	r3, [r7, #64]	; 0x40
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	63ba      	str	r2, [r7, #56]	; 0x38
 800282a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d13a      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b2      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e00d      	b.n	8002898 <HAL_RCC_ClockConfig+0x1bc>
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2202      	movs	r2, #2
 800289a:	61ba      	str	r2, [r7, #24]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	617a      	str	r2, [r7, #20]
  return result;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e079      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	491a      	ldr	r1, [pc, #104]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fc22 	bl	8001120 <HAL_GetTick>
 80028dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fc1e 	bl	8001120 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e061      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d214      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4906      	ldr	r1, [pc, #24]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e040      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	491a      	ldr	r1, [pc, #104]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4912      	ldr	r1, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297e:	f000 f829 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002982:	4601      	mov	r1, r0
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298c:	22f0      	movs	r2, #240	; 0xf0
 800298e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	60fa      	str	r2, [r7, #12]
  return result;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	40d3      	lsrs	r3, r2
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x2ec>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	fa21 f303 	lsr.w	r3, r1, r3
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_RCC_ClockConfig+0x2f0>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_ClockConfig+0x2f4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fb70 	bl	8001098 <HAL_InitTick>
  
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3778      	adds	r7, #120	; 0x78
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080045e4 	.word	0x080045e4
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b08b      	sub	sp, #44	; 0x2c
 80029d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e03c      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a06:	623b      	str	r3, [r7, #32]
      break;
 8002a08:	e03c      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	607a      	str	r2, [r7, #4]
  return result;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	40d3      	lsrs	r3, r2
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	220f      	movs	r2, #15
 8002a38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	fa92 f2a2 	rbit	r2, r2
 8002a40:	60fa      	str	r2, [r7, #12]
  return result;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	40d3      	lsrs	r3, r2
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e004      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	e002      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a80:	623b      	str	r3, [r7, #32]
      break;
 8002a82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	372c      	adds	r7, #44	; 0x2c
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	080045fc 	.word	0x080045fc
 8002aa0:	0800460c 	.word	0x0800460c
 8002aa4:	003d0900 	.word	0x003d0900

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ac6:	f7ff ffef 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ad8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	603a      	str	r2, [r7, #0]
  return result;
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	40d3      	lsrs	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	080045f4 	.word	0x080045f4

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0a:	f7ff ffcd 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	603a      	str	r2, [r7, #0]
  return result;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	080045f4 	.word	0x080045f4

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b092      	sub	sp, #72	; 0x48
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80cd 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4b8e      	ldr	r3, [pc, #568]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a8a      	ldr	r2, [pc, #552]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
 8002b84:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b85      	ldr	r3, [pc, #532]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a81      	ldr	r2, [pc, #516]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fab7 	bl	8001120 <HAL_GetTick>
 8002bb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fab3 	bl	8001120 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0ea      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b78      	ldr	r3, [pc, #480]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd4:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d07d      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d076      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b66      	ldr	r3, [pc, #408]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d045      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fa64 	bl	8001120 <HAL_GetTick>
 8002c58:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fa60 	bl	8001120 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e095      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002c72:	2302      	movs	r3, #2
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	2302      	movs	r3, #2
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	61fb      	str	r3, [r7, #28]
  return result;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	e007      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	613a      	str	r2, [r7, #16]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	fa92 f2a2 	rbit	r2, r2
 8002cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f002 021f 	and.w	r2, r2, #31
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0bd      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ce0:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	492e      	ldr	r1, [pc, #184]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4922      	ldr	r1, [pc, #136]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f023 0210 	bic.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	4913      	ldr	r1, [pc, #76]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	490b      	ldr	r1, [pc, #44]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	4904      	ldr	r1, [pc, #16]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3748      	adds	r7, #72	; 0x48
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	10908100 	.word	0x10908100

08002db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e049      	b.n	8002e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f852 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 fb60 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e049      	b.n	8002f08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f841 	bl	8002f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fb09 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_TIM_PWM_Start+0x24>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e03c      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x9e>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d109      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x3e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e02f      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x9e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d109      	bne.n	8002f7c <HAL_TIM_PWM_Start+0x58>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e022      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x9e>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d109      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x72>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e015      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x9e>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d109      	bne.n	8002fb0 <HAL_TIM_PWM_Start+0x8c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e008      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x9e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e088      	b.n	80030dc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_PWM_Start+0xb6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PWM_Start+0xfe>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start+0xc6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	e01b      	b.n	8003022 <HAL_TIM_PWM_Start+0xfe>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_PWM_Start+0xd6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	e013      	b.n	8003022 <HAL_TIM_PWM_Start+0xfe>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start+0xe6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003008:	e00b      	b.n	8003022 <HAL_TIM_PWM_Start+0xfe>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0xf6>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	e003      	b.n	8003022 <HAL_TIM_PWM_Start+0xfe>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	6839      	ldr	r1, [r7, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fdfc 	bl	8003c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <HAL_TIM_PWM_Start+0x1c0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_PWM_Start+0x134>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_TIM_PWM_Start+0x1c4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIM_PWM_Start+0x134>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a28      	ldr	r2, [pc, #160]	; (80030ec <HAL_TIM_PWM_Start+0x1c8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_PWM_Start+0x134>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <HAL_TIM_PWM_Start+0x1cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_TIM_PWM_Start+0x138>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_TIM_PWM_Start+0x13a>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_TIM_PWM_Start+0x1c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_PWM_Start+0x176>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0x176>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_TIM_PWM_Start+0x1d0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0x176>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_TIM_PWM_Start+0x1c4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d115      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_TIM_PWM_Start+0x1d4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d015      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x1b4>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d011      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	e008      	b.n	80030d8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e000      	b.n	80030da <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40014400 	.word	0x40014400
 80030f0:	40014800 	.word	0x40014800
 80030f4:	40000400 	.word	0x40000400
 80030f8:	00010007 	.word	0x00010007

080030fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0ff      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b14      	cmp	r3, #20
 8003126:	f200 80f0 	bhi.w	800330a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003185 	.word	0x08003185
 8003134:	0800330b 	.word	0x0800330b
 8003138:	0800330b 	.word	0x0800330b
 800313c:	0800330b 	.word	0x0800330b
 8003140:	080031c5 	.word	0x080031c5
 8003144:	0800330b 	.word	0x0800330b
 8003148:	0800330b 	.word	0x0800330b
 800314c:	0800330b 	.word	0x0800330b
 8003150:	08003207 	.word	0x08003207
 8003154:	0800330b 	.word	0x0800330b
 8003158:	0800330b 	.word	0x0800330b
 800315c:	0800330b 	.word	0x0800330b
 8003160:	08003247 	.word	0x08003247
 8003164:	0800330b 	.word	0x0800330b
 8003168:	0800330b 	.word	0x0800330b
 800316c:	0800330b 	.word	0x0800330b
 8003170:	08003289 	.word	0x08003289
 8003174:	0800330b 	.word	0x0800330b
 8003178:	0800330b 	.word	0x0800330b
 800317c:	0800330b 	.word	0x0800330b
 8003180:	080032c9 	.word	0x080032c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa0c 	bl	80035a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6999      	ldr	r1, [r3, #24]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	619a      	str	r2, [r3, #24]
      break;
 80031c2:	e0a5      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fa72 	bl	80036b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6999      	ldr	r1, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
      break;
 8003204:	e084      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fad1 	bl	80037b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0208 	orr.w	r2, r2, #8
 8003220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0204 	bic.w	r2, r2, #4
 8003230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69d9      	ldr	r1, [r3, #28]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
      break;
 8003244:	e064      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fb2f 	bl	80038b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]
      break;
 8003286:	e043      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fb72 	bl	8003978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032c6:	e023      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fbb0 	bl	8003a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003308:	e002      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
      break;
 800330e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop

08003324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIM_ConfigClockSource+0x1c>
 800333c:	2302      	movs	r3, #2
 800333e:	e0b6      	b.n	80034ae <HAL_TIM_ConfigClockSource+0x18a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d03e      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0xd8>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003382:	f200 8087 	bhi.w	8003494 <HAL_TIM_ConfigClockSource+0x170>
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	f000 8086 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x176>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d87f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d01a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xaa>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d87b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d050      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x11e>
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d877      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d03c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xfe>
 80033a8:	2b50      	cmp	r3, #80	; 0x50
 80033aa:	d873      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d058      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x13e>
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d86f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d064      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15e>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d86b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d060      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15e>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d867      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15e>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d05a      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15e>
 80033cc:	e062      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033de:	f000 fc03 	bl	8003be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
      break;
 80033fa:	e04f      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800340c:	f000 fbec 	bl	8003be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341e:	609a      	str	r2, [r3, #8]
      break;
 8003420:	e03c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fb60 	bl	8003af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2150      	movs	r1, #80	; 0x50
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fbb9 	bl	8003bb2 <TIM_ITRx_SetConfig>
      break;
 8003440:	e02c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800344e:	461a      	mov	r2, r3
 8003450:	f000 fb7f 	bl	8003b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2160      	movs	r1, #96	; 0x60
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fba9 	bl	8003bb2 <TIM_ITRx_SetConfig>
      break;
 8003460:	e01c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	461a      	mov	r2, r3
 8003470:	f000 fb40 	bl	8003af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fb99 	bl	8003bb2 <TIM_ITRx_SetConfig>
      break;
 8003480:	e00c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f000 fb90 	bl	8003bb2 <TIM_ITRx_SetConfig>
      break;
 8003492:	e003      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      break;
 8003498:	e000      	b.n	800349c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800349a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <TIM_Base_SetConfig+0xdc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x28>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x28>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <TIM_Base_SetConfig+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <TIM_Base_SetConfig+0xdc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <TIM_Base_SetConfig+0x6a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d00f      	beq.n	8003522 <TIM_Base_SetConfig+0x6a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <TIM_Base_SetConfig+0xe0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0x6a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <TIM_Base_SetConfig+0xe4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0x6a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <TIM_Base_SetConfig+0xe8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0x6a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <TIM_Base_SetConfig+0xec>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <TIM_Base_SetConfig+0xdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00b      	beq.n	8003578 <TIM_Base_SetConfig+0xc0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <TIM_Base_SetConfig+0xe4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_Base_SetConfig+0xc0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <TIM_Base_SetConfig+0xe8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0xc0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <TIM_Base_SetConfig+0xec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40014400 	.word	0x40014400
 80035a4:	40014800 	.word	0x40014800

080035a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0201 	bic.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <TIM_OC1_SetConfig+0xfc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_OC1_SetConfig+0x78>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <TIM_OC1_SetConfig+0x100>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_OC1_SetConfig+0x78>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a26      	ldr	r2, [pc, #152]	; (80036ac <TIM_OC1_SetConfig+0x104>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_OC1_SetConfig+0x78>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <TIM_OC1_SetConfig+0x108>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10c      	bne.n	800363a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0308 	bic.w	r3, r3, #8
 8003626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <TIM_OC1_SetConfig+0xfc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_OC1_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <TIM_OC1_SetConfig+0x100>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_OC1_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <TIM_OC1_SetConfig+0x104>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_OC1_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <TIM_OC1_SetConfig+0x108>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d111      	bne.n	800367e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	621a      	str	r2, [r3, #32]
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800

080036b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <TIM_OC2_SetConfig+0xf0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10d      	bne.n	8003734 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <TIM_OC2_SetConfig+0xf0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_OC2_SetConfig+0xa0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <TIM_OC2_SetConfig+0xf4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_OC2_SetConfig+0xa0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <TIM_OC2_SetConfig+0xf8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC2_SetConfig+0xa0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <TIM_OC2_SetConfig+0xfc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d113      	bne.n	800377c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003762:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40014000 	.word	0x40014000
 80037ac:	40014400 	.word	0x40014400
 80037b0:	40014800 	.word	0x40014800

080037b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <TIM_OC3_SetConfig+0xec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10d      	bne.n	8003832 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003830:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <TIM_OC3_SetConfig+0xec>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC3_SetConfig+0x9e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <TIM_OC3_SetConfig+0xf0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC3_SetConfig+0x9e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <TIM_OC3_SetConfig+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC3_SetConfig+0x9e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <TIM_OC3_SetConfig+0xf8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d113      	bne.n	800387a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	621a      	str	r2, [r3, #32]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	031b      	lsls	r3, r3, #12
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <TIM_OC4_SetConfig+0xb8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00b      	beq.n	800392c <TIM_OC4_SetConfig+0x7c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <TIM_OC4_SetConfig+0xbc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC4_SetConfig+0x7c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <TIM_OC4_SetConfig+0xc0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC4_SetConfig+0x7c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <TIM_OC4_SetConfig+0xc4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	019b      	lsls	r3, r3, #6
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800

08003978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <TIM_OC5_SetConfig+0xac>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00b      	beq.n	80039ea <TIM_OC5_SetConfig+0x72>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC5_SetConfig+0xb0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <TIM_OC5_SetConfig+0x72>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <TIM_OC5_SetConfig+0xb4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_OC5_SetConfig+0x72>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <TIM_OC5_SetConfig+0xb8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d109      	bne.n	80039fe <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <TIM_OC6_SetConfig+0xb0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x74>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <TIM_OC6_SetConfig+0xb4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x74>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <TIM_OC6_SetConfig+0xb8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x74>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <TIM_OC6_SetConfig+0xbc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d109      	bne.n	8003abc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	029b      	lsls	r3, r3, #10
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800

08003af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 030a 	bic.w	r3, r3, #10
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b087      	sub	sp, #28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0210 	bic.w	r2, r3, #16
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	031b      	lsls	r3, r3, #12
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f043 0307 	orr.w	r3, r3, #7
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e054      	b.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40014000 	.word	0x40014000

08003d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e060      	b.n	8003e2e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d115      	bne.n	8003e1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	051b      	lsls	r3, r3, #20
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e040      	b.n	8003ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f896 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f82c 	bl	8003edc <UART_SetConfig>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f956 	bl	8004148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9dd 	bl	800428c <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8a      	ldr	r3, [pc, #552]	; (8004130 <UART_SetConfig+0x254>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a78      	ldr	r2, [pc, #480]	; (8004134 <UART_SetConfig+0x258>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d120      	bne.n	8003f9a <UART_SetConfig+0xbe>
 8003f58:	4b77      	ldr	r3, [pc, #476]	; (8004138 <UART_SetConfig+0x25c>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d817      	bhi.n	8003f94 <UART_SetConfig+0xb8>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <UART_SetConfig+0x90>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f89 	.word	0x08003f89
 8003f74:	08003f8f 	.word	0x08003f8f
 8003f78:	08003f83 	.word	0x08003f83
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e01d      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003f82:	2302      	movs	r3, #2
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e01a      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e017      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e014      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003f94:	2310      	movs	r3, #16
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e011      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a67      	ldr	r2, [pc, #412]	; (800413c <UART_SetConfig+0x260>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d102      	bne.n	8003faa <UART_SetConfig+0xce>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a64      	ldr	r2, [pc, #400]	; (8004140 <UART_SetConfig+0x264>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d102      	bne.n	8003fba <UART_SetConfig+0xde>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e001      	b.n	8003fbe <UART_SetConfig+0xe2>
 8003fba:	2310      	movs	r3, #16
 8003fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc6:	d15a      	bne.n	800407e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d827      	bhi.n	800401e <UART_SetConfig+0x142>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0xf8>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fd62 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	61b8      	str	r0, [r7, #24]
        break;
 8003ffe:	e013      	b.n	8004028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe fd80 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8004004:	61b8      	str	r0, [r7, #24]
        break;
 8004006:	e00f      	b.n	8004028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <UART_SetConfig+0x268>)
 800400a:	61bb      	str	r3, [r7, #24]
        break;
 800400c:	e00c      	b.n	8004028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fe fce1 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8004012:	61b8      	str	r0, [r7, #24]
        break;
 8004014:	e008      	b.n	8004028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e004      	b.n	8004028 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77bb      	strb	r3, [r7, #30]
        break;
 8004026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d074      	beq.n	8004118 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d916      	bls.n	8004078 <UART_SetConfig+0x19c>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d212      	bcs.n	8004078 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f023 030f 	bic.w	r3, r3, #15
 800405a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	b29b      	uxth	r3, r3
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	b29a      	uxth	r2, r3
 8004068:	89fb      	ldrh	r3, [r7, #14]
 800406a:	4313      	orrs	r3, r2
 800406c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	89fa      	ldrh	r2, [r7, #14]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	e04f      	b.n	8004118 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	77bb      	strb	r3, [r7, #30]
 800407c:	e04c      	b.n	8004118 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d828      	bhi.n	80040d6 <UART_SetConfig+0x1fa>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x1b0>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040b1 	.word	0x080040b1
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040c1 	.word	0x080040c1
 8004098:	080040d7 	.word	0x080040d7
 800409c:	080040c7 	.word	0x080040c7
 80040a0:	080040d7 	.word	0x080040d7
 80040a4:	080040d7 	.word	0x080040d7
 80040a8:	080040d7 	.word	0x080040d7
 80040ac:	080040cf 	.word	0x080040cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b0:	f7fe fd06 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 80040b4:	61b8      	str	r0, [r7, #24]
        break;
 80040b6:	e013      	b.n	80040e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe fd24 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80040bc:	61b8      	str	r0, [r7, #24]
        break;
 80040be:	e00f      	b.n	80040e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c0:	4b20      	ldr	r3, [pc, #128]	; (8004144 <UART_SetConfig+0x268>)
 80040c2:	61bb      	str	r3, [r7, #24]
        break;
 80040c4:	e00c      	b.n	80040e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c6:	f7fe fc85 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 80040ca:	61b8      	str	r0, [r7, #24]
        break;
 80040cc:	e008      	b.n	80040e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e004      	b.n	80040e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	77bb      	strb	r3, [r7, #30]
        break;
 80040de:	bf00      	nop
    }

    if (pclk != 0U)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	085a      	lsrs	r2, r3, #1
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d909      	bls.n	8004114 <UART_SetConfig+0x238>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d205      	bcs.n	8004114 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e001      	b.n	8004118 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004124:	7fbb      	ldrb	r3, [r7, #30]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	efff69f3 	.word	0xefff69f3
 8004134:	40013800 	.word	0x40013800
 8004138:	40021000 	.word	0x40021000
 800413c:	40004400 	.word	0x40004400
 8004140:	40004800 	.word	0x40004800
 8004144:	007a1200 	.word	0x007a1200

08004148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01a      	beq.n	800425e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d10a      	bne.n	800425e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b098      	sub	sp, #96	; 0x60
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800429c:	f7fc ff40 	bl	8001120 <HAL_GetTick>
 80042a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d12e      	bne.n	800430e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f88c 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d021      	beq.n	800430e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042de:	653b      	str	r3, [r7, #80]	; 0x50
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e062      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d149      	bne.n	80043b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f856 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03c      	beq.n	80043b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	623b      	str	r3, [r7, #32]
   return(result);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800435a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e6      	bne.n	8004336 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60fb      	str	r3, [r7, #12]
   return(result);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004388:	61fa      	str	r2, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	617b      	str	r3, [r7, #20]
   return(result);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e011      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3758      	adds	r7, #88	; 0x58
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	e049      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d045      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fc fe93 	bl	8001120 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <UART_WaitOnFlagUntilTimeout+0x30>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e048      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d031      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d110      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2208      	movs	r2, #8
 8004432:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f838 	bl	80044aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2208      	movs	r2, #8
 800443e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e029      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445c:	d111      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f81e 	bl	80044aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00f      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d0a6      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b095      	sub	sp, #84	; 0x54
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
 80044d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	2b01      	cmp	r3, #1
 800451e:	d118      	bne.n	8004552 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	60bb      	str	r3, [r7, #8]
   return(result);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	613b      	str	r3, [r7, #16]
   return(result);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e6      	bne.n	8004520 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004566:	bf00      	nop
 8004568:	3754      	adds	r7, #84	; 0x54
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <memset>:
 8004572:	4402      	add	r2, r0
 8004574:	4603      	mov	r3, r0
 8004576:	4293      	cmp	r3, r2
 8004578:	d100      	bne.n	800457c <memset+0xa>
 800457a:	4770      	bx	lr
 800457c:	f803 1b01 	strb.w	r1, [r3], #1
 8004580:	e7f9      	b.n	8004576 <memset+0x4>
	...

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4d0d      	ldr	r5, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1b64      	subs	r4, r4, r5
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2600      	movs	r6, #0
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f000 f818 	bl	80045cc <_init>
 800459c:	1b64      	subs	r4, r4, r5
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2600      	movs	r6, #0
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	0800461c 	.word	0x0800461c
 80045c0:	0800461c 	.word	0x0800461c
 80045c4:	0800461c 	.word	0x0800461c
 80045c8:	08004620 	.word	0x08004620

080045cc <_init>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr

080045d8 <_fini>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr
